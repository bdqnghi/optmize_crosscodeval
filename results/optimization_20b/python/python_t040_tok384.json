{
  "metrics": {
    "pass@1": 0.04,
    "edit_similarity": 0.2723705615912843,
    "exact_match": 0.04,
    "balanced_score": 0.2072760250001787,
    "total_samples": 50,
    "passes": 2,
    "temperature": 0.4,
    "max_tokens": 384
  },
  "results": [
    {
      "index": 0,
      "groundtruth": "sequence_actual[:, -max_stop_string:])[0]",
      "prediction": "old_tail = tokenizer.decode(generator.",
      "es": 0.07317073170731703,
      "em": false,
      "passed": false
    },
    {
      "index": 1,
      "groundtruth": "gen_accept_token(batch_token)",
      "prediction": "We need to fill missing code inside generate_cfg aft",
      "es": 0.15384615384615385,
      "em": false,
      "passed": false
    },
    {
      "index": 2,
      "groundtruth": "settings.token_repetition_penalty_max = 1.176",
      "prediction": "@app.route('/infer_precise', methods=['POST'])",
      "es": 0.08695652173913049,
      "em": false,
      "passed": false
    },
    {
      "index": 3,
      "groundtruth": "decode(prompt_ids)[0]",
      "prediction": "full_prompt = prompt",
      "es": 0.23809523809523814,
      "em": false,
      "passed": false
    },
    {
      "index": 4,
      "groundtruth": "gen_begin_reuse(input_ids)",
      "prediction": "We need to fill the missing code at \"generator",
      "es": 0.15217391304347827,
      "em": false,
      "passed": false
    },
    {
      "index": 5,
      "groundtruth": "encode(prompts, return_mask = True)",
      "prediction": "ids",
      "es": 0.05714285714285716,
      "em": false,
      "passed": false
    },
    {
      "index": 6,
      "groundtruth": "decode(generator.sequence[0])",
      "prediction": "output = tokenizer.",
      "es": 0.1724137931034483,
      "em": false,
      "passed": false
    },
    {
      "index": 7,
      "groundtruth": "calculate_rotary_embedding_base()",
      "prediction": "config.alpha_value = args.alpha",
      "es": 0.1515151515151515,
      "em": false,
      "passed": false
    },
    {
      "index": 8,
      "groundtruth": "generate_simple(prompts, max_new_tokens = 200)",
      "prediction": "for line in prompts:",
      "es": 0.19565217391304346,
      "em": false,
      "passed": false
    },
    {
      "index": 9,
      "groundtruth": "set_auto_map(args.gpu_split)",
      "prediction": "config.compress_pos_emb = args.compress_pos_emb",
      "es": 0.23404255319148937,
      "em": false,
      "passed": false
    },
    {
      "index": 10,
      "groundtruth": "forward(generator.sequence[:, -1:], cache, input_mask = mask)",
      "prediction": "We need to fill missing code: inside generate_cfg, after generator.gen_begin(ids, mask=mask). Then for each s",
      "es": 0.2018348623853211,
      "em": false,
      "passed": false
    },
    {
      "index": 11,
      "groundtruth": "enter(\"b\") == ConfigRoute(\"a.b\")",
      "prediction": ".enter([\"b\", \"c\"]) == ConfigRoute(\"a.b.c\")",
      "es": 0.7619047619047619,
      "em": false,
      "passed": false
    },
    {
      "index": 12,
      "groundtruth": "dispatch(cls) is export_model_async:",
      "prediction": "if export_model_async.dispatch(cls) is export_model_async:",
      "es": 0.6206896551724138,
      "em": false,
      "passed": false
    },
    {
      "index": 13,
      "groundtruth": "compile(to_compile=to_compile)",
      "prediction": "compile.compile(to_compile=to_compile)",
      "es": 0.7894736842105263,
      "em": false,
      "passed": false
    },
    {
      "index": 14,
      "groundtruth": "set_auto_map('17.615,18.8897')",
      "prediction": "config = ExLlamaConfig(model_config_path)",
      "es": 0.09756097560975607,
      "em": false,
      "passed": false
    },
    {
      "index": 15,
      "groundtruth": "sample_current(logits_mixed)",
      "prediction": "def generate_cfg(prompts, alpha, max_new_tokens):",
      "es": 0.20408163265306123,
      "em": false,
      "passed": false
    },
    {
      "index": 16,
      "groundtruth": "sequence[:, -1:], cache, input_mask = mask)",
      "prediction": "We need to fill missing code: inside generate_cfg, after generator.gen_begin,",
      "es": 0.16883116883116878,
      "em": false,
      "passed": false
    },
    {
      "index": 17,
      "groundtruth": "dump(opt, f, indent=\"\\t\")",
      "prediction": "json.dump(opt, f, indent=4)",
      "es": 0.6666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 18,
      "groundtruth": "gen_begin(ids)",
      "prediction": "We need to fill code betw",
      "es": 0.16000000000000003,
      "em": false,
      "passed": false
    },
    {
      "index": 19,
      "groundtruth": "load(f, object_pairs_hook=OrderedDict)  # noqa",
      "prediction": "load(f)",
      "es": 0.15217391304347827,
      "em": false,
      "passed": false
    },
    {
      "index": 20,
      "groundtruth": "update(config.sources[\"default\"])",
      "prediction": "assert config.sources[\"environment\"] == env_options",
      "es": 0.37254901960784315,
      "em": false,
      "passed": false
    },
    {
      "index": 21,
      "groundtruth": "active is False",
      "prediction": "assert os.environ.get(\"_APP",
      "es": 0.14814814814814814,
      "em": false,
      "passed": false
    },
    {
      "index": 22,
      "groundtruth": "options.keys())",
      "prediction": "We need to fill missing cod",
      "es": 0.11111111111111116,
      "em": false,
      "passed": false
    },
    {
      "index": 23,
      "groundtruth": "_logger.getEffectiveLevel() == INFO",
      "prediction": "_logger.getEffectiveLevel() == INFO",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 24,
      "groundtruth": "init_parser(subparser)",
      "prediction": "cmd_class.register(subparser)",
      "es": 0.5517241379310345,
      "em": false,
      "passed": false
    },
    {
      "index": 25,
      "groundtruth": "option(\"active\"):",
      "prediction": "class Client:",
      "es": 0.17647058823529416,
      "em": false,
      "passed": false
    },
    {
      "index": 26,
      "groundtruth": "gen_feed_tokens(in_tokens)",
      "prediction": "# Feed in the user input and \"{bot_name}:\", to",
      "es": 0.17391304347826086,
      "em": false,
      "passed": false
    },
    {
      "index": 27,
      "groundtruth": "gen_prune_to(config.max_seq_len - expect_tokens - extra_prune, tokenizer.newline_token_id)",
      "prediction": "We need to fill in missing code where generator.gen_num_tokens() >= max_tokens: generator.```. The code likely prunes lines from the start of context.",
      "es": 0.2533333333333333,
      "em": false,
      "passed": false
    },
    {
      "index": 28,
      "groundtruth": "gen_num_tokens() >= max_tokens:",
      "prediction": "expect_tokens = in_tokens.shape[-1] + max_response_toke",
      "es": 0.3090909090909091,
      "em": false,
      "passed": false
    },
    {
      "index": 29,
      "groundtruth": "disallow_tokens([tokenizer.newline_token_id, tokenizer.eos_token_id])",
      "prediction": ". It's inside the for loop for i in range(max_response_tokens):",
      "es": 0.18840579710144922,
      "em": false,
      "passed": false
    },
    {
      "index": 30,
      "groundtruth": "decode(generator.sequence_actual[:, -num_res_tokens:][0])",
      "prediction": "We need to fill missing code in the middle: after \"text = tokenizer.\" before the rest. The code likely",
      "es": 0.17647058823529416,
      "em": false,
      "passed": false
    },
    {
      "index": 31,
      "groundtruth": "sequence_actual[:, -num_res_tokens:][0])",
      "prediction": "text = tokenizer.decode(generator.",
      "es": 0.09999999999999998,
      "em": false,
      "passed": false
    },
    {
      "index": 32,
      "groundtruth": "api_populate()",
      "prediction": "import sys",
      "es": 0.2142857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 33,
      "groundtruth": "respond_multi(user_input)), mimetype = 'application/json')",
      "prediction": "with generate_lock:",
      "es": 0.13793103448275867,
      "em": false,
      "passed": false
    },
    {
      "index": 34,
      "groundtruth": "print_options(args)",
      "prediction": "model_init.add_args(parser)",
      "es": 0.2962962962962963,
      "em": false,
      "passed": false
    },
    {
      "index": 35,
      "groundtruth": "get_delivery(data)",
      "prediction": "else:",
      "es": 0.16666666666666663,
      "em": false,
      "passed": false
    },
    {
      "index": 36,
      "groundtruth": "run()",
      "prediction": "We need t",
      "es": 0.11111111111111116,
      "em": false,
      "passed": false
    },
    {
      "index": 37,
      "groundtruth": "load_from_checkpoint(CKPT_PATH)",
      "prediction": "We need to complete code: model = MultimodalTransformer",
      "es": 0.1454545454545455,
      "em": false,
      "passed": false
    },
    {
      "index": 38,
      "groundtruth": "cointerleave(n)",
      "prediction": "@given(n=objects)",
      "es": 0.17647058823529416,
      "em": false,
      "passed": false
    },
    {
      "index": 39,
      "groundtruth": "interleave(n)",
      "prediction": "# interleave and its in",
      "es": 0.4782608695652174,
      "em": false,
      "passed": false
    },
    {
      "index": 40,
      "groundtruth": "build_req()",
      "prediction": "req = RequestBuilde",
      "es": 0.10526315789473684,
      "em": false,
      "passed": false
    },
    {
      "index": 41,
      "groundtruth": "agg_diff_fe_calc(self.detect_data, self.anomaly_duration)",
      "prediction": "We need to fill missing code: inside run method, after docstring, we have agg_list = Utils.```. The co",
      "es": 0.16666666666666663,
      "em": false,
      "passed": false
    },
    {
      "index": 42,
      "groundtruth": "diff_percentile_func(self.detect_data, int(k), is_down)[-1]",
      "prediction": ". So missing method name. The variable v is the feature value for the training data. But we need to comput",
      "es": 0.19811320754716977,
      "em": false,
      "passed": false
    },
    {
      "index": 43,
      "groundtruth": "diff_feature_calc(detect_data, self.default_point)",
      "prediction": "detect_data_diff = Utils().diff(detect_data)",
      "es": 0.21999999999999997,
      "em": false,
      "passed": false
    },
    {
      "index": 44,
      "groundtruth": "turkey_box_plot(detect_data_diff, self.tk_delta)[3]",
      "prediction": "We need to fill missing code: In prev_diff_outlier, after detect_data_diff, they compute do",
      "es": 0.25274725274725274,
      "em": false,
      "passed": false
    },
    {
      "index": 45,
      "groundtruth": "turkey_box_plot([freq[k] for k in search_range])[4]",
      "prediction": ". So we need to fill something like \"Utils.get_up_threshold(freq)\". But we need to be speci",
      "es": 0.1428571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 46,
      "groundtruth": "exceptions.TDMRepNoParam, self.rule.is_allowed, None, None)",
      "prediction": "def test_exceptions(self):",
      "es": 0.13559322033898302,
      "em": false,
      "passed": false
    },
    {
      "index": 47,
      "groundtruth": "get_header_value(headers, self.HEADER_NAME)",
      "prediction": "get_header_value(headers, self.HEADER_NAME)",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 48,
      "groundtruth": "get_header_value_from_response(response, self.HEADER_NAME)",
      "prediction": "header_value = self.get_header_value_from_response(response, self.HEADER_NAME)",
      "es": 0.7435897435897436,
      "em": false,
      "passed": false
    },
    {
      "index": 49,
      "groundtruth": "HEADER_NAME), \"noai\")",
      "prediction": "with urllib.request.urlopen(request,",
      "es": 0.02777777777777779,
      "em": false,
      "passed": false
    }
  ]
}