{
  "metrics": {
    "pass@1": 0.02,
    "edit_similarity": 0.29752022521660637,
    "exact_match": 0.02,
    "balanced_score": 0.1804641765100723,
    "total_samples": 50,
    "passes": 1,
    "temperature": 0.3,
    "max_tokens": 512
  },
  "results": [
    {
      "index": 0,
      "groundtruth": "sequence_actual[:, -max_stop_string:])[0]",
      "prediction": "old_tail = tokenizer.decode(generator.",
      "es": 0.07317073170731703,
      "em": false,
      "passed": false
    },
    {
      "index": 1,
      "groundtruth": "gen_accept_token(batch_token)",
      "prediction": "We need to fill missing code in generator. Let's exa",
      "es": 0.17307692307692313,
      "em": false,
      "passed": false
    },
    {
      "index": 2,
      "groundtruth": "settings.token_repetition_penalty_max = 1.176",
      "prediction": "generator.settings.token_repetition_penalty_max = 1.0",
      "es": 0.7547169811320755,
      "em": false,
      "passed": false
    },
    {
      "index": 3,
      "groundtruth": "decode(prompt_ids)[0]",
      "prediction": "utilized_prompt = tokenizer.decode(pr",
      "es": 0.2432432432432432,
      "em": false,
      "passed": false
    },
    {
      "index": 4,
      "groundtruth": "gen_begin_reuse(input_ids)",
      "prediction": "generator.settings = gen_settings",
      "es": 0.24242424242424243,
      "em": false,
      "passed": false
    },
    {
      "index": 5,
      "groundtruth": "encode(prompts, return_mask = True)",
      "prediction": "def generate_cfg(prompts, alpha, max_new_tokens):",
      "es": 0.34693877551020413,
      "em": false,
      "passed": false
    },
    {
      "index": 6,
      "groundtruth": "decode(generator.sequence[0])",
      "prediction": "We need to fill missing code: after \"output = tokeni",
      "es": 0.15384615384615385,
      "em": false,
      "passed": false
    },
    {
      "index": 7,
      "groundtruth": "calculate_rotary_embedding_base()",
      "prediction": "config.alpha_value = args.alpha",
      "es": 0.1515151515151515,
      "em": false,
      "passed": false
    },
    {
      "index": 8,
      "groundtruth": "generate_simple(prompts, max_new_tokens = 200)",
      "prediction": "output = generator.generate_batch(prompts, max_new_tokens=200)",
      "es": 0.564516129032258,
      "em": false,
      "passed": false
    },
    {
      "index": 9,
      "groundtruth": "set_auto_map(args.gpu_split)",
      "prediction": "We need to fill the missing code between prefix an",
      "es": 0.14,
      "em": false,
      "passed": false
    },
    {
      "index": 10,
      "groundtruth": "forward(generator.sequence[:, -1:], cache, input_mask = mask)",
      "prediction": "We need to fill in the missing code: inside generate_cfg, after generator.gen_begin, sampling loop: for _ in",
      "es": 0.17592592592592593,
      "em": false,
      "passed": false
    },
    {
      "index": 11,
      "groundtruth": "enter(\"b\") == ConfigRoute(\"a.b\")",
      "prediction": "def test_enter():",
      "es": 0.125,
      "em": false,
      "passed": false
    },
    {
      "index": 12,
      "groundtruth": "dispatch(cls) is export_model_async:",
      "prediction": "export_model.register(cls, func)",
      "es": 0.16666666666666663,
      "em": false,
      "passed": false
    },
    {
      "index": 13,
      "groundtruth": "compile(to_compile=to_compile)",
      "prediction": "if args.command == \"compile\":",
      "es": 0.30000000000000004,
      "em": false,
      "passed": false
    },
    {
      "index": 14,
      "groundtruth": "set_auto_map('17.615,18.8897')",
      "prediction": "We need to fill missing code after config = ExLlamaCon",
      "es": 0.09259259259259256,
      "em": false,
      "passed": false
    },
    {
      "index": 15,
      "groundtruth": "sample_current(logits_mixed)",
      "prediction": "We need to fill in the missing code inside the gen",
      "es": 0.14,
      "em": false,
      "passed": false
    },
    {
      "index": 16,
      "groundtruth": "sequence[:, -1:], cache, input_mask = mask)",
      "prediction": ". We need to know what method or attribute to pass to model.forward. In ExLla",
      "es": 0.18181818181818177,
      "em": false,
      "passed": false
    },
    {
      "index": 17,
      "groundtruth": "dump(opt, f, indent=\"\\t\")",
      "prediction": "json.dump(opt, f, indent=4)",
      "es": 0.6666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 18,
      "groundtruth": "gen_begin(ids)",
      "prediction": "print(past, end = \"\")",
      "es": 0.1428571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 19,
      "groundtruth": "load(f, object_pairs_hook=OrderedDict)  # noqa",
      "prediction": "json.load(f)",
      "es": 0.10869565217391308,
      "em": false,
      "passed": false
    },
    {
      "index": 20,
      "groundtruth": "update(config.sources[\"default\"])",
      "prediction": "final_options = Options()",
      "es": 0.18181818181818177,
      "em": false,
      "passed": false
    },
    {
      "index": 21,
      "groundtruth": "active is False",
      "prediction": "assert agent.active is Fals",
      "es": 0.4814814814814815,
      "em": false,
      "passed": false
    },
    {
      "index": 22,
      "groundtruth": "options.keys())",
      "prediction": "assert \"app_path\" in list(c",
      "es": 0.11111111111111116,
      "em": false,
      "passed": false
    },
    {
      "index": 23,
      "groundtruth": "_logger.getEffectiveLevel() == INFO",
      "prediction": "assert client._logger.getEffectiveLevel() == INFO",
      "es": 0.7142857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 24,
      "groundtruth": "init_parser(subparser)",
      "prediction": "cmd_class.register_arguments(subparser)",
      "es": 0.41025641025641024,
      "em": false,
      "passed": false
    },
    {
      "index": 25,
      "groundtruth": "option(\"active\"):",
      "prediction": "option(\"active\"):",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 26,
      "groundtruth": "gen_feed_tokens(in_tokens)",
      "prediction": "generator.gen_feed(in_tokens)",
      "es": 0.5517241379310345,
      "em": false,
      "passed": false
    },
    {
      "index": 27,
      "groundtruth": "gen_prune_to(config.max_seq_len - expect_tokens - extra_prune, tokenizer.newline_token_id)",
      "prediction": "if generator.gen_num_tokens() >= max_tokens:",
      "es": 0.24444444444444446,
      "em": false,
      "passed": false
    },
    {
      "index": 28,
      "groundtruth": "gen_num_tokens() >= max_tokens:",
      "prediction": "expect_tokens = in_tokens.shape[-1] + max_response_toke",
      "es": 0.3090909090909091,
      "em": false,
      "passed": false
    },
    {
      "index": 29,
      "groundtruth": "disallow_tokens([tokenizer.newline_token_id, tokenizer.eos_token_id])",
      "prediction": "generator.disallow_tokens([tokenizer.eos_token_id, tokenizer.newline_token_id])",
      "es": 0.7215189873417722,
      "em": false,
      "passed": false
    },
    {
      "index": 30,
      "groundtruth": "decode(generator.sequence_actual[:, -num_res_tokens:][0])",
      "prediction": "text = tokenizer.decode(generator.gen_output_tokens()[:, num_res_tokens-1:])",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 31,
      "groundtruth": "sequence_actual[:, -num_res_tokens:][0])",
      "prediction": "We need to fill missing code: after `text = tokenizer.decode(generator.`",
      "es": 0.18055555555555558,
      "em": false,
      "passed": false
    },
    {
      "index": 32,
      "groundtruth": "api_populate()",
      "prediction": "import sys",
      "es": 0.2142857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 33,
      "groundtruth": "respond_multi(user_input)), mimetype = 'application/json')",
      "prediction": "@app.route(\"/api/userinput\", methods=['POST'])",
      "es": 0.2931034482758621,
      "em": false,
      "passed": false
    },
    {
      "index": 34,
      "groundtruth": "print_options(args)",
      "prediction": "We need to fill missing code betwe",
      "es": 0.1470588235294118,
      "em": false,
      "passed": false
    },
    {
      "index": 35,
      "groundtruth": "get_delivery(data)",
      "prediction": "if new_message:",
      "es": 0.16666666666666663,
      "em": false,
      "passed": false
    },
    {
      "index": 36,
      "groundtruth": "run()",
      "prediction": "hook = Ho",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 37,
      "groundtruth": "load_from_checkpoint(CKPT_PATH)",
      "prediction": "We need to fill missing code: `model = MultimodalTransf",
      "es": 0.12727272727272732,
      "em": false,
      "passed": false
    },
    {
      "index": 38,
      "groundtruth": "cointerleave(n)",
      "prediction": "@given(n=objects)",
      "es": 0.17647058823529416,
      "em": false,
      "passed": false
    },
    {
      "index": 39,
      "groundtruth": "interleave(n)",
      "prediction": "@given(n=objects)",
      "es": 0.17647058823529416,
      "em": false,
      "passed": false
    },
    {
      "index": 40,
      "groundtruth": "build_req()",
      "prediction": "req = RequestBuilde",
      "es": 0.10526315789473684,
      "em": false,
      "passed": false
    },
    {
      "index": 41,
      "groundtruth": "agg_diff_fe_calc(self.detect_data, self.anomaly_duration)",
      "prediction": "agg_list = Utils.",
      "es": 0.17543859649122806,
      "em": false,
      "passed": false
    },
    {
      "index": 42,
      "groundtruth": "diff_percentile_func(self.detect_data, int(k), is_down)[-1]",
      "prediction": "get_feature_value(self.detect_data, k, is_down)",
      "es": 0.576271186440678,
      "em": false,
      "passed": false
    },
    {
      "index": 43,
      "groundtruth": "diff_feature_calc(detect_data, self.default_point)",
      "prediction": "detect_data_diff = Utils().diff(detect_data)",
      "es": 0.21999999999999997,
      "em": false,
      "passed": false
    },
    {
      "index": 44,
      "groundtruth": "turkey_box_plot(detect_data_diff, self.tk_delta)[3]",
      "prediction": "We need to fill missing code: after \"down_threshold = Utils.\" The code likely calculates th",
      "es": 0.17582417582417587,
      "em": false,
      "passed": false
    },
    {
      "index": 45,
      "groundtruth": "turkey_box_plot([freq[k] for k in search_range])[4]",
      "prediction": "We need to fill missing code: after \"up_threshold = Utils.\" The code likely uses Utils to g",
      "es": 0.1428571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 46,
      "groundtruth": "exceptions.TDMRepNoParam, self.rule.is_allowed, None, None)",
      "prediction": "def test_exceptions(self):",
      "es": 0.13559322033898302,
      "em": false,
      "passed": false
    },
    {
      "index": 47,
      "groundtruth": "get_header_value(headers, self.HEADER_NAME)",
      "prediction": "self.get_header_value(headers, self.HEADER_NAME)",
      "es": 0.8958333333333334,
      "em": false,
      "passed": false
    },
    {
      "index": 48,
      "groundtruth": "get_header_value_from_response(response, self.HEADER_NAME)",
      "prediction": "header_value = self.get_header_value_from_response(response, self.HEADER_NAME)",
      "es": 0.7435897435897436,
      "em": false,
      "passed": false
    },
    {
      "index": 49,
      "groundtruth": "HEADER_NAME), \"noai\")",
      "prediction": "self.assertEqual(self.rule.get_header",
      "es": 0.05405405405405406,
      "em": false,
      "passed": false
    }
  ]
}