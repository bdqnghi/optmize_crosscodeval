{
  "metrics": {
    "pass@1": 0.02,
    "edit_similarity": 0.25196884308103834,
    "exact_match": 0.02,
    "balanced_score": 0.15877304215980184,
    "total_samples": 50,
    "passes": 1,
    "temperature": 0.7,
    "max_tokens": 384
  },
  "results": [
    {
      "index": 0,
      "groundtruth": "sequence_actual[:, -max_stop_string:])[0]",
      "prediction": "old_tail = tokenizer.decode(generator.",
      "es": 0.07317073170731703,
      "em": false,
      "passed": false
    },
    {
      "index": 1,
      "groundtruth": "gen_accept_token(batch_token)",
      "prediction": "def generate_cfg(prompts, alpha, max_new_tokens):",
      "es": 0.30612244897959184,
      "em": false,
      "passed": false
    },
    {
      "index": 2,
      "groundtruth": "settings.token_repetition_penalty_max = 1.176",
      "prediction": "generator.settings.token_repetition_penalty_max = 1.08",
      "es": 0.7592592592592593,
      "em": false,
      "passed": false
    },
    {
      "index": 3,
      "groundtruth": "decode(prompt_ids)[0]",
      "prediction": "full_prompt = prompt",
      "es": 0.23809523809523814,
      "em": false,
      "passed": false
    },
    {
      "index": 4,
      "groundtruth": "gen_begin_reuse(input_ids)",
      "prediction": "We need to fill in the missing code between pr",
      "es": 0.17391304347826086,
      "em": false,
      "passed": false
    },
    {
      "index": 5,
      "groundtruth": "encode(prompts, return_mask = True)",
      "prediction": "ids, mask = tokenizer.",
      "es": 0.19999999999999996,
      "em": false,
      "passed": false
    },
    {
      "index": 6,
      "groundtruth": "decode(generator.sequence[0])",
      "prediction": "We need to fill in missing code: output = tokenizer.",
      "es": 0.11538461538461542,
      "em": false,
      "passed": false
    },
    {
      "index": 7,
      "groundtruth": "calculate_rotary_embedding_base()",
      "prediction": "We need to fill missing code in make_config function, after",
      "es": 0.11864406779661019,
      "em": false,
      "passed": false
    },
    {
      "index": 8,
      "groundtruth": "generate_simple(prompts, max_new_tokens = 200)",
      "prediction": "output = generator.generate_batch(prompts)",
      "es": 0.13043478260869568,
      "em": false,
      "passed": false
    },
    {
      "index": 9,
      "groundtruth": "set_auto_map(args.gpu_split)",
      "prediction": "config.compress_pos_emb = args.compress_pos_emb",
      "es": 0.23404255319148937,
      "em": false,
      "passed": false
    },
    {
      "index": 10,
      "groundtruth": "forward(generator.sequence[:, -1:], cache, input_mask = mask)",
      "prediction": "We need to fill `logits = model.```. It's likely `model.forward(ids)`, but need specifics. The model is ExLla",
      "es": 0.14678899082568808,
      "em": false,
      "passed": false
    },
    {
      "index": 11,
      "groundtruth": "enter(\"b\") == ConfigRoute(\"a.b\")",
      "prediction": "def test_enter():",
      "es": 0.125,
      "em": false,
      "passed": false
    },
    {
      "index": 12,
      "groundtruth": "dispatch(cls) is export_model_async:",
      "prediction": "if func is None:",
      "es": 0.25,
      "em": false,
      "passed": false
    },
    {
      "index": 13,
      "groundtruth": "compile(to_compile=to_compile)",
      "prediction": "if args.command == \"compile\":",
      "es": 0.30000000000000004,
      "em": false,
      "passed": false
    },
    {
      "index": 14,
      "groundtruth": "set_auto_map('17.615,18.8897')",
      "prediction": "config = ExLlamaConfig(model_config_path)",
      "es": 0.09756097560975607,
      "em": false,
      "passed": false
    },
    {
      "index": 15,
      "groundtruth": "sample_current(logits_mixed)",
      "prediction": "We need to fill the missing code between generator",
      "es": 0.12,
      "em": false,
      "passed": false
    },
    {
      "index": 16,
      "groundtruth": "sequence[:, -1:], cache, input_mask = mask)",
      "prediction": "ids, mask = tokenizer.encode(prompts, return_mask = True)",
      "es": 0.2807017543859649,
      "em": false,
      "passed": false
    },
    {
      "index": 17,
      "groundtruth": "dump(opt, f, indent=\"\\t\")",
      "prediction": "with open(opt['output_dir'] + '/option.json',",
      "es": 0.15555555555555556,
      "em": false,
      "passed": false
    },
    {
      "index": 18,
      "groundtruth": "gen_begin(ids)",
      "prediction": "print(past, end = \"\")",
      "es": 0.1428571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 19,
      "groundtruth": "load(f, object_pairs_hook=OrderedDict)  # noqa",
      "prediction": "load(f)",
      "es": 0.15217391304347827,
      "em": false,
      "passed": false
    },
    {
      "index": 20,
      "groundtruth": "update(config.sources[\"default\"])",
      "prediction": "final_options = Options()",
      "es": 0.18181818181818177,
      "em": false,
      "passed": false
    },
    {
      "index": 21,
      "groundtruth": "active is False",
      "prediction": "We need to fill missing cod",
      "es": 0.18518518518518523,
      "em": false,
      "passed": false
    },
    {
      "index": 22,
      "groundtruth": "options.keys())",
      "prediction": "def test_system_source():",
      "es": 0.24,
      "em": false,
      "passed": false
    },
    {
      "index": 23,
      "groundtruth": "_logger.getEffectiveLevel() == INFO",
      "prediction": "assert client._logger.getEffectiveLevel() == INFO",
      "es": 0.7142857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 24,
      "groundtruth": "init_parser(subparser)",
      "prediction": "We need to complete missing code after",
      "es": 0.1842105263157895,
      "em": false,
      "passed": false
    },
    {
      "index": 25,
      "groundtruth": "option(\"active\"):",
      "prediction": "We need to fill missing code a",
      "es": 0.09999999999999998,
      "em": false,
      "passed": false
    },
    {
      "index": 26,
      "groundtruth": "gen_feed_tokens(in_tokens)",
      "prediction": "# Feed in the user input and \"{bot_name}:\", to",
      "es": 0.17391304347826086,
      "em": false,
      "passed": false
    },
    {
      "index": 27,
      "groundtruth": "gen_prune_to(config.max_seq_len - expect_tokens - extra_prune, tokenizer.newline_token_id)",
      "prediction": "if generator.gen_num_tokens() >= max_tokens:",
      "es": 0.24444444444444446,
      "em": false,
      "passed": false
    },
    {
      "index": 28,
      "groundtruth": "gen_num_tokens() >= max_tokens:",
      "prediction": "if generator.",
      "es": 0.16129032258064513,
      "em": false,
      "passed": false
    },
    {
      "index": 29,
      "groundtruth": "disallow_tokens([tokenizer.newline_token_id, tokenizer.eos_token_id])",
      "prediction": "generator.disallow_tokens(tokenizer.eos_token_id)",
      "es": 0.5072463768115942,
      "em": false,
      "passed": false
    },
    {
      "index": 30,
      "groundtruth": "decode(generator.sequence_actual[:, -num_res_tokens:][0])",
      "prediction": "text = tokenizer.",
      "es": 0.1578947368421053,
      "em": false,
      "passed": false
    },
    {
      "index": 31,
      "groundtruth": "sequence_actual[:, -num_res_tokens:][0])",
      "prediction": "We need to fill the missing line: generator.```. After that, later code",
      "es": 0.12676056338028174,
      "em": false,
      "passed": false
    },
    {
      "index": 32,
      "groundtruth": "api_populate()",
      "prediction": "@app.route(\"/api/populate",
      "es": 0.36,
      "em": false,
      "passed": false
    },
    {
      "index": 33,
      "groundtruth": "respond_multi(user_input)), mimetype = 'application/json')",
      "prediction": ". So the method name probably is \"api_userinput\" or \"api_generate\" or \"api_chat\". Let's inspect typical",
      "es": 0.24271844660194175,
      "em": false,
      "passed": false
    },
    {
      "index": 34,
      "groundtruth": "print_options(args)",
      "prediction": "model_init.add_args(parser)",
      "es": 0.2962962962962963,
      "em": false,
      "passed": false
    },
    {
      "index": 35,
      "groundtruth": "get_delivery(data)",
      "prediction": "We need to fill missing code: in",
      "es": 0.15625,
      "em": false,
      "passed": false
    },
    {
      "index": 36,
      "groundtruth": "run()",
      "prediction": "hook.run(",
      "es": 0.33333333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 37,
      "groundtruth": "load_from_checkpoint(CKPT_PATH)",
      "prediction": "We need to fill code for model initialization. They imp",
      "es": 0.1636363636363637,
      "em": false,
      "passed": false
    },
    {
      "index": 38,
      "groundtruth": "cointerleave(n)",
      "prediction": "# interleave and its invers",
      "es": 0.40740740740740744,
      "em": false,
      "passed": false
    },
    {
      "index": 39,
      "groundtruth": "interleave(n)",
      "prediction": "@given(n=objects)",
      "es": 0.17647058823529416,
      "em": false,
      "passed": false
    },
    {
      "index": 40,
      "groundtruth": "build_req()",
      "prediction": ".build()",
      "es": 0.5454545454545454,
      "em": false,
      "passed": false
    },
    {
      "index": 41,
      "groundtruth": "agg_diff_fe_calc(self.detect_data, self.anomaly_duration)",
      "prediction": "We need to fill in the missing code: inside run() method: \"agg_list = Utils.``\" So we need to call a f",
      "es": 0.16666666666666663,
      "em": false,
      "passed": false
    },
    {
      "index": 42,
      "groundtruth": "diff_percentile_func(self.detect_data, int(k), is_down)[-1]",
      "prediction": "We need to fill missing code: inside run method, inside for loop: cur_fe = Utils.??? It likely calculates",
      "es": 0.16190476190476188,
      "em": false,
      "passed": false
    },
    {
      "index": 43,
      "groundtruth": "diff_feature_calc(detect_data, self.default_point)",
      "prediction": "We need to fill missing code: \"detect_data_diff = Utils().``\". We need to call a method of",
      "es": 0.23333333333333328,
      "em": false,
      "passed": false
    },
    {
      "index": 44,
      "groundtruth": "turkey_box_plot(detect_data_diff, self.tk_delta)[3]",
      "prediction": "We need to fill the missing code: in prev_diff_outlier method, after computing detect_data_",
      "es": 0.19780219780219777,
      "em": false,
      "passed": false
    },
    {
      "index": 45,
      "groundtruth": "turkey_box_plot([freq[k] for k in search_range])[4]",
      "prediction": "fft_values = np.fft.fft(envelope)",
      "es": 0.13725490196078427,
      "em": false,
      "passed": false
    },
    {
      "index": 46,
      "groundtruth": "exceptions.TDMRepNoParam, self.rule.is_allowed, None, None)",
      "prediction": "self.assertRaises(dd.",
      "es": 0.15254237288135597,
      "em": false,
      "passed": false
    },
    {
      "index": 47,
      "groundtruth": "get_header_value(headers, self.HEADER_NAME)",
      "prediction": "get_header_value(headers, self.HEADER_NAME)",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 48,
      "groundtruth": "get_header_value_from_response(response, self.HEADER_NAME)",
      "prediction": "header_value = self.get_header_value_from_response(response, self.HEADER_NAME)",
      "es": 0.7435897435897436,
      "em": false,
      "passed": false
    },
    {
      "index": 49,
      "groundtruth": "HEADER_NAME), \"noai\")",
      "prediction": "request = urllib.request.Request(\"htt",
      "es": 0.027027027027026973,
      "em": false,
      "passed": false
    }
  ]
}