{
  "metrics": {
    "pass@1": 0.0,
    "edit_similarity": 0.2305755192555238,
    "exact_match": 0.0,
    "balanced_score": 0.1097978663121542,
    "total_samples": 50,
    "passes": 0,
    "temperature": 0.5,
    "max_tokens": 256
  },
  "results": [
    {
      "index": 0,
      "groundtruth": "sequence_actual[:, -max_stop_string:])[0]",
      "prediction": "old_tail = tokenizer.decode(generator.sequence_actual[:, -(max_stop_strin",
      "es": 0.36986301369863017,
      "em": false,
      "passed": false
    },
    {
      "index": 1,
      "groundtruth": "gen_accept_token(batch_token)",
      "prediction": "We need to fill the missing code: after batch_token",
      "es": 0.2941176470588235,
      "em": false,
      "passed": false
    },
    {
      "index": 2,
      "groundtruth": "settings.token_repetition_penalty_max = 1.176",
      "prediction": "generator.settings.token_repetition_penalty_max = 1.1",
      "es": 0.7735849056603774,
      "em": false,
      "passed": false
    },
    {
      "index": 3,
      "groundtruth": "decode(prompt_ids)[0]",
      "prediction": "full_prompt = prompt",
      "es": 0.23809523809523814,
      "em": false,
      "passed": false
    },
    {
      "index": 4,
      "groundtruth": "gen_begin_reuse(input_ids)",
      "prediction": "generator.settings = gen_settings",
      "es": 0.24242424242424243,
      "em": false,
      "passed": false
    },
    {
      "index": 5,
      "groundtruth": "encode(prompts, return_mask = True)",
      "prediction": "def generate_cfg(prompts, alpha, max_new_tokens):",
      "es": 0.34693877551020413,
      "em": false,
      "passed": false
    },
    {
      "index": 6,
      "groundtruth": "decode(generator.sequence[0])",
      "prediction": "We need to fill in missing code after `output = toke",
      "es": 0.15384615384615385,
      "em": false,
      "passed": false
    },
    {
      "index": 7,
      "groundtruth": "calculate_rotary_embedding_base()",
      "prediction": "config.alpha_value = args.alpha",
      "es": 0.1515151515151515,
      "em": false,
      "passed": false
    },
    {
      "index": 8,
      "groundtruth": "generate_simple(prompts, max_new_tokens = 200)",
      "prediction": "We need to fill missing code: after generating prompts, we need to call generator.",
      "es": 0.24390243902439024,
      "em": false,
      "passed": false
    },
    {
      "index": 9,
      "groundtruth": "set_auto_map(args.gpu_split)",
      "prediction": "def make_config(args):",
      "es": 0.1785714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 10,
      "groundtruth": "forward(generator.sequence[:, -1:], cache, input_mask = mask)",
      "prediction": "We need to fill missing code: inside generate_cfg function, after generator.gen_begin(ids, mask=mask). Then f",
      "es": 0.24770642201834858,
      "em": false,
      "passed": false
    },
    {
      "index": 11,
      "groundtruth": "enter(\"b\") == ConfigRoute(\"a.b\")",
      "prediction": "We need to write code for ConfigRoute.parse, decompose, c",
      "es": 0.3157894736842105,
      "em": false,
      "passed": false
    },
    {
      "index": 12,
      "groundtruth": "dispatch(cls) is export_model_async:",
      "prediction": "export_model.register(cls, func)",
      "es": 0.16666666666666663,
      "em": false,
      "passed": false
    },
    {
      "index": 13,
      "groundtruth": "compile(to_compile=to_compile)",
      "prediction": "if args.command == \"compile\":",
      "es": 0.30000000000000004,
      "em": false,
      "passed": false
    },
    {
      "index": 14,
      "groundtruth": "set_auto_map('17.615,18.8897')",
      "prediction": "We need to fill config initialization. The code shows",
      "es": 0.09433962264150941,
      "em": false,
      "passed": false
    },
    {
      "index": 15,
      "groundtruth": "sample_current(logits_mixed)",
      "prediction": "sampled_token, _ = generator.",
      "es": 0.27586206896551724,
      "em": false,
      "passed": false
    },
    {
      "index": 16,
      "groundtruth": "sequence[:, -1:], cache, input_mask = mask)",
      "prediction": ". So likely generator.gen_input_ids or generator.get_input_ids. Let's search",
      "es": 0.22368421052631582,
      "em": false,
      "passed": false
    },
    {
      "index": 17,
      "groundtruth": "dump(opt, f, indent=\"\\t\")",
      "prediction": "json.dump(opt, f,",
      "es": 0.28,
      "em": false,
      "passed": false
    },
    {
      "index": 18,
      "groundtruth": "gen_begin(ids)",
      "prediction": "print(past, end = \"\")",
      "es": 0.1428571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 19,
      "groundtruth": "load(f, object_pairs_hook=OrderedDict)  # noqa",
      "prediction": "load(f)",
      "es": 0.15217391304347827,
      "em": false,
      "passed": false
    },
    {
      "index": 20,
      "groundtruth": "update(config.sources[\"default\"])",
      "prediction": "final_options = Options()",
      "es": 0.18181818181818177,
      "em": false,
      "passed": false
    },
    {
      "index": 21,
      "groundtruth": "active is False",
      "prediction": "assert client._config.optio",
      "es": 0.14814814814814814,
      "em": false,
      "passed": false
    },
    {
      "index": 22,
      "groundtruth": "options.keys())",
      "prediction": "assert \"app_path\" in list(c",
      "es": 0.11111111111111116,
      "em": false,
      "passed": false
    },
    {
      "index": 23,
      "groundtruth": "_logger.getEffectiveLevel() == INFO",
      "prediction": "def test_logger_default_level():",
      "es": 0.22857142857142854,
      "em": false,
      "passed": false
    },
    {
      "index": 24,
      "groundtruth": "init_parser(subparser)",
      "prediction": "We need to fill in missing code. The co",
      "es": 0.10256410256410253,
      "em": false,
      "passed": false
    },
    {
      "index": 25,
      "groundtruth": "option(\"active\"):",
      "prediction": "def __init__(self, **options:",
      "es": 0.13793103448275867,
      "em": false,
      "passed": false
    },
    {
      "index": 26,
      "groundtruth": "gen_feed_tokens(in_tokens)",
      "prediction": "We need to fill in the missing code where gene",
      "es": 0.23913043478260865,
      "em": false,
      "passed": false
    },
    {
      "index": 27,
      "groundtruth": "gen_prune_to(config.max_seq_len - expect_tokens - extra_prune, tokenizer.newline_token_id)",
      "prediction": ". We need to prune context. Let's examine context: earlier code used generator.gen_num_tokens() to get number of tokens in generator. They want to pru",
      "es": 0.2666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 28,
      "groundtruth": "gen_num_tokens() >= max_tokens:",
      "prediction": "expect_tokens = in_tokens.shape[-1] + max_response_toke",
      "es": 0.3090909090909091,
      "em": false,
      "passed": false
    },
    {
      "index": 29,
      "groundtruth": "disallow_tokens([tokenizer.newline_token_id, tokenizer.eos_token_id])",
      "prediction": "if i < min_response_tokens:",
      "es": 0.21739130434782605,
      "em": false,
      "passed": false
    },
    {
      "index": 30,
      "groundtruth": "decode(generator.sequence_actual[:, -num_res_tokens:][0])",
      "prediction": "ids = tokenizer.encode(past)",
      "es": 0.19298245614035092,
      "em": false,
      "passed": false
    },
    {
      "index": 31,
      "groundtruth": "sequence_actual[:, -num_res_tokens:][0])",
      "prediction": "text = tokenizer.decode(generator.",
      "es": 0.09999999999999998,
      "em": false,
      "passed": false
    },
    {
      "index": 32,
      "groundtruth": "api_populate()",
      "prediction": "@app.route(\"/api/populate",
      "es": 0.36,
      "em": false,
      "passed": false
    },
    {
      "index": 33,
      "groundtruth": "respond_multi(user_input)), mimetype = 'application/json')",
      "prediction": "@app.route(\"/api/userinput\", methods=['POST'])",
      "es": 0.2931034482758621,
      "em": false,
      "passed": false
    },
    {
      "index": 34,
      "groundtruth": "print_options(args)",
      "prediction": "We need to fill missing code betwe",
      "es": 0.1470588235294118,
      "em": false,
      "passed": false
    },
    {
      "index": 35,
      "groundtruth": "get_delivery(data)",
      "prediction": "We need to fill missing code. Th",
      "es": 0.15625,
      "em": false,
      "passed": false
    },
    {
      "index": 36,
      "groundtruth": "run()",
      "prediction": "We need t",
      "es": 0.11111111111111116,
      "em": false,
      "passed": false
    },
    {
      "index": 37,
      "groundtruth": "load_from_checkpoint(CKPT_PATH)",
      "prediction": "model = MultimodalTransformer.",
      "es": 0.06451612903225812,
      "em": false,
      "passed": false
    },
    {
      "index": 38,
      "groundtruth": "cointerleave(n)",
      "prediction": "@given(n=objects)",
      "es": 0.17647058823529416,
      "em": false,
      "passed": false
    },
    {
      "index": 39,
      "groundtruth": "interleave(n)",
      "prediction": "# interleave and its in",
      "es": 0.4782608695652174,
      "em": false,
      "passed": false
    },
    {
      "index": 40,
      "groundtruth": "build_req()",
      "prediction": "# Builds a request",
      "es": 0.38888888888888884,
      "em": false,
      "passed": false
    },
    {
      "index": 41,
      "groundtruth": "agg_diff_fe_calc(self.detect_data, self.anomaly_duration)",
      "prediction": "We need to fill in the missing code: Utils.??. The code before cursor: agg_list = Utils.```. So we nee",
      "es": 0.16666666666666663,
      "em": false,
      "passed": false
    },
    {
      "index": 42,
      "groundtruth": "diff_percentile_func(self.detect_data, int(k), is_down)[-1]",
      "prediction": "cur_fe = Utils.",
      "es": 0.11864406779661019,
      "em": false,
      "passed": false
    },
    {
      "index": 43,
      "groundtruth": "diff_feature_calc(detect_data, self.default_point)",
      "prediction": "We need to fill missing code: in prev_diff_outlier, after detect_data_diff = Utils(). ...",
      "es": 0.2134831460674157,
      "em": false,
      "passed": false
    },
    {
      "index": 44,
      "groundtruth": "turkey_box_plot(detect_data_diff, self.tk_delta)[3]",
      "prediction": "We need to fill missing code: In prev_diff_outlier, after detect_data_diff = Utils().diff_f",
      "es": 0.23076923076923073,
      "em": false,
      "passed": false
    },
    {
      "index": 45,
      "groundtruth": "turkey_box_plot([freq[k] for k in search_range])[4]",
      "prediction": "We need to fill missing code: `up_threshold = Utils.`. We need to see what Utils provides.",
      "es": 0.1444444444444445,
      "em": false,
      "passed": false
    },
    {
      "index": 46,
      "groundtruth": "exceptions.TDMRepNoParam, self.rule.is_allowed, None, None)",
      "prediction": "self.assertRaises(dd.",
      "es": 0.15254237288135597,
      "em": false,
      "passed": false
    },
    {
      "index": 47,
      "groundtruth": "get_header_value(headers, self.HEADER_NAME)",
      "prediction": "header_value = self.get_header_value(headers, self.HEADER_NAME)",
      "es": 0.6825396825396826,
      "em": false,
      "passed": false
    },
    {
      "index": 48,
      "groundtruth": "get_header_value_from_response(response, self.HEADER_NAME)",
      "prediction": "elif response:",
      "es": 0.18965517241379315,
      "em": false,
      "passed": false
    },
    {
      "index": 49,
      "groundtruth": "HEADER_NAME), \"noai\")",
      "prediction": "request = urllib.request.Request(\"htt",
      "es": 0.027027027027026973,
      "em": false,
      "passed": false
    }
  ]
}