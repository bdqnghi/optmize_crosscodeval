{
  "metrics": {
    "pass@1": 0.02,
    "edit_similarity": 0.234215906592585,
    "exact_match": 0.02,
    "balanced_score": 0.15031926287958594,
    "total_samples": 50,
    "passes": 1,
    "temperature": 0.6,
    "max_tokens": 384
  },
  "results": [
    {
      "index": 0,
      "groundtruth": "sequence_actual[:, -max_stop_string:])[0]",
      "prediction": "old_tail = tokenizer.decode(generator.",
      "es": 0.07317073170731703,
      "em": false,
      "passed": false
    },
    {
      "index": 1,
      "groundtruth": "gen_accept_token(batch_token)",
      "prediction": "batch_token = sampled_token.repeat(2, 1)",
      "es": 0.275,
      "em": false,
      "passed": false
    },
    {
      "index": 2,
      "groundtruth": "settings.token_repetition_penalty_max = 1.176",
      "prediction": "generator.settings.token_repetition_penalty_max = 1.0",
      "es": 0.7547169811320755,
      "em": false,
      "passed": false
    },
    {
      "index": 3,
      "groundtruth": "decode(prompt_ids)[0]",
      "prediction": "full_prompt = prompt",
      "es": 0.23809523809523814,
      "em": false,
      "passed": false
    },
    {
      "index": 4,
      "groundtruth": "gen_begin_reuse(input_ids)",
      "prediction": "generator.settings = gen_settings",
      "es": 0.24242424242424243,
      "em": false,
      "passed": false
    },
    {
      "index": 5,
      "groundtruth": "encode(prompts, return_mask = True)",
      "prediction": "def generate_cfg(prompts, alpha, max_new_tokens):",
      "es": 0.34693877551020413,
      "em": false,
      "passed": false
    },
    {
      "index": 6,
      "groundtruth": "decode(generator.sequence[0])",
      "prediction": "We need to complete the missing code in the line: `o",
      "es": 0.15384615384615385,
      "em": false,
      "passed": false
    },
    {
      "index": 7,
      "groundtruth": "calculate_rotary_embedding_base()",
      "prediction": "config.alpha_value = args.alpha",
      "es": 0.1515151515151515,
      "em": false,
      "passed": false
    },
    {
      "index": 8,
      "groundtruth": "generate_simple(prompts, max_new_tokens = 200)",
      "prediction": "We need to fill missing code: generator.?? Probably call generator.generate() or s",
      "es": 0.2195121951219512,
      "em": false,
      "passed": false
    },
    {
      "index": 9,
      "groundtruth": "set_auto_map(args.gpu_split)",
      "prediction": "We need to fill missing code in make_config: after",
      "es": 0.16000000000000003,
      "em": false,
      "passed": false
    },
    {
      "index": 10,
      "groundtruth": "forward(generator.sequence[:, -1:], cache, input_mask = mask)",
      "prediction": "We need to fill missing code: `logits = model.```. We need to call a method on model to get logits for curren",
      "es": 0.15596330275229353,
      "em": false,
      "passed": false
    },
    {
      "index": 11,
      "groundtruth": "enter(\"b\") == ConfigRoute(\"a.b\")",
      "prediction": "def test_enter():",
      "es": 0.125,
      "em": false,
      "passed": false
    },
    {
      "index": 12,
      "groundtruth": "dispatch(cls) is export_model_async:",
      "prediction": "if func is None:",
      "es": 0.25,
      "em": false,
      "passed": false
    },
    {
      "index": 13,
      "groundtruth": "compile(to_compile=to_compile)",
      "prediction": "import argparse",
      "es": 0.16666666666666663,
      "em": false,
      "passed": false
    },
    {
      "index": 14,
      "groundtruth": "set_auto_map('17.615,18.8897')",
      "prediction": "config = ExLlamaConfig(model_config_path)",
      "es": 0.09756097560975607,
      "em": false,
      "passed": false
    },
    {
      "index": 15,
      "groundtruth": "sample_current(logits_mixed)",
      "prediction": "sample(logits_mixed)",
      "es": 0.7142857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 16,
      "groundtruth": "sequence[:, -1:], cache, input_mask = mask)",
      "prediction": "We need to fill that. Let's inspect context: generator has a current state, m",
      "es": 0.19480519480519476,
      "em": false,
      "passed": false
    },
    {
      "index": 17,
      "groundtruth": "dump(opt, f, indent=\"\\t\")",
      "prediction": "json.dump(opt, f, indent=4, ensure_ascii=Fals",
      "es": 0.4444444444444444,
      "em": false,
      "passed": false
    },
    {
      "index": 18,
      "groundtruth": "gen_begin(ids)",
      "prediction": "print(past, end = \"\")",
      "es": 0.1428571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 19,
      "groundtruth": "load(f, object_pairs_hook=OrderedDict)  # noqa",
      "prediction": "load(f)",
      "es": 0.15217391304347827,
      "em": false,
      "passed": false
    },
    {
      "index": 20,
      "groundtruth": "update(config.sources[\"default\"])",
      "prediction": "final_options = Options()",
      "es": 0.18181818181818177,
      "em": false,
      "passed": false
    },
    {
      "index": 21,
      "groundtruth": "active is False",
      "prediction": "assert os.environ.get(\"_APP",
      "es": 0.14814814814814814,
      "em": false,
      "passed": false
    },
    {
      "index": 22,
      "groundtruth": "options.keys())",
      "prediction": "assert \"app_path\" in list(c",
      "es": 0.11111111111111116,
      "em": false,
      "passed": false
    },
    {
      "index": 23,
      "groundtruth": "_logger.getEffectiveLevel() == INFO",
      "prediction": "def test_logger_default_level():",
      "es": 0.22857142857142854,
      "em": false,
      "passed": false
    },
    {
      "index": 24,
      "groundtruth": "init_parser(subparser)",
      "prediction": "for name, cmd_class in COMMANDS.items()",
      "es": 0.15384615384615385,
      "em": false,
      "passed": false
    },
    {
      "index": 25,
      "groundtruth": "option(\"active\"):",
      "prediction": "class Client:",
      "es": 0.17647058823529416,
      "em": false,
      "passed": false
    },
    {
      "index": 26,
      "groundtruth": "gen_feed_tokens(in_tokens)",
      "prediction": "generator.",
      "es": 0.23076923076923073,
      "em": false,
      "passed": false
    },
    {
      "index": 27,
      "groundtruth": "gen_prune_to(config.max_seq_len - expect_tokens - extra_prune, tokenizer.newline_token_id)",
      "prediction": "expect_tokens = in_tokens.shape[-1] + max_response_tokens",
      "es": 0.3111111111111111,
      "em": false,
      "passed": false
    },
    {
      "index": 28,
      "groundtruth": "gen_num_tokens() >= max_tokens:",
      "prediction": "if max_tokens < 0:",
      "es": 0.32258064516129037,
      "em": false,
      "passed": false
    },
    {
      "index": 29,
      "groundtruth": "disallow_tokens([tokenizer.newline_token_id, tokenizer.eos_token_id])",
      "prediction": "for i in range(max_response_tokens):",
      "es": 0.21739130434782605,
      "em": false,
      "passed": false
    },
    {
      "index": 30,
      "groundtruth": "decode(generator.sequence_actual[:, -num_res_tokens:][0])",
      "prediction": "# Decode the current line and print any characters added",
      "es": 0.21052631578947367,
      "em": false,
      "passed": false
    },
    {
      "index": 31,
      "groundtruth": "sequence_actual[:, -num_res_tokens:][0])",
      "prediction": "We need to fill in missing code: `text = tokenizer.decode(generator.`. T",
      "es": 0.1527777777777778,
      "em": false,
      "passed": false
    },
    {
      "index": 32,
      "groundtruth": "api_populate()",
      "prediction": "@app.route(\"/api/populate",
      "es": 0.36,
      "em": false,
      "passed": false
    },
    {
      "index": 33,
      "groundtruth": "respond_multi(user_input)), mimetype = 'application/json')",
      "prediction": "We need to fill missing code in api_userinput route. Let's inspect context:",
      "es": 0.19999999999999996,
      "em": false,
      "passed": false
    },
    {
      "index": 34,
      "groundtruth": "print_options(args)",
      "prediction": "We need to fill missing code betwe",
      "es": 0.1470588235294118,
      "em": false,
      "passed": false
    },
    {
      "index": 35,
      "groundtruth": "get_delivery(data)",
      "prediction": "We need to fill in missing code:",
      "es": 0.125,
      "em": false,
      "passed": false
    },
    {
      "index": 36,
      "groundtruth": "run()",
      "prediction": "hook = Ho",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 37,
      "groundtruth": "load_from_checkpoint(CKPT_PATH)",
      "prediction": "We need to complete missing code: after model = Multimo",
      "es": 0.12727272727272732,
      "em": false,
      "passed": false
    },
    {
      "index": 38,
      "groundtruth": "cointerleave(n)",
      "prediction": "@given(n=objects)",
      "es": 0.17647058823529416,
      "em": false,
      "passed": false
    },
    {
      "index": 39,
      "groundtruth": "interleave(n)",
      "prediction": "a = FiniteFunction.inte",
      "es": 0.21739130434782605,
      "em": false,
      "passed": false
    },
    {
      "index": 40,
      "groundtruth": "build_req()",
      "prediction": "\"\"\"",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 41,
      "groundtruth": "agg_diff_fe_calc(self.detect_data, self.anomaly_duration)",
      "prediction": "We need to fill in Utils. something. Let's inspect context: SimilarityFilter.run: compute agg_list = U",
      "es": 0.196078431372549,
      "em": false,
      "passed": false
    },
    {
      "index": 42,
      "groundtruth": "diff_percentile_func(self.detect_data, int(k), is_down)[-1]",
      "prediction": ". We need to compute current feature for key k? Let's look at Features class. We don't have code, but like",
      "es": 0.18867924528301883,
      "em": false,
      "passed": false
    },
    {
      "index": 43,
      "groundtruth": "diff_feature_calc(detect_data, self.default_point)",
      "prediction": ". We need to call some method to compute difference. We need to look at common.utils Utils",
      "es": 0.18888888888888888,
      "em": false,
      "passed": false
    },
    {
      "index": 44,
      "groundtruth": "turkey_box_plot(detect_data_diff, self.tk_delta)[3]",
      "prediction": "We need to fill in missing code: after comment: \"down_threshold = Utils.\" In original code,",
      "es": 0.1648351648351648,
      "em": false,
      "passed": false
    },
    {
      "index": 45,
      "groundtruth": "turkey_box_plot([freq[k] for k in search_range])[4]",
      "prediction": ". The code is cut. We need to infer what Utils provides. Let's examine context: pp_detect f",
      "es": 0.1648351648351648,
      "em": false,
      "passed": false
    },
    {
      "index": 46,
      "groundtruth": "exceptions.TDMRepNoParam, self.rule.is_allowed, None, None)",
      "prediction": "self.assertRaises(dd.``",
      "es": 0.15254237288135597,
      "em": false,
      "passed": false
    },
    {
      "index": 47,
      "groundtruth": "get_header_value(headers, self.HEADER_NAME)",
      "prediction": "get_header_value(headers, self.HEADER_NAME)",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 48,
      "groundtruth": "get_header_value_from_response(response, self.HEADER_NAME)",
      "prediction": "header_value = self.get_header_value_from_response(response, self.HEADER_NAME)",
      "es": 0.7435897435897436,
      "em": false,
      "passed": false
    },
    {
      "index": 49,
      "groundtruth": "HEADER_NAME), \"noai\")",
      "prediction": "self.assertEqual(self.rule.get_header",
      "es": 0.05405405405405406,
      "em": false,
      "passed": false
    }
  ]
}