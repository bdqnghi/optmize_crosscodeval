{
  "metrics": {
    "pass@1": 0.26,
    "edit_similarity": 0.6358477148517845,
    "exact_match": 0.26,
    "balanced_score": 0.8070270503623216,
    "total_samples": 50,
    "passes": 13,
    "temperature": 0.15,
    "max_tokens": 56
  },
  "results": [
    {
      "index": 0,
      "groundtruth": "sequence_actual[:, -max_stop_string:])[0]",
      "prediction": "sequence_actual[:, -max_stop_string:])[0]",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1,
      "groundtruth": "gen_accept_token(batch_token)",
      "prediction": "gen_next(batch_token)",
      "es": 0.6551724137931034,
      "em": false,
      "passed": false
    },
    {
      "index": 2,
      "groundtruth": "settings.token_repetition_penalty_max = 1.176",
      "prediction": "settings.token_repetition_penalty_max = 1.15",
      "es": 0.9555555555555556,
      "em": false,
      "passed": false
    },
    {
      "index": 3,
      "groundtruth": "decode(prompt_ids)[0]",
      "prediction": "decode(prompt_ids)",
      "es": 0.8571428571428572,
      "em": false,
      "passed": false
    },
    {
      "index": 4,
      "groundtruth": "gen_begin_reuse(input_ids)",
      "prediction": "begin(prompt_ids, generator.settings)",
      "es": 0.21621621621621623,
      "em": false,
      "passed": false
    },
    {
      "index": 5,
      "groundtruth": "encode(prompts, return_mask = True)",
      "prediction": "encode(prompts[0], add_bos = True, add_eos = False)",
      "es": 0.47058823529411764,
      "em": false,
      "passed": false
    },
    {
      "index": 6,
      "groundtruth": "decode(generator.sequence[0])",
      "prediction": "decode(generator.sequence[:, len(ids):])",
      "es": 0.7,
      "em": false,
      "passed": false
    },
    {
      "index": 7,
      "groundtruth": "calculate_rotary_embedding_base()",
      "prediction": "theta = args.theta",
      "es": 0.1515151515151515,
      "em": false,
      "passed": false
    },
    {
      "index": 8,
      "groundtruth": "generate_simple(prompts, max_new_tokens = 200)",
      "prediction": "generate(line, max_gen_len = 100)",
      "es": 0.5652173913043479,
      "em": false,
      "passed": false
    },
    {
      "index": 9,
      "groundtruth": "set_auto_map(args.gpu_split)",
      "prediction": "gpu_split = args.gpu_split",
      "es": 0.5357142857142857,
      "em": false,
      "passed": false
    },
    {
      "index": 10,
      "groundtruth": "forward(generator.sequence[:, -1:], cache, input_mask = mask)",
      "prediction": "forward(ids, cache)",
      "es": 0.2786885245901639,
      "em": false,
      "passed": false
    },
    {
      "index": 11,
      "groundtruth": "enter(\"b\") == ConfigRoute(\"a.b\")",
      "prediction": "enter(\"b\") == ConfigRoute(\"a.b\")",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 12,
      "groundtruth": "dispatch(cls) is export_model_async:",
      "prediction": "dispatch(cls) is export_model_async:",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 13,
      "groundtruth": "compile(to_compile=to_compile)",
      "prediction": "compile(to_compile=to_compile)",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 14,
      "groundtruth": "set_auto_map('17.615,18.8897')",
      "prediction": "load_model_path = model_path                   # suppl",
      "es": 0.11111111111111116,
      "em": false,
      "passed": false
    },
    {
      "index": 15,
      "groundtruth": "sample_current(logits_mixed)",
      "prediction": "sample(logits_mixed, temperature = 0.95, top_k = 4",
      "es": 0.21999999999999997,
      "em": false,
      "passed": false
    },
    {
      "index": 16,
      "groundtruth": "sequence[:, -1:], cache, input_mask = mask)",
      "prediction": "sequence, cache = cache)",
      "es": 0.4418604651162791,
      "em": false,
      "passed": false
    },
    {
      "index": 17,
      "groundtruth": "dump(opt, f, indent=\"\\t\")",
      "prediction": "dumps(opt, f, ensure_ascii=False, indent=4)",
      "es": 0.41860465116279066,
      "em": false,
      "passed": false
    },
    {
      "index": 18,
      "groundtruth": "gen_begin(ids)",
      "prediction": "gen_feed_tokens(ids)",
      "es": 0.55,
      "em": false,
      "passed": false
    },
    {
      "index": 19,
      "groundtruth": "load(f, object_pairs_hook=OrderedDict)  # noqa",
      "prediction": "load(f, object_hook=OrderedDict)",
      "es": 0.6956521739130435,
      "em": false,
      "passed": false
    },
    {
      "index": 20,
      "groundtruth": "update(config.sources[\"default\"])",
      "prediction": "update(config.sources[\"default\"])",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 21,
      "groundtruth": "active is False",
      "prediction": "active is False",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 22,
      "groundtruth": "options.keys())",
      "prediction": "sources[\"system\"].keys())",
      "es": 0.4,
      "em": false,
      "passed": false
    },
    {
      "index": 23,
      "groundtruth": "_logger.getEffectiveLevel() == INFO",
      "prediction": "_logger.getEffectiveLevel() == INFO",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 24,
      "groundtruth": "init_parser(subparser)",
      "prediction": "add_arguments(subparser)",
      "es": 0.5416666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 25,
      "groundtruth": "option(\"active\"):",
      "prediction": "option(\"active\"):",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 26,
      "groundtruth": "gen_feed_tokens(in_tokens)",
      "prediction": "gen_feed(in_tokens)",
      "es": 0.7307692307692308,
      "em": false,
      "passed": false
    },
    {
      "index": 27,
      "groundtruth": "gen_prune_to(config.max_seq_len - expect_tokens - extra_prune, tokenizer.newline_token_id)",
      "prediction": "gen_rewind(extra_prune)",
      "es": 0.2222222222222222,
      "em": false,
      "passed": false
    },
    {
      "index": 28,
      "groundtruth": "gen_num_tokens() >= max_tokens:",
      "prediction": "gen_num_tokens() > max_tokens:",
      "es": 0.967741935483871,
      "em": false,
      "passed": false
    },
    {
      "index": 29,
      "groundtruth": "disallow_tokens([tokenizer.newline_token_id, tokenizer.eos_token_id])",
      "prediction": "disallow_tokens(tokenizer.end_of_text_token_ids)",
      "es": 0.6231884057971014,
      "em": false,
      "passed": false
    },
    {
      "index": 30,
      "groundtruth": "decode(generator.sequence_actual[:, -num_res_tokens:][0])",
      "prediction": "decode(gen_token, generator.gen_num_tokens() - num_res_tokens, generator.gen_num_tokens() - num_res_to",
      "es": 0.3431372549019608,
      "em": false,
      "passed": false
    },
    {
      "index": 31,
      "groundtruth": "sequence_actual[:, -num_res_tokens:][0])",
      "prediction": "decode(gen_token))",
      "es": 0.25,
      "em": false,
      "passed": false
    },
    {
      "index": 32,
      "groundtruth": "api_populate()",
      "prediction": "api_get_sessions()",
      "es": 0.33333333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 33,
      "groundtruth": "respond_multi(user_input)), mimetype = 'application/json')",
      "prediction": "generate(user_input)), mimetype='text/event-stream')",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 34,
      "groundtruth": "print_options(args)",
      "prediction": "set_model_files(args)",
      "es": 0.4285714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 35,
      "groundtruth": "get_delivery(data)",
      "prediction": "delivery(data)",
      "es": 0.7777777777777778,
      "em": false,
      "passed": false
    },
    {
      "index": 36,
      "groundtruth": "run()",
      "prediction": "run()",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 37,
      "groundtruth": "load_from_checkpoint(CKPT_PATH)",
      "prediction": "load_from_checkpoint(",
      "es": 0.6774193548387097,
      "em": false,
      "passed": false
    },
    {
      "index": 38,
      "groundtruth": "cointerleave(n)",
      "prediction": "interleave(n)",
      "es": 0.8666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 39,
      "groundtruth": "interleave(n)",
      "prediction": "interleave(n)",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 40,
      "groundtruth": "build_req()",
      "prediction": "build()",
      "es": 0.6363636363636364,
      "em": false,
      "passed": false
    },
    {
      "index": 41,
      "groundtruth": "agg_diff_fe_calc(self.detect_data, self.anomaly_duration)",
      "prediction": "aggregate(self.detect_data, self.anomaly_duration)",
      "es": 0.8070175438596492,
      "em": false,
      "passed": false
    },
    {
      "index": 42,
      "groundtruth": "diff_percentile_func(self.detect_data, int(k), is_down)[-1]",
      "prediction": "smoothness(v)",
      "es": 0.0847457627118644,
      "em": false,
      "passed": false
    },
    {
      "index": 43,
      "groundtruth": "diff_feature_calc(detect_data, self.default_point)",
      "prediction": "diff(detect_data)",
      "es": 0.33999999999999997,
      "em": false,
      "passed": false
    },
    {
      "index": 44,
      "groundtruth": "turkey_box_plot(detect_data_diff, self.tk_delta)[3]",
      "prediction": "get_down_threshold(detect_data_diff, self.tk_delta)",
      "es": 0.6470588235294117,
      "em": false,
      "passed": false
    },
    {
      "index": 45,
      "groundtruth": "turkey_box_plot([freq[k] for k in search_range])[4]",
      "prediction": "get_up_threshold(freq)        if up_threshold is None:",
      "es": 0.2222222222222222,
      "em": false,
      "passed": false
    },
    {
      "index": 46,
      "groundtruth": "exceptions.TDMRepNoParam, self.rule.is_allowed, None, None)",
      "prediction": "exception.HttpUnknownHeaderName, self.rule.get_header_value, None, None)",
      "es": 0.5694444444444444,
      "em": false,
      "passed": false
    },
    {
      "index": 47,
      "groundtruth": "get_header_value(headers, self.HEADER_NAME)",
      "prediction": "get_header_value(headers, self.HEADER_NAME)",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 48,
      "groundtruth": "get_header_value_from_response(response, self.HEADER_NAME)",
      "prediction": "get_header_value_from_response(response, self.HEADER_NAME)",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 49,
      "groundtruth": "HEADER_NAME), \"noai\")",
      "prediction": "HEADER_NAME), \"noai\")",
      "es": 1.0,
      "em": true,
      "passed": true
    }
  ]
}