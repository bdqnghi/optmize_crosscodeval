{
  "metrics": {
    "accuracy": 0.2505843852267415,
    "edit_similarity": 0.6700286564117571,
    "exact_match": 0.2505843852267415,
    "total_samples": 2139,
    "passes": 536,
    "temperature": 0.2,
    "max_tokens": 48,
    "language": "java",
    "dataset": "crosscode_java",
    "post_process": false,
    "total_batches": 22,
    "total_errors": 8,
    "model": "Qwen/Qwen2.5-Coder-3B-Instruct"
  },
  "results": [
    {
      "index": 0,
      "groundtruth": "int startAngle = ((Arc) object).getStartAngle();",
      "prediction": "int startAngle = ((Arc) object).getStartAngle();",
      "raw_prediction": "int startAngle = ((Arc) object).getStartAngle();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1,
      "groundtruth": "((Line) object).getColor());",
      "prediction": "((Line) object).getColor());",
      "raw_prediction": "((Line) object).getColor());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2,
      "groundtruth": "(Arc) object).getStopAngle();",
      "prediction": "(Arc) object).getStopAngle();",
      "raw_prediction": "(Arc) object).getStopAngle();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 3,
      "groundtruth": "server.blockUntilShutdown();",
      "prediction": "server.blockUntilShutdown();",
      "raw_prediction": "server.blockUntilShutdown();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 4,
      "groundtruth": "HttpClientUtil.sendGetRequest();",
      "prediction": "HttpClientUtil.pos",
      "raw_prediction": "HttpClientUtil.post(\"http://localhost:8080/api\", messageView.getMessageBody());",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 5,
      "groundtruth": "GreetingClient.start();",
      "prediction": "GreetingClient client = new GreetingClient();",
      "raw_prediction": " GreetingClient client = new GreetingClient();",
      "es": 0.4444444444444444,
      "em": false,
      "passed": false
    },
    {
      "index": 6,
      "groundtruth": "RocketMqClients.CreatePushConsumer(messageView -> {",
      "prediction": "RocketMqClients.consumeMess",
      "raw_prediction": "RocketMqClients.consumeMessage(\"test-topic\", \"group1\", (messageView, consumerContext) -> {",
      "es": 0.4901960784313726,
      "em": false,
      "passed": false
    },
    {
      "index": 7,
      "groundtruth": "Producer producer = RocketMqClients.CreateProducer();",
      "prediction": "Producer producer = RocketMqClients.getProducer();",
      "raw_prediction": " Producer producer = RocketMqClients.getProducer();",
      "es": 0.9245283018867925,
      "em": false,
      "passed": false
    },
    {
      "index": 8,
      "groundtruth": "systemMessage.setContent(systemprompt);",
      "prediction": "systemMessage.setContent(systemprompt);",
      "raw_prediction": "systemMessage.setContent(systemprompt);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 9,
      "groundtruth": "\"Contador de tokens: %d\",gptService.getNumTokens());",
      "prediction": "\"%s: %d tokens\", botName, gptService.getTokensUsed());",
      "raw_prediction": "\"%s: %d tokens\", botName, gptService.getTokensUsed());\n        sendReply(update, message);\n    }\n\n    /**\n     * Sends a message to the user with information about the number of tokens currently consumed in GPT",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 10,
      "groundtruth": "chatRequest.setMaxTokens(maxtokens);",
      "prediction": "chatRequest.setMaxTokens(maxtokens);",
      "raw_prediction": "chatRequest.setMaxTokens(maxtokens);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 11,
      "groundtruth": "chatRequest.setModel(model);",
      "prediction": "chatRequest.setModel(model);",
      "raw_prediction": "chatRequest.setModel(model);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 12,
      "groundtruth": "systemMessage.setRole(\"system\");",
      "prediction": "systemMessage.setRole(\"system\");",
      "raw_prediction": "systemMessage.setRole(\"system\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 13,
      "groundtruth": "userMessage.setContent(this.presentation);",
      "prediction": "userMessage.setContent(text);",
      "raw_prediction": " userMessage.setContent(text);",
      "es": 0.6666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 14,
      "groundtruth": "exampleMessage.setRole(role.toLowerCase());",
      "prediction": "exampleMessage.setRole(role);",
      "raw_prediction": " exampleMessage.setRole(role);",
      "es": 0.6744186046511628,
      "em": false,
      "passed": false
    },
    {
      "index": 15,
      "groundtruth": "AccUtils.printLogMsg(\"\u63d0\u53d6\u5230\u7684\u7b2c\u4e00\u4e2a\u6574\u6570\u662f\uff1a\" + i);",
      "prediction": "AccUtils.printLogMsg(\"\u5728\u5b57\u7b26\u4e32\u4e2d\u627e\u5230\u7684\u6574\u6570\u662f\uff1a\" + i);",
      "raw_prediction": " AccUtils.printLogMsg(\"\u5728\u5b57\u7b26\u4e32\u4e2d\u627e\u5230\u7684\u6574\u6570\u662f\uff1a\" + i);",
      "es": 0.8048780487804879,
      "em": false,
      "passed": false
    },
    {
      "index": 16,
      "groundtruth": "AccUtils.printLogMsg(\"\u70b9\u51fb\u5de5\u4f5c\u53f0\");",
      "prediction": "AccUtils.printLogMsg(\"\u70b9\u51fb\u5de5\u4f5c\u53f0\u6253\u5f00\");",
      "raw_prediction": " AccUtils.printLogMsg(\"\u70b9\u51fb\u5de5\u4f5c\u53f0\u6253\u5f00\");",
      "es": 0.9375,
      "em": false,
      "passed": false
    },
    {
      "index": 17,
      "groundtruth": "AccUtils.printLogMsg(\"\u70b9\u51fb\u8003\u52e4\u6253\u5f00\");",
      "prediction": "AccUtils.printLogMsg(\"\u70b9\u51fb\u8003\u52e4\u6253\u5361\");",
      "raw_prediction": "AccUtils.printLogMsg(\"\u70b9\u51fb\u8003\u52e4\u6253\u5361\");",
      "es": 0.967741935483871,
      "em": false,
      "passed": false
    },
    {
      "index": 18,
      "groundtruth": "AccUtils.printLogMsg(\"\u6253\u5f00\u9489\u9489\");",
      "prediction": "AccUtils.printLogMsg(\"\u6253\u5f00\u9489\u9489\");",
      "raw_prediction": "AccUtils.printLogMsg(\"\u6253\u5f00\u9489\u9489\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 19,
      "groundtruth": "AccUtils.printLogMsg(\"\u70b9\u51fb\u6253\u5361\");",
      "prediction": "AccUtils.printLogMsg(\"\u70b9\u51fb\u6253\u5361\");",
      "raw_prediction": " AccUtils.printLogMsg(\"\u70b9\u51fb\u6253\u5361\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 20,
      "groundtruth": "AccUtils.printLogMsg(\"\u70b9\u51fb\u6682\u65f6\u4e0d\");",
      "prediction": "AccUtils.printLogMsg(\"\u70b9\u51fb\u4e0a\u73ed\u6253\u5361\");",
      "raw_prediction": "AccUtils.printLogMsg(\"\u70b9\u51fb\u4e0a\u73ed\u6253\u5361\");",
      "es": 0.8709677419354839,
      "em": false,
      "passed": false
    },
    {
      "index": 21,
      "groundtruth": "AccUtils.printLogMsg(\"\u6807\u9898 => \" + videoDesc);",
      "prediction": "if (videoDesc != null)",
      "raw_prediction": " if (videoDesc != null) {\n                AccUtils.printLogMsg(\"\u5f53\u524d\u89c6\u9891\u6807\u9898 => \" + videoDesc);\n            } else {\n                AccUtils.printLogMsg(\"\u6ca1\u6709\u627e\u5230\u89c6\u9891\u6807\u9898\");\n            }\n",
      "es": 0.16279069767441856,
      "em": false,
      "passed": false
    },
    {
      "index": 22,
      "groundtruth": "AccUtils.printLogMsg(\"\u8fd4\u56de\u5230\u521d\u59cb\u72b6\u6001\");",
      "prediction": "AccUtils.printLogMsg(\"\u70b9\u51fb\u5de5\u4f5c\u53f0\");",
      "raw_prediction": "AccUtils.printLogMsg(\"\u70b9\u51fb\u5de5\u4f5c\u53f0\");\n        AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u5de5\u4f5c\u53f0\"));\n        AccUtils.timeSleep(3000);\n\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u8003\u52e4\u6253\u5f00",
      "es": 0.78125,
      "em": false,
      "passed": false
    },
    {
      "index": 23,
      "groundtruth": "AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u5de5\u4f5c\u53f0\"));",
      "prediction": "AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u5de5\u4f5c\u53f0\"));",
      "raw_prediction": "AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u5de5\u4f5c\u53f0\"));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 24,
      "groundtruth": "AccUtils.printLogMsg(\"\u70b9\u51fb\u597d\u7684\");",
      "prediction": "AccUtils.printLogMsg(\"\u70b9\u51fb\u786e\u8ba4\u6253\u5361\");",
      "raw_prediction": " AccUtils.printLogMsg(\"\u70b9\u51fb\u786e\u8ba4\u6253\u5361\");\n        AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u786e\u8ba4\u6253\u5361\"));\n        AccUtils.timeSleep(3000);\n\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u597d\u7684\");",
      "es": 0.8709677419354839,
      "em": false,
      "passed": false
    },
    {
      "index": 25,
      "groundtruth": "dyTaskService.main();",
      "prediction": "dyTaskService.main();",
      "raw_prediction": " dyTaskService.main();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 26,
      "groundtruth": "AccUtils.printLogMsg(\"\u5411\u4e0b\u6ed1\u52a8\");",
      "prediction": "AccUtils.printLogMsg(\"\u70b9\u51fb\u53f3\u4e0b\u89d2\");",
      "raw_prediction": " AccUtils.printLogMsg(\"\u70b9\u51fb\u53f3\u4e0b\u89d2\");\n            AccUtils.clickPoint(Variable.mWidth - 100, Variable.mHeight - 100, 100);\n            AccUtils.timeSleep(waitTwoSecond",
      "es": 0.8333333333333334,
      "em": false,
      "passed": false
    },
    {
      "index": 27,
      "groundtruth": "= AccUtils.findElementListByContainText(\"\u6253\u5361\");",
      "prediction": "= AccUtils.findElementsByContainText(\"\u4e0a\u73ed\u6253\u5361\");",
      "raw_prediction": "= AccUtils.findElementsByContainText(\"\u4e0a\u73ed\u6253\u5361\");",
      "es": 0.8913043478260869,
      "em": false,
      "passed": false
    },
    {
      "index": 28,
      "groundtruth": "AccUtils.printLogMsg(\"\u6253\u5361\u5b8c\u6210\uff0c\u8fd4\u56de\u684c\u9762\");",
      "prediction": "AccUtils.printLogMsg(\"\u9000\u51fa\u9489\u9489\");",
      "raw_prediction": "AccUtils.printLogMsg(\"\u9000\u51fa\u9489\u9489\");",
      "es": 0.7352941176470589,
      "em": false,
      "passed": false
    },
    {
      "index": 29,
      "groundtruth": "TinkerManager.setUpgradeRetryEnable(true);",
      "prediction": "TinkerManager.initFastCrashReport(getApplicationContext(), null, null);        // Op",
      "raw_prediction": " TinkerManager.initFastCrashReport(getApplicationContext(), null, null);        // Optional\n        // if you want to do some special things after application start here\n        // like modify configuration, add custom view etc.\n    }\n\n    @",
      "es": 0.30952380952380953,
      "em": false,
      "passed": false
    },
    {
      "index": 30,
      "groundtruth": "AccUtils.findElementByText(\"\u8003\u52e4\u6253\u5361\"));",
      "prediction": "AccUtils.findElementByText(\"\u8003\u52e4\"));",
      "raw_prediction": "AccUtils.findElementByText(\"\u8003\u52e4\"));\n        AccUtils.timeSleep(3000);\n\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u6253\u5361\");\n        AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u6253\u5361\"));\n        AccUtils.time",
      "es": 0.9444444444444444,
      "em": false,
      "passed": false
    },
    {
      "index": 31,
      "groundtruth": "TinkerManager.installTinker(this);",
      "prediction": "Log.i(TAG, \"onBaseContextAttached: \");",
      "raw_prediction": "Log.i(TAG, \"onBaseContextAttached: \");\n    }\n\n    @Override\n    public void onBaseContextAttached(Context base, boolean force) {\n        super.onBaseContextAttached(base, force);\n        MultiDex.install(base);\n\n        Tinker",
      "es": 0.1578947368421053,
      "em": false,
      "passed": false
    },
    {
      "index": 32,
      "groundtruth": "= AccUtils.findElementByText(\"\u6211\u77e5\u9053\u4e86\");",
      "prediction": "= AccUtils.findElementByText(\"\u4ee5\u540e\u518d\u8bf4\");",
      "raw_prediction": "= AccUtils.findElementByText(\"\u4ee5\u540e\u518d\u8bf4\");",
      "es": 0.8918918918918919,
      "em": false,
      "passed": false
    },
    {
      "index": 33,
      "groundtruth": "element = AccUtils.findElementByText(\"\u4ee5\u540e\u518d\u8bf4\");",
      "prediction": "element = AccUtils.findElementByText(\"\u8df3\u8fc7\");",
      "raw_prediction": "element = AccUtils.findElementByText(\"\u8df3\u8fc7\");",
      "es": 0.9111111111111111,
      "em": false,
      "passed": false
    },
    {
      "index": 34,
      "groundtruth": "AccUtils.printLogMsg(\"open dy App\");",
      "prediction": "AccUtils.timeSleep(waitSixSecond);",
      "raw_prediction": "AccUtils.timeSleep(waitSixSecond);",
      "es": 0.36111111111111116,
      "em": false,
      "passed": false
    },
    {
      "index": 35,
      "groundtruth": "AccUtils.openApp(\"\u6296\u97f3\");",
      "prediction": "AccUtils.timeSleep(waitFiveSecond);",
      "raw_prediction": " AccUtils.timeSleep(waitFiveSecond);\n\n        AccUtils.printLogMsg(\"\u8fdb\u5165\u4e3b\u9875\");\n        AccUtils.clickPoint(Variable.mWidth - 50, 150, 100);\n        AccUtils.timeSleep(wait",
      "es": 0.4,
      "em": false,
      "passed": false
    },
    {
      "index": 36,
      "groundtruth": "TinkerManager.setTinkerApplicationLike(this);",
      "prediction": "// \u53ea\u6709\u5728debug\u6a21\u5f0f\u4e0b\u624d\u5f00\u542f\u70ed\u4fee\u590d",
      "raw_prediction": "// \u53ea\u6709\u5728debug\u6a21\u5f0f\u4e0b\u624d\u5f00\u542f\u70ed\u4fee\u590d\n        if (BuildConfig.DEBUG) { // \u8fd9\u91cc\u5f00\u542f\u70ed\u4fee\u590d\n            TinkerInstaller.open(this);\n            // \u5982\u679c\u60a8\u4e0d\u60f3\u8ba9\u70ed\u4fee\u590d\u81ea\u52a8\u91cd\u542f\u5e94\u7528\uff0c",
      "es": 0.022222222222222254,
      "em": false,
      "passed": false
    },
    {
      "index": 37,
      "groundtruth": "Utils.isBackground()) {",
      "prediction": "Utils.isAppIn",
      "raw_prediction": "Utils.isAppInBackground(getApplicationContext())) {",
      "es": 0.3913043478260869,
      "em": false,
      "passed": false
    },
    {
      "index": 38,
      "groundtruth": "AccUtils.printLogMsg(\"\u5728\u5b57\u7b26\u4e32\u4e2d\u6ca1\u6709\u627e\u5230\u6574\u6570\uff01\");",
      "prediction": "AccUtils.printLogMsg(\"\u672a\u627e\u5230\u6574\u6570\");",
      "raw_prediction": "AccUtils.printLogMsg(\"\u672a\u627e\u5230\u6574\u6570\");\n        }\n        return i;\n    }\n\n    // \u4ece\u5b57\u7b26\u4e32\u4e2d\u63d0\u53d6\u7b2c\u4e00\u4e2a\u6d6e\u70b9\u6570\n    public static double extractFirstDoubleFromString(String str){\n        Pattern p = Pattern.compile",
      "es": 0.7837837837837838,
      "em": false,
      "passed": false
    },
    {
      "index": 39,
      "groundtruth": "WindowPermissionCheck.checkPermission(this);",
      "prediction": "WindowPermissionCheck.checkPermission(this);",
      "raw_prediction": "WindowPermissionCheck.checkPermission(this);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 40,
      "groundtruth": "AccUtils.timeSleep(3000);",
      "prediction": "AccUtils.timeSleep(6000);",
      "raw_prediction": "AccUtils.timeSleep(6000);",
      "es": 0.96,
      "em": false,
      "passed": false
    },
    {
      "index": 41,
      "groundtruth": "AccUtils.timeSleep(6000);",
      "prediction": "AccUtils.timeSleep(3000);",
      "raw_prediction": "AccUtils.timeSleep(3000);\n\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u6253\u5361\");\n        AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u6253\u5361\"));\n        AccUtils.timeSleep(3000);\n\n        Acc",
      "es": 0.96,
      "em": false,
      "passed": false
    },
    {
      "index": 42,
      "groundtruth": "AccUtils.timeSleep(2000);",
      "prediction": "AccUtils.timeSleep(2000);",
      "raw_prediction": "AccUtils.timeSleep(2000);\n\n        AccUtils.printLogMsg(\"\u8fd4\u56de\u5230\u521d\u59cb\u72b6\u6001\");\n        AccUtils.back();\n        AccUtils.timeSleep(2000);\n\n        AccUtils.printLogMsg(\"\u8fd4\u56de\u5230\u521d\u59cb",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 43,
      "groundtruth": "AccUtils.timeSleep(7000);",
      "prediction": "AccUtils.timeSleep(7000); //\u7b49\u5f85\u9489\u9489\u542f\u52a8\u5b8c\u6210",
      "raw_prediction": "AccUtils.timeSleep(7000); //\u7b49\u5f85\u9489\u9489\u542f\u52a8\u5b8c\u6210\n\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u5de5\u4f5c\u53f0\");\n        AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u5de5\u4f5c\u53f0\"));\n        AccUtils.time",
      "es": 0.6944444444444444,
      "em": false,
      "passed": false
    },
    {
      "index": 44,
      "groundtruth": "returnCode = Utils.checkForPatchRecover(NEW_PATCH_RESTRICTION_SPACE_SIZE_MIN, maxMemory);",
      "prediction": "SharedPreferences sp = context.getSharedPreferences(ShareConstants.TINKER_SHARE_PREFERENCE_CONFIG, Context.MODE_MULTI_PROCESS);",
      "raw_prediction": "SharedPreferences sp = context.getSharedPreferences(ShareConstants.TINKER_SHARE_PREFERENCE_CONFIG, Context.MODE_MULTI_PROCESS);\n            //optional, only disable this patch file with md5\n            int fastCrashCount = sp.getInt(patchMd5, ",
      "es": 0.2362204724409449,
      "em": false,
      "passed": false
    },
    {
      "index": 45,
      "groundtruth": "ntokens = ntokens + response.getUsage().getTotalTokens();",
      "prediction": "ntokens = ntokens + response.getUsage().getTotalTokens();",
      "raw_prediction": " ntokens = ntokens + response.getUsage().getTotalTokens();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 46,
      "groundtruth": ".setContent(response.getChoices().get(0).getMessage().getContent());",
      "prediction": ".setContent(response.getChoices().get(0).getMessage().getContent());",
      "raw_prediction": ".setContent(response.getChoices().get(0).getMessage().getContent());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 47,
      "groundtruth": "out.println(filme.getNome()+\" - \"+filme.getDuracao());",
      "prediction": "out.println(\"Nome do filme: \"+filme.getNome());",
      "raw_prediction": "out.println(\"Nome do filme: \"+filme.getNome());\n                System.out.println(\"Dura\u00e7\u00e3o do filme: \"+filme.getDura\u00e7\u00e3o());",
      "es": 0.5740740740740741,
      "em": false,
      "passed": false
    },
    {
      "index": 48,
      "groundtruth": "itempedido.getPreco();",
      "prediction": "itempedido.getPreco();",
      "raw_prediction": "itempedido.getPreco();\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 49,
      "groundtruth": "= meuDVD.removerFilme();",
      "prediction": "= meuDVD.removerFilme();",
      "raw_prediction": "= meuDVD.removerFilme();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 50,
      "groundtruth": "meuDVD.aumentarVolume();",
      "prediction": "meuDVD.aumentarVolume();",
      "raw_prediction": "meuDVD.aumentarVolume();\n        meuDVD.aumentarVolume();\n        meuDVD.aumentarVolume();\n        meuDVD.aumentarVolume();\n        meuDVD.aumentarVolume();\n        meuDVD.aumentarVolume();\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 51,
      "groundtruth": "(filme.getNome()+\" - \"+filme.getDuracao());",
      "prediction": "(\"Nome do filme: \"+filme.getNome());",
      "raw_prediction": "(\"Nome do filme: \"+filme.getNome());\n                System.out.println(\"Dura\u00e7\u00e3o do filme: \"+filme.getDura\u00e7\u00e3o());",
      "es": 0.4651162790697675,
      "em": false,
      "passed": false
    },
    {
      "index": 52,
      "groundtruth": "meuDVD.diminuirVolume();",
      "prediction": "meuDVD.diminuirVolume();",
      "raw_prediction": "meuDVD.diminuirVolume();\n        meuDVD.diminuirVolume();\n        meuDVD.diminuirVolume();\n        meuDVD.diminuirVolume();\n        meuDVD.diminuirVolume();\n        meuDVD.diminuirVolume();\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 53,
      "groundtruth": "meuDVD.play();",
      "prediction": "meuDVD.play();",
      "raw_prediction": "meuDVD.play();\n        meuDVD.aumentarVolume();\n        meuDVD.getVolume();\n        meuDVD.aumentarVolume();\n        meuDVD.aumentarVolume();\n        meuDVD.aumentarVolume();\n        meuDVD.aument",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 54,
      "groundtruth": "this.ipList.put(Sneaky.stringifyAddress(address), System.currentTimeMillis());",
      "prediction": "String ip = Sneaky.stringifyAddress(address);",
      "raw_prediction": "String ip = Sneaky.stringifyAddress(address);\n        if (!this.ipList.containsKey(ip)) {\n            this.ipList.put(ip, System.currentTimeMillis());\n            this.saveToFile(false);\n        } else {\n            this.ipList.put(ip, System.currentTimeMillis",
      "es": 0.46153846153846156,
      "em": false,
      "passed": false
    },
    {
      "index": 55,
      "groundtruth": "= translator.detectLanguage(questionInput);",
      "prediction": "= question.getSourceLang();",
      "raw_prediction": "= question.getSourceLang();",
      "es": 0.2790697674418605,
      "em": false,
      "passed": false
    },
    {
      "index": 56,
      "groundtruth": "= translator.translate(translator.middleLanguage(), sourceLang, answerOutput);",
      "prediction": "= translator.translate(translator.middleLanguage(), sourceLang, answerOutput);",
      "raw_prediction": "= translator.translate(translator.middleLanguage(), sourceLang, answerOutput);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 57,
      "groundtruth": "= translator.translate(sourceLang, translator.middleLanguage(), questionInput);",
      "prediction": "= translator.translate(translator.middleLanguage(), sourceLang, questionInput);",
      "raw_prediction": "= translator.translate(translator.middleLanguage(), sourceLang, questionInput);",
      "es": 0.6962025316455696,
      "em": false,
      "passed": false
    },
    {
      "index": 58,
      "groundtruth": "fill(WebActions.decrypt(password));",
      "prediction": "fill(WebActions.getProperty(password));",
      "raw_prediction": "fill(WebActions.getProperty(password));",
      "es": 0.8205128205128205,
      "em": false,
      "passed": false
    },
    {
      "index": 59,
      "groundtruth": "= PluginImpl.getInstance().getAccessKeyId();",
      "prediction": "= PluginImpl.getInstance().getAccessKeyId();",
      "raw_prediction": "= PluginImpl.getInstance().getAccessKeyId();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 60,
      "groundtruth": "instance.getOosClient().getAcsResponse(request);",
      "prediction": "instance.getOosClient().getAcsResponse(request);",
      "raw_prediction": "instance.getOosClient().getAcsResponse(request);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 61,
      "groundtruth": "uploadPartResult = instance.getOssClient().uploadPart(uploadPartRequest);",
      "prediction": "uploadPartResult = instance.getOssClient().uploadPart(uploadPartRequest);",
      "raw_prediction": "uploadPartResult = instance.getOssClient().uploadPart(uploadPartRequest);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 62,
      "groundtruth": "instance.build(this.region);",
      "prediction": "listener.getLogger().println(\"region:\" + region);",
      "raw_prediction": "listener.getLogger().println(\"region:\" + region);\n        listener.getLogger().println(\"resourceType:\" + resourceType);\n        listener.getLogger().println(\"resourceId:\" + resourceId);\n        listener.getLogger().println(\"bucket:\" + bucket);\n        listener",
      "es": 0.34693877551020413,
      "em": false,
      "passed": false
    },
    {
      "index": 63,
      "groundtruth": "(instance.getOssClient() != null) {",
      "prediction": "(instance != null)",
      "raw_prediction": "(instance != null) {",
      "es": 0.5142857142857142,
      "em": false,
      "passed": false
    },
    {
      "index": 64,
      "groundtruth": "upresult = instance.getOssClient().initiateMultipartUpload(request);",
      "prediction": "upresult = instance.getOssClient().initiateMultipartUpload(request);",
      "raw_prediction": "upresult = instance.getOssClient().initiateMultipartUpload(request);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 65,
      "groundtruth": "instance.getOosClient().getAcsResponse(executionsRequest).getExecutions().get(0).getStatus();",
      "prediction": "instance.getOosClient().getExecutionStatus(executionsRequest).getStatus();",
      "raw_prediction": "instance.getOosClient().getExecutionStatus(executionsRequest).getStatus();",
      "es": 0.6666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 66,
      "groundtruth": "HazardDiamondAPI.open(this);",
      "prediction": "return ActionResult.SUCCESS; // TODO: Show hazard data i",
      "raw_prediction": "return ActionResult.SUCCESS; // TODO: Show hazard data in GUI?",
      "es": 0.0892857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 67,
      "groundtruth": "setScreen(new HazardScreen(holder.getHazardData()));",
      "prediction": "setScreen(new HazardScreen(holder.getHazardData()));",
      "raw_prediction": "setScreen(new HazardScreen(holder.getHazardData()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 68,
      "groundtruth": ".register(Registry.ITEM, HDiamond.id(\"panel_item\"), INSTANCE);",
      "prediction": ".register(Registry.ITEM, HDiamond.id(\"panel\"), INSTANCE);",
      "raw_prediction": ".register(Registry.ITEM, HDiamond.id(\"panel\"), INSTANCE);",
      "es": 0.9193548387096774,
      "em": false,
      "passed": false
    },
    {
      "index": 69,
      "groundtruth": "= holder.getHazardData().getTooltip().stream()\n                .map(Text.Serializer::toJson)\n                .toList();",
      "prediction": "= holder.getWailaData();",
      "raw_prediction": "= holder.getWailaData();\n        if (tooltips.isEmpty()) {\n            return;\n        }",
      "es": 0.17647058823529416,
      "em": false,
      "passed": false
    },
    {
      "index": 70,
      "groundtruth": "AliyunPushLog.e(REC_TAG, \"key \" + entry.getKey() + \" value \" + entry.getValue());",
      "prediction": "AliyunPushLog.e(REC_TAG, entry.getKey() + \":\" + entry.getValue());",
      "raw_prediction": "\t\tAliyunPushLog.e(REC_TAG, entry.getKey() + \":\" + entry.getValue());",
      "es": 0.8024691358024691,
      "em": false,
      "passed": false
    },
    {
      "index": 71,
      "groundtruth": "ResultUtil.error();",
      "prediction": "ResultUtil.",
      "raw_prediction": "ResultUtil.error(ErrorCode.INTERNAL_SERVER_ERROR);",
      "es": 0.5789473684210527,
      "em": false,
      "passed": false
    },
    {
      "index": 72,
      "groundtruth": "target = (Annotation) AopUtil.getTarget(annotation);",
      "prediction": "target = AopUtil.getTargetAnnotation(annotation);",
      "raw_prediction": "target = AopUtil.getTargetAnnotation(annotation);",
      "es": 0.5576923076923077,
      "em": false,
      "passed": false
    },
    {
      "index": 73,
      "groundtruth": ".info(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u5931\u8d25\uff01\u624b\u673a\u53f7\uff1a\u3010{",
      "prediction": ".error(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u5931\u8d25\uff01\u624b\u673a\u53f7\uff1a\u3010{",
      "raw_prediction": ".error(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u5931\u8d25\uff01\u624b\u673a\u53f7\uff1a\u3010{",
      "es": 0.8333333333333334,
      "em": false,
      "passed": false
    },
    {
      "index": 74,
      "groundtruth": "= UserRoleEnum.getEnumByValue(mustRole);",
      "prediction": "= UserRoleEnum.valueOf(mustRole);",
      "raw_prediction": "= UserRoleEnum.valueOf(mustRole);",
      "es": 0.7,
      "em": false,
      "passed": false
    },
    {
      "index": 75,
      "groundtruth": "(errorCode.getMsg());",
      "prediction": "(message);",
      "raw_prediction": "(message);",
      "es": 0.23809523809523814,
      "em": false,
      "passed": false
    },
    {
      "index": 76,
      "groundtruth": "(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u6210\u529f\uff01\u624b\u673a\u53f7\uff1a\u3010{",
      "prediction": "(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u6210\u529f\uff01\u624b\u673a\u53f7\uff1a\u3010{",
      "raw_prediction": "(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u6210\u529f\uff01\u624b\u673a\u53f7\uff1a\u3010{",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 77,
      "groundtruth": "username = jwtTokenProvider.getUsername(token);",
      "prediction": "username = jwtTokenProvider.getUsernameFromToken(token);",
      "raw_prediction": "username = jwtTokenProvider.getUsernameFromToken(token);",
      "es": 0.8392857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 78,
      "groundtruth": "(cityService.findCitiesByName(pageNo, pageSize, sortBy, sortDir,name));",
      "prediction": "(cityService.getCitiesByName(pageNo, pageSize, sortBy, sortDir, name));",
      "raw_prediction": "(cityService.getCitiesByName(pageNo, pageSize, sortBy, sortDir, name));\n    }\n\n    @GetMapping(\"/{id}\")\n    @PreAuthorize(\"hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')\")\n    public ResponseEntity<City",
      "es": 0.9295774647887324,
      "em": false,
      "passed": false
    },
    {
      "index": 79,
      "groundtruth": "return JSON_CONVERTOR.parseObject(input, clazz);",
      "prediction": "return JSON_CONVERTOR.parseObject(input, charset, clazz);",
      "raw_prediction": "    return JSON_CONVERTOR.parseObject(input, charset, clazz);\n    }\n\n    public static <T> T parseObject(String input, Class<T> clazz, Charset charset) {\n        return JSON_CONVERTOR.parseObject(input, charset, clazz",
      "es": 0.8421052631578947,
      "em": false,
      "passed": false
    },
    {
      "index": 80,
      "groundtruth": ".append(commandNamespace.name());",
      "prediction": ".append(commandNamespace.getName()).append(\":\");",
      "raw_prediction": ".append(commandNamespace.getName()).append(\":\");",
      "es": 0.6666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 81,
      "groundtruth": ".namespaceManager.getCommandNamespaces().forEach(namespace -> {",
      "prediction": ".setImports(new String[]{\"java.util.*\", \"java.lang.*\", \"com.alipay.antchain.bridge.pluginserve",
      "raw_prediction": ".setImports(new String[]{\"java.util.*\", \"java.lang.*\", \"com.alipay.antchain.bridge.pluginserver.cli.command.*\"});\n        this.setClassLoader(getClass().getClassLoader());\n\n        // load all namespaces\n        namespaceManager.getNamespaces",
      "es": 0.15957446808510634,
      "em": false,
      "passed": false
    },
    {
      "index": 82,
      "groundtruth": ".print(namespaceManager.dump());",
      "prediction": ".println(\"help command list:\");",
      "raw_prediction": ".println(\"help command list:\");\n        RUNTIME.getPrinter().println(\"exit - exit shell\");\n        RUNTIME.getPrinter().println(\"help - show help info\");",
      "es": 0.375,
      "em": false,
      "passed": false
    },
    {
      "index": 83,
      "groundtruth": "shell.start();",
      "prediction": "shell.start();",
      "raw_prediction": "shell.start();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 84,
      "groundtruth": "commandNamespace.getCommands().forEach(\n                            (cmdName, cmd) -> {",
      "prediction": "builder.append(\"\\n\\t\").append(commandNamespace.description());",
      "raw_prediction": " builder.append(\"\\n\\t\").append(commandNamespace.description());\n                 builder.append(\"\\n\\t\").append(commandNamespace.usage());\n\n                 commandNamespace.getCommands().forEach(\n                         cmd -> {\n                     String cmdName = cmd.getName(); // \u547d\u4ee4",
      "es": 0.11494252873563215,
      "em": false,
      "passed": false
    },
    {
      "index": 85,
      "groundtruth": "String result = shell.execute(command);",
      "prediction": "String result = shell.execute(command);",
      "raw_prediction": "         String result = shell.execute(command);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 86,
      "groundtruth": "!grpcClient.checkServerStatus()) {",
      "prediction": "!grpcClient.connect",
      "raw_prediction": "!grpcClient.connect()) {",
      "es": 0.4411764705882353,
      "em": false,
      "passed": false
    },
    {
      "index": 87,
      "groundtruth": "getGrpcClient().shutdown();",
      "prediction": "getGrpcClient().close();",
      "raw_prediction": "getGrpcClient().close();",
      "es": 0.7407407407407407,
      "em": false,
      "passed": false
    },
    {
      "index": 88,
      "groundtruth": "\"                          PLUGIN SERVER CLI \" + Launcher.getVersion()\n        );",
      "prediction": "\"Welcome to AntChain Bridge PluginServer CLI Shell!\\n\" +\n                \"Type 'exit' to quit.\\n\" +",
      "raw_prediction": "\"Welcome to AntChain Bridge PluginServer CLI Shell!\\n\" +\n                \"Type 'exit' to quit.\\n\" +",
      "es": 0.18181818181818177,
      "em": false,
      "passed": false
    },
    {
      "index": 89,
      "groundtruth": ").execute();",
      "prediction": ").execute();",
      "raw_prediction": ").execute();\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 90,
      "groundtruth": "().println(JsonUtil.format(result));",
      "prediction": "().println(result);",
      "raw_prediction": "().println(result);",
      "es": 0.5277777777777778,
      "em": false,
      "passed": false
    },
    {
      "index": 91,
      "groundtruth": "(!buffer.isEmpty() && !namespace.name().startsWith(buffer)) {",
      "prediction": "(!namespace.name().startsWith(buffer))",
      "raw_prediction": "(!namespace.name().startsWith(buffer)) {",
      "es": 0.6229508196721312,
      "em": false,
      "passed": false
    },
    {
      "index": 92,
      "groundtruth": "new StringBuilder(namespace.name());",
      "prediction": "new StringBuilder(namespace.name());",
      "raw_prediction": "new StringBuilder(namespace.name());\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 93,
      "groundtruth": "namespace.getCommands().forEach((cmdName, cmd) -> {",
      "prediction": "sb.append(\"\\n\\t.\").append(namespace.name());",
      "raw_prediction": "sb.append(\"\\n\\t.\").append(namespace.name());\n\n                namespace.getCommands().forEach((cmdName, cmd) -> {",
      "es": 0.1568627450980392,
      "em": false,
      "passed": false
    },
    {
      "index": 94,
      "groundtruth": "!namespace.name().equals(buf[0])) {",
      "prediction": "!namespace.name().e",
      "raw_prediction": "!namespace.name().equals(buf[0])) {",
      "es": 0.5428571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 95,
      "groundtruth": "Candidate(namespace.name() + \".\", namespace.name(), null, null, null, null, true));",
      "prediction": "Candidate(namespace.name(), sb.toString(), null, null, null,",
      "raw_prediction": "Candidate(namespace.name(), sb.toString(), null, null, null,\n                    null, true));",
      "es": 0.6024096385542168,
      "em": false,
      "passed": false
    },
    {
      "index": 96,
      "groundtruth": "cmd.addArgs(argName, param.getType().getSimpleName(), constraints);",
      "prediction": "cmd.setArgName(argName);",
      "raw_prediction": " cmd.setArgName(argName);\n                cmd.setConstraints(constraints);\n\n                cmd.setMethod(method);\n                cmd.setNamespace(this.name());\n            } else {\n                // ignore other methods\n                return;",
      "es": 0.29850746268656714,
      "em": false,
      "passed": false
    },
    {
      "index": 97,
      "groundtruth": "(namespaceManager.getCommandNamespaces());",
      "prediction": "(namespaceManager.getNamespaces());",
      "raw_prediction": "(namespaceManager.getNamespaces());",
      "es": 0.8333333333333334,
      "em": false,
      "passed": false
    },
    {
      "index": 98,
      "groundtruth": "mThermalUtils.setDefaultThermalProfile();",
      "prediction": "mThermalUtils.setDefaultThermalProfile();",
      "raw_prediction": " mThermalUtils.setDefaultThermalProfile();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 99,
      "groundtruth": "mThermalUtils.setThermalProfile(foregroundApp);",
      "prediction": "mThermalUtils.setThermalProfile(foregroundApp);",
      "raw_prediction": "mThermalUtils.setThermalProfile(foregroundApp);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 100,
      "groundtruth": "mDiracSound.setMusic(enable ? 1 : 0);",
      "prediction": "if (enable) {",
      "raw_prediction": "if (enable) {\n            refreshPlaybackIfNecessary();\n        }\n    }\n\n    public void setMusic(boolean enable) {\n        mDiracSound.setMusic(enable);",
      "es": 0.2432432432432432,
      "em": false,
      "passed": false
    },
    {
      "index": 101,
      "groundtruth": "FileUtils.writeLine(THERMAL_SCONFIG, THERMAL_STATE_DEFAULT);",
      "prediction": "String value = THERMAL_BENCHMARK + \":\" + THERMAL_BROWSER + \":\" + THERMAL_CAMERA + \":\" +",
      "raw_prediction": "String value = THERMAL_BENCHMARK + \":\" + THERMAL_BROWSER + \":\" + THERMAL_CAMERA + \":\" +\n                THERMAL_DIALER + \":\" + THERMAL_GAMING + \":\" + THERMAL_STREAM",
      "es": 0.25287356321839083,
      "em": false,
      "passed": false
    },
    {
      "index": 102,
      "groundtruth": "null && mDiracSound.getMusic() == 1;",
      "prediction": "null && mDiracSound.isEnabled();",
      "raw_prediction": "null && mDiracSound.isEnabled();",
      "es": 0.6111111111111112,
      "em": false,
      "passed": false
    },
    {
      "index": 103,
      "groundtruth": "mDiracSound.setLevel(band, Float.valueOf(level[band]));",
      "prediction": "mDiracSound.setLevel(band, Integer.parseInt(level[band]));",
      "raw_prediction": "mDiracSound.setLevel(band, Integer.parseInt(level[band]));",
      "es": 0.7758620689655172,
      "em": false,
      "passed": false
    },
    {
      "index": 104,
      "groundtruth": "? mDiracUtils.isDiracEnabled() : false;",
      "prediction": "? mDiracUtils.isEnabled() : false;",
      "raw_prediction": "? mDiracUtils.isEnabled() : false;\n",
      "es": 0.8717948717948718,
      "em": false,
      "passed": false
    },
    {
      "index": 105,
      "groundtruth": "mDiracSound.setHifiMode(paramInt);",
      "prediction": "refreshPlaybackIfNecessary();",
      "raw_prediction": "refreshPlaybackIfNecessary();",
      "es": 0.20588235294117652,
      "em": false,
      "passed": false
    },
    {
      "index": 106,
      "groundtruth": "gptClient.updateSettings(newApiKey, newModelId, newMaxPromptSize, newPrompt);",
      "prediction": "gptClient.updateSettings(newApiKey, newModelId, newPrompt);",
      "raw_prediction": "gptClient.updateSettings(newApiKey, newModelId, newPrompt);",
      "es": 0.7662337662337663,
      "em": false,
      "passed": false
    },
    {
      "index": 107,
      "groundtruth": "mDiracUtils.setHifiMode((Boolean) newValue ? 1 : 0);",
      "prediction": "mDiracUtils.setHifiMode((Boolean) newValue);",
      "raw_prediction": "mDiracUtils.setHifiMode((Boolean) newValue);",
      "es": 0.8461538461538461,
      "em": false,
      "passed": false
    },
    {
      "index": 108,
      "groundtruth": "mDiracUtils.setHeadsetType(Integer.parseInt(newValue.toString()));",
      "prediction": "mDiracUtils.setHeadsetType((String) newValue);",
      "raw_prediction": "mDiracUtils.setHeadsetType((String) newValue);",
      "es": 0.5909090909090908,
      "em": false,
      "passed": false
    },
    {
      "index": 109,
      "groundtruth": ".helpMenu.setHelpColors(config.getMessages().getHelpCmd().getHelpColors());",
      "prediction": ".helpMenu.colorsProvider(",
      "raw_prediction": ".helpMenu.colorsProvider(\n          (sender, key, args) -> config.getMessages().getHelpCmd().getColors(key));\n\n      this.helpMenu.register();",
      "es": 0.28,
      "em": false,
      "passed": false
    },
    {
      "index": 110,
      "groundtruth": "Menu menu = MyMenu.createMenu(this);",
      "prediction": "Menu menu = new MyMenu(montoyaApi, this);",
      "raw_prediction": "Menu menu = new MyMenu(montoyaApi, this);",
      "es": 0.5853658536585367,
      "em": false,
      "passed": false
    },
    {
      "index": 111,
      "groundtruth": "(sender, key, args) -> config.getMessages().getHelpCmd().getMessage(key));",
      "prediction": "(sender, command, args) -> Component.te",
      "raw_prediction": " (sender, command, args) -> Component.text(\"PapiSigns Help\").color(config.getMessages().getHelpCmd().getHelpColor()),",
      "es": 0.29729729729729726,
      "em": false,
      "passed": false
    },
    {
      "index": 112,
      "groundtruth": "description = HtmlResourceLoader.loadHtmlContent(\"aboutDescription.html\");",
      "prediction": "description = HtmlResourceLoader.loadHtmlResource(\"about.html\");",
      "raw_prediction": "description = HtmlResourceLoader.loadHtmlResource(\"about.html\");",
      "es": 0.7432432432432432,
      "em": false,
      "passed": false
    },
    {
      "index": 113,
      "groundtruth": "mDiracUtils.setScenario(Integer.parseInt(newValue.toString()));",
      "prediction": "mDiracUtils.setScene((String) newValue);",
      "raw_prediction": "mDiracUtils.setScene((String) newValue);",
      "es": 0.5079365079365079,
      "em": false,
      "passed": false
    },
    {
      "index": 114,
      "groundtruth": "mDiracUtils.setLevel((String) newValue);",
      "prediction": "mDiracUtils.setPreset(Integer.parseInt(newValue.toString()));",
      "raw_prediction": "mDiracUtils.setPreset(Integer.parseInt(newValue.toString()));",
      "es": 0.4918032786885246,
      "em": false,
      "passed": false
    },
    {
      "index": 115,
      "groundtruth": "myBurpExtension.updateSettings(newApiKey, newModelId, newMaxPromptSize, newPromptText);",
      "prediction": "myBurpExtension.setApiKey(newApiKey);",
      "raw_prediction": "myBurpExtension.setApiKey(newApiKey);\n        myBurpExtension.setModel(newModelId);\n        myBurpExtension.setMaxPromptSize(newMaxPromptSize);\n        myBurpExtension.setPrompt(newPromptText);",
      "es": 0.367816091954023,
      "em": false,
      "passed": false
    },
    {
      "index": 116,
      "groundtruth": "settingsView.setOnApplyButtonClickListener(() -> {",
      "prediction": "settingsView.getApplyButton",
      "raw_prediction": "settingsView.getApplyButton().addActionListener(e -> {\n            // Apply changes to the settings\n            settingsView.applySettings();\n            // Optionally, update the UI or perform other actions after applying settings\n            // For example, refresh the settings",
      "es": 0.52,
      "em": false,
      "passed": false
    },
    {
      "index": 117,
      "groundtruth": "gptRequest.setPrompt(prompt);",
      "prediction": "if (MyBurpExtension.DEBUG)",
      "raw_prediction": "if (MyBurpExtension.DEBUG) {\n      logging.logToOutput(\"[*] Sending completion request to OpenAI API...\");\n    }",
      "es": 0.10344827586206895,
      "em": false,
      "passed": false
    },
    {
      "index": 118,
      "groundtruth": "inst.setOption(\"Skill Level\", String.valueOf(level));",
      "prediction": "inst.setLevel(level);",
      "raw_prediction": "inst.setLevel(level);",
      "es": 0.39622641509433965,
      "em": false,
      "passed": false
    },
    {
      "index": 119,
      "groundtruth": "(reader.getRest());",
      "prediction": "(reader.peek());",
      "raw_prediction": "(reader.peek());\n                reader.accept();",
      "es": 0.736842105263158,
      "em": false,
      "passed": false
    },
    {
      "index": 120,
      "groundtruth": "reader.hint(\"An Integer\");",
      "prediction": "return null;",
      "raw_prediction": "return null;\n        }\n\n        @Override\n        IntegerNode createLiteralNode(StringReader reader) {\n            return new IntegerNode();",
      "es": 0.2692307692307693,
      "em": false,
      "passed": false
    },
    {
      "index": 121,
      "groundtruth": "if (!reader.canRead()) {",
      "prediction": "if (reader.canRead() && reader.peek() == '\\n')",
      "raw_prediction": " if (reader.canRead() && reader.peek() == '\\n') {\n             reader.accept(); // skip newline\n             string.append('\\n'); // append newline to the string\n             } else if (reader.canRead() && reader.peek",
      "es": 0.4565217391304348,
      "em": false,
      "passed": false
    },
    {
      "index": 122,
      "groundtruth": "(cfg.getApiKey() != null) {",
      "prediction": "(cfg.getToken() != null)",
      "raw_prediction": "(cfg.getToken() != null) {\n            metadata.put(authorization, \"Bearer \" + cfg.getToken());\n        }\n\n        if (cfg.getApiKey() != null) {",
      "es": 0.7407407407407407,
      "em": false,
      "passed": false
    },
    {
      "index": 123,
      "groundtruth": "cfg.getTenantId() != null) {",
      "prediction": "cfg.getTenantId()",
      "raw_prediction": "cfg.getTenantId() != null) {",
      "es": 0.6071428571428572,
      "em": false,
      "passed": false
    },
    {
      "index": 124,
      "groundtruth": "cfg.setCaCertPath(caCertPath);",
      "prediction": "cfg.setCaCertPath(caCertPath);",
      "raw_prediction": "cfg.setCaCertPath(caCertPath);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 125,
      "groundtruth": "), cfg.getPort())\n                .intercept(MetadataUtils.newAttachHeadersInterceptor(metadata));",
      "prediction": "), cfg.getPort());",
      "raw_prediction": "), cfg.getPort());\n\n        if (cfg.getToken() != null) {\n            metadata.put(authorization, \"Bearer \" + cfg.getToken());\n        }",
      "es": 0.18367346938775508,
      "em": false,
      "passed": false
    },
    {
      "index": 126,
      "groundtruth": "(cfg.getHost(), cfg.getPort())\n                .intercept(MetadataUtils.newAttachHeadersInterceptor(metadata));",
      "prediction": "(cfg.getHost(), cfg.getPort())\n                .usePlaintext(!cfg.getInsecure());",
      "raw_prediction": "(cfg.getHost(), cfg.getPort())\n                .usePlaintext(!cfg.getInsecure());\n\n        channelBuilder = MetadataUtils.attachHeaders(channelBuilder, metadata);",
      "es": 0.5765765765765766,
      "em": false,
      "passed": false
    },
    {
      "index": 127,
      "groundtruth": "reader.peek(1);",
      "prediction": "while((p = reader.find(\" \")) !",
      "raw_prediction": "while((p = reader.find(\" \")) != -1) {\n                    string.append(reader.peek(p - reader.getPos()));\n                    reader.accept();\n                }",
      "es": 0.30000000000000004,
      "em": false,
      "passed": false
    },
    {
      "index": 128,
      "groundtruth": "return new AnalysisTaskWrapper(inst.calculate(), b);",
      "prediction": "return new AnalysisTaskWrapper(inst.calculate(), b);",
      "raw_prediction": "return new AnalysisTaskWrapper(inst.calculate(), b);\n    }\n\n    @LuaWhitelist\n    public CompletableFutureWrapper<String, String> getBestMove() {\n        return new CompletableFutureWrapper<>(inst.bestMove(), Function.identity(), b);\n    }\n\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 129,
      "groundtruth": "reader.peek(p - reader.getPos()));",
      "prediction": "reader.get(p));",
      "raw_prediction": "reader.get(p));",
      "es": 0.4117647058823529,
      "em": false,
      "passed": false
    },
    {
      "index": 130,
      "groundtruth": "= reader.find(\" \")) == -1) {",
      "prediction": "= reader.findNex",
      "raw_prediction": "= reader.findNextNonWhitespace()) == -1) {",
      "es": 0.4642857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 131,
      "groundtruth": "mDiracUtils.setEnabled(isChecked);",
      "prediction": "mDiracUtils.setDiracEnabled(isChecked);",
      "raw_prediction": "mDiracUtils.setDiracEnabled(isChecked);",
      "es": 0.8717948717948718,
      "em": false,
      "passed": false
    },
    {
      "index": 132,
      "groundtruth": "ShadeParser.parseShadeOutput(buildResult.toPath()),\n                        DependencyParser.parseDependencyCopyOutput(buildResult.toPath()));",
      "prediction": "modulesWithBundledDependencies,\n            importModulesWithCopiedDependencies(buildResult));",
      "raw_prediction": " modulesWithBundledDependencies,\n            importModulesWithCopiedDependencies(buildResult));\n\n        // parse deployed modules from build output\n        final Set<String> deployedModules = DeployParser.parseDeployOutput(buildResult);\n\n        LOG.info(\n            \"",
      "es": 0.33098591549295775,
      "em": false,
      "passed": false
    },
    {
      "index": 133,
      "groundtruth": "Node.greedyString())\n                                )\n                );",
      "prediction": "Node.string())\n                                        );",
      "raw_prediction": "Node.string())\n                                        );\n                                )\n                                .with(Node.literal(\"done\"));\n",
      "es": 0.7671232876712328,
      "em": false,
      "passed": false
    },
    {
      "index": 134,
      "groundtruth": "DependencyParser.parseDependencyCopyOutput(buildResult.toPath()));",
      "prediction": "DependencyParser.parseDependencyOutput(buildResult.toPath()));",
      "raw_prediction": " DependencyParser.parseDependencyOutput(buildResult.toPath()));\n\n        // parse deployed modules from build output\n        final Set<String> deployedModules = DeployParser.parseDeployOutput(buildResult);\n\n        LOG.info(\n            \"Extracted \"\n            + deployedModules",
      "es": 0.9393939393939394,
      "em": false,
      "passed": false
    },
    {
      "index": 135,
      "groundtruth": "return ParserUtils.parsePluginOutput(\n                lines,\n                DEPENDENCY_COPY_NEXT_MODULE_PATTERN,\n                DependencyParser::parseCopyDependencyBlock);",
      "prediction": "return ParserUtils.parsePluginOutput(\n                lines,\n                DEPENDENCY_COPY_NEXT_MODULE_PATTERN,\n                DependencyParser::parseCopyDependencyBlock);",
      "raw_prediction": "return ParserUtils.parsePluginOutput(\n                lines,\n                DEPENDENCY_COPY_NEXT_MODULE_PATTERN,\n                DependencyParser::parseCopyDependencyBlock);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 136,
      "groundtruth": "return dependency.getGroupId().contains(\"org.scala-lang\")\n                || scalaSuffixPattern.matcher(dependency.getArtifactId()).find();",
      "prediction": "return scalaSuffixPattern.matcher(dependency.getArtifactId()).find();",
      "raw_prediction": "return scalaSuffixPattern.matcher(dependency.getArtifactId()).find();\n    }\n\n    private static boolean isExcluded(final String artifactId) {\n        return EXCLUDED_MODULES.stream().anyMatch(artifactId::contains);",
      "es": 0.49640287769784175,
      "em": false,
      "passed": false
    },
    {
      "index": 137,
      "groundtruth": "+ dependency.getVersion()\n                + \":\"\n                + dependency.getClassifier().orElse(\"(no-classifier)\");",
      "prediction": "+ dependency.getVersion();",
      "raw_prediction": " + dependency.getVersion();\n    }\n\n    public static DependencyTree from(List<Dependency> dependencies) {\n        final DependencyTree tree = new DependencyTree();\n\n        for (Dependency dependency : dependencies) {\n            tree.addDirectDependency(dependency);\n        }\n\n",
      "es": 0.2184873949579832,
      "em": false,
      "passed": false
    },
    {
      "index": 138,
      "groundtruth": "= !cfg.getCaCertPath().isEmpty();",
      "prediction": "= cfg.getCaCertPath() != null;",
      "raw_prediction": "= cfg.getCaCertPath() != null;",
      "es": 0.6666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 139,
      "groundtruth": "with(Node.literal(\"string\").mustConsumeChild()\n                                        .with(Node.greedyString())\n                                )\n                );",
      "prediction": "with(Node.literal(\"string\"))\n                                );",
      "raw_prediction": "with(Node.literal(\"string\"))\n                                );\n        );",
      "es": 0.37951807228915657,
      "em": false,
      "passed": false
    },
    {
      "index": 140,
      "groundtruth": "boolean isTestDependency = dependency.getScope().get().equals(\"test\");",
      "prediction": "boolean isTestDependency =",
      "raw_prediction": "boolean isTestDependency =\n                    dependency.getScope().equals(\"test\") ||\n                    dependency.getScope().equals(\"provided\");",
      "es": 0.37142857142857144,
      "em": false,
      "passed": false
    },
    {
      "index": 141,
      "groundtruth": "= NoticeFileChecker.run(new File(args[0]), Paths.get(args[1]));",
      "prediction": "= 0;",
      "raw_prediction": "= 0;\n\n        severeIssueCount += JarFileChecker.checkPath(Paths.get(args[0]));\n\n        severeIssueCount += JarFileChecker.checkPath(Paths.get(args[1]));",
      "es": 0.06349206349206349,
      "em": false,
      "passed": false
    },
    {
      "index": 142,
      "groundtruth": "severeIssueCount += JarFileChecker.checkPath(Paths.get(args[2]));",
      "prediction": "if (severeIssueCount > 0) {",
      "raw_prediction": "if (severeIssueCount > 0) {\n\n            LOG.warn(\"Found a total of {} severe notice issues\", severeIssueCount);\n\n            System.exit(1);\n\n        }\n\n        severeIssueCount = LicenseFileChecker.run(new File(args",
      "es": 0.23076923076923073,
      "em": false,
      "passed": false
    },
    {
      "index": 143,
      "groundtruth": "wrapped.start(cmd),\n                SearchResultsWrapper::new,\n                b\n        );",
      "prediction": "wrapped.start(cmd),\n                r -> new SearchResultsWrapper(r)\n        );",
      "raw_prediction": "wrapped.start(cmd),\n                r -> new SearchResultsWrapper(r)\n        );\n    }\n\n    @LuaWhitelist\n    public CompletableFutureWrapper<SearchResults, SearchResultsWrapper> start(Function<String, String> cmd) {\n        return new CompletableFuture",
      "es": 0.6373626373626373,
      "em": false,
      "passed": false
    },
    {
      "index": 144,
      "groundtruth": "DependencyParser.parseDependencyTreeOutput(path);",
      "prediction": "DependencyParser.parseDependencies(path);",
      "raw_prediction": "DependencyParser.parseDependencies(path);",
      "es": 0.7959183673469388,
      "em": false,
      "passed": false
    },
    {
      "index": 145,
      "groundtruth": "(!noticeContents.getNoticeModuleName().equals(moduleName)) {",
      "prediction": "(!noticeContents.getNoticeModuleName().equals(moduleName))",
      "raw_prediction": "(!noticeContents.getNoticeModuleName().equals(moduleName)) {",
      "es": 0.9666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 146,
      "groundtruth": "+ dependency.getClassifier().orElse(\"(no-classifier)\");",
      "prediction": "+ dependency.getClassifier();",
      "raw_prediction": " + dependency.getClassifier();\n    }\n\n    public static DependencyTree from(List<Dependency> dependencies) {\n        final DependencyTree tree = new DependencyTree();\n\n        dependencies.forEach(tree::addDirectDependency);\n\n        return tree;",
      "es": 0.5272727272727273,
      "em": false,
      "passed": false
    },
    {
      "index": 147,
      "groundtruth": "final Set<String> deployedModules = DeployParser.parseDeployOutput(buildResult);",
      "prediction": "// parse deployed modules from build output",
      "raw_prediction": " // parse deployed modules from build output\n        final Set<String> deployedModules = DeployParser.parseDeployOutput(buildResult.toPath());\n\n        // parse NOTICE contents from existing NOTICE files\n        final Map<String, Optional<NoticeContents>> moduleTo",
      "es": 0.3125,
      "em": false,
      "passed": false
    },
    {
      "index": 148,
      "groundtruth": "= isExcluded(dependency.getArtifactId());",
      "prediction": "= EXCLUDED_MODULES.stream().anyMatch(moduleName::contains);",
      "raw_prediction": "= EXCLUDED_MODULES.stream().anyMatch(moduleName::contains);\n\n                if (dependsOnScala && !isTestDependency && !isExcluded) {\n                    LOG.trace(\"\\tOutbreak detected at {}!\", moduleName);\n                    infected = true",
      "es": 0.1694915254237288,
      "em": false,
      "passed": false
    },
    {
      "index": 149,
      "groundtruth": "wrapped.stop();",
      "prediction": "wrapped.stop();",
      "raw_prediction": "    wrapped.stop();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 150,
      "groundtruth": "declaredDependency : noticeContents.getDeclaredDependencies()) {",
      "prediction": "declaredDependency : noticeContent",
      "raw_prediction": "declaredDependency : noticeContents.getNoticeDependencies()) {",
      "es": 0.53125,
      "em": false,
      "passed": false
    },
    {
      "index": 151,
      "groundtruth": "of(Dependency.create(groupId, artifactId, version, classifier));",
      "prediction": "of(Dependency.builder().groupId(groupId).artifactId(artifactId).version(version).classifier(clas",
      "raw_prediction": "of(Dependency.builder().groupId(groupId).artifactId(artifactId).version(version).classifier(classifier).build());",
      "es": 0.5208333333333333,
      "em": false,
      "passed": false
    },
    {
      "index": 152,
      "groundtruth": "(dependency.getArtifactId()).find();",
      "prediction": "(dependency.getArtifactId()).matches();",
      "raw_prediction": "(dependency.getArtifactId()).matches();\n    }\n\n    private static boolean isExcluded(final String artifactId) {\n        return EXCLUDED_MODULES.stream().anyMatch(artifactId::contains);",
      "es": 0.8205128205128205,
      "em": false,
      "passed": false
    },
    {
      "index": 153,
      "groundtruth": "NoticeParser.parseNoticeFile(noticeFile);",
      "prediction": "Optional.of(NoticeParser.parseNoticeFile(noticeFile));",
      "raw_prediction": "Optional.of(NoticeParser.parseNoticeFile(noticeFile));",
      "es": 0.7592592592592593,
      "em": false,
      "passed": false
    },
    {
      "index": 154,
      "groundtruth": ".get(module).flatten().collect(Collectors.toList());",
      "prediction": ".get(module).getDependencies();",
      "raw_prediction": ".get(module).getDependencies();",
      "es": 0.40384615384615385,
      "em": false,
      "passed": false
    },
    {
      "index": 155,
      "groundtruth": "return ParserUtils.parsePluginOutput(\n                lines.filter(line -> !line.contains(\" Excluding \")),\n                SHADE_NEXT_MODULE_PATTERN,\n                ShadeParser::parseBlock);",
      "prediction": "final Map<String, Set<Dependency>> result = ParserUtils.newMap();",
      "raw_prediction": "final Map<String, Set<Dependency>> result = ParserUtils.newMap();\n\n        Iterator<String> lines = lines.iterator();\n        String nextLine = null;\n        while (lines.hasNext()) {\n            nextLine = lines.next();\n\n            // Find",
      "es": 0.13089005235602091,
      "em": false,
      "passed": false
    },
    {
      "index": 156,
      "groundtruth": "(policyCtx.getName(), policyCtx.getLabel());",
      "prediction": "(policyCtx.getName(), policyCtx.getLabel());",
      "raw_prediction": "(policyCtx.getName(), policyCtx.getLabel());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 157,
      "groundtruth": "identityContext.getIdentityType());",
      "prediction": "identityContext.getType());",
      "raw_prediction": "identityContext.getType());",
      "es": 0.7714285714285715,
      "em": false,
      "passed": false
    },
    {
      "index": 158,
      "groundtruth": "PolicyInstance policy = buildPolicy(policyContext.getName(), policyContext.getLabel());",
      "prediction": "PolicyInstance policy = buildPolicy(policyCtx.getName(), policyCtx.getLabel());",
      "raw_prediction": "PolicyInstance policy = buildPolicy(policyCtx.getName(), policyCtx.getLabel());",
      "es": 0.9080459770114943,
      "em": false,
      "passed": false
    },
    {
      "index": 159,
      "groundtruth": "configIntermediary.updateConfigByObject(className, configObjString);",
      "prediction": "ConfigSupport configByObject = configIntermediary.getConfigByObject(className);",
      "raw_prediction": "ConfigSupport configByObject = configIntermediary.getConfigByObject(className);\n        configByObject.update(configObjString);\n        responseWriter(response, true);\n    }\n\n    public void doDelete(HttpServletRequest request, HttpServletResponse response) throws IOException {\n       ",
      "es": 0.3291139240506329,
      "em": false,
      "passed": false
    },
    {
      "index": 160,
      "groundtruth": "gitClient.listTags();",
      "prediction": "gitClient.getAllTags();",
      "raw_prediction": "gitClient.getAllTags();",
      "es": 0.7391304347826086,
      "em": false,
      "passed": false
    },
    {
      "index": 161,
      "groundtruth": "gitClient.commitChangelogTagAndPush(tagName);",
      "prediction": "gitClient.commitAndPushChanges(tagName);",
      "raw_prediction": "gitClient.commitAndPushChanges(tagName);",
      "es": 0.6444444444444444,
      "em": false,
      "passed": false
    },
    {
      "index": 162,
      "groundtruth": "> issueKeys = gitClient.getAllIssuesSinceLastTag();",
      "prediction": "> issueKeys = gitClient.getIssuesWithinTag(tags.get(tags.size()-1));",
      "raw_prediction": "> issueKeys = gitClient.getIssuesWithinTag(tags.get(tags.size()-1));",
      "es": 0.5882352941176471,
      "em": false,
      "passed": false
    },
    {
      "index": 163,
      "groundtruth": ".generateChangelogFromExisting(gitClient.getWorkingDir(), tagName, jiraIssues);",
      "prediction": ".generateChangelogFile(gitClient, tagName, jiraIssues);",
      "raw_prediction": ".generateChangelogFile(gitClient, tagName, jiraIssues);",
      "es": 0.6708860759493671,
      "em": false,
      "passed": false
    },
    {
      "index": 164,
      "groundtruth": "ConfigPlus config = new ConfigPlus(configCategory, configCode, TypeJudgmentUtil.toJsonString(configValue));",
      "prediction": "ConfigPlus config = new ConfigPlus(configCategory, configCode, configValue);",
      "raw_prediction": " ConfigPlus config = new ConfigPlus(configCategory, configCode, configValue);",
      "es": 0.7102803738317758,
      "em": false,
      "passed": false
    },
    {
      "index": 165,
      "groundtruth": "Config(configCategory, configCode, TypeJudgmentUtil.toJsonString(configValue));",
      "prediction": "Config(configCategory, configCode, configValue);",
      "raw_prediction": "Config(configCategory, configCode, configValue);",
      "es": 0.6075949367088608,
      "em": false,
      "passed": false
    },
    {
      "index": 166,
      "groundtruth": "replaceAll(configIntermediary.getRequestMapping() + \"get\", \"\");",
      "prediction": "replaceAll(configIntermediary.getRequestMapping() + \"get\", \"\");",
      "raw_prediction": "replaceAll(configIntermediary.getRequestMapping() + \"get\", \"\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 167,
      "groundtruth": "> issueKeys = gitClient.getIssuesWithinTag(tagName);",
      "prediction": "> issueKeys = gitClient.getIssuesWithinTag(tagName);",
      "raw_prediction": "> issueKeys = gitClient.getIssuesWithinTag(tagName);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 168,
      "groundtruth": "<Issue> jiraIssues = jiraClient.getIssueList(jiraIssueKeys);",
      "prediction": "<Issue> jiraIssues = jiraClient.getIssues(jiraIssueKeys);",
      "raw_prediction": "<Issue> jiraIssues = jiraClient.getIssues(jiraIssueKeys);",
      "es": 0.95,
      "em": false,
      "passed": false
    },
    {
      "index": 169,
      "groundtruth": "withRegion(null != config.getAwsRegionName() ? config.getAwsRegionName() : Constants.DEFAULT_AWS_REGION_NAME)\n                .withClientConfiguration(configuration)\n                .build();",
      "prediction": "withEndpointOverride(config.getEndpoint())\n                .withClientConfiguration(configuration)\n                .build();",
      "raw_prediction": "withEndpointOverride(config.getEndpoint())\n                .withClientConfiguration(configuration)\n                .build();",
      "es": 0.5654450261780104,
      "em": false,
      "passed": false
    },
    {
      "index": 170,
      "groundtruth": "writer.closeQuietly();",
      "prediction": "log.warn(\"Failed to write {} records. Retryi",
      "raw_prediction": "log.warn(\"Failed to write {} records. Retrying...\", recordsCount);\n            remainingRetries--;",
      "es": 0.18181818181818177,
      "em": false,
      "passed": false
    },
    {
      "index": 171,
      "groundtruth": "(config.getMaxRetries());",
      "prediction": "(config.getMaxErrorRetry());",
      "raw_prediction": "(config.getMaxErrorRetry());\n        configuration.setSocketTimeout(config.getSocketTimeout());",
      "es": 0.7142857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 172,
      "groundtruth": "!= config.getAwsRegionName() ? config.getAwsRegionName() : Constants.DEFAULT_AWS_REGION_NAME)\n                .withClientConfiguration(configuration)\n                .build();",
      "prediction": "== config.getRegion() ? Constants.AWS_REGION : config.getRegion())\n                .withClientConfiguration(configuration)\n                .build();",
      "raw_prediction": "== config.getRegion() ? Constants.AWS_REGION : config.getRegion())\n                .withClientConfiguration(configuration)\n                .build();",
      "es": 0.6685714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 173,
      "groundtruth": "\"chat\", token.chat().id())\n      .fetch()\n      .first()\n      .then();",
      "prediction": "\"chat\", token.chat())\n      .fetch()\n      .rowsUpdated();",
      "raw_prediction": "\"chat\", token.chat())\n      .fetch()\n      .rowsUpdated();\n  }\n\n  @Override\n  public Mono<Token> get(final String token) {\n    return this.db.sql(\n        \"SELECT token, alias, chat FROM token",
      "es": 0.704225352112676,
      "em": false,
      "passed": false
    },
    {
      "index": 174,
      "groundtruth": "methodLog.setStartTime(startTime);",
      "prediction": "methodLog.setTimeConsuming(timeConsuming);",
      "raw_prediction": "methodLog.setTimeConsuming(timeConsuming);\n        methodLog.setMethodName(methodName);\n        methodLog.setAllParams(args);\n        methodLog.setResult(returning);\n        methodLog.setIpAddress(ipAddress);\n        methodLog.setExceptionInfo(exceptionInfo",
      "es": 0.4285714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 175,
      "groundtruth": "methodLog.setOperator(\"system\");",
      "prediction": "methodLog.setOperator(\"unknown\");",
      "raw_prediction": " methodLog.setOperator(\"unknown\");",
      "es": 0.7878787878787878,
      "em": false,
      "passed": false
    },
    {
      "index": 176,
      "groundtruth": ".bind(\"id\", chat.id())\n      .fetch()\n      .first()\n      .then();",
      "prediction": ".bind(\"id\", chat.id())\n      .fetch()\n      .rowsUpdated();",
      "raw_prediction": ".bind(\"id\", chat.id())\n      .fetch()\n      .rowsUpdated();\n  }\n\n  @Override\n  public Mono<Chat> getById(final String id) {\n    return this.db.sql(\n        \"SELECT id FROM chat WHERE",
      "es": 0.7611940298507462,
      "em": false,
      "passed": false
    },
    {
      "index": 177,
      "groundtruth": "methodLog.setMethodName(methodName);",
      "prediction": "methodLog.setArgs(args);",
      "raw_prediction": "methodLog.setArgs(args);",
      "es": 0.4444444444444444,
      "em": false,
      "passed": false
    },
    {
      "index": 178,
      "groundtruth": "methodLog.setAllParams(args);",
      "prediction": "methodLog.setArgs(args);",
      "raw_prediction": "methodLog.setArgs(args);",
      "es": 0.7931034482758621,
      "em": false,
      "passed": false
    },
    {
      "index": 179,
      "groundtruth": "methodLog.setCreateTime(startTime);",
      "prediction": "methodLog.setMethods(methods);",
      "raw_prediction": "methodLog.setMethods(methods);\n        methodLog.setModule(module);\n        if (StringUtils.isNotEmpty(url)) {\n            methodLog.setUrl(url);\n        } else {\n            methodLog.setUrl(request.getRequestURI());\n        }\n        String logOperator",
      "es": 0.5428571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 180,
      "groundtruth": "methodLog.setTimeConsuming(timeConsuming);",
      "prediction": "methodLog.setDuration(timeConsuming);",
      "raw_prediction": "methodLog.setDuration(timeConsuming);",
      "es": 0.7142857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 181,
      "groundtruth": "methodLog.setExceptionInfo(exceptionInfo);",
      "prediction": "methodLog.setException(exceptionInfo);",
      "raw_prediction": "methodLog.setException(exceptionInfo);",
      "es": 0.9047619047619048,
      "em": false,
      "passed": false
    },
    {
      "index": 182,
      "groundtruth": "methodLog.setIpAddress(ipAddress);",
      "prediction": "methodLog.setIp(ipAddress);",
      "raw_prediction": "methodLog.setIp(ipAddress);",
      "es": 0.7941176470588236,
      "em": false,
      "passed": false
    },
    {
      "index": 183,
      "groundtruth": "methodLog.setResult(returning);",
      "prediction": "methodLog.setReturning(returning);",
      "raw_prediction": "methodLog.setReturning(returning);",
      "es": 0.8235294117647058,
      "em": false,
      "passed": false
    },
    {
      "index": 184,
      "groundtruth": "methodLog.setDesc(finishedDesc);",
      "prediction": "methodLog.setFinishedDesc(finishedDesc);",
      "raw_prediction": "methodLog.setFinishedDesc(finishedDesc);",
      "es": 0.8,
      "em": false,
      "passed": false
    },
    {
      "index": 185,
      "groundtruth": "methodLog.setEndTime(endTime);",
      "prediction": "methodLog.setEndTime(endTime);",
      "raw_prediction": "methodLog.setEndTime(endTime);\n        methodLog.setEndTime(endTime);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 186,
      "groundtruth": "movimentacaoRepository.findByVeiculoId(id).isEmpty()){",
      "prediction": "movimentacaoRepository.exists",
      "raw_prediction": "movimentacaoRepository.existsByCondutorId(id)){\n            /*\n             * Se o Condutor n\u00e3o tiver movimenta\u00e7\u00f5es, apenas desativa-o\n             * */\n            condutorBanco.setAtivo(false);\n            this.condutor",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 187,
      "groundtruth": ".marcaRepository.findByNome(nome));",
      "prediction": ".marcaRepository.findByNome(nome));",
      "raw_prediction": ".marcaRepository.findByNome(nome));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 188,
      "groundtruth": "return ResponseEntity.ok(condutorRepository.findAllAtivo());",
      "prediction": "return ResponseEntity.ok(",
      "raw_prediction": "return ResponseEntity.ok(\n            this.condutorRepository.findAllByAtivoTrue()\n        );",
      "es": 0.41666666666666663,
      "em": false,
      "passed": false
    },
    {
      "index": 189,
      "groundtruth": "marcaService.validarDeleteMarca(id);",
      "prediction": "marcaService.validarExclusaoMarca(id);",
      "raw_prediction": "marcaService.validarExclusaoMarca(id);",
      "es": 0.8157894736842105,
      "em": false,
      "passed": false
    },
    {
      "index": 190,
      "groundtruth": "<Veiculo> veiculoList = veiculoRepository.findAllAtivo();",
      "prediction": "<Veiculo> veiculoList = this.veiculoRepository.findVeiculosAtivos();",
      "raw_prediction": "<Veiculo> veiculoList = this.veiculoRepository.findVeiculosAtivos();\n",
      "es": 0.8088235294117647,
      "em": false,
      "passed": false
    },
    {
      "index": 191,
      "groundtruth": "= this.veiculoRepository.findByPlaca(placa);",
      "prediction": "= veiculoRepository.findByPlaca(placa);",
      "raw_prediction": "= veiculoRepository.findByPlaca(placa);",
      "es": 0.8863636363636364,
      "em": false,
      "passed": false
    },
    {
      "index": 192,
      "groundtruth": "!this.movimentacaoRepository.findByVeiculoId(id).isEmpty()) {",
      "prediction": "veiculo.getAtivo()) {",
      "raw_prediction": "veiculo.getAtivo()) {",
      "es": 0.21311475409836067,
      "em": false,
      "passed": false
    },
    {
      "index": 193,
      "groundtruth": "Condutor condutor = this.condutorRepository.findbyCPF(cpf);",
      "prediction": "Condutor condutor = this.condutorRepository.findByCpf(cpf);",
      "raw_prediction": "Condutor condutor = this.condutorRepository.findByCpf(cpf);",
      "es": 0.9491525423728814,
      "em": false,
      "passed": false
    },
    {
      "index": 194,
      "groundtruth": "(!this.modeloRepository.findByMarcaId(id).isEmpty()){",
      "prediction": "(marca.isAtivo()){",
      "raw_prediction": "(marca.isAtivo()){",
      "es": 0.24528301886792447,
      "em": false,
      "passed": false
    },
    {
      "index": 195,
      "groundtruth": "veiculoService.validarDeleteVeiculo(id);",
      "prediction": "this.veiculoService.deleteVeiculo(id);",
      "raw_prediction": "this.veiculoService.deleteVeiculo(id);",
      "es": 0.7,
      "em": false,
      "passed": false
    },
    {
      "index": 196,
      "groundtruth": "modeloService.validarDeleteModelo(id);",
      "prediction": "if (!veiculoRepository.existsByModeloId(id))",
      "raw_prediction": "if (!veiculoRepository.existsByModeloId(id)) {\n                modeloRepository.deleteById(id);\n                return ResponseEntity.ok(\"Registro apagado com sucesso\");\n            } else {\n                return ResponseEntity.badRequest().body(\"N\u00e3o \u00e9 poss\u00edvel excluir",
      "es": 0.31818181818181823,
      "em": false,
      "passed": false
    },
    {
      "index": 197,
      "groundtruth": "condutor = this.condutorRepository.findByNome(nome);",
      "prediction": "condutor = this.condutorRepository.findbyNome(nome);",
      "raw_prediction": "condutor = this.condutorRepository.findbyNome(nome);",
      "es": 0.9807692307692307,
      "em": false,
      "passed": false
    },
    {
      "index": 198,
      "groundtruth": "= movimentacaoRepository.findLastFiveByOrderByEntryDateDesc();",
      "prediction": "= movimentacaoRepository.findLastFive();",
      "raw_prediction": "= movimentacaoRepository.findLastFive();",
      "es": 0.6451612903225806,
      "em": false,
      "passed": false
    },
    {
      "index": 199,
      "groundtruth": ".ok(movimentacaoRepository.ultimaMovimentacao());",
      "prediction": ".ok(movimentacaoRepository.findLast());",
      "raw_prediction": ".ok(movimentacaoRepository.findLast());",
      "es": 0.6734693877551021,
      "em": false,
      "passed": false
    },
    {
      "index": 200,
      "groundtruth": "ok(marcaRepository.findAllAtivo());",
      "prediction": "ok(this.marcaRepository.findMarcasAtivos());",
      "raw_prediction": "ok(this.marcaRepository.findMarcasAtivos());",
      "es": 0.7272727272727273,
      "em": false,
      "passed": false
    },
    {
      "index": 201,
      "groundtruth": "<Movimentacao> movimentacoes = movimentacaoRepository.findMovimentacoesAbertasByPlaca(placa);",
      "prediction": "<Movimentacao> movimentacoes = movimentacaoRepository.findByPlaca(placa);",
      "raw_prediction": "<Movimentacao> movimentacoes = movimentacaoRepository.findByPlaca(placa);",
      "es": 0.7849462365591398,
      "em": false,
      "passed": false
    },
    {
      "index": 202,
      "groundtruth": ".ok(this.modeloRepository.findByNome(nome));",
      "prediction": ".ok(modeloRepository.findByNomeMarca(nome));",
      "raw_prediction": ".ok(modeloRepository.findByNomeMarca(nome));",
      "es": 0.7727272727272727,
      "em": false,
      "passed": false
    },
    {
      "index": 203,
      "groundtruth": "> modeloList = modeloRepository.findAllAtivo();",
      "prediction": "> modeloList = this.modeloRepository.findModelosAtivos();",
      "raw_prediction": "> modeloList = this.modeloRepository.findModelosAtivos();",
      "es": 0.7894736842105263,
      "em": false,
      "passed": false
    },
    {
      "index": 204,
      "groundtruth": ".ok(configuracaoRepository.ultimaConfiguracao());",
      "prediction": ".ok(configuracaoRepository.findLast());",
      "raw_prediction": ".ok(configuracaoRepository.findLast());",
      "es": 0.6938775510204082,
      "em": false,
      "passed": false
    },
    {
      "index": 205,
      "groundtruth": "Movimentacao> movimentacoes = movimentacaoRepository.findAllAbertas();",
      "prediction": "Movimentacao> movimentacoes = movimentacaoRepository.findAllAbertas();",
      "raw_prediction": "Movimentacao> movimentacoes = movimentacaoRepository.findAllAbertas();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 206,
      "groundtruth": "if (!this.modeloRepository.findByMarcaId(id).isEmpty()) {",
      "prediction": "if (modelo.getVeiculos() != null && !modelo.getVeiculos().isEmpty())",
      "raw_prediction": "if (modelo.getVeiculos() != null && !modelo.getVeiculos().isEmpty()) {\n            throw new IllegalArgumentException(\"This model has vehicles associated with it. Please delete the vehicles first.\");\n        }\n\n        if (veiculoRepository.existsBy",
      "es": 0.2941176470588235,
      "em": false,
      "passed": false
    },
    {
      "index": 207,
      "groundtruth": "= marcaRepository.findActiveElement(marcaId);",
      "prediction": "= this.marcaRepository.findByAtivo(true);",
      "raw_prediction": "= this.marcaRepository.findByAtivo(true);\n        Assert.isTrue(!isActive.isEmpty(), \"The brand associated with this model is inactive.\");\n    }\n\n    /**\n     * Validates if the marca associated with the modelo is active.\n     *\n     *",
      "es": 0.5111111111111111,
      "em": false,
      "passed": false
    },
    {
      "index": 208,
      "groundtruth": "movimentacaoService.validarDeleteMovimentacao(id);",
      "prediction": "movimentacaoService.excluirMovimentacao(id);",
      "raw_prediction": "movimentacaoService.excluirMovimentacao(id);",
      "es": 0.76,
      "em": false,
      "passed": false
    },
    {
      "index": 209,
      "groundtruth": "<Boolean>newResult().data(dao.deleteComposition(composerId, title)).build();",
      "prediction": "newResult().data(true).build();",
      "raw_prediction": "newResult().data(true).build();",
      "es": 0.39473684210526316,
      "em": false,
      "passed": false
    },
    {
      "index": 210,
      "groundtruth": "(dao.allComposers()).detect(c -> id == c.id());",
      "prediction": "(dao.findComposerById(id)).first();",
      "raw_prediction": "(dao.findComposerById(id)).first();\n    }\n\n    @QueryMapping\n    public List<Composer> allComposers()\n    {\n        return Lists.adapt(dao.allComposers());",
      "es": 0.4042553191489362,
      "em": false,
      "passed": false
    },
    {
      "index": 211,
      "groundtruth": "(Lists.adapt(dao.allComposers()));",
      "prediction": "(Lists.adapt(dao.allComposers()));",
      "raw_prediction": "(Lists.adapt(dao.allComposers()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 212,
      "groundtruth": "symbolNum = lsbBitReader.readBit() + 1;",
      "prediction": "symbolNum = lsbBitReader.readBits(2);",
      "raw_prediction": "symbolNum = lsbBitReader.readBits(2);\n            short symbol0 = (short) lsbBitReader.readBits(8);\n",
      "es": 0.8461538461538461,
      "em": false,
      "passed": false
    },
    {
      "index": 213,
      "groundtruth": "int) (2 + 2 * lsbBitReader.readBits(3));",
      "prediction": "int) (lsbBitReader.readBits(4) + 4);",
      "raw_prediction": "int) (lsbBitReader.readBits(4) + 4);",
      "es": 0.675,
      "em": false,
      "passed": false
    },
    {
      "index": 214,
      "groundtruth": "short len = (short) lsbBitReader.readBits(3);",
      "prediction": "short len = (short) lsbBitReader.readBits(4);",
      "raw_prediction": " short len = (short) lsbBitReader.readBits(4);",
      "es": 0.9777777777777777,
      "em": false,
      "passed": false
    },
    {
      "index": 215,
      "groundtruth": "lsbBitReader.readBits(length);",
      "prediction": "lsbBitReader.readBits(length);",
      "raw_prediction": "lsbBitReader.readBits(length);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 216,
      "groundtruth": "int) (lsbBitReader.readBits(4) + 4);",
      "prediction": "int) (lsbBitReader.readBits(5) + 1); // 5 bits for number of L-Code leng",
      "raw_prediction": "int) (lsbBitReader.readBits(5) + 1); // 5 bits for number of L-Code lengths\n            // Read L-Code lengths\n            // Note: The L-Code is not actually a",
      "es": 0.4722222222222222,
      "em": false,
      "passed": false
    },
    {
      "index": 217,
      "groundtruth": "lsbBitReader.readBits(LEVEL1_BITS);",
      "prediction": "index = lengthAndSymbol & 0xffff;",
      "raw_prediction": "index = lengthAndSymbol & 0xffff;",
      "es": 0.05714285714285716,
      "em": false,
      "passed": false
    },
    {
      "index": 218,
      "groundtruth": "short symbol2 = (short) lsbBitReader.readBits(8);",
      "prediction": "short symbol2 = (short) lsbBitReader.readBits(first8Bits ? 8 : 1);",
      "raw_prediction": "short symbol2 = (short) lsbBitReader.readBits(first8Bits ? 8 : 1);",
      "es": 0.7424242424242424,
      "em": false,
      "passed": false
    },
    {
      "index": 219,
      "groundtruth": "(int) (lsbBitReader.readBits(extraBits) + repeatOffset);",
      "prediction": "lsbBitReader.readBits(extraBits) + repeatOffset;",
      "raw_prediction": "lsbBitReader.readBits(extraBits) + repeatOffset;",
      "es": 0.8571428571428572,
      "em": false,
      "passed": false
    },
    {
      "index": 220,
      "groundtruth": "simpleLengthCode = lsbBitReader.readBit() == 1;",
      "prediction": "simpleLengthCode = lsbBitReader.readBit() == 1;",
      "raw_prediction": "simpleLengthCode = lsbBitReader.readBit() == 1;\n\n        if (simpleLengthCode) {\n            int symbolNum = lsbBitReader.readBit() + 1;\n            boolean first8Bits = lsbBit",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 221,
      "groundtruth": "level2Index = (int) lsbBitReader.peekBits(length - LEVEL1_BITS);",
      "prediction": "level2Index = lengthAndSymbol & 0xffff;",
      "raw_prediction": "level2Index = lengthAndSymbol & 0xffff;",
      "es": 0.328125,
      "em": false,
      "passed": false
    },
    {
      "index": 222,
      "groundtruth": "short symbol1 = (short) lsbBitReader.readBits(first8Bits ? 8 : 1);",
      "prediction": "short symbol1 = (short) lsbBitReader.readBits(8);",
      "raw_prediction": " short symbol1 = (short) lsbBitReader.readBits(8);\n\n            if (first8Bits) {\n                Arrays.fill(level1, symbol1);\n            } else {\n                for (int i = 0; i <",
      "es": 0.7424242424242424,
      "em": false,
      "passed": false
    },
    {
      "index": 223,
      "groundtruth": ") lsbBitReader.peekBits(LEVEL1_BITS);",
      "prediction": ") lsbBitReader.peekBits(LEVEL1_BITS); // Peek bits of first level",
      "raw_prediction": ") lsbBitReader.peekBits(LEVEL1_BITS); // Peek bits of first level\n        lsbBitReader.readBits(LEVEL1_BITS); // Consume bits of first level\n        lsbBitReader.readBits(LEVEL",
      "es": 0.5692307692307692,
      "em": false,
      "passed": false
    },
    {
      "index": 224,
      "groundtruth": "data.getDataElements(x >> bits, y >> bits, rgba);",
      "prediction": "data.getDataElements(x, y, rgba);",
      "raw_prediction": " data.getDataElements(x, y, rgba);\n",
      "es": 0.6734693877551021,
      "em": false,
      "passed": false
    },
    {
      "index": 225,
      "groundtruth": "int) (2 + lsbBitReader.readBits(maxSymbolBitLength));",
      "prediction": "int) (lsbBitReader.readBits(maxSymbolBitLength) + 1);",
      "raw_prediction": "int) (lsbBitReader.readBits(maxSymbolBitLength) + 1);",
      "es": 0.8490566037735849,
      "em": false,
      "passed": false
    },
    {
      "index": 226,
      "groundtruth": "ReplayManager.getInstance().despawnPlayerClone(this);",
      "prediction": "ReplayManager.getInstance().removePlayerClone(this);",
      "raw_prediction": " ReplayManager.getInstance().removePlayerClone(this);\n        }\n    }\n\n    public void restoreGamemode() {\n        if (this.lastGamemode != GameMode.UNKNOWN.ordinal()) {",
      "es": 0.8867924528301887,
      "em": false,
      "passed": false
    },
    {
      "index": 227,
      "groundtruth": "raster.setDataElements(x, 0, rgba);",
      "prediction": "raster.setDataElements(x, 0, rgba);",
      "raw_prediction": "raster.setDataElements(x, 0, rgba);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 228,
      "groundtruth": "Live.getInstance().requestLiveToken(\n                (deviceCode, userCode, verificationUrl, expiresIn, interval) -> {",
      "prediction": "Live.live(\n                (verificationUrl, userCode) -> {",
      "raw_prediction": "Live.live(\n                (verificationUrl, userCode) -> {",
      "es": 0.44067796610169496,
      "em": false,
      "passed": false
    },
    {
      "index": 229,
      "groundtruth": "String data = FileManager.getFileResourceAsString(\"bedrock-data/required_item_list.json\");",
      "prediction": "String data = FileManager.readFileAsString(\"bedrock-data/item_entries.json\");",
      "raw_prediction": "String data = FileManager.readFileAsString(\"bedrock-data/item_entries.json\");",
      "es": 0.7333333333333334,
      "em": false,
      "passed": false
    },
    {
      "index": 230,
      "groundtruth": "raster.getDataElements(0, 0, rgba);",
      "prediction": "raster.getDataElements(0, 0, rgba);",
      "raw_prediction": "raster.getDataElements(0, 0, rgba);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 231,
      "groundtruth": "raster.setDataElements(0, 0, rgba);",
      "prediction": "raster.setDataElements(0, 0, rgba);",
      "raw_prediction": "raster.setDataElements(0, 0, rgba);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 232,
      "groundtruth": "ReplayManager.getInstance().spawnPlayerClone(this);",
      "prediction": "ReplayManager.getInstance().spawnPlayerClone(this);",
      "raw_prediction": "ReplayManager.getInstance().spawnPlayerClone(this);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 233,
      "groundtruth": "OutputWindow.print(\"Proxy server Listening on \" + bindAddress);",
      "prediction": "OutputWindow.print(\"Proxy server Listening on \" + bindAddress)",
      "raw_prediction": " OutputWindow.print(\"Proxy server Listening on \" + bindAddress);        OutputWindow.print(\"Loading Replay Viewer server...\");",
      "es": 0.9841269841269842,
      "em": false,
      "passed": false
    },
    {
      "index": 234,
      "groundtruth": "proxyServer.start();",
      "prediction": "proxyServer.start();",
      "raw_prediction": " proxyServer.start();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 235,
      "groundtruth": "OutputWindow.print(\"Successfully loaded your account!\");",
      "prediction": "String encrypted = FileManager.getFileContents(\".account\");",
      "raw_prediction": "    String encrypted = FileManager.getFileContents(\".account\");\n                    JSONObject json = AccountManager.decrypt(encrypted);\n                    String accessToken = json.getString(\"access_token\");\n                    String refreshToken = json.getString(\"refresh_token\");\n\n                    Live.getInstance().setAccessToken(accessToken",
      "es": 0.22033898305084743,
      "em": false,
      "passed": false
    },
    {
      "index": 236,
      "groundtruth": "OutputWindow.print(\"Done (took \" + (System.currentTimeMillis() / 1000L - startTime) + \"s)!\");",
      "prediction": "OutputWindow.print(\"BedrockReplay started successfully in \" + (System.currentTimeMillis() / 1000L - startTime) + \" seconds.\");",
      "raw_prediction": "OutputWindow.print(\"BedrockReplay started successfully in \" + (System.currentTimeMillis() / 1000L - startTime) + \" seconds.\");\n        OutputWindow.print(\"You can now start playing Bedrock and replay your sessions later",
      "es": 0.6746031746031746,
      "em": false,
      "passed": false
    },
    {
      "index": 237,
      "groundtruth": "raster.getSample(xC, y, 1);",
      "prediction": "raster.getDataElement(x, y);",
      "raw_prediction": "raster.getDataElement(x, y);               ",
      "es": 0.6071428571428572,
      "em": false,
      "passed": false
    },
    {
      "index": 238,
      "groundtruth": "callback.onComplete(accessToken, refreshToken);",
      "prediction": "callback.onComplete(accessToken, refreshToken);",
      "raw_prediction": " callback.onComplete(accessToken, refreshToken);\n\n                    timer.cancel();\n                 } catch (Exception e) {\n                     System.out.println(e.getMessage());\n                     }",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 239,
      "groundtruth": "raster.getDataElements(x, 0, rgba);",
      "prediction": "raster.getDataElements(x, 0, rgba);",
      "raw_prediction": "    raster.getDataElements(x, 0, rgba);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 240,
      "groundtruth": "raster.getDataElements(x - 1, 0, predictor);",
      "prediction": "raster.getDataElements(x - 1, 0, predictor);",
      "raw_prediction": "raster.getDataElements(x - 1, 0, predictor);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 241,
      "groundtruth": "FileManager.getFileContents(connection.getInputStream());",
      "prediction": "FileManager.getFileContents(connection.getInputStream());",
      "raw_prediction": "FileManager.getFileContents(connection.getInputStream());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 242,
      "groundtruth": "OutputWindow.print(\"Failed to load your account, please authenticate with your Microsoft account again.\");",
      "prediction": "startAuth();",
      "raw_prediction": " startAuth();\n            }\n        } else if (AccountManager.isAccountEncrypted()) {\n            try {\n                String encrypted = FileManager.getFileContents(\".account\");\n                JSONObject json = JSONObject.parseObject(AccountManager.decrypt(encrypted));\n                String accessToken =",
      "es": 0.08490566037735847,
      "em": false,
      "passed": false
    },
    {
      "index": 243,
      "groundtruth": "Utils.toByteArray(currentTime));",
      "prediction": "Utils.toByteArray(currentTime));",
      "raw_prediction": "Utils.toByteArray(currentTime));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 244,
      "groundtruth": "OutputWindow.print(\"First time running BedrockReplay, please authenticate with your Microsoft account first.\");",
      "prediction": "OutputWindow.print(\"No account found, please authenticate with your Microsoft account.\");",
      "raw_prediction": " OutputWindow.print(\"No account found, please authenticate with your Microsoft account.\");",
      "es": 0.7027027027027026,
      "em": false,
      "passed": false
    },
    {
      "index": 245,
      "groundtruth": "return FileManager.getFileContents(connection.getInputStream());",
      "prediction": "String response = FileManager.getFileContents(connection.getInputStream());",
      "raw_prediction": "String response = FileManager.getFileContents(connection.getInputStream());\n        JSONObject responseJsonObject = JSONObject.parseObject(response);\n\n        return responseJsonObject.getString(\"chain\");",
      "es": 0.8133333333333334,
      "em": false,
      "passed": false
    },
    {
      "index": 246,
      "groundtruth": "callback.onFailure(\"Failed to save replay: \" + e.getMessage());",
      "prediction": "callback.onFailure(\"Failed to save replay: \" + e.getMessage());",
      "raw_prediction": " callback.onFailure(\"Failed to save replay: \" + e.getMessage());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 247,
      "groundtruth": "int transformType = data.getSample(x >> bits, y >> bits, 1);",
      "prediction": "int transformType = data.getPixel(x, y);",
      "raw_prediction": "int transformType = data.getPixel(x, y);",
      "es": 0.6,
      "em": false,
      "passed": false
    },
    {
      "index": 248,
      "groundtruth": "= xbox.getDeviceToken((ECPublicKey) this.keyPair.getPublic(), (ECPrivateKey) this.keyPair.getPrivate());",
      "prediction": "= xbox.getDeviceToken();",
      "raw_prediction": "= xbox.getDeviceToken();",
      "es": 0.23076923076923073,
      "em": false,
      "passed": false
    },
    {
      "index": 249,
      "groundtruth": "xbox.requestMinecraftChain(xsts, (ECPublicKey) this.keyPair.getPublic());",
      "prediction": "EncryptionUtils.createChainData(this.keyPair, xsts, deviceToken, \"https://login.live.com/oauth20/authorize?cl",
      "raw_prediction": "EncryptionUtils.createChainData(this.keyPair, xsts, deviceToken, \"https://login.live.com/oauth20/authorize?client_id=00000000482b5793&response",
      "es": 0.23853211009174313,
      "em": false,
      "passed": false
    },
    {
      "index": 250,
      "groundtruth": "CODEC_HELPER.setBlockDefinitions(FakeDefinitionRegistry.createBlockRegistry());",
      "prediction": "CODEC_HELPER.setBlockDefinitions(BedrockData.BLOCK_DEFINITIONS);",
      "raw_prediction": "CODEC_HELPER.setBlockDefinitions(BedrockData.BLOCK_DEFINITIONS);\n        CODEC_HELPER.setItemDefinitions(FakeDefinitionRegistry.ITEM_REGISTRY);\n        CODEC_HELPER.setBlockDefinitions(FakeDefinitionRegistry.BLOCK_REGISTRY);",
      "es": 0.49367088607594933,
      "em": false,
      "passed": false
    },
    {
      "index": 251,
      "groundtruth": "xbox.getXBLToken((ECPublicKey) this.keyPair.getPublic(), (ECPrivateKey) this.keyPair.getPrivate(), deviceToken);",
      "prediction": "xbox.getXSTS(deviceToken);",
      "raw_prediction": "xbox.getXSTS(deviceToken);",
      "es": 0.2142857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 252,
      "groundtruth": "raster.getDataElements(trX, trY, predictor2);",
      "prediction": "raster.getDataElements(trX, trY, predictor2);",
      "raw_prediction": "raster.getDataElements(trX, trY, predictor2);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 253,
      "groundtruth": "raster.getDataElements(trX, trY, predictor3);",
      "prediction": "average2(predictor2, predictor3);",
      "raw_prediction": "average2(predictor2, predictor3);\n                        average2(predictor, predictor2);\n\n                        addPixels(rgba, predictor);\n                        break;\n                    case PREDICTOR_SELECT:\n                        raster.getDataElements(lX, y, predictor);\n",
      "es": 0.48888888888888893,
      "em": false,
      "passed": false
    },
    {
      "index": 254,
      "groundtruth": "raster.getDataElements(lX, y, predictor);",
      "prediction": "aster.getDataElements(lX, y, predictor);",
      "raw_prediction": "aster.getDataElements(lX, y, predictor);",
      "es": 0.975609756097561,
      "em": false,
      "passed": false
    },
    {
      "index": 255,
      "groundtruth": "raster.getDataElements(x, tY, predictor2);",
      "prediction": "addPixels(rgba, predictor);",
      "raw_prediction": "addPixels(rgba, predictor);\n\n                        break;\n                    case PREDICTOR_AVG_L_T:\n                        raster.getDataElements(lX, y, predictor);\n                        raster.getDataElements(x, tY, predictor2);\n                        average2(predict",
      "es": 0.4285714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 256,
      "groundtruth": "raster.getDataElements(lX, tY, predictor3);",
      "prediction": "raster.getDataElements(lX, tY, predictor3);",
      "raw_prediction": " raster.getDataElements(lX, tY, predictor3);\n                        addPixels(rgba, select(predictor, predictor2, predictor3));\n\n                        break;\n                    case PREDICTOR_CLAMP_ADD_SUB_FULL:\n                        raster.getDataElements(lX",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 257,
      "groundtruth": "lsbBitInputStream.readBits(14);",
      "prediction": "lsbBitInputStream.readBits(14);",
      "raw_prediction": "lsbBitInputStream.readBits(14);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 258,
      "groundtruth": "colorCacheBits = (int) lsbBitReader.readBits(4);",
      "prediction": "colorCacheBits = (int) lsbBitReader.readBits(3) + 1;",
      "raw_prediction": "colorCacheBits = (int) lsbBitReader.readBits(3) + 1;",
      "es": 0.9038461538461539,
      "em": false,
      "passed": false
    },
    {
      "index": 259,
      "groundtruth": "lsbBitInputStream.readBit();",
      "prediction": "if (width <= 0 || height <= 0)",
      "raw_prediction": "if (width <= 0 || height <= 0) {\n            IOException(\"Invalid width or height.\");\n        }",
      "es": 0.06666666666666665,
      "em": false,
      "passed": false
    },
    {
      "index": 260,
      "groundtruth": "(int) lsbBitInputStream.readBits(3) != 0) {",
      "prediction": "lsbBitReader.readBit()",
      "raw_prediction": "lsbBitReader.readBit() != 1) {",
      "es": 0.39534883720930236,
      "em": false,
      "passed": false
    },
    {
      "index": 261,
      "groundtruth": "+ (int) lsbBitReader.readBits(extraBits) + 1;",
      "prediction": "+ lsbBitReader.readBits(extraBits);",
      "raw_prediction": "+ lsbBitReader.readBits(extraBits);",
      "es": 0.7777777777777778,
      "em": false,
      "passed": false
    },
    {
      "index": 262,
      "groundtruth": "int transformType = (int) lsbBitReader.readBits(2);",
      "prediction": "int transformType = lsbBitReader.readBits(2);",
      "raw_prediction": "int transformType = lsbBitReader.readBits(2);",
      "es": 0.8823529411764706,
      "em": false,
      "passed": false
    },
    {
      "index": 263,
      "groundtruth": "decodeRaster = RGBABuffer.createRelativeImage(raster, 0, 0, xSize, height);",
      "prediction": "decodeRaster = RGBABuffer.createAbsoluteImage(xSize, height);",
      "raw_prediction": " decodeRaster = RGBABuffer.createAbsoluteImage(xSize, height);",
      "es": 0.72,
      "em": false,
      "passed": false
    },
    {
      "index": 264,
      "groundtruth": "&& lsbBitReader.readBit() == 1) {",
      "prediction": "&& colorCacheBits",
      "raw_prediction": "&& colorCacheBits > 0) {\n            // Read meta codes\n            huffmanXSize = xSize;\n            huffmanYSize = ySize;\n            metaCodeBits = 0;\n        } else {\n            // Read",
      "es": 0.24242424242424243,
      "em": false,
      "passed": false
    },
    {
      "index": 265,
      "groundtruth": "RGBABuffer outputBuffer = RGBABuffer.createAbsoluteImage(width, height);",
      "prediction": "RGBABuffer outputBuffer = RGBABuffer.createAbsoluteImage(width, height);",
      "raw_prediction": "RGBABuffer outputBuffer = RGBABuffer.createAbsoluteImage(width, height);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 266,
      "groundtruth": "byte) (lsbBitReader.readBits(3) + 2);",
      "prediction": "byte) lsbBitReader.readBits(2);",
      "raw_prediction": "byte) lsbBitReader.readBits(2);",
      "es": 0.8378378378378378,
      "em": false,
      "passed": false
    },
    {
      "index": 267,
      "groundtruth": "colorTableSize = ((int) lsbBitReader.readBits(8)) + 1;",
      "prediction": "colorTableSize = (int) lsbBitReader.readBits(8) + 1;",
      "raw_prediction": "colorTableSize = (int) lsbBitReader.readBits(8) + 1;",
      "es": 0.962962962962963,
      "em": false,
      "passed": false
    },
    {
      "index": 268,
      "groundtruth": "(int) lsbBitReader.readBits(3) + 2;",
      "prediction": "(int) lsbBitReader.readBits(4);",
      "raw_prediction": "(int) lsbBitReader.readBits(4);\n\n            if (metaCodeBits < 0 || metaCodeBits > 3) {\n                throw new IOException(\"Corrupt WebP stream, metaCodeBits < 0 || >",
      "es": 0.8571428571428572,
      "em": false,
      "passed": false
    },
    {
      "index": 269,
      "groundtruth": "configVariables.setClientID(System.getenv(\"BOT_CLIENT_ID\"));",
      "prediction": "configVariables.setClientID(System.getenv(\"CLIENT_ID\"));",
      "raw_prediction": "configVariables.setClientID(System.getenv(\"CLIENT_ID\"));\n            return configVariables;\n        }\n\n        // Check if we have a properties file active to read from there.\n        if (System.getProperty(\"botCheckerActive\") != null && \"Y",
      "es": 0.9333333333333333,
      "em": false,
      "passed": false
    },
    {
      "index": 270,
      "groundtruth": "configVariables.setUser(System.getenv(\"BOT_USER\"));",
      "prediction": "configVariables.setUser(System.getenv(\"USER\"));",
      "raw_prediction": " configVariables.setUser(System.getenv(\"USER\"));",
      "es": 0.9215686274509804,
      "em": false,
      "passed": false
    },
    {
      "index": 271,
      "groundtruth": "RGBABuffer.createAbsoluteImage(blockWidth, blockHeight);",
      "prediction": "raster.createAbsoluteImage(blockWidth, blockHeight);",
      "raw_prediction": "raster.createAbsoluteImage(blockWidth, blockHeight);",
      "es": 0.8571428571428572,
      "em": false,
      "passed": false
    },
    {
      "index": 272,
      "groundtruth": "RGBABuffer colorTableRGBABuffer = RGBABuffer.createAbsoluteImage(colorTableSize, 1);",
      "prediction": "RGBABuffer colorTableRGBABuffer =",
      "raw_prediction": "RGBABuffer colorTableRGBABuffer =\n//                    Raster.createInterleavedRaster(new DataBufferByte(colorTable, colorTableSize * 4), colorTableSize, 1, colorTableSize * 4, 4",
      "es": 0.3928571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 273,
      "groundtruth": "raster.getDataElements(x1, ySrc, rgba);",
      "prediction": "ySrc = y1 < 0 ? ySrc + height : ySrc;",
      "raw_prediction": " ySrc = y1 < 0 ? ySrc + height : ySrc;\n\n            rgba[0] = raster.getSample(xSrc, ySrc, 0);\n            rgba[1] = raster.getSample(xSrc, y",
      "es": 0.05128205128205132,
      "em": false,
      "passed": false
    },
    {
      "index": 274,
      "groundtruth": "topLevel && lsbBitReader.readBit() == 1) {",
      "prediction": "lsbBitReader.readBit()",
      "raw_prediction": "lsbBitReader.readBit() == 1) {",
      "es": 0.5238095238095238,
      "em": false,
      "passed": false
    },
    {
      "index": 275,
      "groundtruth": "colorTableRGBABuffer.getDataElements(x, 0, colorTableRGBACopyBuffer);",
      "prediction": "raster.getDataElements(x, 0, colorTableRGBACopyBuffer);",
      "raw_prediction": "raster.getDataElements(x, 0, colorTableRGBACopyBuffer);",
      "es": 0.7681159420289855,
      "em": false,
      "passed": false
    },
    {
      "index": 276,
      "groundtruth": "int argb = colorCache.lookup(code - 256 - 24);",
      "prediction": "int argb = colorCache.lookup(code);",
      "raw_prediction": " int argb = colorCache.lookup(code);",
      "es": 0.7608695652173914,
      "em": false,
      "passed": false
    },
    {
      "index": 277,
      "groundtruth": "userID = twitchAPI.getUserID(user).orElse(\"\");",
      "prediction": "userID = \"\";",
      "raw_prediction": "userID = \"\";",
      "es": 0.26086956521739135,
      "em": false,
      "passed": false
    },
    {
      "index": 278,
      "groundtruth": "= botsAPI.getOnlineBots();",
      "prediction": "= botsAPI.getOnlineBots();",
      "raw_prediction": "= botsAPI.getOnlineBots();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 279,
      "groundtruth": "twitchAPI.getUserID(userName.trim());",
      "prediction": "twitchAPI.getUserIDByUserName(userName.trim());",
      "raw_prediction": "twitchAPI.getUserIDByUserName(userName.trim());",
      "es": 0.7872340425531915,
      "em": false,
      "passed": false
    },
    {
      "index": 280,
      "groundtruth": "broadcasterID = twitchAPI.getUserID(channel.trim());",
      "prediction": "broadcasterID = twitchAPI.getBroadcasterID(channel);",
      "raw_prediction": "broadcasterID = twitchAPI.getBroadcasterID(channel);",
      "es": 0.7115384615384616,
      "em": false,
      "passed": false
    },
    {
      "index": 281,
      "groundtruth": "Generator().generate(schemaVersion, scanPackages, outputDir, skipValidation);",
      "prediction": "TemplateGenerator(project, schemaVersion, outputDir, scanPackages, skipValidation).generate();",
      "raw_prediction": "TemplateGenerator(project, schemaVersion, outputDir, scanPackages, skipValidation).generate();",
      "es": 0.46808510638297873,
      "em": false,
      "passed": false
    },
    {
      "index": 282,
      "groundtruth": "template.setTemplateName(templateName);",
      "prediction": "template.setName(templateName);",
      "raw_prediction": "template.setName(templateName);",
      "es": 0.7948717948717949,
      "em": false,
      "passed": false
    },
    {
      "index": 283,
      "groundtruth": "template.setAppliesTo((String[]) methodParameters.get(APPLIES_TO));",
      "prediction": "String appliesTo = String.valueOf(methodParameters.get(APPLIES_TO));",
      "raw_prediction": " String appliesTo = String.valueOf(methodParameters.get(APPLIES_TO));\n     if (!appliesTo.isBlank()) {\n       template.setAppliesTo(appliesTo);\n     }",
      "es": 0.6470588235294117,
      "em": false,
      "passed": false
    },
    {
      "index": 284,
      "groundtruth": "template.setEntriesVisible(((Boolean) (methodParameters.get(ENTRIES_VISIBLE))).booleanValue());",
      "prediction": "String appliesTo = String.valueOf(methodParameters.get(APPLIES_TO));",
      "raw_prediction": " String appliesTo = String.valueOf(methodParameters.get(APPLIES_TO));",
      "es": 0.34736842105263155,
      "em": false,
      "passed": false
    },
    {
      "index": 285,
      "groundtruth": "treeMapPane = TreeMapPane.forTreeContent();",
      "prediction": "treeMapPane = new TreeMapPane<>();",
      "raw_prediction": "treeMapPane = new TreeMapPane<>();",
      "es": 0.5581395348837209,
      "em": false,
      "passed": false
    },
    {
      "index": 286,
      "groundtruth": "(exemption != null && exemption.isExemptionActive()) {",
      "prediction": "(!isRunning()) {",
      "raw_prediction": "(!isRunning()) {",
      "es": 0.20370370370370372,
      "em": false,
      "passed": false
    },
    {
      "index": 287,
      "groundtruth": "final ThreadInfo threadInfo = ThreadInfo.fromThread(thread);",
      "prediction": "final ThreadInfo threadInfo = Thread.currentThread().getStackTrace();",
      "raw_prediction": "final ThreadInfo threadInfo = Thread.currentThread().getStackTrace();",
      "es": 0.6666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 288,
      "groundtruth": "(\"  executePrice=\" + DoubleUtils.toDouble(executePrice));",
      "prediction": "(\"  executePrice=\" + DoubleUtils.toDouble(executePrice));",
      "raw_prediction": "(\"  executePrice=\" + DoubleUtils.toDouble(executePrice));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 289,
      "groundtruth": "cancel(ts.nanoEpoch());",
      "prediction": "cancel(ts.nanoEpoch());",
      "raw_prediction": "cancel(ts.nanoEpoch());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 290,
      "groundtruth": "ts = book.getTimestamper();",
      "prediction": "ts = Timestamper.getInstance();",
      "raw_prediction": "ts = Timestamper.getInstance();\n\t\t\t\n\t\t\t// Create some initial orders to get the book populated.  This is done before the loop so that we don't have to worry about the book being empty during the loop.  The",
      "es": 0.4193548387096774,
      "em": false,
      "passed": false
    },
    {
      "index": 291,
      "groundtruth": "messages = body.getMessages();",
      "prediction": "messages = body.getMessages();",
      "raw_prediction": "messages = body.getMessages();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 292,
      "groundtruth": ".cancel(orderBook.getTimestamper().nanoEpoch());",
      "prediction": "Book.cancelOrder(1);",
      "raw_prediction": "Book.cancelOrder(1);",
      "es": 0.22916666666666663,
      "em": false,
      "passed": false
    },
    {
      "index": 293,
      "groundtruth": "ts.nanoEpoch(), 100);",
      "prediction": "ts.nanoEpoch(), 100);",
      "raw_prediction": "ts.nanoEpoch(), 100);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 294,
      "groundtruth": "if (!book.isEmpty()) throw new IllegalStateException(\"Book must be empty here!\");",
      "prediction": "assert book.getBestBidOrder() == null;",
      "raw_prediction": " assert book.getBestBidOrder() == null;\n\t\t assert book.getBestAskOrder() == null;\n\t\t\t\n\t\t\t// Create a few more orders to fill the book again\n\t\t\tbook.createLimit(getClientOrderId(),  orderId++,",
      "es": 0.14814814814814814,
      "em": false,
      "passed": false
    },
    {
      "index": 295,
      "groundtruth": "(orderBook.getTimestamper().nanoEpoch(), 100);",
      "prediction": "(100);",
      "raw_prediction": "(100);",
      "es": 0.13043478260869568,
      "em": false,
      "passed": false
    },
    {
      "index": 296,
      "groundtruth": "orderBook.showOrders();",
      "prediction": "orderBook.cre",
      "raw_prediction": "\torderBook.createLimit(String.valueOf(++orderId), orderId, Side.BUY, 100, 150.44, TimeInForce.DAY);",
      "es": 0.5217391304347826,
      "em": false,
      "passed": false
    },
    {
      "index": 297,
      "groundtruth": "(listeners, client.isRetryOnReadTimeout(), (response) -> {",
      "prediction": "(listeners, true, response -> { // retry on read timeout",
      "raw_prediction": "(listeners, true, response -> { // retry on read timeout\n              retryCounter = retryCounter + 1;\n              createNewEventSource(requestBody, listeners);\n            }), event -> {\n              var response = event.data();\n              listeners",
      "es": 0.2931034482758621,
      "em": false,
      "passed": false
    },
    {
      "index": 298,
      "groundtruth": "+= order.getOpenSize();",
      "prediction": "+= order.getOpenSize();",
      "raw_prediction": "+= order.getOpenSize();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 299,
      "groundtruth": "orderBookLogger.off();",
      "prediction": "orderBook.showLevels();",
      "raw_prediction": "orderBook.showLevels();\n\t\t\n\t\t/*\n\t\t   200 @    149.44 (orders=2)\n\t\t   600 @    150.44 (orders=1)\n\t",
      "es": 0.5652173913043479,
      "em": false,
      "passed": false
    },
    {
      "index": 300,
      "groundtruth": "listeners.onComplete(messageBuilder);",
      "prediction": "listeners.onError(new ErrorDetails(\"Stream was cancelled\"), throwable);",
      "raw_prediction": " listeners.onError(new ErrorDetails(\"Stream was cancelled\"), throwable);",
      "es": 0.323943661971831,
      "em": false,
      "passed": false
    },
    {
      "index": 301,
      "groundtruth": "proxyAuthenticator.getUsername(),\n                      proxyAuthenticator.getPassword()))\n                  .build());",
      "prediction": "proxyAuthenticator.getUsername(),\n                   proxyAuthenticator.getPassword()\n                 ))\n                 .build());",
      "raw_prediction": " proxyAuthenticator.getUsername(),\n                   proxyAuthenticator.getPassword()\n                 ))\n                 .build());\n        } else {\n          builder.proxyAuthenticator((route, response) ->\n             response.request()\n             .newBuilder()\n             .header(\"Proxy-Author",
      "es": 0.8345864661654135,
      "em": false,
      "passed": false
    },
    {
      "index": 302,
      "groundtruth": "createFactory(client.getHttpClient())\n        .newEventSource(\n            request,\n            getEventListener(listeners, client.isRetryOnReadTimeout(), (response) -> {",
      "prediction": "create(request, getEventListener(listeners, true, error -> {",
      "raw_prediction": "create(request, getEventListener(listeners, true, error -> {",
      "es": 0.3294117647058824,
      "em": false,
      "passed": false
    },
    {
      "index": 303,
      "groundtruth": "!= null && mDiracSound.getMusic() == 1;",
      "prediction": "!= null && mDiracSound.isEnabled();",
      "raw_prediction": "!= null && mDiracSound.isEnabled();",
      "es": 0.641025641025641,
      "em": false,
      "passed": false
    },
    {
      "index": 304,
      "groundtruth": "orderBook.showLevels();",
      "prediction": "orderBook.showLevels();",
      "raw_prediction": "orderBook.showLevels();\n\t\t\n\t\t/*\n\t\t   200 @    150.44 (orders=1)\n\t\t-------- \n\t\t*/",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 305,
      "groundtruth": "DoubleUtils.toDouble(price);",
      "prediction": "DoubleUtils.toDouble(price);",
      "raw_prediction": "DoubleUtils.toDouble(price);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 306,
      "groundtruth": "orderBookLogger.on();",
      "prediction": "orderBookLogger.on(); // turn callbacks ou",
      "raw_prediction": "orderBookLogger.on(); // turn callbacks output back on",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 307,
      "groundtruth": "= client.getHttpClient().newCall(buildRequest(requestBody)).execute()) {",
      "prediction": "= client.getHttpClient().newCall(buildRequest(requestBody))",
      "raw_prediction": "= client.getHttpClient().newCall(buildRequest(requestBody)).execute()) {",
      "es": 0.8194444444444444,
      "em": false,
      "passed": false
    },
    {
      "index": 308,
      "groundtruth": "mDiracUtils != null ? mDiracUtils.isDiracEnabled() : false;",
      "prediction": "mDiracUtils.isEnabled();",
      "raw_prediction": "mDiracUtils.isEnabled();",
      "es": 0.4067796610169492,
      "em": false,
      "passed": false
    },
    {
      "index": 309,
      "groundtruth": "if (StringUtils.equals(s.getFixCode(), sb)) {",
      "prediction": "if (StringUtils.equals(s.getFixCode(), sb))",
      "raw_prediction": "if (StringUtils.equals(s.getFixCode(), sb)) {",
      "es": 0.9555555555555556,
      "em": false,
      "passed": false
    },
    {
      "index": 310,
      "groundtruth": "\"  restPrice=\" + DoubleUtils.toDouble(restPrice));",
      "prediction": "\"  restPrice=\" + DoubleUtils.toDouble(restPrice));",
      "raw_prediction": "\"  restPrice=\" + DoubleUtils.toDouble(restPrice));\n    \tSystem.out.println();\n    }\n    \n\t@Override\n    public void onOrderRestored(OrderBook orderBook, long publicTime, Order order, long restoredSize, long restored",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 311,
      "groundtruth": "book.getBestBidOrder();",
      "prediction": "book.getBestBidOrder();",
      "raw_prediction": "book.getBestBidOrder();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 312,
      "groundtruth": "VoidAffordance.create(), afford(methodOn(ItemController.class).create(null))));",
      "prediction": "VoidAffordance.create(linkBuilders.linkTo(methodOn(ItemController.class).create(null)).withRel(\"create\"))",
      "raw_prediction": "VoidAffordance.create(linkBuilders.linkTo(methodOn(ItemController.class).create(null)).withRel(\"create\"))\n                        )\n            );\n    return ResponseEntity.ok(CollectionModel.of(selfLink));\n  }\n\n  @GetMapping(\"/minimal\")\n  public ResponseEntity",
      "es": 0.6571428571428571,
      "em": false,
      "passed": false
    },
    {
      "index": 313,
      "groundtruth": "class).findById(item.id())).toUri())\n        .build();",
      "prediction": "class).findById(item.id()))\n                .withSelfRel())\n        .body(new Rep",
      "raw_prediction": "class).findById(item.id()))\n                .withSelfRel())\n        .body(new Representation(item));",
      "es": 0.5308641975308642,
      "em": false,
      "passed": false
    },
    {
      "index": 314,
      "groundtruth": ".withDimension(milvusConfiguration.getDimensions())\n            .build();",
      "prediction": ".withDimension(768)\n            .build();",
      "raw_prediction": " .withDimension(768)\n            .build();",
      "es": 0.5205479452054795,
      "em": false,
      "passed": false
    },
    {
      "index": 315,
      "groundtruth": ".withTimeout(milvusConfiguration.getTimeout(), TimeUnit.MILLISECONDS)\n                .createCollection(createCollectionReq);",
      "prediction": ".createCollection(createCollectionReq);",
      "raw_prediction": ".createCollection(createCollectionReq);",
      "es": 0.31200000000000006,
      "em": false,
      "passed": false
    },
    {
      "index": 316,
      "groundtruth": "if(milvusConfiguration.getDeleteOnStartup() && hasCollection) {",
      "prediction": "if(hasCollection) {",
      "raw_prediction": " if(hasCollection) {",
      "es": 0.3015873015873016,
      "em": false,
      "passed": false
    },
    {
      "index": 317,
      "groundtruth": "(milvusConfiguration.getCollection())\n                .build());",
      "prediction": "(milvusConfiguration.getCollection())\n                .build());",
      "raw_prediction": "(milvusConfiguration.getCollection())\n                .build());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 318,
      "groundtruth": "new Entry(entry1.path, entry1.metadata, classMergerCooler.merge(entry1.data, entry2.data));",
      "prediction": "classMergerCooler.mergeClasses(entry1.data, entry2.data);",
      "raw_prediction": "classMergerCooler.mergeClasses(entry1.data, entry2.data);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult = entry1;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tif (isClass) {\n\t\t\t\t\t\tresult = classMergerCool",
      "es": 0.4725274725274725,
      "em": false,
      "passed": false
    },
    {
      "index": 319,
      "groundtruth": "(MinivanPlugin.filenameSafe(name) + \".jar\");",
      "prediction": "(getURLSuffix());",
      "raw_prediction": "(getURLSuffix());\n\t\t}\n\t\t\n\t\tpublic String getSha1() {\n\t\t\treturn this.downloads.getAsJsonObject(\"artifact\").get(\"sha1\").getAsString();",
      "es": 0.18181818181818177,
      "em": false,
      "passed": false
    },
    {
      "index": 320,
      "groundtruth": "sendInputMessage(uuid, request.getInput(), InputMessage.TIMEOUT);",
      "prediction": "completeCurrentRequest(uuid, new AquaInputResponse(InputStatus.TIMEOUT, \"\"));",
      "raw_prediction": " completeCurrentRequest(uuid, new AquaInputResponse(InputStatus.TIMEOUT, \"\"));\n        }, request.getInput().getTimeout() * 20L);\n        /* Initializing the timeout task for the second time. */\n        plugin.getServer().getScheduler().",
      "es": 0.35064935064935066,
      "em": false,
      "passed": false
    },
    {
      "index": 321,
      "groundtruth": ".get(uuid).forEach(request -> request.getFuture().complete(response));",
      "prediction": ".get(uuid).forEach(request -> request.getFuture().complete(response));",
      "raw_prediction": ".get(uuid).forEach(request -> request.getFuture().complete(response));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 322,
      "groundtruth": "request.getInput().getTimeout() * 20L);",
      "prediction": "request.getInput().getTimeout());",
      "raw_prediction": "request.getInput().getTimeout());",
      "es": 0.8461538461538461,
      "em": false,
      "passed": false
    },
    {
      "index": 323,
      "groundtruth": "if (request.getInput().getTimeout() < 0) return;",
      "prediction": "if (request.getInput().getTimeout() > 0)",
      "raw_prediction": "if (request.getInput().getTimeout() > 0)",
      "es": 0.8125,
      "em": false,
      "passed": false
    },
    {
      "index": 324,
      "groundtruth": ", request.getInput(), InputMessage.PROMPT);",
      "prediction": ",request.getInput(),InputMessage.PROMPT);",
      "raw_prediction": ",request.getInput(),InputMessage.PROMPT);\n\n        /* Initializing the timeout task. */\n        if (request.getInput().getTimeout() < 0) return;\n        plugin.getServer().getScheduler().runTaskLater(plugin, () -> {\n           ",
      "es": 0.9534883720930233,
      "em": false,
      "passed": false
    },
    {
      "index": 325,
      "groundtruth": ".element().getInput();",
      "prediction": ".peek();",
      "raw_prediction": ".peek();",
      "es": 0.2727272727272727,
      "em": false,
      "passed": false
    },
    {
      "index": 326,
      "groundtruth": "requests.element().getFuture().complete(response);",
      "prediction": "if (requests.isEmpty()) return;",
      "raw_prediction": "if (requests.isEmpty()) return;",
      "es": 0.28,
      "em": false,
      "passed": false
    },
    {
      "index": 327,
      "groundtruth": "request.getFuture();",
      "prediction": "request.getFuture();",
      "raw_prediction": "request.getFuture();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 328,
      "groundtruth": "d.getOriginalText().split(\"\\\\n\");",
      "prediction": "sb.toString().split(\"\\\\s+\");",
      "raw_prediction": "sb.toString().split(\"\\\\s+\");\n        outputBuilder.append(splitText[0]);",
      "es": 0.5151515151515151,
      "em": false,
      "passed": false
    },
    {
      "index": 329,
      "groundtruth": "(description.getName().equals(skillType)) {",
      "prediction": "(description.getName().equals(skillType))",
      "raw_prediction": "(description.getName().equals(skillType)) {",
      "es": 0.9534883720930233,
      "em": false,
      "passed": false
    },
    {
      "index": 330,
      "groundtruth": ").infer(object, recordName));",
      "prediction": "recordName).inferSchema(object));",
      "raw_prediction": "recordName).inferSchema(object));",
      "es": 0.18181818181818177,
      "em": false,
      "passed": false
    },
    {
      "index": 331,
      "groundtruth": "conversation.formattedFullHistory(), null);",
      "prediction": "conversation);",
      "raw_prediction": "conversation);",
      "es": 0.32558139534883723,
      "em": false,
      "passed": false
    },
    {
      "index": 332,
      "groundtruth": "= currentSkill.describe();",
      "prediction": "= currentSkill.getDescription();",
      "raw_prediction": "= currentSkill.getDescription();",
      "es": 0.71875,
      "em": false,
      "passed": false
    },
    {
      "index": 333,
      "groundtruth": "conversation.getAllMessages().get(0).getRole().equals(ChatMessageRole.SYSTEM.value())) {",
      "prediction": "conversation.getAllMessages().size() > 0 && co",
      "raw_prediction": "conversation.getAllMessages().size() > 0 && conversation.getAllMessages().get(0).getRole().equals(ChatMessageRole.SYSTEM.value())) {",
      "es": 0.38636363636363635,
      "em": false,
      "passed": false
    },
    {
      "index": 334,
      "groundtruth": "conversation.getAllMessages())\n                    .maxTokens(agencyConfiguration.getChatRequestMaxTokens())\n                    .build();",
      "prediction": "conversation.getAllMessages())\n                    .maxTokens(openAiConfiguration.maxTokens())\n                    .temperature(openAiConfiguration.temperature())\n                    .topP(openAiConfiguratio",
      "raw_prediction": "conversation.getAllMessages())\n                    .maxTokens(openAiConfiguration.maxTokens())\n                    .temperature(openAiConfiguration.temperature())\n                    .topP(openAiConfiguration.topP())\n                    .build();",
      "es": 0.5458937198067633,
      "em": false,
      "passed": false
    },
    {
      "index": 335,
      "groundtruth": "var message : conversation.getAllMessages()) {",
      "prediction": "ChatMessage message : con",
      "raw_prediction": "ChatMessage message : conversation.getAllMessages()) {",
      "es": 0.28260869565217395,
      "em": false,
      "passed": false
    },
    {
      "index": 336,
      "groundtruth": "historyAgentConversation.getAllMessages().get(\n                        historyAgentConversation.getAllMessages().size()-1)));",
      "prediction": "historyAgentConversation.form.formFullHistory()));",
      "raw_prediction": "historyAgentConversation.form.formFullHistory()));\n\n        summarized.addMessage(\n            new ChatMessage(ChatMessageRole.USER.value(), \n                \"Please respond to the following question:\\n\\n\" + \n                conversation.getLastMessage().getContent()));",
      "es": 0.29600000000000004,
      "em": false,
      "passed": false
    },
    {
      "index": 337,
      "groundtruth": "return mapper.deleteRegister(challengeSeq, id);",
      "prediction": "return rmRepository.deleteByChallengeSeqAndId(challengeSeq, id);",
      "raw_prediction": " return rmRepository.deleteByChallengeSeqAndId(challengeSeq, id);",
      "es": 0.59375,
      "em": false,
      "passed": false
    },
    {
      "index": 338,
      "groundtruth": "dto.setOnOffNoty(\"Y\");",
      "prediction": "dto.setUserEmail(userId+\"@gld.com\");",
      "raw_prediction": "dto.setUserEmail(userId+\"@gld.com\");",
      "es": 0.33333333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 339,
      "groundtruth": "> challenges = challengeBiz.findbyCate(category);",
      "prediction": "> challenges = challengeBiz.findbyCate(category);",
      "raw_prediction": "> challenges = challengeBiz.findbyCate(category);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 340,
      "groundtruth": "historyAgentConversation.getAllMessages().size()-1)));",
      "prediction": "0).getContent()));",
      "raw_prediction": "0).getContent()));\n\n        summarized.addAllMessages(historyAgentConversation.getAllMessages().subList(1, historyAgentConversation.getAllMessages().size()));",
      "es": 0.2592592592592593,
      "em": false,
      "passed": false
    },
    {
      "index": 341,
      "groundtruth": "conversation.getAllMessages().size()).toArray(new ChatMessage[0]);",
      "prediction": "conversation.getAllMessages().size())",
      "raw_prediction": "conversation.getAllMessages().size())\n                 .toArray(new ChatMessage[0]);",
      "es": 0.5606060606060606,
      "em": false,
      "passed": false
    },
    {
      "index": 342,
      "groundtruth": "dto.setUserLoginType(\"K\");",
      "prediction": "dto.setOnOffAlarm(\"Y\");",
      "raw_prediction": "dto.setOnOffAlarm(\"Y\");",
      "es": 0.46153846153846156,
      "em": false,
      "passed": false
    },
    {
      "index": 343,
      "groundtruth": "dto.setUserName(userName);",
      "prediction": "dto.setUserName(userName);",
      "raw_prediction": "dto.setUserName(userName);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 344,
      "groundtruth": ".put(\"userId\", dto.getUserId());",
      "prediction": ".put(\"userId\", dto.getUserId());",
      "raw_prediction": ".put(\"userId\", dto.getUserId());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 345,
      "groundtruth": "dto.setUserPhone(userPhone);",
      "prediction": "dto.setUserPhone(userPhone);",
      "raw_prediction": "\tdto.setUserPhone(userPhone);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 346,
      "groundtruth": "user = loginBiz.findByUserId(userId);",
      "prediction": "user = loginBiz.select(userId);",
      "raw_prediction": "user = loginBiz.select(userId);",
      "es": 0.7027027027027026,
      "em": false,
      "passed": false
    },
    {
      "index": 347,
      "groundtruth": "&& user.getUserPw().equals(userPw)) {",
      "prediction": "&& user.getUserPw().",
      "raw_prediction": "&& user.getUserPw().equals(userPw)) {",
      "es": 0.5405405405405406,
      "em": false,
      "passed": false
    },
    {
      "index": 348,
      "groundtruth": "openAiConfiguration.chatModel(), \n            conversation);",
      "prediction": "openAiConfiguration.getModel(), \n            conversation);",
      "raw_prediction": " openAiConfiguration.getModel(), \n            conversation);\n\n        if(tokenCount > agencyConfiguration.getChatRequestMaxTokens()) {\n            throw new IllegalArgumentException(\"The request exceeds the maximum number of tokens allowed by the OpenAI API.\");\n        }\n",
      "es": 0.95,
      "em": false,
      "passed": false
    },
    {
      "index": 349,
      "groundtruth": "(conversation.getAllMessages().size() > agencyConfiguration.getChatSummaryRetainedMessageCount()) {",
      "prediction": "(conversation.getAllMessages().size() > agencyConfiguration.getChatSummaryRetainedMessageCount())",
      "raw_prediction": "(conversation.getAllMessages().size() > agencyConfiguration.getChatSummaryRetainedMessageCount()) {",
      "es": 0.9797979797979798,
      "em": false,
      "passed": false
    },
    {
      "index": 350,
      "groundtruth": "ChallengeDto currentChallenge = challengeBiz.selectOneBySeq(challengeSeq);",
      "prediction": "ChallengeDto currentChallenge = challengeBiz.selectOneBySeq(challengeSeq);",
      "raw_prediction": "\tChallengeDto currentChallenge = challengeBiz.selectOneBySeq(challengeSeq);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 351,
      "groundtruth": "challenge = challengeBiz.selectOne(challengeName);",
      "prediction": "challenge = challengeBiz.selectOne(challengeName);",
      "raw_prediction": "challenge = challengeBiz.selectOne(challengeName);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 352,
      "groundtruth": "return redisOps.getValue(getApiKeyRedisKey());",
      "prediction": "String openApiKey = redisOps.getValue(apiKeyRedisKey);",
      "raw_prediction": "String openApiKey = redisOps.getValue(apiKeyRedisKey);\n        return openApiKey;",
      "es": 0.5740740740740741,
      "em": false,
      "passed": false
    },
    {
      "index": 353,
      "groundtruth": "redisOps.setValue(apiKeyRedisKey, openApiKey);",
      "prediction": "redisOps.setValue(getApiKeyRedisKey(), openApiKey);",
      "raw_prediction": "redisOps.setValue(getApiKeyRedisKey(), openApiKey);",
      "es": 0.8823529411764706,
      "em": false,
      "passed": false
    },
    {
      "index": 354,
      "groundtruth": "int currentMember = registeredBiz.coutBySeq(challengeSeq);",
      "prediction": "RegisteredMemberDto currentMemb",
      "raw_prediction": "\t\t RegisteredMemberDto currentMember = registeredBiz.selectBySeqAndUserId(challengeSeq, userId);",
      "es": 0.24137931034482762,
      "em": false,
      "passed": false
    },
    {
      "index": 355,
      "groundtruth": "registeredBiz.coutBySeq(challengeSeq);",
      "prediction": "registeredBiz.coutBySeq(challengeSeq);",
      "raw_prediction": "registeredBiz.coutBySeq(challengeSeq);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 356,
      "groundtruth": "registeredBiz.challengeStart(challengeSeq);",
      "prediction": "challengeBiz.updateStart(challengeSeq); // \uccbc\ub9b0\uc9c0 \uc2dc\uc791",
      "raw_prediction": "challengeBiz.updateStart(challengeSeq); // \uccbc\ub9b0\uc9c0 \uc2dc\uc791\n\t\t\t\t\treturn currentChallenge.getChallengeName() + \"\uc5d0 \ucc38\uc5ec\ud558\uc600\uc2b5\ub2c8\ub2e4. \";\n\t\t\t\t}else {",
      "es": 0.44897959183673475,
      "em": false,
      "passed": false
    },
    {
      "index": 357,
      "groundtruth": "if (currentChallenge.getChallengeEnabled().equals(\"Y\")\n\t\t\t\t\t&& currentMember < currentChallenge.getChallengeMaxMember()) {",
      "prediction": "if (currentChallenge.getChallengeEnabled().equals(\"Y\")) {",
      "raw_prediction": "\tif (currentChallenge.getChallengeEnabled().equals(\"Y\")) {",
      "es": 0.4672131147540983,
      "em": false,
      "passed": false
    },
    {
      "index": 358,
      "groundtruth": "return currentChallenge.getChallengeName() + \"\uc5d0 \ucc38\uc5ec\ud558\uc600\uc2b5\ub2c8\ub2e4. \";",
      "prediction": "return \"\ucc38\uc5ec\ud558\uc600\uc2b5\ub2c8\ub2e4.\";",
      "raw_prediction": "return \"\ucc38\uc5ec\ud558\uc600\uc2b5\ub2c8\ub2e4.\";\n\t\t\t\t} else {\n\t\t\t\t\treturn \"\ucc38\uc5ec \uc2e4\ud328\ud558\uc600\uc2b5\ub2c8\ub2e4.\";\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn \"\ucc38\uc5ec \ubd88\uac00\ub2a5\ud569\ub2c8\ub2e4.\";",
      "es": 0.30508474576271183,
      "em": false,
      "passed": false
    },
    {
      "index": 359,
      "groundtruth": "currentChallenge.getChallengeMaxMember()) {",
      "prediction": "currentChallenge.getCha",
      "raw_prediction": "currentChallenge.getChallengeMaxMember()) {",
      "es": 0.5348837209302326,
      "em": false,
      "passed": false
    },
    {
      "index": 360,
      "groundtruth": ".equals(settings.sopsExecutable, settingsComponent.getSopsExecutable()) ||\n\t\t\t!Objects.equals(settings.sopsFilesReadOnly, settingsComponent.getSopsFilesReadOnly());",
      "prediction": ".equals(settings.sopsExecutable, settingsComponent.getSopsExecutable()) ||\n\t\t\t!Objects.equals(settings.sopsFilesReadOnly, settingsComponent.getSopsFilesReadOnly());",
      "raw_prediction": ".equals(settings.sopsExecutable, settingsComponent.getSopsExecutable()) ||\n\t\t\t!Objects.equals(settings.sopsFilesReadOnly, settingsComponent.getSopsFilesReadOnly());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 361,
      "groundtruth": "settingsComponent.getSopsFilesReadOnly());",
      "prediction": "settingsComponent.getSopsFilesReadOnly());",
      "raw_prediction": "settingsComponent.getSopsFilesReadOnly());\n\t}\n\n\t@Override\n\tpublic void cancel() {\n\t\t// no-op",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 362,
      "groundtruth": "if (currentChallenge.getChallengeEnabled().equals(\"Y\")) {",
      "prediction": "if (currentChallenge.getChallengeEnabled().equals(\"Y\"))",
      "raw_prediction": "\tif (currentChallenge.getChallengeEnabled().equals(\"Y\")) {",
      "es": 0.9649122807017544,
      "em": false,
      "passed": false
    },
    {
      "index": 363,
      "groundtruth": "SettingsState.getInstance().sopsEnvironment.split(\"\\\\s(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)\");",
      "prediction": "SettingsState.getInstance().environment.split(\";\");",
      "raw_prediction": "SettingsState.getInstance().environment.split(\";\");",
      "es": 0.550561797752809,
      "em": false,
      "passed": false
    },
    {
      "index": 364,
      "groundtruth": "currentChallenge.getChallengeMaxMember() <= member) {",
      "prediction": "member == currentChallenge.g",
      "raw_prediction": "member == currentChallenge.getChallengeMaxMember()) {",
      "es": 0.2264150943396226,
      "em": false,
      "passed": false
    },
    {
      "index": 365,
      "groundtruth": "+ \" &3&o\u2192 &r\" + blockItem.getDisplayName());",
      "prediction": "+ \" &f&o(\" + blockItem.getAmount() + \")\");",
      "raw_prediction": "+ \" &f&o(\" + blockItem.getAmount() + \")\");\n        }\n\n        Helpers.sendFormattedMessage(sender,\"\");\n        Helpers.sendFormattedMessage(sender,\"&e&o&lHOW TO REMOVE A BLOCK\");\n        Helpers.sendFormattedMessage(sender,\"&6&o",
      "es": 0.5909090909090908,
      "em": false,
      "passed": false
    },
    {
      "index": 366,
      "groundtruth": "world.dropItemNaturally(location, blockItem.getItem(1));",
      "prediction": "world.dropItemNaturally(location, blockItem.getItemStack());",
      "raw_prediction": "world.dropItemNaturally(location, blockItem.getItemStack());\n            } else {\n                player.getInventory().addItem(blockItem.getItemStack());",
      "es": 0.9,
      "em": false,
      "passed": false
    },
    {
      "index": 367,
      "groundtruth": "player.getInventory().addItem(blockItem.getItem(amount));",
      "prediction": "if (blockItem.getAmount() == 0)",
      "raw_prediction": " if (blockItem.getAmount() == 0) {\n            Helpers.sendMessage(this.plugin, player, Keys.MESSAGES_CMD_BLOCK_AMOUNT_ZERO);\n\n            return false;\n        }\n\n        if (blockItem.getAmount() < amount) {\n            Helpers.sendMessage(this",
      "es": 0.26315789473684215,
      "em": false,
      "passed": false
    },
    {
      "index": 368,
      "groundtruth": "edgarSectorEnrichService.exportToCSV(writer);",
      "prediction": "writer.println(\"Ticker,Company Name,Sector,SIC,CIK\");",
      "raw_prediction": "writer.println(\"Ticker,Company Name,Sector,SIC,CIK\");\n            stockCikRepository.findAll().forEach(stock -> {\n                writer.println(stock.getTicker() + \",\" +\n                        stock.getCompanyName() + \",\" +\n                        stock.getSector()",
      "es": 0.16981132075471694,
      "em": false,
      "passed": false
    },
    {
      "index": 369,
      "groundtruth": "edgarSectorEnrichService.enrichCik(ticker);",
      "prediction": "stockCikRepository.findByTicker(ticker);",
      "raw_prediction": "stockCikRepository.findByTicker(ticker);",
      "es": 0.3023255813953488,
      "em": false,
      "passed": false
    },
    {
      "index": 370,
      "groundtruth": "fullIndexDownloadService.processFillings(filingTypesList);",
      "prediction": "stockEnrichmentService.enrichStocksFromFilings(filingTypesList);",
      "raw_prediction": " stockEnrichmentService.enrichStocksFromFilings(filingTypesList);",
      "es": 0.546875,
      "em": false,
      "passed": false
    },
    {
      "index": 371,
      "groundtruth": "String> formTypes = fullIndexRepository.findDistinctFormTypes();",
      "prediction": "String> formTypes = filingsDownloadService.getDistinctFormTypes();",
      "raw_prediction": "String> formTypes = filingsDownloadService.getDistinctFormTypes();",
      "es": 0.6666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 372,
      "groundtruth": "filingsDownloadService.downloadFullIndex();",
      "prediction": "try {",
      "raw_prediction": "try {\n            fullIndexDownloadService.downloadFullIndex();\n            return ResponseEntity.ok(\"Full index download initiated.\");\n        } catch (ResponseStatusException e) {\n            return ResponseEntity.status(e.getStatusCode()).body(e.getReason());\n        }\n    }\n\n    @",
      "es": 0.023255813953488413,
      "em": false,
      "passed": false
    },
    {
      "index": 373,
      "groundtruth": "<String> allFormTypes = fullIndexRepository.findDistinctFormTypes();",
      "prediction": "<String> allFormTypes = stockCikRepository.findAll().stream()",
      "raw_prediction": "<String> allFormTypes = stockCikRepository.findAll().stream()\n        .map(stock -> stock.getFormType())\n        .collect(Collectors.toSet());\n",
      "es": 0.6323529411764706,
      "em": false,
      "passed": false
    },
    {
      "index": 374,
      "groundtruth": "IAPKAnalyzer.createFor(inputFile);",
      "prediction": "IAPKAnalyzer.create();",
      "raw_prediction": "IAPKAnalyzer.create();",
      "es": 0.6470588235294117,
      "em": false,
      "passed": false
    },
    {
      "index": 375,
      "groundtruth": "targetFilings = fullIndexRepository.findByFormType(filingType);",
      "prediction": "targetFilings = fullIndexRepository.findByFormType(filingType);",
      "raw_prediction": "targetFilings = fullIndexRepository.findByFormType(filingType);\n        log.info(\"Found {} filings of type {}\", targetFilings.size(), filingType);\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 376,
      "groundtruth": "nativeLibraryDirectories = ShareReflectUtil.findField(dexPathList, \"nativeLibraryDirectories\");",
      "prediction": "nativeLibraryDirectories = ShareReflectUtil.findField(dexPathList, \"nativeLibraryDirectories\");",
      "raw_prediction": "nativeLibraryDirectories = ShareReflectUtil.findField(dexPathList, \"nativeLibraryDirectories\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 377,
      "groundtruth": "Field systemNativeLibraryDirectories = ShareReflectUtil.findField(dexPathList, \"systemNativeLibraryDirectories\");",
      "prediction": "Field systemNativeLibraryDirectories = ShareReflectUtil.findField(dexPathList, \"systemNativeLibraryDirectories\");",
      "raw_prediction": "Field systemNativeLibraryDirectories = ShareReflectUtil.findField(dexPathList, \"systemNativeLibraryDirectories\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 378,
      "groundtruth": "Field nativeLibDirField = ShareReflectUtil.findField(dexPathList, \"nativeLibraryDirectories\");",
      "prediction": "Field nativeLibraryDirectories = ShareReflectUtil.findField(dexPathList, \"nativeLibraryDirectories\");",
      "raw_prediction": "Field nativeLibraryDirectories = ShareReflectUtil.findField(dexPathList, \"nativeLibraryDirectories\");\n\n            Field nativeLibDirField = ShareReflectUtil.findField(nativeLibraryDirectories, \"nativeLibraries\");",
      "es": 0.8910891089108911,
      "em": false,
      "passed": false
    },
    {
      "index": 379,
      "groundtruth": "= ShareReflectUtil.findField(classLoader, \"libPath\");",
      "prediction": "= ShareReflectUtil.findField(classLoader, \"path\");",
      "raw_prediction": "= ShareReflectUtil.findField(classLoader, \"path\");",
      "es": 0.9245283018867925,
      "em": false,
      "passed": false
    },
    {
      "index": 380,
      "groundtruth": "= parser.readLong(buffer, baseOffset);",
      "prediction": "= parser.readLong(buffer, baseOffset + 0x0);",
      "raw_prediction": "= parser.readLong(buffer, baseOffset + 0x0);\n        offset = parser.readLong(buffer, baseOffset + 0x4);",
      "es": 0.8636363636363636,
      "em": false,
      "passed": false
    },
    {
      "index": 381,
      "groundtruth": "val = parser.readWord(buffer, baseOffset + 0x4);",
      "prediction": "value = parser.readWord(buffer, baseOffset + 4);",
      "raw_prediction": " value = parser.readWord(buffer, baseOffset + 4);",
      "es": 0.9166666666666666,
      "em": false,
      "passed": false
    },
    {
      "index": 382,
      "groundtruth": "= parser.readWord(buffer, 0x1C);",
      "prediction": "= parser.readWord(buffer, 0x14);",
      "raw_prediction": "= parser.readWord(buffer, 0x14);",
      "es": 0.96875,
      "em": false,
      "passed": false
    },
    {
      "index": 383,
      "groundtruth": "final Method makeElements = ShareReflectUtil.findMethod(dexPathList, \"makePathElements\", List.class);",
      "prediction": "final Method makeElements = ShareReflectUtil.findMet",
      "raw_prediction": "final Method makeElements = ShareReflectUtil.findMethod(dexPathList,\n                    \"makePathElements\", List.class, File.class, List.class);\n            final ArrayList<IOException> suppressedExceptions = new ArrayList<>();\n\n            final Object[] elements =",
      "es": 0.5148514851485149,
      "em": false,
      "passed": false
    },
    {
      "index": 384,
      "groundtruth": "libraryPathElementsFiled = ShareReflectUtil.findField(classLoader, \"libraryPathElements\");",
      "prediction": "libraryPathElementsFiled = ShareReflectUtil.findField(classLoader, \"nativeLibraryPathElements\");",
      "raw_prediction": "libraryPathElementsFiled = ShareReflectUtil.findField(classLoader, \"nativeLibraryPathElements\");",
      "es": 0.9270833333333334,
      "em": false,
      "passed": false
    },
    {
      "index": 385,
      "groundtruth": "ShareTinkerLog.e(TAG, \"installNativeLibraryPath, folder %s is illegal\", folder);",
      "prediction": "ShareTinkerLog.e(TAG, \"installNativeLibraryPath, folder is null or not exists, folder: %s\", folder);",
      "raw_prediction": " ShareTinkerLog.e(TAG, \"installNativeLibraryPath, folder is null or not exists, folder: %s\", folder);",
      "es": 0.74,
      "em": false,
      "passed": false
    },
    {
      "index": 386,
      "groundtruth": "parser.readWord(buffer, 0x20);",
      "prediction": "parser.readWord(buffer, 0x20);",
      "raw_prediction": "parser.readWord(buffer, 0x20);\n        flags = parser.readWord(buffer, 0x24);\n        entry = parser.readWord(buffer, 0x28);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 387,
      "groundtruth": "pathListField = ShareReflectUtil.findField(classLoader, \"pathList\");",
      "prediction": "pathListField = ShareReflectUtil.findField(classLoader, \"pathList\");",
      "raw_prediction": "pathListField = ShareReflectUtil.findField(classLoader, \"pathList\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 388,
      "groundtruth": "makeElements = ShareReflectUtil.findMethod(dexPathList,\n                    \"makePathElements\", List.class, File.class, List.class);",
      "prediction": "makeElements = ShareReflectUtil.findMethod(dexPathList, \"makePathElements\", List.class, List.class, List.class);",
      "raw_prediction": "makeElements = ShareReflectUtil.findMethod(dexPathList, \"makePathElements\", List.class, List.class, List.class);",
      "es": 0.8257575757575757,
      "em": false,
      "passed": false
    },
    {
      "index": 389,
      "groundtruth": "= parser.readHalf(buffer, 0x2A);",
      "prediction": "= parser.readHalf(buffer, 0x24);",
      "raw_prediction": "= parser.readHalf(buffer, 0x24);",
      "es": 0.96875,
      "em": false,
      "passed": false
    },
    {
      "index": 390,
      "groundtruth": "= parser.readHalf(buffer, 0x2E);",
      "prediction": "= parser.readHalf(buffer, 0x2E);",
      "raw_prediction": "= parser.readHalf(buffer, 0x2E);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 391,
      "groundtruth": "parser.readLong(buffer, 0x20);",
      "prediction": "parser.readLong(buffer, 0x18);",
      "raw_prediction": "parser.readLong(buffer, 0x18);",
      "es": 0.9333333333333333,
      "em": false,
      "passed": false
    },
    {
      "index": 392,
      "groundtruth": "parser.readLong(buffer, baseOffset + 0x28);",
      "prediction": "parser.readLong(buffer, baseOffset + 0x18);",
      "raw_prediction": "parser.readLong(buffer, baseOffset + 0x18);\n        filesz = parser.readLong(buffer, baseOffset + 0x20);\n        flags = parser.readWord(buffer, baseOffset + 0x28",
      "es": 0.9767441860465116,
      "em": false,
      "passed": false
    },
    {
      "index": 393,
      "groundtruth": "= parser.readHalf(buffer, 0x36);",
      "prediction": "= parser.readHalf(buffer, 0x30);",
      "raw_prediction": "= parser.readHalf(buffer, 0x30);",
      "es": 0.96875,
      "em": false,
      "passed": false
    },
    {
      "index": 394,
      "groundtruth": "parser.readWord(buffer, baseOffset + 0x8);",
      "prediction": "parser.readWord(buffer, baseOffset + 0x8);",
      "raw_prediction": "parser.readWord(buffer, baseOffset + 0x8);\n        paddr = parser.readWord(buffer, baseOffset + 0xC);\n        filesz = parser.readWord(buffer, baseOffset + 0x10);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 395,
      "groundtruth": "offset = parser.readLong(buffer, baseOffset + 0x8);",
      "prediction": "offset = parser.readLong(buffer, baseOffset + 0x8);",
      "raw_prediction": " offset = parser.readLong(buffer, baseOffset + 0x8);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 396,
      "groundtruth": "= parser.readWord(buffer, baseOffset + 0x14);",
      "prediction": "= parser.readWord(buffer, baseOffset + 0xc);",
      "raw_prediction": "= parser.readWord(buffer, baseOffset + 0xc);\n        filesz = parser.readWord(buffer, baseOffset + 0x10);\n        flags = parser.readWord(buffer, baseOffset + 0x14);\n",
      "es": 0.9555555555555556,
      "em": false,
      "passed": false
    },
    {
      "index": 397,
      "groundtruth": "offset = parser.readWord(buffer, baseOffset + 0x4);",
      "prediction": "offset = parser.readWord(buffer, baseOffset + 0x4);",
      "raw_prediction": " offset = parser.readWord(buffer, baseOffset + 0x4);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 398,
      "groundtruth": "= StartupMode.fromString(properties.get(\"scan.startup.mode\"));",
      "prediction": "= StartupMode.valueOf(properties.get(\"startup-mode\"));",
      "raw_prediction": "= StartupMode.valueOf(properties.get(\"startup-mode\"));",
      "es": 0.7419354838709677,
      "em": false,
      "passed": false
    },
    {
      "index": 399,
      "groundtruth": "(streamConfig.transactionalIdPrefix())\n            .setKafkaProducerConfig(toProperties(streamConfig.kafkaProperties()))\n            .build();",
      "prediction": "(streamConfig.transactionalIdPrefix())\n            .setProperties(toProperties(streamConfig.properties()))\n            .build();",
      "raw_prediction": "(streamConfig.transactionalIdPrefix())\n            .setProperties(toProperties(streamConfig.properties()))\n            .build();",
      "es": 0.8591549295774648,
      "em": false,
      "passed": false
    },
    {
      "index": 400,
      "groundtruth": ".subscribe(Collections.singleton(testEnvironment.topicFor(name)));",
      "prediction": ".subscribe(Collections.singletonList(testEnvironment.topicFor(name)));",
      "raw_prediction": ".subscribe(Collections.singletonList(testEnvironment.topicFor(name)));",
      "es": 0.9428571428571428,
      "em": false,
      "passed": false
    },
    {
      "index": 401,
      "groundtruth": "setTopics(streamConfig.topic())\n            .setProperties(toProperties(streamConfig.kafkaProperties()))\n            .setValueOnlyDeserializer(deserializationSchema);",
      "prediction": "setTopics(streamConfig.topics())\n            .setGroupId(streamConfig.groupId())\n            .setProperties(toProperties(streamConfig.properties()))\n            .setDeserializationSchema(deserializationSchema);",
      "raw_prediction": "setTopics(streamConfig.topics())\n            .setGroupId(streamConfig.groupId())\n            .setProperties(toProperties(streamConfig.properties()))\n            .setDeserializationSchema(deserializationSchema);",
      "es": 0.6476190476190475,
      "em": false,
      "passed": false
    },
    {
      "index": 402,
      "groundtruth": "((DecodableSourceSplitImpl) obj).getDelegate());",
      "prediction": "obj.getDelegate());",
      "raw_prediction": "obj.getDelegate());",
      "es": 0.39583333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 403,
      "groundtruth": "producerProperties(testEnvironment.bootstrapServers()));",
      "prediction": "producerProperties(testEnvironment.bootstrapServers())));",
      "raw_prediction": "producerProperties(testEnvironment.bootstrapServers())));\n    this.streams = new HashMap<>(); // TODO: use a concurrent map?",
      "es": 0.9824561403508771,
      "em": false,
      "passed": false
    },
    {
      "index": 404,
      "groundtruth": ".setKafkaProducerConfig(toProperties(streamConfig.kafkaProperties()))\n            .build();",
      "prediction": ".build();",
      "raw_prediction": ".build();",
      "es": 0.09890109890109888,
      "em": false,
      "passed": false
    },
    {
      "index": 405,
      "groundtruth": "(testEnvironment.topicFor(streamName), streamRecord.value()));",
      "prediction": "(testEnvironment.topicFor(streamName), streamRecord.key(), streamRecord.value()));",
      "raw_prediction": "(testEnvironment.topicFor(streamName), streamRecord.key(), streamRecord.value()));",
      "es": 0.7560975609756098,
      "em": false,
      "passed": false
    },
    {
      "index": 406,
      "groundtruth": "toProperties(streamConfig.kafkaProperties()))\n            .setValueOnlyDeserializer(deserializationSchema);",
      "prediction": "toProperties(streamConfig.properties()))\n            .setDeserializer(deserializationSchema);",
      "raw_prediction": "toProperties(streamConfig.properties()))\n            .setDeserializer(deserializationSchema);",
      "es": 0.8598130841121495,
      "em": false,
      "passed": false
    },
    {
      "index": 407,
      "groundtruth": "if (streamConfig.startupMode() != null) {",
      "prediction": "if (streamConfig.startupMode() != null)",
      "raw_prediction": " if (streamConfig.startupMode() != null) {",
      "es": 0.9512195121951219,
      "em": false,
      "passed": false
    },
    {
      "index": 408,
      "groundtruth": "tbApikeyDAO.useOnece(key);",
      "prediction": "if (Objects.equals(message.getType(), Message.Messag",
      "raw_prediction": "if (Objects.equals(message.getType(), Message.MessageType.IMAGE)) {\n            genImage(message, key, send);\n            return;\n        }\n\n        // \u6784\u5efa\u5bf9\u8bdd\u53c2\u6570\n        List<Map<String, String>> messages = message.getMessage().stream",
      "es": 0.15384615384615385,
      "em": false,
      "passed": false
    },
    {
      "index": 409,
      "groundtruth": "Object cnt = jdbcTemplate.queryForMap(dialect.getCountSql(sql), actionInfo.getParameter()).get(\"PG_COUNT\");",
      "prediction": "Object cnt = jdbcTemplate.queryForMap(dialect.getCountSql(sql), methodInfo.getArgs()[actionInfo.getParameterIndex()], actionInfo.getParameterType())",
      "raw_prediction": " Object cnt = jdbcTemplate.queryForMap(dialect.getCountSql(sql), methodInfo.getArgs()[actionInfo.getParameterIndex()], actionInfo.getParameterType()).get(\"PG_COUNT\");",
      "es": 0.6418918918918919,
      "em": false,
      "passed": false
    },
    {
      "index": 410,
      "groundtruth": "() != null && methodInfo.getArgs().length > 0) {",
      "prediction": "() != null) {",
      "raw_prediction": "() != null) {\n                        methodInfo.setActionInfo(interceptor.prepare(methodInfo, jdbcTemplate));\n                    } else {\n                        methodInfo.setActionInfo(interceptor.prepare(methodInfo, jdbcTemplate, null));",
      "es": 0.27083333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 411,
      "groundtruth": "), actionInfo.getParameter(), actionInfo.getParameterType()).get(\"PG_COUNT\");",
      "prediction": "), actionInfo.getParameterTypes(), actionInfo.getParameterValues()).get(\"PG_COUNT\");",
      "raw_prediction": "), actionInfo.getParameterTypes(), actionInfo.getParameterValues()).get(\"PG_COUNT\");\n                           localPage.setTotal(Long.parseLong(cnt.toString()));\n                        } else {\n                            Object cnt = jdbcTemplate.queryForMap(dialect.getCountSql(sql), actionInfo.getParameterTypes",
      "es": 0.8809523809523809,
      "em": false,
      "passed": false
    },
    {
      "index": 412,
      "groundtruth": "cnt = jdbcTemplate.queryForMap(dialect.getCountSql(sql), actionInfo.getParameter()).get(\"PG_COUNT\");",
      "prediction": "cnt = jdbcTemplate.queryForMap(dialect.getCountSql(sql), methodInfo.getArgs()[actionInfo.getParameterIndex()], actionInfo.getParameterType())",
      "raw_prediction": "cnt = jdbcTemplate.queryForMap(dialect.getCountSql(sql), methodInfo.getArgs()[actionInfo.getParameterIndex()], actionInfo.getParameterType()).get(\"PG_COUNT\");",
      "es": 0.624113475177305,
      "em": false,
      "passed": false
    },
    {
      "index": 413,
      "groundtruth": ".debug(\"finish sql==>{",
      "prediction": ".debug(\"prepare sql==>{}\", this.toStr(method",
      "raw_prediction": ".debug(\"prepare sql==>{}\", this.toStr(methodInfo.getActionInfo().getBatchSql()));\n        log.debug(\"prepare parameters==>{}\", this.toStr(methodInfo.getActionInfo().getBatchParameter()));\n\n        //\u6267\u884cSQL\n        jdbcTemplate.execute(methodInfo",
      "es": 0.36363636363636365,
      "em": false,
      "passed": false
    },
    {
      "index": 414,
      "groundtruth": "pages = page.getPages();",
      "prediction": "pages = page.getPages();",
      "raw_prediction": "pages = page.getPages();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 415,
      "groundtruth": "] = this.actionInfo.getParameter();",
      "prediction": "] = this.actionInfo.getParameter();",
      "raw_prediction": "] = this.actionInfo.getParameter();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 416,
      "groundtruth": "MethodActionInfo actionInfo = methodInfo.getActionInfo();",
      "prediction": "MethodActionInfo actionInfo = methodInfo.getActionInfo();",
      "raw_prediction": " MethodActionInfo actionInfo = methodInfo.getActionInfo();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 417,
      "groundtruth": ".debug(\"method==>name:{",
      "prediction": ".debug(\"method name==>{} ,args: {},params: {",
      "raw_prediction": ".debug(\"method name==>{} ,args: {},params: {",
      "es": 0.4772727272727273,
      "em": false,
      "passed": false
    },
    {
      "index": 418,
      "groundtruth": "queryForMap(dialect.getCountSql(sql), actionInfo.getParameter(), actionInfo.getParameterType()).get(\"PG_COUNT\");",
      "prediction": "query(dialect.getCountSql(sql), actionInfo.getParameterTypes(), new ResultSetExtractor<Map>() {",
      "raw_prediction": "query(dialect.getCountSql(sql), actionInfo.getParameterTypes(), new ResultSetExtractor<Map>() {\n                            @Override\n                            public Map extractData(ResultSet rs) throws SQLException, DataAccessException {\n                             while (rs.next()) {\n                                 Map<String,",
      "es": 0.5446428571428572,
      "em": false,
      "passed": false
    },
    {
      "index": 419,
      "groundtruth": "String sql = actionInfo.getSql();",
      "prediction": "String sql = actionInfo.getSql();",
      "raw_prediction": " String sql = actionInfo.getSql();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 420,
      "groundtruth": "cpuPattern.matcher(location.fileContent());",
      "prediction": "cpuPattern.matcher(location.fileContent());",
      "raw_prediction": "cpuPattern.matcher(location.fileContent());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 421,
      "groundtruth": "() && methodInfo.getActionInfo().isReturnIsList()) {",
      "prediction": "()) {",
      "raw_prediction": "()) {",
      "es": 0.09615384615384615,
      "em": false,
      "passed": false
    },
    {
      "index": 422,
      "groundtruth": "sql), (PreparedStatementSetter) methodInfo.getArgs()[actionInfo.getParameterIndex()], new ResultSetExtractor<Map>() {",
      "prediction": "sql), actionInfo.getParameter(), actionInfo.getParameterType(",
      "raw_prediction": "sql), actionInfo.getParameter(), actionInfo.getParameterType(), new ResultSetExtractor<Map>() {\n                            @Override\n                            public Map extractData(ResultSet rs) throws SQLException, DataAccessException {\n                             while (rs.next()) {\n                             Map<String, Object",
      "es": 0.3504273504273504,
      "em": false,
      "passed": false
    },
    {
      "index": 423,
      "groundtruth": "(methodInfo.getActionInfo().getBatchParameter()));",
      "prediction": "(methodInfo.getActionInfo().getBatchParameter()));",
      "raw_prediction": "(methodInfo.getActionInfo().getBatchParameter()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 424,
      "groundtruth": "page.getStartRow() + 1;",
      "prediction": "page.getStartRow();",
      "raw_prediction": "page.getStartRow();",
      "es": 0.8260869565217391,
      "em": false,
      "passed": false
    },
    {
      "index": 425,
      "groundtruth": "Repository repository : gitLabRepositoryApi.findRepositories()) {",
      "prediction": "Repository repository : gitLabRepo",
      "raw_prediction": "Repository repository : gitLabRepositoryApi.readRepositories()) {",
      "es": 0.523076923076923,
      "em": false,
      "passed": false
    },
    {
      "index": 426,
      "groundtruth": "if (methodInfo.getArgs() != null && methodInfo.getArgs().length > 0) {",
      "prediction": "if (interceptor.modifySql(methodInfo, jdbcTemplate))",
      "raw_prediction": " if (interceptor.modifySql(methodInfo, jdbcTemplate)) {\n                        //\u56de\u5199SQL\n                        methodInvocation.getActionInfo().setBatchSql(interceptor.getBatchSql());\n                        //\u56de\u5199\u53c2\u6570\n                        methodInvocation.setArguments(interceptor.getArgs",
      "es": 0.30000000000000004,
      "em": false,
      "passed": false
    },
    {
      "index": 427,
      "groundtruth": "toStr(methodInfo.getActionInfo().getBatchSql()));",
      "prediction": "toStr(methodInfo.getActionInfo().getBatchSql()));",
      "raw_prediction": "toStr(methodInfo.getActionInfo().getBatchSql()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 428,
      "groundtruth": "methodInfo.resolveSql(sql);",
      "prediction": "//\u8bbe\u7f6e\u53c2\u6570",
      "raw_prediction": "//\u8bbe\u7f6e\u53c2\u6570\n            if (actionInfo.isHasParameter()) {\n                if (actionInfo.isParameterIsPss()) {\n                    jdbcTemplate.update(sql, (PreparedStatementSetter) methodInfo.getArgs()[actionInfo.getParameterIndex()]);\n                } else",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 429,
      "groundtruth": "equalsTo.setRightExpression(this.tenantLineHandler.getTenantId());",
      "prediction": "equalsTo.setRightExpression(this.tenantLineHandler.getTenantId());",
      "raw_prediction": "equalsTo.setRightExpression(this.tenantLineHandler.getTenantId());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 430,
      "groundtruth": "new EqualsTo(this.getAliasColumn(table), this.tenantLineHandler.getTenantId());",
      "prediction": "this.andExpression(table, where, whereSegment);",
      "raw_prediction": "this.andExpression(table, where, whereSegment);",
      "es": 0.31645569620253167,
      "em": false,
      "passed": false
    },
    {
      "index": 431,
      "groundtruth": "(methodInfo.getActionInfo().isReturnIsList()) {",
      "prediction": "(methodInfo.getActionInfo().isReturnIsList())",
      "raw_prediction": "(methodInfo.getActionInfo().isReturnIsList()) {",
      "es": 0.9574468085106383,
      "em": false,
      "passed": false
    },
    {
      "index": 432,
      "groundtruth": "(new SelectExpressionItem(new Column(this.tenantLineHandler.getTenantIdColumn())));",
      "prediction": "(new AllColumns());",
      "raw_prediction": "(new AllColumns());\n    }\n\n    /**\n     * \u5904\u7406 PlainSelect\n     *\n     * @param plainSelect PlainSelect\n     * @param whereSegment \u6240\u5c5eMapper\u5bf9\u8c61\u5168\u8def\u5f84\uff08\u5728\u539f\u79df\u6237\u62e6\u622a\u5668\u529f\u80fd",
      "es": 0.20481927710843373,
      "em": false,
      "passed": false
    },
    {
      "index": 433,
      "groundtruth": "String.format(\"%s-- key: %s\\n\", prefix, keyType.getTypeName()));",
      "prediction": "String.format(\"%s-- key: %s\\n\", prefix, keyType.getTypeName()));",
      "raw_prediction": "String.format(\"%s-- key: %s\\n\", prefix, keyType.getTypeName()));\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 434,
      "groundtruth": "DataType.buildFormattedString(elementType, nextPrefix, builder);",
      "prediction": "}",
      "raw_prediction": "}\n\n\t@Override\n\tpublic String getTypeName() {\n\n\t\treturn \"array\";\n\t}\n\n\t@Override\n\tpublic boolean canEqual(Object other) {\n\n\t\treturn other instanceof ArrayType;",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 435,
      "groundtruth": "DataType.buildFormattedString(dataType, nextPrefix, builder);",
      "prediction": "}",
      "raw_prediction": "}\n\n\t@Override\n\tpublic String toString() {\n\t\tStringBuilder builder = new StringBuilder();\n\t\tbuildFormattedString(\"\", builder);\n\t\treturn builder.toString();",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 436,
      "groundtruth": "prefix, valueType.getTypeName(),\n\t\t\t\tvalueContainsNull));",
      "prediction": "prefix, valueType.getTypeName(), valueContainsNull));",
      "raw_prediction": "prefix, valueType.getTypeName(), valueContainsNull));\n\t\tDataType.buildFormattedString(valueType, nextPrefix, builder);",
      "es": 0.9122807017543859,
      "em": true,
      "passed": true
    },
    {
      "index": 437,
      "groundtruth": ".format(\"%s-- element: %s (containsNull = %b)\\n\", prefix, elementType.getTypeName(),\n\t\t\t\tcontainsNull));",
      "prediction": ".format(\"%s| ArrayType(%s, %s)\\n\", prefix, elementType, containsNull));",
      "raw_prediction": ".format(\"%s| ArrayType(%s, %s)\\n\", prefix, elementType, containsNull));\n\t\tif (elementType instanceof StructType) {\n\t\t\t((StructType) elementType).buildFormattedString(nextPrefix, builder);\n\t\t",
      "es": 0.5480769230769231,
      "em": false,
      "passed": false
    },
    {
      "index": 438,
      "groundtruth": "dataType.getTypeName(), nullable, metadata.toString()));",
      "prediction": "dataType, nullable, metadata));",
      "raw_prediction": "\tdataType, nullable, metadata));\n\t\tif (dataType instanceof StructType) {\n\t\t\t((StructType) dataType).buildFormattedString(nextPrefix, builder);\n\t\t} else if (dataType instanceof ArrayType) {\n\t\t\t((ArrayType)",
      "es": 0.5535714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 439,
      "groundtruth": "DataType.buildFormattedString(keyType, nextPrefix, builder);",
      "prediction": "builder.append(String.format(\"%s-- value: %s\\n\", prefix, valueType.getTypeName()));",
      "raw_prediction": "\tbuilder.append(String.format(\"%s-- value: %s\\n\", prefix, valueType.getTypeName()));\n\n\t}\n\n\t/*\n\t * Builds a readable {@code String} representation of this {@code MapType}.\n\t */\n\t@Override\n\tpublic String toString",
      "es": 0.24096385542168675,
      "em": false,
      "passed": false
    },
    {
      "index": 440,
      "groundtruth": "(!dbHero.getId().equals(heroToUpdate.getId())) {",
      "prediction": "(!id.equals(heroToUpdate.getId()))",
      "raw_prediction": "(!id.equals(heroToUpdate.getId())) {",
      "es": 0.6875,
      "em": false,
      "passed": false
    },
    {
      "index": 441,
      "groundtruth": "dbHero.getXp() + 2);",
      "prediction": "dbHero.getXp() + 1);",
      "raw_prediction": "dbHero.getXp() + 1);",
      "es": 0.95,
      "em": false,
      "passed": false
    },
    {
      "index": 442,
      "groundtruth": ").equals(heroToUpdate.getId())) {",
      "prediction": ").equals(heroToUpd",
      "raw_prediction": ").equals(heroToUpdate.getId())) {",
      "es": 0.5454545454545454,
      "em": false,
      "passed": false
    },
    {
      "index": 443,
      "groundtruth": "Insets insets = UIUtils.getInsets(\"Toast.shadowInsets\", new Insets(0, 0, 6, 6));",
      "prediction": "int shadowRadius = FlatUIUtils.getUIInt(prefix + \".shadowRadius\", 4);",
      "raw_prediction": "int shadowRadius = FlatUIUtils.getUIInt(prefix + \".shadowRadius\", 4);",
      "es": 0.275,
      "em": false,
      "passed": false
    },
    {
      "index": 444,
      "groundtruth": "UIUtils.getString(prefix + \".effectAlignment\", \"left\");",
      "prediction": "FlatUIUtils.getString(prefix + \".effectAlignment\", \"center\");",
      "raw_prediction": "FlatUIUtils.getString(prefix + \".effectAlignment\", \"center\");",
      "es": 0.8688524590163934,
      "em": false,
      "passed": false
    },
    {
      "index": 445,
      "groundtruth": "notificationHolder.clearHold();",
      "prediction": "clearHold();",
      "raw_prediction": "clearHold();",
      "es": 0.3870967741935484,
      "em": false,
      "passed": false
    },
    {
      "index": 446,
      "groundtruth": "UIUtils.getInsets(\"Toast.frameInsets\", new Insets(10, 10, 10, 10));",
      "prediction": "UIScale.scale(FlatUIUtils.addInsets(FlatUIUtils.getUIInsets(\"Toast.frameInsets\"), new Insets(0, 0, 0",
      "raw_prediction": "UIScale.scale(FlatUIUtils.addInsets(FlatUIUtils.getUIInsets(\"Toast.frameInsets\"), new Insets(0, 0, 0, 0)));\n            frameInsets = UIScale.scale(FlatUIUtils.addInsets",
      "es": 0.47,
      "em": false,
      "passed": false
    },
    {
      "index": 447,
      "groundtruth": "notificationHolder.removeHold(hold);",
      "prediction": "notificationAnimation.close();",
      "raw_prediction": " notificationAnimation.close();\n             } else {\n                 notificationAnimation.start();",
      "es": 0.4444444444444444,
      "em": false,
      "passed": false
    },
    {
      "index": 448,
      "groundtruth": "toastNotificationPanel.setDialog(window);",
      "prediction": "window.setAlwaysOnTop(true);",
      "raw_prediction": " window.setAlwaysOnTop(true);\n            window.setUndecorated(true);\n            window.setOpacity(0f);",
      "es": 0.19512195121951215,
      "em": false,
      "passed": false
    },
    {
      "index": 449,
      "groundtruth": "+ \".closeIcon\", UIUtils.createIcon(\"raven/toast/svg/close.svg\", closeIconColor, 0.75f));",
      "prediction": "+ \".closeButtonIcon\", null);",
      "raw_prediction": "+ \".closeButtonIcon\", null);",
      "es": 0.25,
      "em": false,
      "passed": false
    },
    {
      "index": 450,
      "groundtruth": "hold = notificationHolder.getHold(notificationAnimation.getLocation());",
      "prediction": "hold = notificationHolder.getHold(notificationAnimation.getLocation());",
      "raw_prediction": "hold = notificationHolder.getHold(notificationAnimation.getLocation());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 451,
      "groundtruth": "UIUtils.getInsets(prefix + \".margin\", new Insets(8, 8, 8, 8));",
      "prediction": "UIUtils.getInsets(prefix + \".margin\", new Insets(0, 0, 4, 4));",
      "raw_prediction": "UIUtils.getInsets(prefix + \".margin\", new Insets(0, 0, 4, 4));",
      "es": 0.935483870967742,
      "em": false,
      "passed": false
    },
    {
      "index": 452,
      "groundtruth": "notificationHolder.clearHold(location);",
      "prediction": "updateList(location, notificationAnimation, false);",
      "raw_prediction": "updateList(location, notificationAnimation, false);",
      "es": 0.2941176470588235,
      "em": false,
      "passed": false
    },
    {
      "index": 453,
      "groundtruth": "toastNotificationPanel.set(type, message);",
      "prediction": "toastNotificationPanel.setLayout(new BorderLayout());",
      "raw_prediction": "toastNotificationPanel.setLayout(new BorderLayout());\n        toastNotificationPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));",
      "es": 0.6226415094339622,
      "em": false,
      "passed": false
    },
    {
      "index": 454,
      "groundtruth": "notificationHolder.hold(notificationAnimation);",
      "prediction": "notificationHolder.addHold(notificationAnimation);",
      "raw_prediction": " notificationHolder.addHold(notificationAnimation);",
      "es": 0.92,
      "em": false,
      "passed": false
    },
    {
      "index": 455,
      "groundtruth": "lowerLeft.getY()).transform(new GenericShape(originalPoints)).getPoints();",
      "prediction": "lowerLeft.getY()).apply(originalPoints);",
      "raw_prediction": "lowerLeft.getY()).apply(originalPoints);",
      "es": 0.4864864864864865,
      "em": false,
      "passed": false
    },
    {
      "index": 456,
      "groundtruth": "lowerLeft.getX(), lowerLeft.getY()).transform(new GenericShape(originalPoints)).getPoints();",
      "prediction": "lowerLeft).apply(originalPoints);",
      "raw_prediction": "lowerLeft).apply(originalPoints);",
      "es": 0.3152173913043478,
      "em": false,
      "passed": false
    },
    {
      "index": 457,
      "groundtruth": "y][x].isSet()) {",
      "prediction": "y][x].isSe",
      "raw_prediction": "y][x].isSet()) {",
      "es": 0.625,
      "em": false,
      "passed": false
    },
    {
      "index": 458,
      "groundtruth": "(point.getX(), point.getY());",
      "prediction": "(point.getX(), point.getY());",
      "raw_prediction": "(point.getX(), point.getY());\n        }\n    }\n\n    public void clear(Shape shape) {\n        for (Point point : shape.getPoints()) {\n            unset(point.getX(), point.getY());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 459,
      "groundtruth": "getX() * factor, point.getY() * factor + 50, factor, factor);",
      "prediction": "getX() * factor, point.getY() * factor, factor, factor);",
      "raw_prediction": "getX() * factor, point.getY() * factor, factor, factor);",
      "es": 0.9180327868852459,
      "em": false,
      "passed": false
    },
    {
      "index": 460,
      "groundtruth": ".drawOval(point.getX() * factor, point.getY() * factor + 50, factor, factor);",
      "prediction": ".setColor(Color.BLACK);",
      "raw_prediction": ".setColor(Color.BLACK);\n                g.fillRect(factor * point.getX(), factor * point.getY(), factor, factor);",
      "es": 0.1428571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 461,
      "groundtruth": ", this.parserMulti(methodInfo.getActionInfo().getBatchSql()[i], null));",
      "prediction": ", sql, obj);",
      "raw_prediction": ", sql, obj);",
      "es": 0.12676056338028174,
      "em": false,
      "passed": false
    },
    {
      "index": 462,
      "groundtruth": "ExceptionUtils.mpe(\"Failed to process multiple-table update, please exclude the tableName or statementId\");",
      "prediction": "ExceptionUtils.unsupportedOperationException(\"insert into select not supported\");",
      "raw_prediction": "ExceptionUtils.unsupportedOperationException(\"insert into select not supported\");",
      "es": 0.3551401869158879,
      "em": false,
      "passed": false
    },
    {
      "index": 463,
      "groundtruth": "array.validateShape(String.valueOf(key), expectedShape);",
      "prediction": "array.validateShape(key, expectedShape);",
      "raw_prediction": "array.validateShape(key, expectedShape);",
      "es": 0.7142857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 464,
      "groundtruth": "myJavaInputStream    = in.getInputStream();",
      "prediction": "myJavaInputStream  = in.getInputStream();",
      "raw_prediction": "myJavaInputStream  = in.getInputStream();",
      "es": 0.9534883720930233,
      "em": true,
      "passed": true
    },
    {
      "index": 465,
      "groundtruth": "myPythonInputStream  = out.getInputStream();",
      "prediction": "myPythonInputStream = out.getInputStream();",
      "raw_prediction": "myPythonInputStream = out.getInputStream();",
      "es": 0.9772727272727273,
      "em": true,
      "passed": true
    },
    {
      "index": 466,
      "groundtruth": "= StringUtil.stackTraceToString(t);",
      "prediction": "= StringUtil.stackTraceToString(t);",
      "raw_prediction": "= StringUtil.stackTraceToString(t);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 467,
      "groundtruth": "param.put(item.getValue(), hParam);",
      "prediction": "param.put(item.getValue(),hParam);",
      "raw_prediction": " param.put(item.getValue(),hParam);",
      "es": 0.9714285714285714,
      "em": false,
      "passed": false
    },
    {
      "index": 468,
      "groundtruth": "GrayParamHolder.putValues(param);",
      "prediction": "GrayParamHolder.setValue(param);",
      "raw_prediction": "GrayParamHolder.setValue(param);",
      "es": 0.9090909090909091,
      "em": false,
      "passed": false
    },
    {
      "index": 469,
      "groundtruth": "= GrayUtil.isGrayRequest();",
      "prediction": "= GrayUtil.isGrayRequest();",
      "raw_prediction": "= GrayUtil.isGrayRequest();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 470,
      "groundtruth": "if(GrayUtil.isGrayPod()){",
      "prediction": "if(GrayUtil.isGray())",
      "raw_prediction": " if(GrayUtil.isGray()){ //\u7070\u5ea6\u73af\u5883\uff0c\u6dfb\u52a0\u7070\u5ea6\u76f8\u5173\u53c2\u6570\n                 paramMap.put(GrayscaleConstant.GRAY_KEY, GrayscaleConstant.GRAY_VALUE);",
      "es": 0.84,
      "em": false,
      "passed": false
    },
    {
      "index": 471,
      "groundtruth": "info(\"\u5f53\u524d\u5b9e\u4f8b\u76d1\u542cmq\u961f\u5217\u7684\u72b6\u6001:{",
      "prediction": "info(\"\u5f53\u524d\u670d\u52a1\u662f\u5426\u5305\u542b\u7070\u5ea6\u5b9e\u4f8b\uff1a{}\", this.isHaveGray(in",
      "raw_prediction": "info(\"\u5f53\u524d\u670d\u52a1\u662f\u5426\u5305\u542b\u7070\u5ea6\u5b9e\u4f8b\uff1a{}\", this.isHaveGray(instances));\n        log.info(\"\u5f53\u524d\u670d\u52a1\u662f\u5426\u4e3a\u751f\u4ea7\u73af\u5883\uff1a{}\", newState.equals(ListenerStateEnum.PRODUCTION));\n        log.info(\"\u5f53\u524d\u670d\u52a1\u662f\u5426\u4e3a\u7070",
      "es": 0.23809523809523814,
      "em": false,
      "passed": false
    },
    {
      "index": 472,
      "groundtruth": "=GrayUtil.requestGroup();",
      "prediction": "=GrayUtil.getGrayGroup();",
      "raw_prediction": "=GrayUtil.getGrayGroup();",
      "es": 0.76,
      "em": false,
      "passed": false
    },
    {
      "index": 473,
      "groundtruth": "String> attributes= GrayParamHolder.getGrayMap();",
      "prediction": "String> attributes= GrayParamHolder.getGrayMap();",
      "raw_prediction": "String> attributes= GrayParamHolder.getGrayMap();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 474,
      "groundtruth": "getName() + \"\u7070\u5ea6\u73af\u5883\u53d8\u66f4:\" + listenerStateEnum.getValue());",
      "prediction": "getName().concat(\"\u63a5\u6536\u5230\u7070\u5ea6\u5b9e\u4f8b\u4e0a\u4e0b\u7ebf\u4e8b\u4ef6\").concat(listenerStateEnum.name()));",
      "raw_prediction": "getName().concat(\"\u63a5\u6536\u5230\u7070\u5ea6\u5b9e\u4f8b\u4e0a\u4e0b\u7ebf\u4e8b\u4ef6\").concat(listenerStateEnum.name()));\n        if (currentState != null && currentState.equals(listenerStateEnum)) {\n            log.info(this.getClass().getName().concat(\"\u5f53\u524d\u72b6\u6001\u4e0e\u63a5\u6536\u5230",
      "es": 0.4925373134328358,
      "em": false,
      "passed": false
    },
    {
      "index": 475,
      "groundtruth": "getHeader(item.getValue());",
      "prediction": "getHeader(item.getValue());",
      "raw_prediction": "getHeader(item.getValue());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 476,
      "groundtruth": "(\"\u5f53\u524d\u5b9e\u4f8b\u662f\u5426\u4e3a\u7070\u5ea6\u73af\u5883\uff1a{",
      "prediction": "(\"\u5f53\u524d\u670d\u52a1\u662f\u5426\u4e3a\u7070\u5ea6\u5b9e\u4f8b\uff1a{",
      "raw_prediction": "(\"\u5f53\u524d\u670d\u52a1\u662f\u5426\u4e3a\u7070\u5ea6\u5b9e\u4f8b\uff1a{",
      "es": 0.7333333333333334,
      "em": false,
      "passed": false
    },
    {
      "index": 477,
      "groundtruth": "myByteList.clear();",
      "prediction": "write(Operations.FLOAT);",
      "raw_prediction": "write(Operations.FLOAT);\n        // The pickle protocol saves Python floats in big-endian format.\n        write(myFourByteBuffer.order(ByteOrder.BIG_ENDIAN).putFloat(0, o));",
      "es": 0.16666666666666663,
      "em": false,
      "passed": false
    },
    {
      "index": 478,
      "groundtruth": "(myByteList.toArray());",
      "prediction": "(myByteList.array());",
      "raw_prediction": "(myByteList.array());",
      "es": 0.8695652173913043,
      "em": false,
      "passed": false
    },
    {
      "index": 479,
      "groundtruth": "PythonMinion.byValue(foo);",
      "prediction": "\"bar\";",
      "raw_prediction": "\"bar\";\n            start = System.nanoTime();\n            for (int i=0; i < count; i++) {\n                result = python.invoke(\"len\", Integer.class, foo);\n            }\n            end = System.nanoTime();\n            System.out",
      "es": 0.11538461538461542,
      "em": false,
      "passed": false
    },
    {
      "index": 480,
      "groundtruth": "python.invoke(\"len\", Integer.class, foo);",
      "prediction": "python.invoke(\"len\", Integer.class, foo);",
      "raw_prediction": "python.invoke(\"len\", Integer.class, foo);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 481,
      "groundtruth": "python.invoke(\"len\", Integer.class, arg);",
      "prediction": "python.invoke(\"len\", Integer.class, arg);",
      "raw_prediction": "python.invoke(\"len\", Integer.class, arg);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 482,
      "groundtruth": "[]     shape   = {",
      "prediction": "* <p>Protocol version 2 is pickles a",
      "raw_prediction": "\n * <p>Protocol version 2 is pickles are supported. Protocol version 1\n * is pickles are not supported.\n *\n * <p>Python's pickle format is described in the <a href=\"https://docs",
      "es": 0.13888888888888884,
      "em": false,
      "passed": false
    },
    {
      "index": 483,
      "groundtruth": "RtcMsg.createContractTransaction(\n                        subject, application, content, to));",
      "prediction": "new RtcMsg(subject, application, content, to));",
      "raw_prediction": "    new RtcMsg(subject, application, content, to));\n    }\n\n    public static RawRtcMsg createRtcMsg(\n            String subject, String application, String content, String to, RtcMsgType type) {\n       ",
      "es": 0.43617021276595747,
      "em": false,
      "passed": false
    },
    {
      "index": 484,
      "groundtruth": "rawTransaction = RawTelegram.createTransaction(nonce, gasPrice, gasLimit, contractAddress, value, data);",
      "prediction": "rawTransaction = RawTelegram.createTransaction(nonce, gasPrice, gasLimit, contractAddress, value, data);",
      "raw_prediction": "rawTransaction = RawTelegram.createTransaction(nonce, gasPrice, gasLimit, contractAddress, value, data);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 485,
      "groundtruth": "o.getNoCheck(i));",
      "prediction": "",
      "raw_prediction": "\n",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 486,
      "groundtruth": "myByteList.append(Float.toString(o).getBytes());",
      "prediction": "myByteList.add((byte) (o?1:0));",
      "raw_prediction": "myByteList.add((byte) (o?1:0));",
      "es": 0.41666666666666663,
      "em": false,
      "passed": false
    },
    {
      "index": 487,
      "groundtruth": "(config.getValueOutputFormat() == BaseTableWriterConfig.OutputFormat.STRING\n        && !(recordValue instanceof String)) {",
      "prediction": "(config.getValueOutputFormat() == BaseTableWriterConfig.OutputFormat.STRING\n        && !(recordValue instanceof String))",
      "raw_prediction": "(config.getValueOutputFormat() == BaseTableWriterConfig.OutputFormat.STRING\n        && !(recordValue instanceof String)) {",
      "es": 0.9836065573770492,
      "em": false,
      "passed": false
    },
    {
      "index": 488,
      "groundtruth": ", SCALAR_ARRAY_SHAPE, rawData.data());",
      "prediction": ");",
      "raw_prediction": ");\n             final boolean myIsFortran;\n private final int[] myShape;\n private final ByteBuffer myData;\n\n    /**\n     * Constructor.\n     */\n    public NumpyArray(DType dtype, boolean isFortran, int[] shape,",
      "es": 0.052631578947368474,
      "em": false,
      "passed": false
    },
    {
      "index": 489,
      "groundtruth": "Util.parseHumanReadableDuration(value.toString());",
      "prediction": "Duration.parse(value.toString());",
      "raw_prediction": "  Duration.parse(value.toString());",
      "es": 0.45999999999999996,
      "em": false,
      "passed": false
    },
    {
      "index": 490,
      "groundtruth": "(config.getKeyOutputFormat() == BaseTableWriterConfig.OutputFormat.STRING\n        && !(recordKey instanceof String)) {",
      "prediction": "(config.getKeyOutputFormat() == BaseTableWriterConfig.OutputFormat.STRING\n        && !(recordKey instanceof String))",
      "raw_prediction": "(config.getKeyOutputFormat() == BaseTableWriterConfig.OutputFormat.STRING\n        && !(recordKey instanceof String)) {",
      "es": 0.9830508474576272,
      "em": false,
      "passed": false
    },
    {
      "index": 491,
      "groundtruth": "return dummyArray.getLong(0);",
      "prediction": "* <p>For example, the following Python code:",
      "raw_prediction": "\n * <p>For example, the following Python code:\n *\n * <pre>\npython\n * import numpy as np\n * a = np.array([1, 2, 3])\n * b = np.array([4,",
      "es": 0.15909090909090906,
      "em": false,
      "passed": false
    },
    {
      "index": 492,
      "groundtruth": "if (usuario.getPassword().equals(Senha)) {",
      "prediction": "if (usuario.getSenha().equals(Senha))",
      "raw_prediction": " if (usuario.getSenha().equals(Senha)) {",
      "es": 0.7619047619047619,
      "em": false,
      "passed": false
    },
    {
      "index": 493,
      "groundtruth": "RA_atual = usuario.getMatricula();",
      "prediction": "setUser(usuario);",
      "raw_prediction": "setUser(usuario);",
      "es": 0.2941176470588235,
      "em": false,
      "passed": false
    },
    {
      "index": 494,
      "groundtruth": "!twilioService.validatePhoneNumber(from)) {",
      "prediction": "!twilioService.isValidP",
      "raw_prediction": "!twilioService.isValidPhoneNumber(from)) {",
      "es": 0.41860465116279066,
      "em": false,
      "passed": false
    },
    {
      "index": 495,
      "groundtruth": "String response = chatGPTService.askQuestion(message);",
      "prediction": "String response = chatGPTService.sendChatMessage(message);",
      "raw_prediction": "String response = chatGPTService.sendChatMessage(message);",
      "es": 0.7758620689655172,
      "em": false,
      "passed": false
    },
    {
      "index": 496,
      "groundtruth": "chatGPTService.askQuestion(body);",
      "prediction": "chatGPTService.pro",
      "raw_prediction": "chatGPTService.processMessage(body);        logger.info(\"Processed message: \" + body + \" with response: \" + response);\n        twilioService.sendSMS(from, response);\n        logger.info(\"Sent response to \" + from +",
      "es": 0.48484848484848486,
      "em": false,
      "passed": false
    },
    {
      "index": 497,
      "groundtruth": "chatGPTConfiguration.setApiKey(ConfigUtils.obfuscateApiKey(chatGPTConfiguration.getApiKey()));",
      "prediction": "chatGPTConfiguration.setApiKey(ConfigUtils.getEnvVar(\"CHATGPT_API_KEY\"));",
      "raw_prediction": " chatGPTConfiguration.setApiKey(ConfigUtils.getEnvVar(\"CHATGPT_API_KEY\"));",
      "es": 0.5425531914893618,
      "em": false,
      "passed": false
    },
    {
      "index": 498,
      "groundtruth": "(request.getTo());",
      "prediction": "(request.getTo());",
      "raw_prediction": "(request.getTo());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 499,
      "groundtruth": "responseFrame = FrameMapper.mapFromBytesToInstance(currentFrameBytes);",
      "prediction": "responseFrame = FrameMapper.mapFromBytesToInstance(currentFrame.data());",
      "raw_prediction": "responseFrame = FrameMapper.mapFromBytesToInstance(currentFrame.data());",
      "es": 0.9166666666666666,
      "em": false,
      "passed": false
    },
    {
      "index": 500,
      "groundtruth": "UDPFrame currentFrame = FrameMapper.mapFromBytesToInstance(incomingRequestPacket.getData());",
      "prediction": "UDPFrame currentFrame = FrameMapper.map(incomingRequestPacket.getData(), incomingRequestPacket.getLength());",
      "raw_prediction": "\t\tUDPFrame currentFrame = FrameMapper.map(incomingRequestPacket.getData(), incomingRequestPacket.getLength());",
      "es": 0.6944444444444444,
      "em": false,
      "passed": false
    },
    {
      "index": 501,
      "groundtruth": ", List<UDPFrame>> completedRequestFrameList : map.findCompletedRequestsFrameLists())\n\t\t\t\t{",
      "prediction": ", List<UDPFrame>> completedRequestFrameList : m",
      "raw_prediction": ", List<UDPFrame>> completedRequestFrameList : map.getCompletedRequests())\n\t\t\t\t{\n\t\t\t\t\tList<UDPFrame> completedRequestFrameList = map.getCompletedRequests().get(completedRequestFrameList.key());",
      "es": 0.5222222222222221,
      "em": false,
      "passed": false
    },
    {
      "index": 502,
      "groundtruth": "sendResponseWithOverhead(responseBytes, response.getTo());",
      "prediction": "sendResponseWithOverhead(responseBytes, response.getTo());",
      "raw_prediction": "sendResponseWithOverhead(responseBytes, response.getTo());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 503,
      "groundtruth": "return execute(api.getModel(modelId));",
      "prediction": "return execute(api.getModel(modelId));",
      "raw_prediction": "return execute(api.getModel(modelId));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 504,
      "groundtruth": "return execute(api.listModels()).data;",
      "prediction": "return execute(api.listModels());",
      "raw_prediction": "return execute(api.listModels());",
      "es": 0.868421052631579,
      "em": false,
      "passed": false
    },
    {
      "index": 505,
      "groundtruth": "if (infoFilter.isStudentIdValid(studentId)) {",
      "prediction": "if (infoFilter.checkStudentId(studentId))",
      "raw_prediction": " if (infoFilter.checkStudentId(studentId)) {",
      "es": 0.7333333333333334,
      "em": false,
      "passed": false
    },
    {
      "index": 506,
      "groundtruth": "infoFilter.isPersonIdValid(id)) {",
      "prediction": "infoFilter.isPerso",
      "raw_prediction": "infoFilter.isPersonIdValid(id)) {",
      "es": 0.5454545454545454,
      "em": false,
      "passed": false
    },
    {
      "index": 507,
      "groundtruth": "if (subject.getKind().compareTo(\n                    comboSubjectType.getItemAt(i).toString()) == 0) {",
      "prediction": "if (subject.getKind().equals(comboSubjectType.getItemAt(i)))",
      "raw_prediction": "if (subject.getKind().equals(comboSubjectType.getItemAt(i))) {",
      "es": 0.5392156862745099,
      "em": false,
      "passed": false
    },
    {
      "index": 508,
      "groundtruth": "txtMajor.setText(student.getMajor());",
      "prediction": "txtMajor.setText(student.getMajor());",
      "raw_prediction": "txtMajor.setText(student.getMajor());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 509,
      "groundtruth": "subject.getKind().compareTo(\n                    comboSubjectType.getItemAt(i).toString()) == 0) {",
      "prediction": "comboSubjectType.getItemAt(i).equals(subject.getKind())",
      "raw_prediction": "comboSubjectType.getItemAt(i).equals(subject.getKind())) {",
      "es": 0.24489795918367352,
      "em": false,
      "passed": false
    },
    {
      "index": 510,
      "groundtruth": "ect.getName() + \" tr\u01b0\u1edbc \u0111\u00f3.\";",
      "prediction": "ect.getName() + \"!\";",
      "raw_prediction": "ect.getName() + \"!\";",
      "es": 0.6551724137931034,
      "em": false,
      "passed": false
    },
    {
      "index": 511,
      "groundtruth": "if (infoFilter.isDateOfBirthValid(dob)) {",
      "prediction": "if (infoFilter.isDateOfBirthValid(dob))",
      "raw_prediction": "if (infoFilter.isDateOfBirthValid(dob)) {",
      "es": 0.9512195121951219,
      "em": false,
      "passed": false
    },
    {
      "index": 512,
      "groundtruth": "if (s.getStudentId().compareTo(studentId) == 0) {",
      "prediction": "if (s.getStudentId().equalsIgnoreCase(studentsId))",
      "raw_prediction": "if (s.getStudentId().equalsIgnoreCase(studentsId)) {",
      "es": 0.56,
      "em": false,
      "passed": false
    },
    {
      "index": 513,
      "groundtruth": "System.out.println(\"[ \" + raiz.getElement() + \" ]\");",
      "prediction": "System.out.println(\"[ \" + raiz.getElement() + \" ]\");",
      "raw_prediction": "System.out.println(\"[ \" + raiz.getElement() + \" ]\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 514,
      "groundtruth": "nodo.setRightSon(raiz.getRightSon());",
      "prediction": "if (haveRightSons) {",
      "raw_prediction": " if (haveRightSons) {\n             nodo.setRightSon(raiz.getRightSon());",
      "es": 0.3513513513513513,
      "em": false,
      "passed": false
    },
    {
      "index": 515,
      "groundtruth": "if (element == raiz.getElement()) {",
      "prediction": "if (raiz.getElement() == element)",
      "raw_prediction": "if (raiz.getElement() == element) {",
      "es": 0.37142857142857144,
      "em": false,
      "passed": false
    },
    {
      "index": 516,
      "groundtruth": "raiz.isLeaf()) {",
      "prediction": "raiz.hasNo",
      "raw_prediction": "raiz.hasNoSon()) {",
      "es": 0.375,
      "em": false,
      "passed": false
    },
    {
      "index": 517,
      "groundtruth": "(element < previousNode.getElement()) {",
      "prediction": "(element < previousNode.getElement())",
      "raw_prediction": "(element < previousNode.getElement()) {",
      "es": 0.9487179487179487,
      "em": false,
      "passed": false
    },
    {
      "index": 518,
      "groundtruth": "else if (raiz.hasOnlyRightSon()) {",
      "prediction": "else if (raiz.hasOnlyRightSon())",
      "raw_prediction": "else if (raiz.hasOnlyRightSon()) {",
      "es": 0.9411764705882353,
      "em": false,
      "passed": false
    },
    {
      "index": 519,
      "groundtruth": "raiz.getRightSon() != null;",
      "prediction": "raiz.getRightSon() != null;",
      "raw_prediction": "raiz.getRightSon() != null;",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 520,
      "groundtruth": "nodo.setLeftSon(raiz.getLeftSon());",
      "prediction": "nodo.setLeftSon(raiz.getLeftSon());",
      "raw_prediction": " nodo.setLeftSon(raiz.getLeftSon());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 521,
      "groundtruth": "Nodo nodo = searchNodoToReplace(raiz.getLeftSon());",
      "prediction": "Nodo nodo = raiz.getLeftSon();",
      "raw_prediction": " Nodo nodo = raiz.getLeftSon();",
      "es": 0.5882352941176471,
      "em": false,
      "passed": false
    },
    {
      "index": 522,
      "groundtruth": "validateLeftSon(raiz.getLeftSon());",
      "prediction": "raiz.hasOnlyRightSon();",
      "raw_prediction": "raiz.hasOnlyRightSon();\n                    if (haveRightSons) {\n                    Nodo nodo = searchNodoToReplace(raiz.getRightSon());\n                    nodo.setLeftSon(raiz.getLeftSon());\n                    nodo.setRightSon(raiz.getRight",
      "es": 0.34285714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 523,
      "groundtruth": ".setRightSon(raiz.getRightSon());",
      "prediction": ".setLeftSon(raiz.getLeftSon());",
      "raw_prediction": ".setLeftSon(raiz.getLeftSon());",
      "es": 0.7575757575757576,
      "em": false,
      "passed": false
    },
    {
      "index": 524,
      "groundtruth": "Nodo nodo = raiz.getLeftSon();",
      "prediction": "Nodo nodo = searchNodoToReplace(raiz.getRightSon());",
      "raw_prediction": " Nodo nodo = searchNodoToReplace(raiz.getRightSon());",
      "es": 0.5192307692307692,
      "em": false,
      "passed": false
    },
    {
      "index": 525,
      "groundtruth": "while(raiz.getRightSon() != null) {",
      "prediction": "while (raiz.getRightSon() != null)",
      "raw_prediction": "while (raiz.getRightSon() != null) {",
      "es": 0.9142857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 526,
      "groundtruth": "[] newSons = new Nodo[father.getSons().length + 1];",
      "prediction": "[] newSons = new Nodo[father.getSons().length + 1];",
      "raw_prediction": "[] newSons = new Nodo[father.getSons().length + 1];",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 527,
      "groundtruth": "pointer.getElement() == fatherElement) {",
      "prediction": "pointer.getElement() =",
      "raw_prediction": "pointer.getElement() == fatherElement) {",
      "es": 0.55,
      "em": false,
      "passed": false
    },
    {
      "index": 528,
      "groundtruth": "if (pointer.getSons()[i].getElement() == fatherElement) {",
      "prediction": "if (pointer.getSons()[i].getSons().length == 0)",
      "raw_prediction": "if (pointer.getSons()[i].getSons().length == 0) {",
      "es": 0.5964912280701755,
      "em": false,
      "passed": false
    },
    {
      "index": 529,
      "groundtruth": "out.println(\"[ \"+raiz.getElement() + \" ]\");",
      "prediction": "out.println(raiz.getElement());",
      "raw_prediction": "out.println(raiz.getElement());",
      "es": 0.7209302325581395,
      "em": false,
      "passed": false
    },
    {
      "index": 530,
      "groundtruth": "33, bst.getRoot());",
      "prediction": "60, bst.getRoot());",
      "raw_prediction": "60, bst.getRoot());\n        \n        System.out.println(\"Inorden\");\n        bst.inOrden(bst.getRoot());\n        \n        System.out.println(\"Postorden\");\n        bst.postOrden(bst.getRoot());\n        \n        System.out.println(\"Preorden",
      "es": 0.8947368421052632,
      "em": false,
      "passed": false
    },
    {
      "index": 531,
      "groundtruth": ".preOrden(bst.getRoot());",
      "prediction": ".insertNodoRecursive(45, bst.getRoot());",
      "raw_prediction": ".insertNodoRecursive(45, bst.getRoot());\n        \n        System.out.println(\"PreOrden\");\n        bst.preOrden(bst.getRoot());\n        \n        System.out.println(\"InOrden\");\n        bst.inOrden(bst.getRoot());\n        \n        System",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 532,
      "groundtruth": "(25, bst.getRoot());",
      "prediction": "(15, bst.getRoot());",
      "raw_prediction": "(15, bst.getRoot());",
      "es": 0.95,
      "em": false,
      "passed": false
    },
    {
      "index": 533,
      "groundtruth": ".deleteNodo(30, bst.getRoot(), null);",
      "prediction": ".deleteNode(20, bst.getRoot());",
      "raw_prediction": ".deleteNode(20, bst.getRoot());",
      "es": 0.7837837837837838,
      "em": false,
      "passed": false
    },
    {
      "index": 534,
      "groundtruth": "(getPeek().getNext());",
      "prediction": "(pointer.getNext());",
      "raw_prediction": "(pointer.getNext());",
      "es": 0.6363636363636364,
      "em": false,
      "passed": false
    },
    {
      "index": 535,
      "groundtruth": "(pointer.getNext() != pointer2) {",
      "prediction": "(pointer.getNext() != getHead())",
      "raw_prediction": "(pointer.getNext() != getHead()) {",
      "es": 0.696969696969697,
      "em": false,
      "passed": false
    },
    {
      "index": 536,
      "groundtruth": ".println(\"[ \"+pointer.getElement()+\" ]\");",
      "prediction": ".println(pointer.getElement());",
      "raw_prediction": ".println(pointer.getElement());",
      "es": 0.7560975609756098,
      "em": false,
      "passed": false
    },
    {
      "index": 537,
      "groundtruth": ").setNext(getHead());",
      "prediction": ").setNext(getHead());",
      "raw_prediction": ").setNext(getHead());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 538,
      "groundtruth": "while (pointer.getNext() != getHead()) {",
      "prediction": "while (((Nodo) (pointer.getNext())).getNext() != getHead())",
      "raw_prediction": "while (((Nodo) (pointer.getNext())).getNext() != getHead()) {",
      "es": 0.6101694915254237,
      "em": false,
      "passed": false
    },
    {
      "index": 539,
      "groundtruth": "pointer.getNext())).getNext() != getHead()) {",
      "prediction": "pointer.getNext())).getNext() != getHead()) {",
      "raw_prediction": "pointer.getNext())).getNext() != getHead()) {",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 540,
      "groundtruth": "pointer.setNext(getHead());",
      "prediction": "pointer.setNext(node);",
      "raw_prediction": " pointer.setNext(node);",
      "es": 0.7037037037037037,
      "em": false,
      "passed": false
    },
    {
      "index": 541,
      "groundtruth": "list.deleteInIndex(3);",
      "prediction": "list.printList();",
      "raw_prediction": " list.printList();\n        list.deleteInIndex(6);\n        System.out.println(\"\");",
      "es": 0.40909090909090906,
      "em": false,
      "passed": false
    },
    {
      "index": 542,
      "groundtruth": "while (pointer.getNext() != pointer2) {",
      "prediction": "while (((Nodo) (pointer.getNext())).getNext() != getHead())",
      "raw_prediction": "while (((Nodo) (pointer.getNext())).getNext() != getHead()) {",
      "es": 0.47457627118644063,
      "em": false,
      "passed": false
    },
    {
      "index": 543,
      "groundtruth": ".getNext())).getNext() != getHead()) {",
      "prediction": ".getNext())).getNext() != pointer) {",
      "raw_prediction": ".getNext())).getNext() != pointer) {",
      "es": 0.7631578947368421,
      "em": false,
      "passed": false
    },
    {
      "index": 544,
      "groundtruth": "int) pointer1.getElement();",
      "prediction": "int) pointer1.getElement();",
      "raw_prediction": "int) pointer1.getElement();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 545,
      "groundtruth": "pointer1 = lista1.getHead();",
      "prediction": "pointer1 = lista1.getHead();",
      "raw_prediction": "pointer1 = lista1.getHead();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 546,
      "groundtruth": "Nodo pointer3 = lista3.getHead();",
      "prediction": "Nodo pointer3 = lista3.getHead();",
      "raw_prediction": "Nodo pointer3 = lista3.getHead();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 547,
      "groundtruth": ").setPrevious(node);",
      "prediction": ").setPrevious(node);",
      "raw_prediction": ").setPrevious(node);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 548,
      "groundtruth": "node.setPrevious(pointer);",
      "prediction": "pointer.setNext(node);",
      "raw_prediction": " pointer.setNext(node);",
      "es": 0.34615384615384615,
      "em": false,
      "passed": false
    },
    {
      "index": 549,
      "groundtruth": "= (NodoDoble) pointer.getNext();",
      "prediction": "= (NodoDoble) pointer.getNext();",
      "raw_prediction": "= (NodoDoble) pointer.getNext();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 550,
      "groundtruth": "pointer2 = pointer.getPrevious();",
      "prediction": "pointer2 = pointer.getPrevious();",
      "raw_prediction": "pointer2 = pointer.getPrevious();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 551,
      "groundtruth": "pointer.setPrevious(null);",
      "prediction": "pointer.setNext(null);",
      "raw_prediction": "pointer.setNext(null);",
      "es": 0.7307692307692308,
      "em": false,
      "passed": false
    },
    {
      "index": 552,
      "groundtruth": "pointer2 = pointer.getNext();",
      "prediction": "//System.out.println(pointer.getElement());",
      "raw_prediction": "//System.out.println(pointer.getElement());\n                    pointer2 = pointer.getNext();",
      "es": 0.4418604651162791,
      "em": false,
      "passed": false
    },
    {
      "index": 553,
      "groundtruth": "pointer2.getNext().setPrevious(pointer);",
      "prediction": "pointer2.getNext().setPrevious(pointer);",
      "raw_prediction": " pointer2.getNext().setPrevious(pointer);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 554,
      "groundtruth": "emoji.getSubgroup() == subgroup).collect(Collectors.toSet());",
      "prediction": "emoji.getSubGroup() == subgroup).collect(Collectors.toSet());",
      "raw_prediction": "emoji.getSubGroup() == subgroup).collect(Collectors.toSet());",
      "es": 0.9836065573770492,
      "em": false,
      "passed": false
    },
    {
      "index": 555,
      "groundtruth": "(emoji -> emoji.getDiscordAliases().contains(aliasWithoutColon) || emoji.getDiscordAliases().contains(aliasWithColon))\n                .findFirst();",
      "prediction": "(emoji -> emoji.getDiscordAliases().contains(aliasWithoutColon) || emoji.getDiscordAliases().contains(aliasWithColon))\n                .findFirst();",
      "raw_prediction": "(emoji -> emoji.getDiscordAliases().contains(aliasWithoutColon) || emoji.getDiscordAliases().contains(aliasWithColon))\n                .findFirst();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 556,
      "groundtruth": "emoji.getAllAliases().contains(aliasWithoutColon) || emoji.getAllAliases().contains(aliasWithColon))\n                .findFirst();",
      "prediction": "emoji.getAliases().contains(aliasWithoutColon) || emoji.getAliases().contains(aliasWithColon))\n                .findFirst();",
      "raw_prediction": "emoji.getAliases().contains(aliasWithoutColon) || emoji.getAliases().contains(aliasWithColon))\n                .findFirst();",
      "es": 0.9538461538461538,
      "em": false,
      "passed": false
    },
    {
      "index": 557,
      "groundtruth": "return EMOJIS_LENGTH_DESCENDING.stream().filter(emoji -> emoji.getGroup() == group).collect(Collectors.toSet());",
      "prediction": "return EMOJIS_LENGTH_DESCENDING.stream().filter(emoji -> emoji.getGroup() == group).collect(Collectors.toSet());",
      "raw_prediction": "return EMOJIS_LENGTH_DESCENDING.stream().filter(emoji -> emoji.getGroup() == group).collect(Collectors.toSet());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 558,
      "groundtruth": ".removeHairStyle(Fitzpatrick.removeFitzpatrick(emoji));",
      "prediction": ".removeHairStyle(Fitzpatrick.removeFitzpatrick(getEmoji()));",
      "raw_prediction": ".removeHairStyle(Fitzpatrick.removeFitzpatrick(getEmoji()));\n        if (!baseEmoji.equals(getEmoji())) {\n            return Collections.singletonList(new Emoji(baseEmoji, unicode, discordAliases, githubAliases, slackAliases, hasFitzpatrick,",
      "es": 0.9166666666666666,
      "em": false,
      "passed": false
    },
    {
      "index": 559,
      "groundtruth": "mListener.onCancelledAuth();",
      "prediction": "mListener.onCanceled();",
      "raw_prediction": " mListener.onCanceled();",
      "es": 0.8214285714285714,
      "em": false,
      "passed": false
    },
    {
      "index": 560,
      "groundtruth": "mListener.onLoggedOut();",
      "prediction": "mListener.onLoggedOut();",
      "raw_prediction": " mListener.onLoggedOut();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 561,
      "groundtruth": "HuaweiPushPlugin.handleReceiveMessage(messageData);",
      "prediction": "if (messageData != null && !messageData.isEmpty())",
      "raw_prediction": "if (messageData != null && !messageData.isEmpty()) {\n            try {\n                JSONObject jsonObject = new JSONObject(messageData);\n                String action = jsonObject.getString(\"action\");\n                String payload = jsonObject.getString(\"payload\");\n                HuaweiPushPlugin.handle",
      "es": 0.17647058823529416,
      "em": false,
      "passed": false
    },
    {
      "index": 562,
      "groundtruth": "mAdStatusListener.onRewarded(rewardName, rewardAmount);",
      "prediction": "mAdStatusListener.onRewarded(rewardAmount, rewardName);",
      "raw_prediction": " mAdStatusListener.onRewarded(rewardAmount, rewardName);\n                         }",
      "es": 0.7818181818181819,
      "em": false,
      "passed": false
    },
    {
      "index": 563,
      "groundtruth": "CipherUtil.doCheck(inAppPurchaseDataStr, inAppPurchaseDataSignature, mPublicKey)) {",
      "prediction": "!TextUtils.isEmpty(inAppPurchaseDataSignature)",
      "raw_prediction": "!TextUtils.isEmpty(inAppPurchaseDataSignature)) {",
      "es": 0.40963855421686746,
      "em": false,
      "passed": false
    },
    {
      "index": 564,
      "groundtruth": "iapApiCallback.onFail(e);",
      "prediction": "iapApiCallback.onFail(e);",
      "raw_prediction": "iapApiCallback.onFail(e);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 565,
      "groundtruth": "list.deleteInIndex(6);",
      "prediction": "list.printList();",
      "raw_prediction": "list.printList();",
      "es": 0.40909090909090906,
      "em": false,
      "passed": false
    },
    {
      "index": 566,
      "groundtruth": "list.deleteInIndex(2);",
      "prediction": "list.printList();",
      "raw_prediction": "list.printList();",
      "es": 0.40909090909090906,
      "em": false,
      "passed": false
    },
    {
      "index": 567,
      "groundtruth": ").compareTo(cont.getTitular()) < 0) {",
      "prediction": ").compareTo(cont.get",
      "raw_prediction": ").compareTo(cont.getTitular()) < 0) {",
      "es": 0.5405405405405406,
      "em": false,
      "passed": false
    },
    {
      "index": 568,
      "groundtruth": "out.printf(\"Saldo atualizado: R$%.2f%n\", conta.getSaldo());",
      "prediction": "out.println(\"Saldo atual: R$ \" + this.saldo);",
      "raw_prediction": "out.println(\"Saldo atual: R$ \" + this.saldo);",
      "es": 0.576271186440678,
      "em": false,
      "passed": false
    },
    {
      "index": 569,
      "groundtruth": ".getTitular().compareTo(cont.getTitular()) > 0) {",
      "prediction": ".getTitular().compareTo(cont.getTitular())",
      "raw_prediction": ".getTitular().compareTo(cont.getTitular()) > 0) {",
      "es": 0.8571428571428572,
      "em": false,
      "passed": false
    },
    {
      "index": 570,
      "groundtruth": "conta.sacar(valor, conta);",
      "prediction": "if (valor < 0)",
      "raw_prediction": "\tif (valor < 0) {\n\t\t\t\t\tSystem.out.println(\"Insira um valor v\u00e1lido.\");\n\t\t\t\t\tmenuCliente(conta, cliente);\n\t\t\t\t}\n\t\t\t\t\t\t\tif (valor > conta.getSaldo()) {\n\t\t\t\t\t\t\t\tSystem.out.println(\"Saldo",
      "es": 0.3076923076923077,
      "em": false,
      "passed": false
    },
    {
      "index": 571,
      "groundtruth": "printf(\"Saldo atual: R$ %.2f\", conta.getSaldo());",
      "prediction": "println(\"Dep\u00f3sito realizado com sucesso.\");",
      "raw_prediction": "println(\"Dep\u00f3sito realizado com sucesso.\");\n\t\t\t\t\t\tmenuCliente(conta, cliente);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 3:\n\t\t\t\t\t\tSystem.out.printf(\"Insira o valor da transfer\u00eancia: R$ \");\n\t\t\t\t\t\tvalor = sc.nextDouble();\n\t\t\t\t\t",
      "es": 0.30612244897959184,
      "em": false,
      "passed": false
    },
    {
      "index": 572,
      "groundtruth": "pointer2 = (Nodo) pointer2.getNext();",
      "prediction": "System.out.print(\" \");",
      "raw_prediction": "        System.out.print(\" \");",
      "es": 0.2432432432432432,
      "em": false,
      "passed": false
    },
    {
      "index": 573,
      "groundtruth": "System.out.println(\"Valor de tarifa cobrado no dep\u00f3sito: R$ \" + ContaCorrente.getTarifaDeposito());",
      "prediction": "System.out.println(\"Valor de tarifa cobrado no deposito: R$ \" + ContaCorrente.getTarifaDeposito());",
      "raw_prediction": " System.out.println(\"Valor de tarifa cobrado no deposito: R$ \" + ContaCorrente.getTarifaDeposito());",
      "es": 0.98989898989899,
      "em": false,
      "passed": false
    },
    {
      "index": 574,
      "groundtruth": "(cpfDestinatario.equals(conta.getCpf())) {",
      "prediction": "(SistemaBancario.mapaDeContas.get(cpfDestinatario) == null)",
      "raw_prediction": "(SistemaBancario.mapaDeContas.get(cpfDestinatario) == null) {",
      "es": 0.3220338983050848,
      "em": false,
      "passed": false
    },
    {
      "index": 575,
      "groundtruth": "conta.transferir(contaDestino, valor, conta);",
      "prediction": "if (contaDestinos == null)",
      "raw_prediction": "\tif (contaDestinos == null) {\n\t\t\t\t\t\tSystem.out.println();\n\t\t\t\t\t\tSystem.out.println(\"Conta n\u00e3o encontrada.\");\n\t\t\t\t\t\tmenuFuncionario(funcionario, conta, listaContas, cpf, cliente);\n\t\t\t\t\t} else {\n\t\t\t\t\t",
      "es": 0.37777777777777777,
      "em": false,
      "passed": false
    },
    {
      "index": 576,
      "groundtruth": "printf(\"NOME: %s\\t| AG\u00caNCIA: %s\\n\", c.getTitular(), c.getAgencia());",
      "prediction": "println(c);",
      "raw_prediction": "println(c);",
      "es": 0.1470588235294118,
      "em": false,
      "passed": false
    },
    {
      "index": 577,
      "groundtruth": "etTitular(), c.getAgencia());",
      "prediction": "etCliente().getNome(), c.getAgencia().getNumAgencia());",
      "raw_prediction": "etCliente().getNome(), c.getAgencia().getNumAgencia());",
      "es": 0.4363636363636364,
      "em": false,
      "passed": false
    },
    {
      "index": 578,
      "groundtruth": "Escritor.registroDeDadosAtualizados();",
      "prediction": "System.out.println(\"Encerrando sistema...\");",
      "raw_prediction": "System.out.println(\"Encerrando sistema...\");",
      "es": 0.2272727272727273,
      "em": false,
      "passed": false
    },
    {
      "index": 579,
      "groundtruth": "println(\"Total de saques: \" + conta.getTotalSaques());",
      "prediction": "println(\"Total de saques: \" + conta.getTotalSaques());",
      "raw_prediction": "println(\"Total de saques: \" + conta.getTotalSaques());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 580,
      "groundtruth": "capitalBancoSaldo += lista.getSaldo();",
      "prediction": "if (c.getTitular().equals(cliente.getNome()))",
      "raw_prediction": "\t\tif (c.getTitular().equals(cliente.getNome())) {\n\t\t\t\t\tcapitalBancoSaldo += c.getSaldo();\n\t\t\t\t}",
      "es": 0.2666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 581,
      "groundtruth": ".out.println(pointer2.getElement());",
      "prediction": ".out.println(\"El elemento en la posicion \"+(cont3+1)+\" es: \"+pointer2.ge",
      "raw_prediction": ".out.println(\"El elemento en la posicion \"+(cont3+1)+\" es: \"+pointer2.getElement());\n            pointer2 = (Nodo) pointer2.getNext();",
      "es": 0.29166666666666663,
      "em": false,
      "passed": false
    },
    {
      "index": 582,
      "groundtruth": "(\"Valor de tarifa cobrado na tranfer\u00eancia: R$ \" + ContaCorrente.getTarifaTransferencia());",
      "prediction": "(\"Valor de tarifa cobrado na transfer\u00eancia: R$ \" + ContaCorrente.getTarifaTransferencia());",
      "raw_prediction": "(\"Valor de tarifa cobrado na transfer\u00eancia: R$ \" + ContaCorrente.getTarifaTransferencia());",
      "es": 0.989010989010989,
      "em": false,
      "passed": false
    },
    {
      "index": 583,
      "groundtruth": "conta.imprimeExtrato(conta);",
      "prediction": "System.out.println();",
      "raw_prediction": "\tSystem.out.println();",
      "es": 0.2142857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 584,
      "groundtruth": "= \"Ag\u00eancia: \" + conta.getAgencia();",
      "prediction": "= \"Agencia: \" + conta.getAgencia();",
      "raw_prediction": "= \"Agencia: \" + conta.getAgencia();",
      "es": 0.9714285714285714,
      "em": false,
      "passed": false
    },
    {
      "index": 585,
      "groundtruth": "= valorSimulado * ((ContaPoupanca.getTaxaRendimento() / 30) * dias);",
      "prediction": "= conta.calcularRendimentoPoupanca(dias);",
      "raw_prediction": "= conta.calcularRendimentoPoupanca(dias);",
      "es": 0.36764705882352944,
      "em": false,
      "passed": false
    },
    {
      "index": 586,
      "groundtruth": "tarifaTotalSaque = conta.getTotalSaques() * ContaCorrente.getTarifaSaque();",
      "prediction": "tarifaTotalSaque = conta.getTotalSaques() * ContaCorrente.getTarifaSaque();",
      "raw_prediction": "tarifaTotalSaque = conta.getTotalSaques() * ContaCorrente.getTarifaSaque();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 587,
      "groundtruth": "ag.getNumAgencia());",
      "prediction": "ag.getNumAgencia() + \";\" + ag.getNome())",
      "raw_prediction": "ag.getNumAgencia() + \";\" + ag.getNome());\n\t\t\tbw.newLine();\n\t\t}\n\n\t\t\t// registrando os funcion\u00e1rios\n\t\t\tfor (Funcionario func : SistemaBancario.funcionarios) {\n\t\t\t\tbw.write",
      "es": 0.475,
      "em": false,
      "passed": false
    },
    {
      "index": 588,
      "groundtruth": ").getNome() + \"_\" + conta.getTitular().getTipoDeUsuario();",
      "prediction": ").getNome() + \"_\" + conta.getTitular().getTipoDeUsuario();",
      "raw_prediction": ").getNome() + \"_\" + conta.getTitular().getTipoDeUsuario();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 589,
      "groundtruth": "queue.getSize()){",
      "prediction": "queue.getS",
      "raw_prediction": "queue.getSize()) {",
      "es": 0.5882352941176471,
      "em": false,
      "passed": false
    },
    {
      "index": 590,
      "groundtruth": "= (Nodo) queue.getHead().getNext();",
      "prediction": "= (Nodo) queue.getHead();",
      "raw_prediction": "= (Nodo) queue.getHead();\n            cont3 = 0;\n        }\n    }\n    \n    public void Ejercicio2(Queue queue){\n        int acum = 0;\n        Nodo pointer = queue.getHead();\n        while",
      "es": 0.7142857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 591,
      "groundtruth": "\"Ag\u00eancia : \" + conta.getAgencia();",
      "prediction": "\"Ag\u00eancia: \" + conta.getAgencia();",
      "raw_prediction": "\"Ag\u00eancia: \" + conta.getAgencia();",
      "es": 0.9705882352941176,
      "em": false,
      "passed": false
    },
    {
      "index": 592,
      "groundtruth": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteTransferencia\";",
      "prediction": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteTransferencia\";",
      "raw_prediction": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteTransferencia\";",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 593,
      "groundtruth": "String arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteExtrato\";",
      "prediction": "linha = \"*************** EXTRATO ***********************\";",
      "raw_prediction": "\t\tlinha = \"*************** EXTRATO ***********************\";\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Tipo: \" + conta.getTipoDeConta();\n\t\t\t\tbw.append(linha + \"\\n\");\n\n",
      "es": 0.10476190476190472,
      "em": false,
      "passed": false
    },
    {
      "index": 594,
      "groundtruth": ".getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteExtrato\";",
      "prediction": ".getAgencia() + \"_\" + hojeFormatado + \"_extrato\";",
      "raw_prediction": ".getAgencia() + \"_\" + hojeFormatado + \"_extrato\";",
      "es": 0.5903614457831325,
      "em": false,
      "passed": false
    },
    {
      "index": 595,
      "groundtruth": "conta.getTipoDeConta();",
      "prediction": "conta.getTipoDeConta();",
      "raw_prediction": "conta.getTipoDeConta();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Agencia: \" + conta.getAgencia();\n\t\t\t\t\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\t\t\t\t\tlinha = \"Conta",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 596,
      "groundtruth": "\"Titular: \" + conta.getTitular().getNome() + \" | CPF: \" + conta.imprimeCPF(conta.getCpf());",
      "prediction": "\"Agencia: \" + conta.getAgencia();",
      "raw_prediction": "\"Agencia: \" + conta.getAgencia();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Conta: \" + conta.getNumConta();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha =",
      "es": 0.2637362637362637,
      "em": false,
      "passed": false
    },
    {
      "index": 597,
      "groundtruth": "conta.getAgencia().getNumAgencia() + \" | Conta: \" + conta.getNumConta();",
      "prediction": "conta.getAgencia();",
      "raw_prediction": "conta.getAgencia();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Conta: \" + conta.getNumConta();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"*********************************************\";\n\t\t\t\t\t",
      "es": 0.26388888888888884,
      "em": false,
      "passed": false
    },
    {
      "index": 598,
      "groundtruth": "+ conta.imprimeCPF(conta.getCpf());",
      "prediction": "+ conta.getCpf());",
      "raw_prediction": "+ conta.getCpf());\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Ag\u00eancia: \" + conta.getAgencia();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Conta: \"",
      "es": 0.5142857142857142,
      "em": false,
      "passed": false
    },
    {
      "index": 599,
      "groundtruth": "+ conta.getAgencia().getNumAgencia() + \" | Conta: \" + conta.getNumConta();",
      "prediction": "+ conta.getAgencia();",
      "raw_prediction": "+ conta.getAgencia();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Conta: \" + conta.getNumConta();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"*********************************************\";\n\t\t\t\t\t",
      "es": 0.28378378378378377,
      "em": false,
      "passed": false
    },
    {
      "index": 600,
      "groundtruth": "Extrato listaMovimentacao : conta.getlistaDeMovimentacoes()) {",
      "prediction": "Movimentacao movimentacao : conta",
      "raw_prediction": "Movimentacao movimentacao : conta.getMovimentacoes()) {\n\t\t\tlinha = movimentacao.toString();\n\t\t\tbw.append(linha + \"\\n\");\n\t\t\t}\n\t\t\tbw.append(\"\\n\");\n\n\t\t\tif (conta",
      "es": 0.33870967741935487,
      "em": false,
      "passed": false
    },
    {
      "index": 601,
      "groundtruth": "linha = \"Saldo: R$\" + String.format(\"%.2f\", conta.getSaldo());",
      "prediction": "String date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\"));",
      "raw_prediction": "\tString date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\"));\n\n\t\t\tlinha = \"Opera\u00e7\u00e3o realizada em: \" + date;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha =",
      "es": 0.23655913978494625,
      "em": false,
      "passed": false
    },
    {
      "index": 602,
      "groundtruth": ") + \"_\" + conta.getTitular().getTipoDeUsuario();",
      "prediction": ") + \"_\" + conta.getTitular().getTipoDeUsuario();",
      "raw_prediction": ") + \"_\" + conta.getTitular().getTipoDeUsuario();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 603,
      "groundtruth": "= \"Agencia: \" + conta.getAgencia();",
      "prediction": "= \"Titular: \" + conta.getTitular().getNome() + \" | CPF: \" + conta.impr",
      "raw_prediction": "= \"Titular: \" + conta.getTitular().getNome() + \" | CPF: \" + conta.imprimeCPF(conta.getCpf());\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Agencia",
      "es": 0.3142857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 604,
      "groundtruth": "linha = \"Tipo: \" + conta.getTipoDeConta();",
      "prediction": "linha = \"Ag\u00eancia: \" + conta.getAgencia();",
      "raw_prediction": "\tlinha = \"Ag\u00eancia: \" + conta.getAgencia();\nimport\tbw.append(linha + \"\\n\");\n\nimport\tlinha = \"Conta: \" + conta.getNumConta();\nimport\tbw.append(linha + \"\\n\");\n\nimport",
      "es": 0.6190476190476191,
      "em": false,
      "passed": false
    },
    {
      "index": 605,
      "groundtruth": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteSaldo\";",
      "prediction": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteSaldo\";",
      "raw_prediction": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteSaldo\";",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 606,
      "groundtruth": "String arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado\n\t\t\t\t+ \"_relatorioRendimentoPoupanca\";",
      "prediction": "String arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_rendimentoDaPoupanca\";",
      "raw_prediction": "\tString arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_rendimentoDaPoupanca\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(CAMIN",
      "es": 0.864406779661017,
      "em": false,
      "passed": false
    },
    {
      "index": 607,
      "groundtruth": "\"Saldo: R$\" + String.format(\"%.2f\", (conta.getSaldo()));",
      "prediction": "\"Saldo: R$\" + String.format(\"%.2f\", conta.getSaldo());",
      "raw_prediction": "\"Saldo: R$\" + String.format(\"%.2f\", conta.getSaldo());\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"*********************************************\";",
      "es": 0.9642857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 608,
      "groundtruth": "= \"Simula\u00e7\u00e3o para CPF: \" + conta.getCpf();",
      "prediction": "= \"CPF: \" + conta.getCpf();",
      "raw_prediction": "= \"CPF: \" + conta.getCpf();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Ag\u00eancia : \" + conta.getAgencia().getNumAgencia();\n\t\t\tbw.append(linha + \"\\n",
      "es": 0.6428571428571428,
      "em": false,
      "passed": false
    },
    {
      "index": 609,
      "groundtruth": "\"Ag\u00eancia : \" + conta.getAgencia().getNumAgencia();",
      "prediction": "\"Ag\u00eancia: \" + conta.getAgencia();",
      "raw_prediction": "\"Ag\u00eancia: \" + conta.getAgencia();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Conta: \" + conta.getNumConta();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha =",
      "es": 0.6599999999999999,
      "em": false,
      "passed": false
    },
    {
      "index": 610,
      "groundtruth": "= \"Total gasto em transa\u00e7\u00f5es = R$\" + conta.getTotalTarifas();",
      "prediction": "= \"Taxa de tarifas = \" + ContaCorrente.getTarifaTributacao();",
      "raw_prediction": "= \"Taxa de tarifas = \" + ContaCorrente.getTarifaTributacao();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Total de tarifas pagas = R$",
      "es": 0.34426229508196726,
      "em": false,
      "passed": false
    },
    {
      "index": 611,
      "groundtruth": "\"%.2f\", ((ContaCorrente) conta).getTotalTarifas());",
      "prediction": "\"%.2f\", conta.getTotalTarifas()));",
      "raw_prediction": "\"%.2f\", conta.getTotalTarifas()));\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Taxa para saque = \" + ContaCorrente.getTarifaSaque();\n\t\t\tbw.append",
      "es": 0.6274509803921569,
      "em": false,
      "passed": false
    },
    {
      "index": 612,
      "groundtruth": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado\n\t\t\t\t+ \"_relatorioRendimentoPoupanca\";",
      "prediction": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_rendimentoDaPoupanca\";",
      "raw_prediction": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_rendimentoDaPoupanca\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\t\t\t\tnew FileWriter(CAMINHO + \"\\\\\" + SUB_CAM",
      "es": 0.8181818181818181,
      "em": false,
      "passed": false
    },
    {
      "index": 613,
      "groundtruth": "linha = \"Taxa para deposito = \" + ContaCorrente.getTarifaDeposito();",
      "prediction": "linha = \"Taxa para dep\u00f3sito = \" + ContaCorrente.getTarifaDeposito();",
      "raw_prediction": "\tlinha = \"Taxa para dep\u00f3sito = \" + ContaCorrente.getTarifaDeposito();\n\t\t\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\t\t\tlinha = \"Total de deppositos realizados = \" +",
      "es": 0.9852941176470589,
      "em": false,
      "passed": false
    },
    {
      "index": 614,
      "groundtruth": "= \"Taxa para saque = \" + ContaCorrente.getTarifaSaque();",
      "prediction": "= \"Taxa para saque = \" + ContaCorrente.getTarifaSaque();",
      "raw_prediction": "= \"Taxa para saque = \" + ContaCorrente.getTarifaSaque();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 615,
      "groundtruth": "= \"Taxa para tranfer\u00eancia = \" + ContaCorrente.getTarifaTransferencia();",
      "prediction": "= \"Taxa para transfer\u00eancia = \" + ContaCorrente.getTarifaTransferencia();",
      "raw_prediction": "= \"Taxa para transfer\u00eancia = \" + ContaCorrente.getTarifaTransferencia();\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Total de transfer\u00eancias realizadas = \" + conta.getTotalTransferencias",
      "es": 0.9861111111111112,
      "em": false,
      "passed": false
    },
    {
      "index": 616,
      "groundtruth": "\"Total de saques realizados = \" + conta.getTotalSaques();",
      "prediction": "\"Total de saques realizados = \" + conta.getTotalSaques();",
      "raw_prediction": "\"Total de saques realizados = \" + conta.getTotalSaques();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 617,
      "groundtruth": "\"Total de tranfer\u00eancias realizadas = \" + conta.getTotalTransferencias();",
      "prediction": "\"Total de transfer\u00eancias realizadas = \" + conta.getTotalTransferencias();",
      "raw_prediction": "\"Total de transfer\u00eancias realizadas = \" + conta.getTotalTransferencias();\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n\t\t\tlinha = \"*********************************************\";",
      "es": 0.9863013698630136,
      "em": false,
      "passed": false
    },
    {
      "index": 618,
      "groundtruth": "main = CheckHostAPI.performGetRequest(\"https://check-host.net/check-result/\" + URLEncoder.encode(id, StandardCharsets.UTF_8));",
      "prediction": "main = CheckHostAPI.performGetRequest(\"https://check-host.net/check-result/\" + URLEncoder.encode(id, StandardCharsets.UTF_8));",
      "raw_prediction": "main = CheckHostAPI.performGetRequest(\"https://check-host.net/check-result/\" + URLEncoder.encode(id, StandardCharsets.UTF_8));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 619,
      "groundtruth": "cookieStore.appendCookies(builder).build();",
      "prediction": "builder.headers(cookieStore.toHeaders()).build();",
      "raw_prediction": "builder.headers(cookieStore.toHeaders()).build();",
      "es": 0.3877551020408163,
      "em": false,
      "passed": false
    },
    {
      "index": 620,
      "groundtruth": "cookieStore.mergeFromResponse(response);",
      "prediction": "cookieStore.updateCookies(response);",
      "raw_prediction": "cookieStore.updateCookies(response);",
      "es": 0.65,
      "em": false,
      "passed": false
    },
    {
      "index": 621,
      "groundtruth": "new FXMLLoader(DownfallUtil.getInstance().getURLDownfallMainFXML());",
      "prediction": "new FXMLLoader(getClass().getResource(\"/fxml/main.fxml\"));",
      "raw_prediction": "new FXMLLoader(getClass().getResource(\"/fxml/main.fxml\"));",
      "es": 0.4411764705882353,
      "em": false,
      "passed": false
    },
    {
      "index": 622,
      "groundtruth": "selectedProperty()  .unbindBidirectional(tag.isFactionalProperty());",
      "prediction": "selectedProperty()  .unbindBidirectional(tag.isFactionalProperty());",
      "raw_prediction": "selectedProperty()  .unbindBidirectional(tag.isFactionalProperty());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 623,
      "groundtruth": ", null, null, defConstructionCost, null, defConstructionTime, operatesImmediately, Configurator.getInstance().getDefBuildingGFXPathname());",
      "prediction": ", defConstructionCost, defConstructionTime, operatesImmediately);",
      "raw_prediction": ", defConstructionCost, defConstructionTime, operatesImmediately);",
      "es": 0.4676258992805755,
      "em": false,
      "passed": false
    },
    {
      "index": 624,
      "groundtruth": ").setUserRealm(savegame.getUserRealm());",
      "prediction": ").loadAndApplyRules(savegame.getPathToRules());",
      "raw_prediction": ").loadAndApplyRules(savegame.getPathToRules());\n            Configurator.getInstance().setLastSavegamePathname(pathname);\n            Logger.getLogger(DownfallUtil.DEFAULT_LOGGER).log(Level.FINE,\"Savegame loading successfully completed.\");\n        }",
      "es": 0.44680851063829785,
      "em": false,
      "passed": false
    },
    {
      "index": 625,
      "groundtruth": ").loadAndApplyRules(savegame.getPathToRules());",
      "prediction": ").setLastRulesPathname(savegame.getPathToRules());",
      "raw_prediction": ").setLastRulesPathname(savegame.getPathToRules());",
      "es": 0.62,
      "em": false,
      "passed": false
    },
    {
      "index": 626,
      "groundtruth": "this.pathToGFXProperty.setValue(Configurator.getInstance().getDefBuildingGFXPathname());",
      "prediction": "gfxInitialized = false;",
      "raw_prediction": "gfxInitialized = false;",
      "es": 0.10227272727272729,
      "em": false,
      "passed": false
    },
    {
      "index": 627,
      "groundtruth": "configurator.loadAndApplyRules();",
      "prediction": "configurator.loadRules();",
      "raw_prediction": " configurator.loadRules();",
      "es": 0.7575757575757576,
      "em": false,
      "passed": false
    },
    {
      "index": 628,
      "groundtruth": "configurator.saveRules();",
      "prediction": "e.consume(); // Prevents the window from closing",
      "raw_prediction": " e.consume(); // Prevents the window from closing\n            DownfallUtil.getInstance().saveGame();\n            DownfallUtil.getInstance().saveCharacter();\n            DownfallUtil.getInstance().saveInventory();\n            DownfallUtil.getInstance().saveQuestLog();\n",
      "es": 0.16666666666666663,
      "em": false,
      "passed": false
    },
    {
      "index": 629,
      "groundtruth": ".getLogger(DownfallUtil.DEFAULT_LOGGER).log(Level.SEVERE, \"No Template found for id = \"+material.getTemplateId());",
      "prediction": ".getLogger(DownfallUtil.DEFAULT_LOGGER).log(Level.WARNING, \"No ID found for template with id = \"+material.getTemplateId());",
      "raw_prediction": ".getLogger(DownfallUtil.DEFAULT_LOGGER).log(Level.WARNING, \"No ID found for template with id = \"+material.getTemplateId());",
      "es": 0.7642276422764227,
      "em": false,
      "passed": false
    },
    {
      "index": 630,
      "groundtruth": "= Configurator.getInstance();",
      "prediction": "= new Configurator();",
      "raw_prediction": "= new Configurator();",
      "es": 0.4482758620689655,
      "em": false,
      "passed": false
    },
    {
      "index": 631,
      "groundtruth": ", defImportPrice, isExportable, isEphemeral, Configurator.getInstance().getDefMaterialGFXPathname());",
      "prediction": ", defImportPrice, isExportable, isEphemeral);",
      "raw_prediction": ", defImportPrice, isExportable, isEphemeral);",
      "es": 0.4455445544554455,
      "em": false,
      "passed": false
    },
    {
      "index": 632,
      "groundtruth": "DownfallUtil.getInstance().loadImage(item));",
      "prediction": "DownfallUtil.loadImage(item));",
      "raw_prediction": "DownfallUtil.loadImage(item));",
      "es": 0.6818181818181819,
      "em": false,
      "passed": false
    },
    {
      "index": 633,
      "groundtruth": "()  .bindBidirectional(tag.isFactionalProperty());",
      "prediction": "()  .bindBidirectional(tag.isFactionalProperty());",
      "raw_prediction": "()  .bindBidirectional(tag.isFactionalProperty());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 634,
      "groundtruth": ".unbindBidirectional(tag.tagProperty());",
      "prediction": ".bindBidirectional(tag.tagProperty());",
      "raw_prediction": ".bindBidirectional(tag.tagProperty());",
      "es": 0.95,
      "em": false,
      "passed": false
    },
    {
      "index": 635,
      "groundtruth": "(relativisor.relativize());",
      "prediction": "(relativisor.getRelativePath());",
      "raw_prediction": "(relativisor.getRelativePath());",
      "es": 0.71875,
      "em": false,
      "passed": false
    },
    {
      "index": 636,
      "groundtruth": "tag.setTag(\"New Tag\");",
      "prediction": "return tag;",
      "raw_prediction": "return tag;\n    }\n\n    /**\n     * This method is used to return a new instance of Tag on request.\n     * @param id the id of the Tag to be returned\n     * @return a new instance of Tag with its",
      "es": 0.2727272727272727,
      "em": false,
      "passed": false
    },
    {
      "index": 637,
      "groundtruth": "Configurator.getInstance().getUserRealm();",
      "prediction": "Configurator.getInstance().getUserRealm();",
      "raw_prediction": "Configurator.getInstance().getUserRealm();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 638,
      "groundtruth": "tag.setId(1);",
      "prediction": "//otherwise set it to be e",
      "raw_prediction": "//otherwise set it to be equal to one\n            tag.setId(1);",
      "es": 0.15384615384615385,
      "em": false,
      "passed": false
    },
    {
      "index": 639,
      "groundtruth": ".setText(userRealm.getDiplomaticReputation().toString());",
      "prediction": ".setText(userRealm.getDiplomaticRepresentation().toString());",
      "raw_prediction": ".setText(userRealm.getDiplomaticRepresentation().toString());\n        stabilityPerMonthLabel   .setText(userRealm.getStabilityPerMonth().toString());\n        nationalUnrestLabel      .setText(userRealm.getNationalUnrest().toString());\n        nuic",
      "es": 0.9180327868852459,
      "em": false,
      "passed": false
    },
    {
      "index": 640,
      "groundtruth": "configurator.loadConfiguration();",
      "prediction": "configurator.loadConfiguration();",
      "raw_prediction": " configurator.loadConfiguration();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 641,
      "groundtruth": ".setValue(template.getId());",
      "prediction": ".setValue(template.getId());",
      "raw_prediction": ".setValue(template.getId());\n        amountProperty.setValue(amount);\n    }\n\n    /**\n     * Lightweight Mutator Method\n     * @param amount Amount of materials in this bundle.\n     */\n    public void setAmount(int amount) {",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 642,
      "groundtruth": "= FXCollections.observableList(Configurator.getInstance().getRules().getActorTags());",
      "prediction": "= Configurers.getTags();",
      "raw_prediction": "= Configurers.getTags();",
      "es": 0.2705882352941177,
      "em": false,
      "passed": false
    },
    {
      "index": 643,
      "groundtruth": "legitimacyLabel         .setText(userRealm.getLegitimacy().toString());",
      "prediction": "stabilityPerMonthLabel .setText(userRealm.getStabilityPerMonth().toString());",
      "raw_prediction": "stabilityPerMonthLabel .setText(userRealm.getStabilityPerMonth().toString());\n        legitimacyLabel         .setText(userRealm.getLegitimacy().toString());\n        nationalUnrestLabel    .setText(userRealm.getNationalUnrest().toString",
      "es": 0.5324675324675325,
      "em": false,
      "passed": false
    },
    {
      "index": 644,
      "groundtruth": ".pathToGFXProperty.setValue(Configurator.getInstance().getDefMaterialGFXPathname());",
      "prediction": ".gfxInitialized = false;",
      "raw_prediction": ".gfxInitialized = false;",
      "es": 0.13095238095238093,
      "em": false,
      "passed": false
    },
    {
      "index": 645,
      "groundtruth": "setLegitimacy(realm.getLegitimacy());",
      "prediction": "setMilitaryReputation(realm.getMilitaryReputation());",
      "raw_prediction": "setMilitaryReputation(realm.getMilitaryReputation());",
      "es": 0.4339622641509434,
      "em": false,
      "passed": false
    },
    {
      "index": 646,
      "groundtruth": "(s -> s.gameVersion().equals(gameVersion)).toList();",
      "prediction": "(s -> s.version().gameVersion().equals(gameVersion)).toList();",
      "raw_prediction": "(s -> s.version().gameVersion().equals(gameVersion)).toList();",
      "es": 0.8387096774193549,
      "em": false,
      "passed": false
    },
    {
      "index": 647,
      "groundtruth": "BCVersion.fromString(versionIdentifier);",
      "prediction": "BCVersion.fromVersionI",
      "raw_prediction": "BCVersion.fromVersionIdentifier(versionIdentifier);            if (version == null) {\n\n                continue;\n            }",
      "es": 0.525,
      "em": false,
      "passed": false
    },
    {
      "index": 648,
      "groundtruth": "joinServerInterface.sendAuthRequest(sha1(server.getBytes()));",
      "prediction": "if (joinServerInterface != null)",
      "raw_prediction": "if (joinServerInterface != null) {\n                joinServerInterface.onRequestMPPass(username, server);\n                Thread.sleep(500);\n                if (!joinServerInterface.isMPPassRequested()) return \"0            }\n           ",
      "es": 0.2786885245901639,
      "em": false,
      "passed": false
    },
    {
      "index": 649,
      "groundtruth": "userRealm.setPowerProjection(realm.getPowerProjection());",
      "prediction": "userRealm.setMilitaryReputation(realm.getMilitaryReputation());",
      "raw_prediction": "userRealm.setMilitaryReputation(realm.getMilitaryReputation());",
      "es": 0.6190476190476191,
      "em": false,
      "passed": false
    },
    {
      "index": 650,
      "groundtruth": "loadAndApplyRules(configuration.getLastRulesPathname());",
      "prediction": "loadAndApplyRules(rules.getLastRulesPathname());",
      "raw_prediction": "loadAndApplyRules(rules.getLastRulesPathname());",
      "es": 0.7857142857142857,
      "em": false,
      "passed": false
    },
    {
      "index": 651,
      "groundtruth": ".setRulerPathToGFX(realm.getRulerPathToGFX());",
      "prediction": ".setStockpile(realm.getStockpile());",
      "raw_prediction": ".setStockpile(realm.getStockpile());\n        userRealm.setOwnedBuildings(realm.getOwnedBuildings());\n        userRealm.setTags(realm.getTags());",
      "es": 0.3913043478260869,
      "em": false,
      "passed": false
    },
    {
      "index": 652,
      "groundtruth": ".textProperty()        .bindBidirectional(realm.diplomaticReputationProperty(),    new NumberStringConverter());",
      "prediction": ".textProperty()        .bindBidirectional(realm.diplomaticReputationProperty(),   new NumberStringConverter());",
      "raw_prediction": ".textProperty()        .bindBidirectional(realm.diplomaticReputationProperty(),   new NumberStringConverter());\n        prestigeTextField.textProperty()        .bindBidirectional(realm.prestigeProperty(),                new NumberStringConverter());\n       ",
      "es": 0.9910714285714286,
      "em": true,
      "passed": true
    },
    {
      "index": 653,
      "groundtruth": "textProperty()        .bindBidirectional(realm.prestigeProperty(),                new NumberStringConverter());",
      "prediction": "textProperty()         .bindBidirectional(realm.prestigeProperty(),                 new NumberStringConverter());",
      "raw_prediction": "textProperty()         .bindBidirectional(realm.prestigeProperty(),                 new NumberStringConverter());",
      "es": 0.9823008849557522,
      "em": true,
      "passed": true
    },
    {
      "index": 654,
      "groundtruth": "prompter.findCommand(commandText, commands);",
      "prediction": "prompter.parseCommand(commandText);",
      "raw_prediction": "prompter.parseCommand(commandText);",
      "es": 0.6590909090909092,
      "em": false,
      "passed": false
    },
    {
      "index": 655,
      "groundtruth": ", prompter.getSystemPrompt(commands));",
      "prediction": ", \"You are a helpful assistant.\");",
      "raw_prediction": ", \"You are a helpful assistant.\");\n",
      "es": 0.26315789473684215,
      "em": false,
      "passed": false
    },
    {
      "index": 656,
      "groundtruth": "textProperty()       .bindBidirectional(materialTemplate.pathToGFXProperty());",
      "prediction": "textProperty()       .bindBidirectional(materialTemplate.pathToGFXProperty());",
      "raw_prediction": "textProperty()       .bindBidirectional(materialTemplate.pathToGFXProperty());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 657,
      "groundtruth": "return DEFAULT_SYSTEM_PROMPT.replaceAll(PREFIX_TEMPLATE, delimiter.getPrefix())//\n\t\t\t\t.replaceAll(POSTFIX_TEMPLATE, delimiter.getPostfix());",
      "prediction": "return DEFAULT_SYSTEM_PROMPT.replace(PREFIX_TEMPLATE, delimiter.getPrefix())\n\t\t\t\t.replace(POSTFIX_TEMPLATE, delimiter.getPostfix());",
      "raw_prediction": "return DEFAULT_SYSTEM_PROMPT.replace(PREFIX_TEMPLATE, delimiter.getPrefix())\n\t\t\t\t.replace(POSTFIX_TEMPLATE, delimiter.getPostfix());",
      "es": 0.9428571428571428,
      "em": false,
      "passed": false
    },
    {
      "index": 658,
      "groundtruth": ".textProperty()        .bindBidirectional(realm.rulerPathToGFXProperty());",
      "prediction": ".textProperty()        .bindBidirectional(realm.rulerPathToGFXProperty());",
      "raw_prediction": ".textProperty()        .bindBidirectional(realm.rulerPathToGFXProperty());\n        treasuryTextField.textProperty()        .bindBidirectional(realm.treasuryProperty(),         new NumberStringConverter());\n        stabilityTextField.textProperty()",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 659,
      "groundtruth": "return commandWrapper.unwrapCommand(commandString);",
      "prediction": "return commandString.replac",
      "raw_prediction": "\treturn commandString.replaceAll(PREFIX_REGEX, \"\").replaceAll(POSTFIX_REGEX, \"\");",
      "es": 0.37254901960784315,
      "em": false,
      "passed": false
    },
    {
      "index": 660,
      "groundtruth": ".textProperty()        .bindBidirectional(realm.realmPathToGFXProperty());",
      "prediction": ".textProperty()        .bindBidirectional(realm.realmPathToGFXProperty());",
      "raw_prediction": ".textProperty()        .bindBidirectional(realm.realmPathToGFXProperty());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 661,
      "groundtruth": "BCServerListRequest.send().whenComplete((bcServerList, throwable) -> {",
      "prediction": "new BCServerListRequest(SERVER_LIST).",
      "raw_prediction": "new BCServerListRequest(SERVER_LIST).execute(result -> {\n            final BCServerList bcServerList = result.get();\n            final Throwable throwable = result.getThrowable();",
      "es": 0.2571428571428571,
      "em": false,
      "passed": false
    },
    {
      "index": 662,
      "groundtruth": "authenticationData = new CCAuthenticationData(account.username(), account.password(), previousResponse.token, loginCode);",
      "prediction": "authenticationData = new CCAuthenticationData(",
      "raw_prediction": "authenticationData = new CCAuthenticationData(\n                account.username(),\n                                             account.password(),\n\n                previousResponse.token(),\n\n                loginCode\n            );",
      "es": 0.3801652892561983,
      "em": false,
      "passed": false
    },
    {
      "index": 663,
      "groundtruth": "<>(\"login_code\", authenticationData.loginCode())\n            );",
      "prediction": "<>(\"login_code\", authenticationData.loginCode())\n            );",
      "raw_prediction": "<>(\"login_code\", authenticationData.loginCode())\n            );",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 664,
      "groundtruth": ", account.password(), previousResponse.token, loginCode);",
      "prediction": ", account.password(), previousResponse.token(), loginCode);            if (account.co",
      "raw_prediction": ", account.password(), previousResponse.token(), loginCode);            if (account.cookieStore == null) {\n                throw new IllegalStateException(\"Cookie store is null\");\n            }",
      "es": 0.6705882352941177,
      "em": false,
      "passed": false
    },
    {
      "index": 665,
      "groundtruth": "StatusBarHelper.setStatusBarLightMode(this);",
      "prediction": "StatusBarHelper.setStatusBarLightMode(this);",
      "raw_prediction": " StatusBarHelper.setStatusBarLightMode(this);\n                titleBar.setTitle(\"\u8fd9\u662f\u6807\u9898\");\n                titleBar.setTitleTextColor(Color.RED);\n                titleBar.setTitleTextSize(20);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 666,
      "groundtruth": "StatusBarHelper.translucent(this);",
      "prediction": "titleBar.setTitleGravity(TitleBar.TitleGravity.END);",
      "raw_prediction": "titleBar.setTitleGravity(TitleBar.TitleGravity.END);",
      "es": 0.25,
      "em": false,
      "passed": false
    },
    {
      "index": 667,
      "groundtruth": "d(\"TitleBar\",\"onCreate-getStatusbarHeight\"+StatusBarHelper.getStatusbarHeight(this));",
      "prediction": "e(\"MainActivity\",\"onCreate\");",
      "raw_prediction": "e(\"MainActivity\",\"onCreate\");\n    }\n\n    @Override\n    protected void onStart() {\n        super.onStart();\n        Log.e(\"MainActivity\",\"onStart\");\n    }\n\n    @Override\n    protected void onResume() {\n        super.onResume();\n",
      "es": 0.16470588235294115,
      "em": false,
      "passed": false
    },
    {
      "index": 668,
      "groundtruth": "product0 = productRepository.findById(id);",
      "prediction": "product0 = productRepository.findById(id);",
      "raw_prediction": "product0 = productRepository.findById(id);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 669,
      "groundtruth": "user0 = userRepository.findByIdentifier(identifier);",
      "prediction": "user0 = userRepository.findByIdentifier(identifier);",
      "raw_prediction": "user0 = userRepository.findByIdentifier(identifier);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 670,
      "groundtruth": "== null || !Objects.equals(user0.getPassword(), senha)) {",
      "prediction": "== null) {",
      "raw_prediction": "== null) {\n            return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"usuario nao encontrado\");\n        }\n        if (!Objects.equals(senha, user0.getPassword())) {",
      "es": 0.17543859649122806,
      "em": false,
      "passed": false
    },
    {
      "index": 671,
      "groundtruth": "user0 = userRepository.findByEmail(email);",
      "prediction": "user0 = userRepository.findByEmail(email);",
      "raw_prediction": "user0 = userRepository.findByEmail(email);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 672,
      "groundtruth": ".OK).body(userRepository.findByIdentifier(identifier));",
      "prediction": ".OK).body(user0);",
      "raw_prediction": ".OK).body(user0);\n    }\n\n    /**\n     * Metodo/Rota responsavel por listar todos os usuarios cadastrados no banco de dados pelo seu nome\n     * @param name - Nome do usuario\n     * @return - Retorna",
      "es": 0.2909090909090909,
      "em": false,
      "passed": false
    },
    {
      "index": 673,
      "groundtruth": "(plugin.getParticleManager(), lobbyParticles, player);",
      "prediction": "(plugin, player, lobbyParticles);",
      "raw_prediction": "(plugin, player, lobbyParticles);\n        playParticleRunnable.runTaskTimerAsynchronously(plugin, 0, 10L);\n\n        playParticleRunnableHashMap.put(player.getUniqueId(),publicParticleRunnable);\n        playerLobbyParticles.put(player.get",
      "es": 0.537037037037037,
      "em": false,
      "passed": false
    },
    {
      "index": 674,
      "groundtruth": "DiscordVerifier.getInstance().getConfig().getBoolean(\"code-numbers-only\")) {",
      "prediction": "length == 10) {",
      "raw_prediction": "length == 10) {",
      "es": 0.09210526315789469,
      "em": false,
      "passed": false
    },
    {
      "index": 675,
      "groundtruth": "DiscordVerifier.getInstance().getLogger().severe(\"Failed to save player \" + uuid + \" to database\");",
      "prediction": "DiscordVerifier.getInstance().getLogger().severe(\"Failed to save player \" + uuid + \" to database\");",
      "raw_prediction": "DiscordVerifier.getInstance().getLogger().severe(\"Failed to save player \" + uuid + \" to database\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 676,
      "groundtruth": "if (DiscordVerifier.getDiscordCodes().containsValue(sb.toString())) {",
      "prediction": "if (DiscordVerifier.getDiscordCodes().containsValue(sb.toString()))",
      "raw_prediction": " if (DiscordVerifier.getDiscordCodes().containsValue(sb.toString())) {",
      "es": 0.9710144927536232,
      "em": false,
      "passed": false
    },
    {
      "index": 677,
      "groundtruth": "Connection connection = DiscordVerifier.getDatabaseConnection();",
      "prediction": "Connection connection = DiscordVerifier.getDatabaseConnection();",
      "raw_prediction": "Connection connection = DiscordVerifier.getDatabaseConnection();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 678,
      "groundtruth": "lobbyParticles.getParticle(), playerLocation, lobbyParticles.getCount());",
      "prediction": "lobbyParticles.getParticleType(), playerLocation, 0, 0, 0, 0.2, 0);",
      "raw_prediction": "lobbyParticles.getParticleType(), playerLocation, 0, 0, 0, 0.2, 0);\n        player.playSound(playerLocation, lobbyParticles.getSound(), 1, 1);",
      "es": 0.6164383561643836,
      "em": false,
      "passed": false
    },
    {
      "index": 679,
      "groundtruth": "sendMessage(CustomColor.translate(\"&7Invalid usage.. Try &e/gmp (player)&7.\"));",
      "prediction": "sendMessage(CustomColor.translate(\"&cUsage: /gmp [player]\"));",
      "raw_prediction": "sendMessage(CustomColor.translate(\"&cUsage: /gmp [player]\"));",
      "es": 0.7088607594936709,
      "em": false,
      "passed": false
    },
    {
      "index": 680,
      "groundtruth": "sender.sendMessage(CustomColor.translate(\"&a\" + args[0] + \" &7is &cnot &7online.\"));",
      "prediction": "sender.sendMessage(CustomColor.translate(\"&cThat player isn't online!\"));",
      "raw_prediction": "sender.sendMessage(CustomColor.translate(\"&cThat player isn't online!\"));",
      "es": 0.7142857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 681,
      "groundtruth": "playerLocation, lobbyParticles.getCount());",
      "prediction": "playerLocation, 0, 0, 0, 0.1, 0);",
      "raw_prediction": "playerLocation, 0, 0, 0, 0.1, 0);\n",
      "es": 0.4418604651162791,
      "em": false,
      "passed": false
    },
    {
      "index": 682,
      "groundtruth": "UUID, Integer> idsProducts = cartModel.getIdsProducts();",
      "prediction": "UUID, Integer> idsProducts = cartRecordDto.getIdsProducts();",
      "raw_prediction": "UUID, Integer> idsProducts = cartRecordDto.getIdsProducts();",
      "es": 0.8833333333333333,
      "em": false,
      "passed": false
    },
    {
      "index": 683,
      "groundtruth": "= userRepository.findByIdentifier(identifier);",
      "prediction": "= new UserModel();",
      "raw_prediction": "= new UserModel();",
      "es": 0.21739130434782605,
      "em": false,
      "passed": false
    },
    {
      "index": 684,
      "groundtruth": "> list = userRepository.findByType(type);",
      "prediction": "> list = userRepository.findByType(type);",
      "raw_prediction": "> list = userRepository.findByType(type);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 685,
      "groundtruth": "asList(manager.getItemsAsArray()), new ArrayList<>());",
      "prediction": "asList(manager.getItemNames()), new ArrayList<>());",
      "raw_prediction": "asList(manager.getItemNames()), new ArrayList<>());\n        }else if(args.length == 2){\n            return Arrays.asList(\"give\");",
      "es": 0.8518518518518519,
      "em": false,
      "passed": false
    },
    {
      "index": 686,
      "groundtruth": "size = plugin.getParticleManager().getParticlesMapSize()+1;",
      "prediction": "size = 9; // Default size of the inventory",
      "raw_prediction": "size = 9; // Default size of the inventory\n        for (LobbyParticles lobbyParticles : LobbyParticles.values()) {\n            size += lobbyParticles.getSlot(); // Add the slot number to the size\n        }",
      "es": 0.23728813559322037,
      "em": false,
      "passed": false
    },
    {
      "index": 687,
      "groundtruth": ": mainInstance.getYmlDataFile().getConfigurationSection(\"\").getKeys(false)){",
      "prediction": ": mainInstance.getYmlDataFile().getKeys(false)",
      "raw_prediction": ": mainInstance.getYmlDataFile().getKeys(false)){",
      "es": 0.6052631578947368,
      "em": false,
      "passed": false
    },
    {
      "index": 688,
      "groundtruth": ".delete(userRepository.findByIdentifier(identifier));",
      "prediction": ".deleteById(identifier);",
      "raw_prediction": ".deleteById(identifier);",
      "es": 0.4528301886792453,
      "em": false,
      "passed": false
    },
    {
      "index": 689,
      "groundtruth": ".get().addProduct(idProduct, 1);",
      "prediction": ".get().getIdsProducts().put(idProduct, 1);",
      "raw_prediction": ".get().getIdsProducts().put(idProduct, 1);",
      "es": 0.7142857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 690,
      "groundtruth": "DiscordVerifier.getDiscordCodes().get(player.getUniqueId()).getRight();",
      "prediction": "DiscordVerifier.getDiscordCodes().get(player.getUniqueId()).getRight();",
      "raw_prediction": "DiscordVerifier.getDiscordCodes().get(player.getUniqueId()).getRight();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 691,
      "groundtruth": "(DiscordVerifier.getInstance().getConfig().getBoolean(\"should-minecraft-chat-copyable\")) {",
      "prediction": "(time > 0) {",
      "raw_prediction": "(time > 0) {\n            builder.event(new ClickEvent(ClickEvent.Action.TIMESTAMP, \"now\", \"now + \" + time + \"s\"));\n        } else {",
      "es": 0.0888888888888889,
      "em": false,
      "passed": false
    },
    {
      "index": 692,
      "groundtruth": "mainInstance.getYmlDataFile().save(mainInstance.getDatafile());",
      "prediction": "mainInstance.getYmlDataFile().save(mainInstance.getDataFolder() + \"/config.yml\");",
      "raw_prediction": "mainInstance.getYmlDataFile().save(mainInstance.getDataFolder() + \"/config.yml\");",
      "es": 0.7530864197530864,
      "em": false,
      "passed": false
    },
    {
      "index": 693,
      "groundtruth": "manager.saveFile();",
      "prediction": "return true;",
      "raw_prediction": " return true;\n    }\n\n    public boolean onCommand(CommandSender sender, Command command, String label, String[] args) {\n        if(!(sender instanceof Player)) return false;\n        Player player = (Player) sender;\n        if(args.length",
      "es": 0.1578947368421053,
      "em": false,
      "passed": false
    },
    {
      "index": 694,
      "groundtruth": ".setDisplayName(Color.translate(name));",
      "prediction": ".setDisplayName(name);        itemStack.setItemMeta(itemMeta);",
      "raw_prediction": ".setDisplayName(name);        itemStack.setItemMeta(itemMeta);\n\n        return itemStack;\n    }\n\n    /**\n     * ItemBuilder for custom name and lore.\n     * @param material Material\n     * @param name String name\n     *",
      "es": 0.4193548387096774,
      "em": false,
      "passed": false
    },
    {
      "index": 695,
      "groundtruth": ".requireNonNull(e.getGuild()).getRoleById(DiscordVerifier.getInstance().getConfig().getString(\"discord.role-given\"));",
      "prediction": ".requireNonNull(e.getGuild()).getRoleById(DiscordVerifier.getInstance().getConfig().getString(\"discord.role-added\"));",
      "raw_prediction": ".requireNonNull(e.getGuild()).getRoleById(DiscordVerifier.getInstance().getConfig().getString(\"discord.role-added\"));",
      "es": 0.9658119658119658,
      "em": false,
      "passed": false
    },
    {
      "index": 696,
      "groundtruth": ".save(mainInstance.getDatafile());",
      "prediction": ".save();",
      "raw_prediction": ".save();",
      "es": 0.23529411764705888,
      "em": false,
      "passed": false
    },
    {
      "index": 697,
      "groundtruth": "(DiscordVerifier.getInstance().getConfig().getString(\"messages.verification-successful-discord\")).queue();",
      "prediction": "(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-successful\")).queue();",
      "raw_prediction": "(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-successful\")).queue();",
      "es": 0.8207547169811321,
      "em": false,
      "passed": false
    },
    {
      "index": 698,
      "groundtruth": ".teleport(main.getWarpManager().getWarp(args[0]));",
      "prediction": ".teleport(new Location(Bukkit.getWorlds().get(0), warps.getDouble(args[0] +",
      "raw_prediction": ".teleport(new Location(Bukkit.getWorlds().get(0), warps.getDouble(args[0] + \".x\"), warps.getDouble(args[0] + \".y\"), warps.getDouble(args[0] + \".z\"), warps",
      "es": 0.45333333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 699,
      "groundtruth": "<= configManager.getTalkRange()) {",
      "prediction": "<= configManager.ge",
      "raw_prediction": "<= configManager.getDefaultRange()) {",
      "es": 0.5588235294117647,
      "em": false,
      "passed": false
    },
    {
      "index": 700,
      "groundtruth": ".cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.verification-successful-mc\")));",
      "prediction": ".getMessage(\"verification-successful-minecraft\"));",
      "raw_prediction": ".getMessage(\"verification-successful-minecraft\"));\n    }\n\n    @Override\n    public void onGuildMemberJoin(@NotNull net.dv8tion.jda.api.events.guild.member.GuildMemberJoinEvent event) {\n        if (!event.getUser().",
      "es": 0.3402061855670103,
      "em": false,
      "passed": false
    },
    {
      "index": 701,
      "groundtruth": "DiscordVerifier.getDiscordCodes().forEach((uuid, data) -> {",
      "prediction": "DiscordVerifier.getDiscordCodes().put(e.getUser().getId(), code);",
      "raw_prediction": "DiscordVerifier.getDiscordCodes().put(e.getUser().getId(), code);\n        final UUID uuid = e.getUser().getId();\n        DiscordVerifierAPI.verifyCode(code, (data) -> {",
      "es": 0.5692307692307692,
      "em": false,
      "passed": false
    },
    {
      "index": 702,
      "groundtruth": "String code = DiscordVerifier.getDiscordCodes().get(player.getUniqueId()).getLeft();",
      "prediction": "String code = DiscordVerifier.getDiscordCodes().get(player.getUniqueId()).getLeft();",
      "raw_prediction": "String code = DiscordVerifier.getDiscordCodes().get(player.getUniqueId()).getLeft();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 703,
      "groundtruth": "main.getWarpManager().setWarp(args[0], loc);",
      "prediction": "warps.set(args[0], loc);",
      "raw_prediction": " warps.set(args[0], loc);",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 704,
      "groundtruth": "cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-generated\"))\n                .replace(\"{",
      "prediction": "cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-message\"));",
      "raw_prediction": "cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-message\"));\n        rawMsg = rawMsg.replace(\"{",
      "es": 0.6909090909090909,
      "em": false,
      "passed": false
    },
    {
      "index": 705,
      "groundtruth": "if (DiscordVerifier.getInstance().getConfig().getBoolean(\"discord.sync-name\")){",
      "prediction": "if (name != null && !name.equals(player.getName()))",
      "raw_prediction": "if (name != null && !name.equals(player.getName())) {",
      "es": 0.240506329113924,
      "em": false,
      "passed": false
    },
    {
      "index": 706,
      "groundtruth": "return DiscordVerifier.getDiscordCodes().get(player.getUniqueId()) != null;",
      "prediction": "return DiscordVerifier.getDiscordCodes().containsKey(player.getUniqueId());",
      "raw_prediction": "return DiscordVerifier.getDiscordCodes().containsKey(player.getUniqueId());",
      "es": 0.76,
      "em": false,
      "passed": false
    },
    {
      "index": 707,
      "groundtruth": ", Color.translate(\"&6Particle Menu\"));",
      "prediction": ", \"Particles\");",
      "raw_prediction": ", \"Particles\");",
      "es": 0.368421052631579,
      "em": false,
      "passed": false
    },
    {
      "index": 708,
      "groundtruth": "().editOriginal(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-invalid\")).queue();",
      "prediction": "().editOriginal(\"Invalid code provided!\").queue();",
      "raw_prediction": "().editOriginal(\"Invalid code provided!\").queue();",
      "es": 0.3431372549019608,
      "em": false,
      "passed": false
    },
    {
      "index": 709,
      "groundtruth": "DiscordVerifier.getDiscordCodes().remove(uuid);",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 710,
      "groundtruth": "List<String> commands = DiscordVerifier.getInstance().getConfig().getStringList(\"Minecraft.Command\");",
      "prediction": "List<String> commands = DiscordVerifier.getInstance().getConfig().getStringList(\"discord.commands\");",
      "raw_prediction": "List<String> commands = DiscordVerifier.getInstance().getConfig().getStringList(\"discord.commands\");",
      "es": 0.9108910891089109,
      "em": false,
      "passed": false
    },
    {
      "index": 711,
      "groundtruth": "DiscordVerifier.getInstance().getConfig().getBoolean(\"should-code-be-case-sensitive\");",
      "prediction": "DiscordVerifier.getInstance().getConfig().getBoolean(\"discord.case-sensitive\");",
      "raw_prediction": "DiscordVerifier.getInstance().getConfig().getBoolean(\"discord.case-sensitive\");",
      "es": 0.8488372093023255,
      "em": false,
      "passed": false
    },
    {
      "index": 712,
      "groundtruth": "Bukkit.getScheduler().runTask(DiscordVerifier.getInstance(), () -> {",
      "prediction": "Bukkit.getScheduler().runTask(DiscordVerifier.getInstance(), () -> {",
      "raw_prediction": "  Bukkit.getScheduler().runTask(DiscordVerifier.getInstance(), () -> {",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 713,
      "groundtruth": "Player player = DiscordVerifier.getInstance().getServer().getPlayer(uuid);",
      "prediction": "Player player = Bukkit.getPlayer(uuid);",
      "raw_prediction": "Player player = Bukkit.getPlayer(uuid);",
      "es": 0.472972972972973,
      "em": false,
      "passed": false
    },
    {
      "index": 714,
      "groundtruth": "megaphoneMeta.setDisplayName(CustomColor.translate(\"&a&lMegaphone\"));",
      "prediction": "megaphoneMeta.setDisplayName(CustomColor.translate(\"&aProximity Chat Megaphone\"));",
      "raw_prediction": "megaphoneMeta.setDisplayName(CustomColor.translate(\"&aProximity Chat Megaphone\"));",
      "es": 0.8170731707317074,
      "em": false,
      "passed": false
    },
    {
      "index": 715,
      "groundtruth": "Role removed = e.getGuild().getRoleById(DiscordVerifier.getInstance().getConfig().getString(\"discord.role-removed\"));",
      "prediction": "Role removed = Objects.requireNonNull(e.getGuild()).getRoleById(DiscordVerifier.getInstance().getConfig().getString(\"discord.role-removed\"));",
      "raw_prediction": "Role removed = Objects.requireNonNull(e.getGuild()).getRoleById(DiscordVerifier.getInstance().getConfig().getString(\"discord.role-removed\"));",
      "es": 0.8297872340425532,
      "em": false,
      "passed": false
    },
    {
      "index": 716,
      "groundtruth": "+ getConfigManager().getMegaphoneRange()\n                            + \" &7blocks!\")));",
      "prediction": "+ \"10 blocks\")));",
      "raw_prediction": " + \"10 blocks\")));\n            megaphoneMeta.setCustomModelData(1); // Custom model data for the megaphone item\n            megaphoneMeta.setUnbreakable(true); // Make the megaphone unbreak",
      "es": 0.16091954022988508,
      "em": false,
      "passed": false
    },
    {
      "index": 717,
      "groundtruth": "if (newCart.get().getIdsProducts().isEmpty()){",
      "prediction": "if (products.isEmpty()){",
      "raw_prediction": "if (products.isEmpty()){",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 718,
      "groundtruth": ").getAmount() - value);",
      "prediction": ").getAmount() - value);",
      "raw_prediction": ").getAmount() - value);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 719,
      "groundtruth": "Optional<CartModel> cart = cartRepository.findByIdClient(idClient);",
      "prediction": "",
      "raw_prediction": "\n",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 720,
      "groundtruth": "saleModel.addProduct(idProduct, quantidade);",
      "prediction": "ProductModel product = p",
      "raw_prediction": " ProductModel product = productRepository.findById(idProduct).orElseThrow(() -> new RuntimeException(\"Produto n\u00e3o encontrado\"));\n            saleModel.addProduct(product, quantidade);",
      "es": 0.2727272727272727,
      "em": false,
      "passed": false
    },
    {
      "index": 721,
      "groundtruth": "saleModel.getIdClient());",
      "prediction": "saleRecordDto.getIdClient());",
      "raw_prediction": "saleRecordDto.getIdClient());",
      "es": 0.7586206896551724,
      "em": false,
      "passed": false
    },
    {
      "index": 722,
      "groundtruth": "saleModel.setDate(java.sql.Date.valueOf(date));",
      "prediction": "saleModel.setDate(date);",
      "raw_prediction": " saleModel.setDate(date);",
      "es": 0.5106382978723405,
      "em": false,
      "passed": false
    },
    {
      "index": 723,
      "groundtruth": "productRepository.findById(idProduct).get().getValue();",
      "prediction": "productRepository.findById(idProduct).get().getValue();",
      "raw_prediction": "productRepository.findById(idProduct).get().getValue();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 724,
      "groundtruth": ": thoughts.getPlan().split(\"\\n\")) {",
      "prediction": ": thoughts.getPlan()",
      "raw_prediction": ": thoughts.getPlan()) {",
      "es": 0.5714285714285714,
      "em": false,
      "passed": false
    },
    {
      "index": 725,
      "groundtruth": "= agent.chat(\"GENERATE NEXT COMMAND JSON\", true);",
      "prediction": "= agent.chat(resp.getCommand(), true);",
      "raw_prediction": "= agent.chat(resp.getCommand(), true);\n                        } else if (\"n\".equals(yn)) {\n                            System.out.print(\"Enter feedback (Why not execute the command?): \");\n                            String feedback = scanner.nextLine();\n                            resp = agent.chat",
      "es": 0.44897959183673475,
      "em": false,
      "passed": false
    },
    {
      "index": 726,
      "groundtruth": "agent.chat(feedback, false);",
      "prediction": "agent.chat(\"GENERATE NEXT COMMAND JSON\", false, feedback",
      "raw_prediction": "agent.chat(\"GENERATE NEXT COMMAND JSON\", false, feedback);\n                        }\n                        break;\n                    } else {\n                        System.out.println(\"Invalid input. Please enter 'Y' or 'N'.\");\n                    }\n                }\n            } else {\n",
      "es": 0.3214285714285714,
      "em": false,
      "passed": false
    },
    {
      "index": 727,
      "groundtruth": "+= product.get().getValue() * quantidade;",
      "prediction": "+= product.get().getValue() * quantidade;",
      "raw_prediction": "+= product.get().getValue() * quantidade;",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 728,
      "groundtruth": "saleModel.setIdSeller(idSeller);",
      "prediction": "if (!idSeller.equals(saleModel.getIdSeller()))",
      "raw_prediction": "if (!idSeller.equals(saleModel.getIdSeller())){\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"Voc\u00ea n\u00e3o tem permiss\u00e3o para realizar essa venda.\");\n        }\n",
      "es": 0.34782608695652173,
      "em": false,
      "passed": false
    },
    {
      "index": 729,
      "groundtruth": "<String> relevantMemory = memory.get(10);",
      "prediction": "<String> relevantMemory = this.memory.relevantMemory(userInput);",
      "raw_prediction": "<String> relevantMemory = this.memory.relevantMemory(userInput);",
      "es": 0.59375,
      "em": false,
      "passed": false
    },
    {
      "index": 730,
      "groundtruth": "(HttpStatus.OK).body(saleRepository.findByIdSeller(id));",
      "prediction": ".OK).body(saleRepository.findByIdSeller(id));",
      "raw_prediction": ".OK).body(saleRepository.findByIdSeller(id));",
      "es": 0.8035714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 731,
      "groundtruth": "(thoughts.hasCriticism()) {",
      "prediction": "(thoughts.hasCriticism())",
      "raw_prediction": "(thoughts.hasCriticism()) {",
      "es": 0.9259259259259259,
      "em": false,
      "passed": false
    },
    {
      "index": 732,
      "groundtruth": "thoughts.hasSpeak()) {",
      "prediction": "thoughts.hasS",
      "raw_prediction": "thoughts.hasSpeak()) {",
      "es": 0.5909090909090908,
      "em": false,
      "passed": false
    },
    {
      "index": 733,
      "groundtruth": "out.println(agent.getName() + \": (voice) \" + thoughts.getSpeak());",
      "prediction": "out.println(agent.getName() + \": Speak: \" + thoughts.getSpeak());",
      "raw_prediction": "out.println(agent.getName() + \": Speak: \" + thoughts.getSpeak());",
      "es": 0.8939393939393939,
      "em": false,
      "passed": false
    },
    {
      "index": 734,
      "groundtruth": "resp.hasCommand()) {",
      "prediction": "resp.hasComm",
      "raw_prediction": "resp.hasCommand()) {",
      "es": 0.6,
      "em": false,
      "passed": false
    },
    {
      "index": 735,
      "groundtruth": "return openAIModel.chat(prompts);",
      "prediction": "return openAIModel.chat(prompts, maxTokens);    }",
      "raw_prediction": "return openAIModel.chat(prompts, maxTokens);    }\n\n    public void setOpenAIModel(OpenAIModel openAIModel) {\n        this.openAIModel = openAIModel;    }\n\n    public OpenAIModel getOpenAI",
      "es": 0.6734693877551021,
      "em": false,
      "passed": false
    },
    {
      "index": 736,
      "groundtruth": ".add(PromptUtils.buildPrompts(role, content));",
      "prediction": ".add(Map.of(\"role\", role, \"content\", content));",
      "raw_prediction": ".add(Map.of(\"role\", role, \"content\", content));",
      "es": 0.4042553191489362,
      "em": false,
      "passed": false
    },
    {
      "index": 737,
      "groundtruth": "consumerAccessor.setPickupDelay(Math.max(consumerAccessor.getPickupDelay(), supplierAccessor.getPickupDelay()));",
      "prediction": "var consumerCount = consumer.getItem().getCount();",
      "raw_prediction": "var consumerCount = consumer.getItem().getCount();\n        var supplierCount = supplier.getItem().getCount();\n\n        consumer.getItem().grow(supplierCount);\n        supplier.getItem().setCount(0);\n\n        consumerAccessor.setPickupDelay(Math.min",
      "es": 0.2678571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 738,
      "groundtruth": "return chat(seedInput.getContent(), false);",
      "prediction": "prompt.add(seedInput.getPrompt());",
      "raw_prediction": "prompt.add(seedInput.getPrompt());\n        List<Map<String, String>> fullPrompt = this.getFullPrompt(null);\n        int tokenCount = openAIModel.countTokens(fullPrompt);\n        int tokenLimit = openAIModel.getTokenLimit();\n       ",
      "es": 0.4418604651162791,
      "em": false,
      "passed": false
    },
    {
      "index": 739,
      "groundtruth": "var age = accessor.getAge();",
      "prediction": "var age = accessor.getAge();",
      "raw_prediction": "var age = accessor.getAge();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 740,
      "groundtruth": "|| Staaaaaaaaaaaack.getItemBlackList().contains(itemStack.getItem());",
      "prediction": "|| itemStack.is(Staaaaaaaaaaaack.BLACK_LIST_TAG_2)",
      "raw_prediction": "|| itemStack.is(Staaaaaaaaaaaack.BLACK_LIST_TAG_2)\n                || itemStack.is(Staaaaaaaaaaaack.BLACK_LIST_TAG_3);",
      "es": 0.18840579710144922,
      "em": false,
      "passed": false
    },
    {
      "index": 741,
      "groundtruth": "openAIModel.getTokenLimit();",
      "prediction": "openAIModel.getTokenLimit() - tokenCount;",
      "raw_prediction": " openAIModel.getTokenLimit() - tokenCount;\n        if (tokenLimit <= 0) {\n            throw new RuntimeException(\"Token limit exceeded\");\n        }",
      "es": 0.6829268292682926,
      "em": false,
      "passed": false
    },
    {
      "index": 742,
      "groundtruth": ".summarizer.summarize(extractedText, question);",
      "prediction": ".summarizer.summarize(extractedText, question);",
      "raw_prediction": ".summarizer.summarize(extractedText, question);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 743,
      "groundtruth": "min(consumerAccessor.getAge(), supplierAccessor.getAge()));",
      "prediction": "max(consumerAccessor.getAge(), supplierAccessor.getAge()));",
      "raw_prediction": "max(consumerAccessor.getAge(), supplierAccessor.getAge()));",
      "es": 0.9661016949152542,
      "em": false,
      "passed": false
    },
    {
      "index": 744,
      "groundtruth": "(Math.max(consumerAccessor.getPickupDelay(), supplierAccessor.getPickupDelay()));",
      "prediction": "(32767);",
      "raw_prediction": "(32767);\n        supplierAccessor.setPickupDelay(32767);",
      "es": 0.03703703703703709,
      "em": false,
      "passed": false
    },
    {
      "index": 745,
      "groundtruth": "= openAIModel.countTokens(updatedPrompt);",
      "prediction": "= openAIModel.countTokens(updatedPrompt);",
      "raw_prediction": "= openAIModel.countTokens(updatedPrompt);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 746,
      "groundtruth": "= openAIModel.chat(fullPrompt, tokenLimit - tokenCount);",
      "prediction": "= openAIModel.generate(fullPrompt, tokenLimit - tokenCount);",
      "raw_prediction": "= openAIModel.generate(fullPrompt, tokenLimit - tokenCount);",
      "es": 0.9,
      "em": false,
      "passed": false
    },
    {
      "index": 747,
      "groundtruth": ".memory.add(humanFeedbackPrompt.getContent());",
      "prediction": ".memory.add(humanFeedbackPrompt.getContent());",
      "raw_prediction": ".memory.add(humanFeedbackPrompt.getContent());\n                } else {\n                Prompt noApprovePrompt = new Prompt.Builder(\"no_approve\")\n             .withRole(\"system\")\n             .formatted(0, this.stagingTool);\n\n             .build",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 748,
      "groundtruth": "int tokenLimit = openAIModel.getTokenLimit() - 1000;",
      "prediction": "int tokenLimit = openAIModel.getTokenLimit();",
      "raw_prediction": " int tokenLimit = openAIModel.getTokenLimit();",
      "es": 0.8653846153846154,
      "em": false,
      "passed": false
    },
    {
      "index": 749,
      "groundtruth": "return defaultResponsePrompt.getContent();",
      "prediction": "return defaultResponsePrompt.getContent();",
      "raw_prediction": " return defaultResponsePrompt.getContent();\n    }\n\n    public String to(String prompt) {\n        ArrayList<String> promptLines = new ArrayList<>();\n        promptLines.add(prompt);\n        return newLineDelimited(promptLines);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 750,
      "groundtruth": "(currentTimePrompt.getPrompt());",
      "prediction": "(currentTimePrompt.getPrompt());",
      "raw_prediction": "(currentTimePrompt.getPrompt());\n        prompt.add(buildPrompts(\"system\", currentDatePrompt()));\n\n        // Build current time prompt\n        Prompt currentDatePrompt = new Prompt.Builder(\"current_date\")\n                .withRole(\"system\")\n             .formattedWith",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 751,
      "groundtruth": "Prompt.getDefaultResponse();",
      "prediction": "\"Use the followi",
      "raw_prediction": "\"Use the following format: {\\\"name\\\": \\\"<command_name>\\\", \\\"args\\\": {\\\"<arg_name>\\\": \\\"<arg_value>\\\"}, \\\"response_format\\\": {\\\"<response_key>\\\": \\\"<response_value",
      "es": 0.1785714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 752,
      "groundtruth": "return seeMore.getSchedulerHook().runTaskDelayed(() -> updateDistance(player, 0, attempts, distanceMap, taskMap, distanceConsumer), delay);",
      "prediction": "return seeMore.getSchedulerHook().runTaskLater(() -> updateDistance(player, 0, attempts + 1, distanceMap, taskMap, distanceConsumer), delay);",
      "raw_prediction": "    return seeMore.getSchedulerHook().runTaskLater(() -> updateDistance(player, 0, attempts + 1, distanceMap, taskMap, distanceConsumer), delay);",
      "es": 0.9361702127659575,
      "em": false,
      "passed": false
    },
    {
      "index": 753,
      "groundtruth": "viewDistanceController.updateAllPlayers();",
      "prediction": "viewDistanceController.updateTargetViewDistances();",
      "raw_prediction": "viewDistanceController.updateTargetViewDistances();",
      "es": 0.6666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 754,
      "groundtruth": "updateTask = seeMore.getSchedulerHook().runEntityTaskAsap(() -> {",
      "prediction": "updateTask = seeMore.getSchedulerH",
      "raw_prediction": "updateTask = seeMore.getSchedulerHook().runTask(() -> {",
      "es": 0.523076923076923,
      "em": false,
      "passed": false
    },
    {
      "index": 755,
      "groundtruth": "seeMore.getSeeMoreConfig().updateDelay.get();",
      "prediction": "Math.max(20, Math.min(60, (int) Math.pow(clientViewDistance - player.getViewDistance(), 2)",
      "raw_prediction": "Math.max(20, Math.min(60, (int) Math.pow(clientViewDistance - player.getViewDistance(), 2))); // exponential delay based on the difference between the current and target view distance\n            } else {\n               ",
      "es": 0.18888888888888888,
      "em": false,
      "passed": false
    },
    {
      "index": 756,
      "groundtruth": "parsedReport.getAverages().get(test.getTestName()));",
      "prediction": "parsedReport.getAverages().get(test.getTestName())",
      "raw_prediction": "parsedReport.getAverages().get(test.getTestName())\n                    );",
      "es": 0.9615384615384616,
      "em": false,
      "passed": false
    },
    {
      "index": 757,
      "groundtruth": ".out.println(\"Successfully completed \" + test.getTestName() + \" in \" + timeElapsed + \" ms!\");",
      "prediction": ".out.printf(\"Test: %s took %dms%n\", test.getTestName(), isNative() ? \"Native\" : \"Non Native\", isNative() ? System.nanoTime() : System.curre",
      "raw_prediction": ".out.printf(\"Test: %s took %dms%n\", test.getTestName(), isNative() ? \"Native\" : \"Non Native\", isNative() ? System.nanoTime() : System.currentTimeMillis());",
      "es": 0.3309352517985612,
      "em": false,
      "passed": false
    },
    {
      "index": 758,
      "groundtruth": "\"results for \" + test.getTestName() + \"!\");",
      "prediction": "\"s between the two reports.\");",
      "raw_prediction": "    \"s between the two reports.\");\n                    } else {\n                        System.out.println(\"Comparing \" + slowerOptional.get().isNative() ? \"Native\" : \"Non native\" +\n                                \" and \" + fasterOptional.get().is",
      "es": 0.2325581395348837,
      "em": false,
      "passed": false
    },
    {
      "index": 759,
      "groundtruth": "toJson(report.getResults()).getBytes());",
      "prediction": "toJson(report).getBytes());",
      "raw_prediction": "toJson(report).getBytes());\n            System.out.println(\"Successfully created report at: \" + outputFile.toAbsolutePath());",
      "es": 0.675,
      "em": false,
      "passed": false
    },
    {
      "index": 760,
      "groundtruth": "executor.awaitTermination(30, TimeUnit.SECONDS);",
      "prediction": "executor.awaitTermination(5, TimeUnit.SECONDS);",
      "raw_prediction": "executor.awaitTermination(5, TimeUnit.SECONDS);",
      "es": 0.9583333333333334,
      "em": false,
      "passed": false
    },
    {
      "index": 761,
      "groundtruth": "executor.shutdown();",
      "prediction": "executor.shutdownNow();",
      "raw_prediction": "executor.shutdownNow();\n    try {\n      executor.awaitTermination(30, TimeUnit.SECONDS);\n    } catch (InterruptedException e) {\n      Thread.currentThread().interrupt();\n      throw new RuntimeException(\n          \"Interrupted waiting for group processing thread to",
      "es": 0.8695652173913043,
      "em": false,
      "passed": false
    },
    {
      "index": 762,
      "groundtruth": ".put(identity.getId(), entry.memberId());",
      "prediction": ".put(identity.getId(), entry.memberId());",
      "raw_prediction": ".put(identity.getId(), entry.memberId());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 763,
      "groundtruth": "properties.getConsumerConfig();",
      "prediction": "new ConsumerConfig();",
      "raw_prediction": "new ConsumerConfig();\n\n    clientConfig.putAll(properties.getProperties());\n\n    clientConfig.put(ConsumerConfig.GROUP_ID_CONFIG, properties.getGroupId());\n    clientConfig.put(ConsumerConfig.AUTO_OFFSET_RESET_CONFIG, \"earliest\");\n    clientConfig.put",
      "es": 0.5806451612903225,
      "em": false,
      "passed": false
    },
    {
      "index": 764,
      "groundtruth": "().getId());",
      "prediction": "());",
      "raw_prediction": "());",
      "es": 0.33333333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 765,
      "groundtruth": "identity.getId() + \"-\" + BD_CLIENT_ID_SEQUENCE.getAndIncrement();",
      "prediction": "BD_CLIENT_ID_SEQUENCE.getAndIncrement();",
      "raw_prediction": "BD_CLIENT_ID_SEQUENCE.getAndIncrement();",
      "es": 0.6153846153846154,
      "em": false,
      "passed": false
    },
    {
      "index": 766,
      "groundtruth": "[j].spawn();",
      "prediction": "[j].spawn();",
      "raw_prediction": "[j].spawn();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 767,
      "groundtruth": "if (!particleSpawnEvent.isCancelled()) {",
      "prediction": "if (!particleSpawnEvent.isCancelled())",
      "raw_prediction": " if (!particleSpawnEvent.isCancelled()) {",
      "es": 0.95,
      "em": false,
      "passed": false
    },
    {
      "index": 768,
      "groundtruth": "[j].clone();",
      "prediction": "clone();",
      "raw_prediction": "clone();",
      "es": 0.6666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 769,
      "groundtruth": "ToyController.instance().setScalarLevel(intensity);",
      "prediction": "LOGGER.debug(\"Intensity {}\", intensity);",
      "raw_prediction": "LOGGER.debug(\"Intensity {}\", intensity);",
      "es": 0.3137254901960784,
      "em": false,
      "passed": false
    },
    {
      "index": 770,
      "groundtruth": "ToyController.instance().setScalarLevel(0);",
      "prediction": "ToyController.instance().setLinearLevel(0f);",
      "raw_prediction": "ToyController.instance().setLinearLevel(0f);\n\t\t\t } else {\n\t\t\t\t\tToyController.instance().setLinearLevel(getIntensity());",
      "es": 0.8863636363636364,
      "em": false,
      "passed": false
    },
    {
      "index": 771,
      "groundtruth": "masochistPointsCounter.onHurt(amount);",
      "prediction": "attackPointsCounter.onHurt(amount);",
      "raw_prediction": "attackPointsCounter.onHurt(amount);",
      "es": 0.7894736842105263,
      "em": false,
      "passed": false
    },
    {
      "index": 772,
      "groundtruth": "abstractPointsCounter.getInstantPoints(), instanPoints);",
      "prediction": "abstractPointsCounter.getInstantPoints(), instanPoints);",
      "raw_prediction": "abstractPointsCounter.getInstantPoints(), instanPoints);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 773,
      "groundtruth": "skipDownTick += abstractPointsCounter.getSkipDownTicks();",
      "prediction": "skipDownTick = Math.max(abstractPointsCounter.getSkipDownTicks(), skipDownTick);",
      "raw_prediction": "\tskipDownTick = Math.max(abstractPointsCounter.getSkipDownTicks(), skipDownTick);",
      "es": 0.6875,
      "em": false,
      "passed": false
    },
    {
      "index": 774,
      "groundtruth": "= Math.max(abstractPointsCounter.getPoints(), points);",
      "prediction": "+= abstractPointsCounter.getPoints();",
      "raw_prediction": "+= abstractPointsCounter.getPoints();",
      "es": 0.6481481481481481,
      "em": false,
      "passed": false
    },
    {
      "index": 775,
      "groundtruth": "ToyController.instance().setLinearLevel(intensity);",
      "prediction": "LOGGER.debug(\"Feedback: Points {}, Instant Points {}\", getPoints(), getInsta",
      "raw_prediction": "\tLOGGER.debug(\"Feedback: Points {}, Instant Points {}\", getPoints(), getInstantPoints());\n\t\t\t\tToyController.instance().setScalarLevel(getIntensity());",
      "es": 0.1578947368421053,
      "em": false,
      "passed": false
    },
    {
      "index": 776,
      "groundtruth": "abstractPointsCounter.onTick();",
      "prediction": "abstractPointsCounter.onPlayerTick();",
      "raw_prediction": "abstractPointsCounter.onPlayerTick();",
      "es": 0.8378378378378378,
      "em": false,
      "passed": false
    },
    {
      "index": 777,
      "groundtruth": "masochistPointsCounter.onDeath();",
      "prediction": "ToyController.instance().setScalarLevel(0);",
      "raw_prediction": "ToyController.instance().setScalarLevel(0);",
      "es": 0.2093023255813954,
      "em": false,
      "passed": false
    },
    {
      "index": 778,
      "groundtruth": ", file.genThumbnailPath());",
      "prediction": ", file.genThumbnailPath());",
      "raw_prediction": ", file.genThumbnailPath());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 779,
      "groundtruth": "= LdsUtil.getFileBucketPath(basePath, newFileId);",
      "prediction": "= basePath + \"/\" + newFileId;",
      "raw_prediction": "= basePath + \"/\" + newFileId;",
      "es": 0.3877551020408163,
      "em": false,
      "passed": false
    },
    {
      "index": 780,
      "groundtruth": "(newFile.checkImageFileType()) {",
      "prediction": "(size > 0) {",
      "raw_prediction": "(size > 0) {",
      "es": 0.1875,
      "em": false,
      "passed": false
    },
    {
      "index": 781,
      "groundtruth": "newFile.genThumbnailPath());",
      "prediction": "newFileId);",
      "raw_prediction": "newFileId);\n    }\n    if (file.getOriginalFilename().endsWith(\".pdf\")) {\n      storageService.save(\n          bucketName, newFile.genThumbnailPath(), file.getContentType(), file.getBytes());",
      "es": 0.3214285714285714,
      "em": false,
      "passed": false
    },
    {
      "index": 782,
      "groundtruth": ".orderNo = System.currentTimeMillis() + \"-\" + LdsUtil.getPathId(path);",
      "prediction": ".size = size;",
      "raw_prediction": ".size = size;\n  }\n\n  public FileMeta(String id, String path, String name, List<String> tags, String orderNo, long size) {\n    this.id = id;\n    this.path = path;\n    this.name =",
      "es": 0.1428571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 783,
      "groundtruth": "storageService.batchDelete(bucketName);",
      "prediction": "storageService.deleteAllFiles(bucketName);",
      "raw_prediction": "storageService.deleteAllFiles(bucketName);",
      "es": 0.7142857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 784,
      "groundtruth": "resourceBasePath = LdsUtil.getResourceBasePath(basePath);",
      "prediction": "resourceBasePath = LdsUtil.buildResourceBasePath(basePath, collectionName);",
      "raw_prediction": "resourceBasePath = LdsUtil.buildResourceBasePath(basePath, collectionName);",
      "es": 0.72,
      "em": false,
      "passed": false
    },
    {
      "index": 785,
      "groundtruth": "BaseFile oldFile = fileService.getFileById(fileId);",
      "prediction": "BaseFile oldFile = fileService.getFileById(fileId);",
      "raw_prediction": "BaseFile oldFile = fileService.getFileById(fileId);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 786,
      "groundtruth": "(contextValue.getType(), contextValue.getId());",
      "prediction": "(contextValue);",
      "raw_prediction": "(contextValue);\n    }\n\n    @Override\n    public void enterContext(ResourceTypeAndId contextValue) {\n      if (!contextValue.getType().equals(getCurrentContext())) {\n        throw new IllegalStateException(\"Context switching is not supported.\");\n      }",
      "es": 0.3191489361702128,
      "em": false,
      "passed": false
    },
    {
      "index": 787,
      "groundtruth": "enterContext(contextValue.getType());",
      "prediction": "setContextType(contextValue.getType());",
      "raw_prediction": "setContextType(contextValue.getType());",
      "es": 0.7948717948717949,
      "em": false,
      "passed": false
    },
    {
      "index": 788,
      "groundtruth": "contextValue.getId());",
      "prediction": "contextValue.getId());",
      "raw_prediction": "contextValue.getId());\n    }\n\n    @Override\n    public void enterContext(ResourceTypeAndId contextValue) {\n      if (!contextValue.getType().equals(getCurrentContext())) {\n        throw new IllegalStateException(\"Context switching is not supported.\");\n     ",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 789,
      "groundtruth": "(libraryIds.getVersion()),\n          new CqlTranslatorOptions(TRANSLATOR_OPTIONS),\n          errors);",
      "prediction": "(libraryIds.getVersion())\n              .withNamespace(\"http://hl7.org/fhir\"),\n          errors);",
      "raw_prediction": "(libraryIds.getVersion())\n              .withNamespace(\"http://hl7.org/fhir\"),\n          errors);",
      "es": 0.594059405940594,
      "em": false,
      "passed": false
    },
    {
      "index": 790,
      "groundtruth": "super.resolveType(value);",
      "prediction": "super.resolveType(value); // Call the superclass m",
      "raw_prediction": "super.resolveType(value); // Call the superclass method to resolve the type.",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 791,
      "groundtruth": "withId(libraryIds.getName())\n              .withVersion(libraryIds.getVersion()),\n          new CqlTranslatorOptions(TRANSLATOR_OPTIONS),\n          errors);",
      "prediction": "setName(libraryIds.getName())\n              .setVersion(libraryIds.getVersion())\n              .setNamespace(\"http://hl7.org/fhir\"),\n          errors);",
      "raw_prediction": "setName(libraryIds.getName())\n              .setVersion(libraryIds.getVersion())\n              .setNamespace(\"http://hl7.org/fhir\"),\n          errors);",
      "es": 0.6858974358974359,
      "em": false,
      "passed": false
    },
    {
      "index": 792,
      "groundtruth": "diceResult.setAmeacas(0);",
      "prediction": "diceResult.setAmeacas(0);",
      "raw_prediction": " diceResult.setAmeacas(0);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 793,
      "groundtruth": "diceResult.setFracassos(0);",
      "prediction": "diceResult.setFracassos(0);",
      "raw_prediction": "diceResult.setFracassos(0);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 794,
      "groundtruth": "diceResult.setFracassos(failure - success);",
      "prediction": "diceResult.setFracassos(-success + failure);",
      "raw_prediction": "diceResult.setFracassos(-success + failure);",
      "es": 0.6363636363636364,
      "em": false,
      "passed": false
    },
    {
      "index": 795,
      "groundtruth": "diceResult.setSucessos(success - failure);",
      "prediction": "DTOResult.setSucessos(success - failure);",
      "raw_prediction": "    DTOResult.setSucessos(success - failure);\n                DTOResult.setFracassos(0);\n        } else if (success - failure < 0) {\n            DTOResult.setSucessos(0);\n            DTOResult",
      "es": 0.9047619047619048,
      "em": false,
      "passed": false
    },
    {
      "index": 796,
      "groundtruth": "service.rollDisVantage(\"Advantage\", dice);",
      "prediction": "service.rollAdvantage(\"Advantage\", dice);",
      "raw_prediction": "service.rollAdvantage(\"Advantage\", dice);",
      "es": 0.9047619047619048,
      "em": false,
      "passed": false
    },
    {
      "index": 797,
      "groundtruth": "return openTelemetryService.spanScope(this.getClass().getName(), \"healthCheck\", () -> {",
      "prediction": "return openTelemetryService.spanScope(this.getClass().getName(), \"healthCheck\", () -> {",
      "raw_prediction": "return openTelemetryService.spanScope(this.getClass().getName(), \"healthCheck\", () -> {",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 798,
      "groundtruth": "diceResult.setVantagens(advantage - threat);",
      "prediction": "diceResult.setVantagens(advantage - threat);",
      "raw_prediction": "    diceResult.setVantagens(advantage - threat);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 799,
      "groundtruth": "= HydraulicImpl.instance().mod(modId);",
      "prediction": "= HydraulicImpl.getInstance().getModManager().getMod(modId);",
      "raw_prediction": "= HydraulicImpl.getInstance().getModManager().getMod(modId);",
      "es": 0.6,
      "em": false,
      "passed": false
    },
    {
      "index": 800,
      "groundtruth": "return HydraulicImpl.instance().dataFolder(Constants.MOD_ID)\n                .resolve(\"storage\")\n                .resolve(mod.id());",
      "prediction": "return HydraulicImpl.getInstance().getModStorageDirectory().resolve(mod.id());",
      "raw_prediction": "return HydraulicImpl.getInstance().getModStorageDirectory().resolve(mod.id());",
      "es": 0.446969696969697,
      "em": false,
      "passed": false
    },
    {
      "index": 801,
      "groundtruth": "diceResult.setDesesperos(0);",
      "prediction": "diceResult.setDesesperos(0);",
      "raw_prediction": "diceResult.setDesesperos(0);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 802,
      "groundtruth": "this.hydraulic.server().registryAccess().registryOrThrow(key);",
      "prediction": "this.hydraulic.registry(key);",
      "raw_prediction": "this.hydraulic.registry(key);",
      "es": 0.467741935483871,
      "em": false,
      "passed": false
    },
    {
      "index": 803,
      "groundtruth": ".packManager.initialize();",
      "prediction": ".bootstrap.onServerStarting(server);",
      "raw_prediction": ".bootstrap.onServerStarting(server);\n\n        this.packManager.onServerStarting(server);\n    }\n\n    /**\n     * Called when the server is stopping.\n     *\n     * @param server the Minecraft server instance\n     */\n    public void onServerStopping",
      "es": 0.2777777777777778,
      "em": false,
      "passed": false
    },
    {
      "index": 804,
      "groundtruth": "this.bootstrap.mods();",
      "prediction": "this.bootstrap.mods();",
      "raw_prediction": "this.bootstrap.mods();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 805,
      "groundtruth": "forceResult.setLuz(light);",
      "prediction": "forceResult.setPreto(light);",
      "raw_prediction": "forceResult.setPreto(light);",
      "es": 0.8214285714285714,
      "em": false,
      "passed": false
    },
    {
      "index": 806,
      "groundtruth": "forceResult.setNegro(dark);",
      "prediction": "forceResult.setEscuridao(dark);",
      "raw_prediction": "forceResult.setEscuridao(dark);",
      "es": 0.7741935483870968,
      "em": false,
      "passed": false
    },
    {
      "index": 807,
      "groundtruth": "result = boostDice.roll();",
      "prediction": "result = boostDice.roll();",
      "raw_prediction": "result = boostDice.roll();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 808,
      "groundtruth": "logger.Info(String.format(\"[%s] [%s] websocket is closed\", conversationSignature, question));",
      "prediction": "logger.Info(String.format(\"[%s] [%s] websocket is closed\", conversationSignature, question));",
      "raw_prediction": "logger.Info(String.format(\"[%s] [%s] websocket is closed\", conversationSignature, question));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 809,
      "groundtruth": "logger.Debug(String.format(\"[%s] [%s] client send message [%s]\", conversationSignature, question, data));",
      "prediction": "ws.send(data);",
      "raw_prediction": "ws.send(data);",
      "es": 0.10476190476190472,
      "em": false,
      "passed": false
    },
    {
      "index": 810,
      "groundtruth": "logger.Debug(String.format(\"[%s] [%s] websocket is received new message [%s]\", conversationSignature, question, textSpited));",
      "prediction": "logger.Debug(String.format(\"[%s] [%s] server send message [%s]\", conversationSignature, question, textSpliced));",
      "raw_prediction": " logger.Debug(String.format(\"[%s] [%s] server send message [%s]\", conversationSignature, question, textSpliced));",
      "es": 0.832,
      "em": false,
      "passed": false
    },
    {
      "index": 811,
      "groundtruth": "(String.format(\"%s   %s\", country.getEmoji(), country.getName()));",
      "prediction": "(country.getName());",
      "raw_prediction": "(country.getName());",
      "es": 0.303030303030303,
      "em": false,
      "passed": false
    },
    {
      "index": 812,
      "groundtruth": "setText(String.format(\"%s   %s\", country.getEmoji(), country.getName()));",
      "prediction": "setText(country.getName());",
      "raw_prediction": "setText(country.getName());",
      "es": 0.36986301369863017,
      "em": false,
      "passed": false
    },
    {
      "index": 813,
      "groundtruth": "(country.getCallingCode());",
      "prediction": "(country.getCallingCode());",
      "raw_prediction": "(country.getCallingCode());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 814,
      "groundtruth": "country.getCode();",
      "prediction": "String.valueOf(getPosition()); // Yo",
      "raw_prediction": "String.valueOf(getPosition()); // You can use any unique key here",
      "es": 0.2222222222222222,
      "em": false,
      "passed": false
    },
    {
      "index": 815,
      "groundtruth": ", String> available = TraceUtils.listCategories();",
      "prediction": ", String> available = new TreeMap<>();",
      "raw_prediction": ", String> available = new TreeMap<>();",
      "es": 0.54,
      "em": false,
      "passed": false
    },
    {
      "index": 816,
      "groundtruth": "Process perfetto = TraceUtils.exec(cmd, null, false);",
      "prediction": "Process perfetto = TraceUtils.exec(cmd);",
      "raw_prediction": " Process perfetto = TraceUtils.exec(cmd);\n\n            // Read the output from the perfetto process.\n            byte[] buffer = new byte[1024];\n            int bytesRead;\n            while ((bytesRead = perfetto.getInputStream().read",
      "es": 0.7547169811320755,
      "em": false,
      "passed": false
    },
    {
      "index": 817,
      "groundtruth": "TraceUtils.traceStop();",
      "prediction": "QsService.updateTile();",
      "raw_prediction": "QsService.updateTile();",
      "es": 0.30434782608695654,
      "em": false,
      "passed": false
    },
    {
      "index": 818,
      "groundtruth": "false : TraceUtils.isTracingOn();",
      "prediction": "false : TraceUtils.isTracingOn();",
      "raw_prediction": "false : TraceUtils.isTracingOn();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 819,
      "groundtruth": "(TraceUtils.traceStart(tags, bufferSizeKb, appTracing,\n                longTrace, attachToBugreport, maxLongTraceSizeMb, maxLongTraceDurationMinutes)) {",
      "prediction": "(appTracing) {\n            TraceUtils.traceStartAppTracing(tags, bufferSizeKb, longTrace, maxLongTraceSizeMb,\n                    maxLongTraceDurationMinutes);",
      "raw_prediction": "(appTracing) {\n            TraceUtils.traceStartAppTracing(tags, bufferSizeKb, longTrace, maxLongTraceSizeMb,\n                    maxLongTraceDurationMinutes);\n        } else {\n            TraceUtils.traceStart(tags, bufferSizeK",
      "es": 0.37106918238993714,
      "em": false,
      "passed": false
    },
    {
      "index": 820,
      "groundtruth": "Process process = TraceUtils.exec(cmd);",
      "prediction": "Process process = TraceUtils.exec(cmd, null, false);",
      "raw_prediction": " Process process = TraceUtils.exec(cmd, null, false);",
      "es": 0.75,
      "em": false,
      "passed": false
    },
    {
      "index": 821,
      "groundtruth": "(TraceUtils.getOutputFilename(), false, false);",
      "prediction": "();",
      "raw_prediction": "();",
      "es": 0.06382978723404253,
      "em": false,
      "passed": false
    },
    {
      "index": 822,
      "groundtruth": "= TraceUtils.execWithTimeout(cmd, TEMP_DIR, STARTUP_TIMEOUT_MS);",
      "prediction": "= TraceUtils.execWithTimeout(cmd, null, STARTUP_TIMEOUT_MS);",
      "raw_prediction": "= TraceUtils.execWithTimeout(cmd, null, STARTUP_TIMEOUT_MS);",
      "es": 0.875,
      "em": false,
      "passed": false
    },
    {
      "index": 823,
      "groundtruth": "ps = TraceUtils.exec(\"ps -AT\", null, false);",
      "prediction": "ps = TraceUtils.exec(\"ps\");",
      "raw_prediction": "ps = TraceUtils.exec(\"ps\");",
      "es": 0.6136363636363636,
      "em": false,
      "passed": false
    },
    {
      "index": 824,
      "groundtruth": "prefsTracingOn && !TraceUtils.isTracingOn()) {",
      "prediction": "prefsTracingOn) {",
      "raw_prediction": "prefsTracingOn) {",
      "es": 0.3695652173913043,
      "em": false,
      "passed": false
    },
    {
      "index": 825,
      "groundtruth": "TraceUtils.clearSavedTraces();",
      "prediction": "Receiver.clearSavedTraces(getContext());",
      "raw_prediction": "Receiver.clearSavedTraces(getContext());",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 826,
      "groundtruth": "process = TraceUtils.execWithTimeout(cmd, null, STOP_TIMEOUT_MS);",
      "prediction": "static void main(String[] args) {",
      "raw_prediction": "static void main(String[] args) {\n        TreeMap<String, String> categories = perfettoListCategories();\n        for (String key : categories.keySet()) {\n            System.out.println(key + \": \" + categories.get(key));\n        }\n    }\n",
      "es": 0.1384615384615384,
      "em": false,
      "passed": false
    },
    {
      "index": 827,
      "groundtruth": ").contains(ConfigManager.getFirstName(p.getProperty(\"nbt.display.Name\")))) {",
      "prediction": ").contains(ConfigManager.getFirstName(p.getProperty(\"nbt.display.Name\"))",
      "raw_prediction": ").contains(ConfigManager.getFirstName(p.getProperty(\"nbt.display.Name\")))) {",
      "es": 0.9473684210526316,
      "em": false,
      "passed": false
    },
    {
      "index": 828,
      "groundtruth": "), accessor.getAddition(), recipe.getOutput().getItem(),\n\t\t\t\tnull, null\n\t\t).toJson();",
      "prediction": "),\n\t\t\t\taccessor.getAddition(),",
      "raw_prediction": "),\n\t\t\t\taccessor.getAddition(),\n\n\t\t\t\taccessor.getResult()\n\t\t).toJson();",
      "es": 0.24705882352941178,
      "em": false,
      "passed": false
    },
    {
      "index": 829,
      "groundtruth": "innerMsg.free();",
      "prediction": "innerMsg = null;",
      "raw_prediction": "innerMsg = null;",
      "es": 0.5625,
      "em": false,
      "passed": false
    },
    {
      "index": 830,
      "groundtruth": "System.out.println(\">>> \u8fde\u63a5\u5230\u4e1a\u52a1\u670d\u52a1\u5668\u6210\u529f! \"+conf.getAddress()+\" <<<\");",
      "prediction": "System.out.println(\"\u7cfb\u7edf\u901a\u77e5 - \u6ce8\u610f: \u670d\u52a1\u5668\u8fde\u63a5\u6210\u529f! >>> \" + conf.getAddress());",
      "raw_prediction": " System.out.println(\"\u7cfb\u7edf\u901a\u77e5 - \u6ce8\u610f: \u670d\u52a1\u5668\u8fde\u63a5\u6210\u529f! >>> \" + conf.getAddress());",
      "es": 0.6268656716417911,
      "em": false,
      "passed": false
    },
    {
      "index": 831,
      "groundtruth": "chIndex = loadBalancePolicy.getClientIndex(groupNameSet.size());",
      "prediction": "chIndex = loadBalancePolicy.getClientIndex(ncSet.size());",
      "raw_prediction": "chIndex = loadBalancePolicy.getClientIndex(ncSet.size());\n            ch = linkedHashSetGetByIndex(ncSet, chIndex);\n        }\n        return ch;\n    }\n\n    public NettyClient get(String serviceName, String groupName){\n        Conf",
      "es": 0.859375,
      "em": false,
      "passed": false
    },
    {
      "index": 832,
      "groundtruth": "(\"\u7cfb\u7edf\u901a\u77e5 - \u6ce8\u610f: \u670d\u52a1\u5668\u8fde\u63a5\u5173\u95ed! >>> \" + conf.getAddress());",
      "prediction": "(\">>> \u5931\u53bb\u8fde\u63a5 >>>\");",
      "raw_prediction": "(\">>> \u5931\u53bb\u8fde\u63a5 >>>\");\n        Set<NettyClient> clients = conf.getClients();\n        if(null == clients){\n            clients = new HashSet<>();\n            conf.setClients(clients);\n        }\n        clients.remove(this);",
      "es": 0.24489795918367352,
      "em": false,
      "passed": false
    },
    {
      "index": 833,
      "groundtruth": "() < lintConf.getClientMaxConnCount()){",
      "prediction": "() < lintConf.getClie",
      "raw_prediction": "() < lintConf.getClientMaxConnCount()){",
      "es": 0.5384615384615384,
      "em": false,
      "passed": false
    },
    {
      "index": 834,
      "groundtruth": "if(null == conf.getAddress()){",
      "prediction": "if(ch != null){",
      "raw_prediction": "if(ch != null){",
      "es": 0.30000000000000004,
      "em": false,
      "passed": false
    },
    {
      "index": 835,
      "groundtruth": ".writeBytes(innerMsg.getRequestHeader().toBytesArray());",
      "prediction": ".writeBytes(innerMsg.getHeader().toBytesArray());",
      "raw_prediction": ".writeBytes(innerMsg.getHeader().toBytesArray());\n            // \u5199\u51fabody\u957f\u5ea6\n            byteBuf.writeInt(innerMsg.getBody().toBytesArray().length);",
      "es": 0.875,
      "em": false,
      "passed": false
    },
    {
      "index": 836,
      "groundtruth": "requestBody.setRes(res);",
      "prediction": "requestBody.setRes(res);",
      "raw_prediction": " requestBody.setRes(res);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 837,
      "groundtruth": "NettyClient> closeCallback = conf.getCloseCallback();",
      "prediction": "NettyClient> closeCallback = conf.getCloseCallback();",
      "raw_prediction": "NettyClient> closeCallback = conf.getCloseCallback();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 838,
      "groundtruth": "bs.connect(conf.getAddress()).sync();",
      "prediction": "bs.connect(conf.getAddress()).sync();",
      "raw_prediction": "bs.connect(conf.getAddress()).sync();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 839,
      "groundtruth": ".setLength(requestBody.toBytesArray().length);",
      "prediction": ".setLength(requestBody.toBytesArray().length);",
      "raw_prediction": ".setLength(requestBody.toBytesArray().length);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 840,
      "groundtruth": "Objects.hash(conf.getAddress().getHostName(), conf.getAddress().getPort());",
      "prediction": "Objects.hash(conf.getAddress());",
      "raw_prediction": "Objects.hash(conf.getAddress());",
      "es": 0.42666666666666664,
      "em": false,
      "passed": false
    },
    {
      "index": 841,
      "groundtruth": "loadBalancePolicy.getClientIndex(addressSet.size());",
      "prediction": "0;",
      "raw_prediction": "0;\n                    while (clientIndex++ < addressSet.size()){",
      "es": 0.019230769230769273,
      "em": false,
      "passed": false
    },
    {
      "index": 842,
      "groundtruth": "factory = ClientFactory.getInstance();",
      "prediction": "factory = ClientFactory.getInstance();",
      "raw_prediction": "factory = ClientFactory.getInstance();\n        conf.setProviderSpi(ProvideSpi.getInstance());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 843,
      "groundtruth": "groupIndex = loadBalancePolicy.getClientIndex(groupNameSet.size());",
      "prediction": "groupIndex = loadBalancePolicy.getClientIndex(groupNameSet.size());",
      "raw_prediction": "groupIndex = loadBalancePolicy.getClientIndex(groupNameSet.size());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 844,
      "groundtruth": "msg.getMessage());",
      "prediction": "msg.getMessage());",
      "raw_prediction": "msg.getMessage());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 845,
      "groundtruth": "requestHeader.getLength()){",
      "prediction": "requestHeader.g",
      "raw_prediction": "requestHeader.getLength()){\n                // \u56de\u5230\u6807\u8bb0\u8bfb\u53d6\u4f4d\u7f6e\n                buff.resetReaderIndex();\n                return;\n            }\n\n            // \u5982\u679c\u6d88\u606f\u4f53\u957f\u5ea6\u4e0d\u591f \u76f4\u63a5\u9000\u51fa\n            if(null == requestHeader ||\n                    buff.readable",
      "es": 0.5555555555555556,
      "em": false,
      "passed": false
    },
    {
      "index": 846,
      "groundtruth": "NPCs.search().indexIs(index).first().flatMap(npc ->\n\t\t{",
      "prediction": "NPCs.search().withIndex(index)",
      "raw_prediction": "NPCs.search().withIndex(index).first().flatMap(npc ->\n\t\t{",
      "es": 0.4,
      "em": false,
      "passed": false
    },
    {
      "index": 847,
      "groundtruth": "return Bank.search().indexIs(index).first().flatMap(item ->\n\t\t{",
      "prediction": "return Bank.search().withIndex(index)",
      "raw_prediction": "return Bank.search().withIndex(index).first().flatMap(item ->\n\t\t{",
      "es": 0.46031746031746035,
      "em": false,
      "passed": false
    },
    {
      "index": 848,
      "groundtruth": "Players.search().filter(predicate).first().flatMap(Player ->\n\t\t{",
      "prediction": "Players.search().filter(predicate)",
      "raw_prediction": "Players.search().filter(predicate).first().flatMap(Player ->\n\t\t{",
      "es": 0.53125,
      "em": false,
      "passed": false
    },
    {
      "index": 849,
      "groundtruth": "BankInventory.search().indexIs(index).first().flatMap(item ->\n\t\t{",
      "prediction": "BankInventory.search().withIndex(index)",
      "raw_prediction": "BankInventory.search().withIndex(index).first().flatMap(item ->\n\t\t{",
      "es": 0.4769230769230769,
      "em": false,
      "passed": false
    },
    {
      "index": 850,
      "groundtruth": "NPCs.search().filter(predicate).first().flatMap(npc ->\n\t\t{",
      "prediction": "NPCs.search().filter(predicate)",
      "raw_prediction": "NPCs.search().filter(predicate).first().flatMap(npc ->\n\t\t{",
      "es": 0.5344827586206897,
      "em": false,
      "passed": false
    },
    {
      "index": 851,
      "groundtruth": "BufferMethods.du(buffer, (Integer) input);",
      "prediction": "BufferMethods.du(buffer, (Integer) input);",
      "raw_prediction": "BufferMethods.du(buffer, (Integer) input);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 852,
      "groundtruth": ".getRequestId(), lintConf.getRequestWaitTimeBySeconds());",
      "prediction": ".getRequestId(),",
      "raw_prediction": ".getRequestId(),\n                    lintConf.getTimeout()\n            );\n\n            // \u6d88\u606f\u6c60\u67e5\u8be2\u6570\u636e \u5982\u679c\u67e5\u5230\u5219\u5e8f\u5217\u5316\u8fd4\u56de \uff0c\u8d85\u65f6\u5219\u8fd4\u56de\u8d85\u65f6 \u6216\u8005 \u8c03\u7528\u515c\u5e95\u8865\u507f\n            responseMsg = Msg",
      "es": 0.2807017543859649,
      "em": false,
      "passed": false
    },
    {
      "index": 853,
      "groundtruth": "()) && this.getBody().build()) {",
      "prediction": "())) {",
      "raw_prediction": "())) {",
      "es": 0.1875,
      "em": false,
      "passed": false
    },
    {
      "index": 854,
      "groundtruth": ".getBody().toJson().getBytes());",
      "prediction": ".getBody().build().getBytes());",
      "raw_prediction": ".getBody().build().getBytes());\n",
      "es": 0.8125,
      "em": false,
      "passed": false
    },
    {
      "index": 855,
      "groundtruth": "Widget bow = HypsApiPlugin.getItem(\"*bow*\");",
      "prediction": "Widget bow = HypsApiPlugin.getItem(\"*bow*\");",
      "raw_prediction": "Widget bow = HypsApiPlugin.getItem(\"*bow*\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 856,
      "groundtruth": "<Widget> ring_of_wealth = Inventory.search().nameContains(\"Ring of wealth (\").first();",
      "prediction": "<Widget> ring_of_wealth = Inventory.search().withId(RING_OF_WEALTH).first();",
      "raw_prediction": "<Widget> ring_of_wealth = Inventory.search().withId(RING_OF_WEALTH).first();",
      "es": 0.6744186046511628,
      "em": false,
      "passed": false
    },
    {
      "index": 857,
      "groundtruth": "> royal_seed_pod = Inventory.search().withId(ItemID.ROYAL_SEED_POD).first();",
      "prediction": "> royal_seed_pod = Inventory.search().withId(ItemID.ROYAL_SEED_POD).first();",
      "raw_prediction": "> royal_seed_pod = Inventory.search().withId(ItemID.ROYAL_SEED_POD).first();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 858,
      "groundtruth": "> widget = Inventory.search().withId(ItemID.ROYAL_SEED_POD).first();",
      "prediction": "> widget = Inventory.search().nameContains(\"Royal seed pod\").first();",
      "raw_prediction": "> widget = Inventory.search().nameContains(\"Royal seed pod\").first();",
      "es": 0.5942028985507246,
      "em": false,
      "passed": false
    },
    {
      "index": 859,
      "groundtruth": "Widget> row = Inventory.search().nameContains(\"Ring of wealth (\").first();",
      "prediction": "Widget> row = Inventory.search().withId(RING_OF_WEALTH).first();",
      "raw_prediction": "Widget> row = Inventory.search().withId(RING_OF_WEALTH).first();",
      "es": 0.6216216216216216,
      "em": false,
      "passed": false
    },
    {
      "index": 860,
      "groundtruth": "(embed.toArray().entrySet())));",
      "prediction": "(embed.toArray())));",
      "raw_prediction": "(embed.toArray())));\n",
      "es": 0.6451612903225806,
      "em": false,
      "passed": false
    },
    {
      "index": 861,
      "groundtruth": "return repository.findByEmailSent(false);",
      "prediction": "return repository.findByEmailSent(false);",
      "raw_prediction": "return repository.findByEmailSent(false);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 862,
      "groundtruth": "= pluginLoader.getPluginFactories();",
      "prediction": "= pluginLoader.getFactories();",
      "raw_prediction": "= pluginLoader.getFactories();",
      "es": 0.8333333333333334,
      "em": false,
      "passed": false
    },
    {
      "index": 863,
      "groundtruth": "handler.onCommand(command, arguments);",
      "prediction": "handler.handleCommand(arguments);",
      "raw_prediction": "handler.handleCommand(arguments);",
      "es": 0.7105263157894737,
      "em": false,
      "passed": false
    },
    {
      "index": 864,
      "groundtruth": "EasyContactFormsApplication.loadPlugins(pluginsPath);",
      "prediction": "// Reloads all plugins",
      "raw_prediction": "// Reloads all plugins\n        PluginStore.instance.reloadPlugins(pluginsPath);\n\n        // Reloads all plugins\n        plugins = priorities();\n\n        // Starts all plugins\n        for (String key : PluginStore.instance.plugins.keySet()) {\n           ",
      "es": 0.2264150943396226,
      "em": false,
      "passed": false
    },
    {
      "index": 865,
      "groundtruth": "<ContactForm> forms = contactFormService.getContactForms(true);",
      "prediction": "<ContactForm> forms = contactFormService.getFormsToSend();",
      "raw_prediction": "<ContactForm> forms = contactFormService.getFormsToSend();",
      "es": 0.7777777777777778,
      "em": false,
      "passed": false
    },
    {
      "index": 866,
      "groundtruth": "lastRange.covers(previous)) {",
      "prediction": "previous.start()",
      "raw_prediction": "previous.start() <= lastRange.end()) {",
      "es": 0.1724137931034483,
      "em": false,
      "passed": false
    },
    {
      "index": 867,
      "groundtruth": "lastRange.addRange(previous);",
      "prediction": "iterator.remove();",
      "raw_prediction": " iterator.remove();\n                }else {\n                    lastRange = previous;\n                }\n            }\n        }\n    }\n    \n    /**\n     * Adds a token to the list of tokens.\n     *\n     * @param length The length of the token.\n",
      "es": 0.24137931034482762,
      "em": false,
      "passed": false
    },
    {
      "index": 868,
      "groundtruth": "tokens.add(range.recalculate());",
      "prediction": "tokens.add(range);",
      "raw_prediction": "tokens.add(range);",
      "es": 0.5625,
      "em": false,
      "passed": false
    },
    {
      "index": 869,
      "groundtruth": "StringSearcher.search(search, this);",
      "prediction": "StringSearcher searcher = new StringSearcher(search);",
      "raw_prediction": "StringSearcher searcher = new StringSearcher(search);\n        while(searcher.hasNext()) {\n            searcher.next();\n            addToken(searcher.range());\n        }\n        reduceTokens();",
      "es": 0.5094339622641509,
      "em": false,
      "passed": false
    },
    {
      "index": 870,
      "groundtruth": "cliRunner.start();",
      "prediction": "LOG.info(\"Running CLI to provision c",
      "raw_prediction": " LOG.info(\"Running CLI to provision connection...\");",
      "es": 0.19444444444444442,
      "em": false,
      "passed": false
    },
    {
      "index": 871,
      "groundtruth": "connectParams = cliRunner.getConnectionParams();",
      "prediction": "connectParams = cliRunner.connectParams();",
      "raw_prediction": "connectParams = cliRunner.connectParams();",
      "es": 0.8541666666666666,
      "em": false,
      "passed": false
    },
    {
      "index": 872,
      "groundtruth": "(BufferedInputStream in = new BufferedInputStream(fetcher.fetch(checksumMapURL))) {",
      "prediction": "(Reader reader = new InputStreamReader(fetcher.fetch(checksumMapURL), StandardCharsets.UTF_8))",
      "raw_prediction": "(Reader reader = new InputStreamReader(fetcher.fetch(checksumMapURL), StandardCharsets.UTF_8)) {",
      "es": 0.3936170212765957,
      "em": false,
      "passed": false
    },
    {
      "index": 873,
      "groundtruth": "basicParameter.getApiUrl() == null) {",
      "prediction": "basicParameter.getUr",
      "raw_prediction": "basicParameter.getUrl() == null || basicParameter.getUrl().isEmpty()) {",
      "es": 0.5405405405405406,
      "em": false,
      "passed": false
    },
    {
      "index": 874,
      "groundtruth": "cliRunner.shutdown();",
      "prediction": "LOG.error(\"Failed to start CLI runner\", io",
      "raw_prediction": "LOG.error(\"Failed to start CLI runner\", ioe);",
      "es": 0.09523809523809523,
      "em": false,
      "passed": false
    },
    {
      "index": 875,
      "groundtruth": "new BufferedInputStream(new DigestInputStream(fetcher.fetch(cliArchiveURL), sha256))) {",
      "prediction": "fetcher.fetch(cliArchiveURL)) {",
      "raw_prediction": "fetcher.fetch(cliArchiveURL)) {",
      "es": 0.3563218390804598,
      "em": false,
      "passed": false
    },
    {
      "index": 876,
      "groundtruth": "parameter.setInit_images(new String[]{",
      "prediction": "parameter.setImage(new String[]{",
      "raw_prediction": "\t\tparameter.setImage(new String[]{",
      "es": 0.8421052631578947,
      "em": false,
      "passed": false
    },
    {
      "index": 877,
      "groundtruth": "parameter.setDenoisingStrength(new BigDecimal(\"0.55\"));",
      "prediction": "parameter.setMixingStrength(BigDecimal.valueOf(0.5));",
      "raw_prediction": " parameter.setMixingStrength(BigDecimal.valueOf(0.5));\n\t\t//\u79cd\u5b50\u503c\uff0c-1\u8868\u793a\u968f\u673a\u79cd\u5b50\uff0c0\u8868\u793a\u56fa\u5b9a\u79cd\u5b50\u503c\uff0c\u5927\u4e8e0\u8868\u793a\u56fa\u5b9a\u79cd\u5b50\u503c\n\t\tparameter.setSeed(-1);\n\t\t//",
      "es": 0.6363636363636364,
      "em": false,
      "passed": false
    },
    {
      "index": 878,
      "groundtruth": "(serviceConnection.isEmpty()) tokens.add(token);",
      "prediction": "(serviceConnection.isEmpty())",
      "raw_prediction": "(serviceConnection.isEmpty()) {\n                tokens.add(token);\n\n            }\n        }\n        for (String token : tokens) {\n            map.remove(token);\n\n            ComponentName name = ComponentName.unflattenFromString(token);\n\n            DhizukuUserServiceArgs args =",
      "es": 0.6041666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 879,
      "groundtruth": "args.build());",
      "prediction": "args.build());",
      "raw_prediction": "args.build());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 880,
      "groundtruth": "== null) dhizuku.bindUserService(iDhizukuUserServiceConnection, args.build());",
      "prediction": "== null) dhizuku.bindUserService(iDhizukuUserServiceConnection, args.build());",
      "raw_prediction": "== null) dhizuku.bindUserService(iDhizukuUserServiceConnection, args.build());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 881,
      "groundtruth": ".update(SharedDataModel.getReservation());",
      "prediction": ".update(SharedDataModel.getReservation());",
      "raw_prediction": ".update(SharedDataModel.getReservation());\n        SharedDataModel.setReservation(null);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 882,
      "groundtruth": "SharedDataModel.getReservation().state = \"paid\";",
      "prediction": "Reservation reservation = SharedDataModel.getReservation();",
      "raw_prediction": "Reservation reservation = SharedDataModel.getReservation();\n        reservation.status = \"paid\";\n        reservation.payment_date = java.time.LocalDate.now();",
      "es": 0.30508474576271183,
      "em": false,
      "passed": false
    },
    {
      "index": 883,
      "groundtruth": "customer = CustomerDAO.getCustomerbyID(kundenID);",
      "prediction": "customer = CustomerDAO.getCustomerbyID(kundenID);",
      "raw_prediction": "customer = CustomerDAO.getCustomerbyID(kundenID);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 884,
      "groundtruth": "(), connectParams.getSessionToken(), Optional.of(cliRunner));",
      "prediction": "(), connectParams.getToken(), Optional.of(cliRunner));",
      "raw_prediction": "(), connectParams.getToken(), Optional.of(cliRunner));",
      "es": 0.8852459016393442,
      "em": false,
      "passed": false
    },
    {
      "index": 885,
      "groundtruth": "Schema.initialize(in);",
      "prediction": "new SchemaVisitor().visitSchema(in);",
      "raw_prediction": "new SchemaVisitor().visitSchema(in);",
      "es": 0.4444444444444444,
      "em": false,
      "passed": false
    },
    {
      "index": 886,
      "groundtruth": "().info(String.format(\"Generating scala %s\", type.getName()));",
      "prediction": "().info(String.format(\"Generating scalar %s\", type.getName()));",
      "raw_prediction": "().info(String.format(\"Generating scalar %s\", type.getName()));",
      "es": 0.9841269841269842,
      "em": false,
      "passed": false
    },
    {
      "index": 887,
      "groundtruth": "= \"```\" + (isForWebhook ? topList.getTopListAsString(true) : topList.getTopListAsString(false)) + \"```\";",
      "prediction": "= getDescriptionOfTopList();",
      "raw_prediction": "= getDescriptionOfTopList();",
      "es": 0.1923076923076923,
      "em": false,
      "passed": false
    },
    {
      "index": 888,
      "groundtruth": "maxNameLength + 3) + \"s %d%s\\n\", i++, name, intValue, leaderboardConfig.getMetric());",
      "prediction": "maxNameLength + 3) + \"s %d%s\\n\", i++, name, intValue, leaderboardConfig.getMetric());",
      "raw_prediction": "maxNameLength + 3) + \"s %d%s\\n\", i++, name, intValue, leaderboardConfig.getMetric());\n                } else {\n                    formattedEntry = String.format(\"%d. %-\" + (maxNameLength + ",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 889,
      "groundtruth": "(isForWebhook ? topList.getTopListAsString(true) : topList.getTopListAsString(false)) + \"```\";",
      "prediction": "\"\\n\";",
      "raw_prediction": "\"\\n\";\n        for (int i = 0; i < topList.getTopListSize(); i++) {\n            Map.Entry<String, Double> entry = topList.getTopListAsMap().entrySet().stream()\n                .",
      "es": 0.03191489361702127,
      "em": false,
      "passed": false
    },
    {
      "index": 890,
      "groundtruth": ") + \"s %d%s\\\\u000A\", i++, name, intValue, leaderboardConfig.getMetric());",
      "prediction": ") + \"s %d%s\\n\", i++, name, intValue, leaderboardConfig.getMetric());",
      "raw_prediction": ") + \"s %d%s\\n\", i++, name, intValue, leaderboardConfig.getMetric());\n                } else {\n                    formattedEntry = String.format(\"%d. %-\" + (maxNameLength + 3) + \"s %",
      "es": 0.9178082191780822,
      "em": false,
      "passed": false
    },
    {
      "index": 891,
      "groundtruth": "if (leaderboard.getConfig().getFloatingpoints() > 0){",
      "prediction": "if(numberOfFloatingPoints > 0)",
      "raw_prediction": "if(numberOfFloatingPoints > 0){\n                    BigDecimal bd = new BigDecimal(entry.getValue()).setScale(numberOfFloatingPoints, RoundingMode.HALF_UP);",
      "es": 0.4528301886792453,
      "em": false,
      "passed": false
    },
    {
      "index": 892,
      "groundtruth": ", Double> playerScores = topList.getTopListAsMap();",
      "prediction": ", Double> playerScores = topList.getPlayerScores();",
      "raw_prediction": ", Double> playerScores = topList.getPlayerScores();\n\n        //Replace {top-x-name} and {top-x-score} placeholders with actual values from the top list\n        //The placeholders are in the format {top-x-name} or",
      "es": 0.7647058823529411,
      "em": false,
      "passed": false
    },
    {
      "index": 893,
      "groundtruth": "this.leaderboardversion = mainConfig.getPluginVersion();",
      "prediction": "this.leaderboardversion = \"1.0\";",
      "raw_prediction": "this.leaderboardversion = \"1.0\";",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 894,
      "groundtruth": "= customConfig.get();",
      "prediction": "= customConfig.get();",
      "raw_prediction": "= customConfig.get();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 895,
      "groundtruth": "customConfig.setup();",
      "prediction": "config = customConfig.get();",
      "raw_prediction": "config = customConfig.get();\n        save();\n    }\n\n    //Constructer for create new LeaderboardConfig\n    public LeaderboardConfig(String name, String placeholder, int top, String delay, String metric, boolean higherisbetter, int",
      "es": 0.5714285714285714,
      "em": false,
      "passed": false
    },
    {
      "index": 896,
      "groundtruth": "if (cache.isDiffernt()){",
      "prediction": "if (cache.isCache())",
      "raw_prediction": "if (cache.isCache()){\n                        leaderboard.send();\n                     cache.setCache();\n                     }else {",
      "es": 0.6666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 897,
      "groundtruth": "(descriptionGenerator.getDescription(false));",
      "prediction": "(descriptionGenerator.generateDescription(topList));",
      "raw_prediction": "(descriptionGenerator.generateDescription(topList));\n        discordsrvEmbed.setEmbedAuthor(\"DiscordSRV\", \"https://www.spigotmc.org/resources/discordsrv.10756/\", \"https://www.spigot",
      "es": 0.7884615384615384,
      "em": false,
      "passed": false
    },
    {
      "index": 898,
      "groundtruth": "customConfig.reload();",
      "prediction": "System.out.pr",
      "raw_prediction": "System.out.println(\"Saved \" + name + \" Config\");",
      "es": 0.2272727272727273,
      "em": false,
      "passed": false
    },
    {
      "index": 899,
      "groundtruth": "discordsrvEmbed.setEmbedImage(image);",
      "prediction": "discordsrvEmbed.setEmbedImage(image);",
      "raw_prediction": "discordsrvEmbed.setEmbedImage(image);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 900,
      "groundtruth": "cache.setCache();",
      "prediction": "setLastSent();",
      "raw_prediction": " setLastSent();",
      "es": 0.2941176470588235,
      "em": false,
      "passed": false
    },
    {
      "index": 901,
      "groundtruth": "content = jsonData.getDataAttributes().get(\"content\");",
      "prediction": "content = jsonData.getDataAttributes().get(\"content\");",
      "raw_prediction": "content = jsonData.getDataAttributes().get(\"content\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 902,
      "groundtruth": "companyProductName = jsonData.getDataAttributes().get(\"companyProductName\");",
      "prediction": "companyProductName = jsonData.getDataAttributes().get(\"companyProductName\");",
      "raw_prediction": "companyProductName = jsonData.getDataAttributes().get(\"companyProductName\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 903,
      "groundtruth": "info = jsonData.getDataAttributes().get(\"info\");",
      "prediction": "info = jsonData.getDataAttributes().get(\"info\");",
      "raw_prediction": "info = jsonData.getDataAttributes().get(\"info\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 904,
      "groundtruth": "sentence = jsonData.getDataAttributes().get(\"sentence\");",
      "prediction": "sentence = jsonData.getDataAttributes().get(\"sentence\");",
      "raw_prediction": "sentence = jsonData.getDataAttributes().get(\"sentence\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 905,
      "groundtruth": "adminPublish.close();",
      "prediction": "adminPublish.close();",
      "raw_prediction": " adminPublish.close();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 906,
      "groundtruth": "jsonData.getTemplateId()) {",
      "prediction": "jsonData.getDat",
      "raw_prediction": "jsonData.getDataAttributes().get(\"promptType\")) {",
      "es": 0.5185185185185186,
      "em": false,
      "passed": false
    },
    {
      "index": 907,
      "groundtruth": "String topic = jsonData.getDataAttributes().get(\"topic\");",
      "prediction": "String image = jsonData.getDataAttributes().get(\"image\");",
      "raw_prediction": "String image = jsonData.getDataAttributes().get(\"image\");",
      "es": 0.8245614035087719,
      "em": false,
      "passed": false
    },
    {
      "index": 908,
      "groundtruth": "customerAvatar = jsonData.getDataAttributes().get(\"customerAvatar\");",
      "prediction": "customerAvatar = jsonData.getDataAttributes().get(\"customerAvatar\");",
      "raw_prediction": "customerAvatar = jsonData.getDataAttributes().get(\"customerAvatar\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 909,
      "groundtruth": ".addHeader(\"Authorization\", \"Bearer\" + \" \" + config.getOpenAIAPIKey());",
      "prediction": ".addHeader(\"Authorization\", \"Bearer \" + key);",
      "raw_prediction": ".addHeader(\"Authorization\", \"Bearer \" + key);",
      "es": 0.619718309859155,
      "em": false,
      "passed": false
    },
    {
      "index": 910,
      "groundtruth": "customerProblem = jsonData.getDataAttributes().get(\"customerProblem\");",
      "prediction": "customerProblem = jsonData.getDataAttributes().get(\"customerProblem\");",
      "raw_prediction": "customerProblem = jsonData.getDataAttributes().get(\"customerProblem\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 911,
      "groundtruth": "audience = jsonData.getDataAttributes().get(\"audience\");",
      "prediction": "audience = jsonData.getDataAttributes().get(\"audience\");",
      "raw_prediction": "audience = jsonData.getDataAttributes().get(\"audience\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 912,
      "groundtruth": "String tone = jsonData.getDataAttributes().get(\"tone\");",
      "prediction": "String tone = jsonData.getDataAttributes().get(\"tone\");",
      "raw_prediction": "String tone = jsonData.getDataAttributes().get(\"tone\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 913,
      "groundtruth": "String product = jsonData.getDataAttributes().get(\"product\");",
      "prediction": "String product = jsonData.getDataAttributes().get(\"product\");",
      "raw_prediction": "String product = jsonData.getDataAttributes().get(\"product\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 914,
      "groundtruth": "client.getResourceRefs(path);",
      "prediction": "client.getReferences(path);",
      "raw_prediction": "client.getReferences(path);",
      "es": 0.7586206896551724,
      "em": false,
      "passed": false
    },
    {
      "index": 915,
      "groundtruth": "String gradeLevel = jsonData.getDataAttributes().get(\"gradeLevel\");",
      "prediction": "String gradeLevel = jsonData.getDataAttributes().get(\"gradeLevel\");",
      "raw_prediction": "String gradeLevel = jsonData.getDataAttributes().get(\"gradeLevel\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 916,
      "groundtruth": "SqlUtils.setScheduleLastSent(leaderboardname, currenttimestamp);",
      "prediction": "SqlUtils.setScheduleLastSent(leaderboardname, currenttimestamp);",
      "raw_prediction": "SqlUtils.setScheduleLastSent(leaderboardname, currenttimestamp);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 917,
      "groundtruth": "boolean isrefreshonsent = leaderboard.getConfig().isRefreshOnSent();",
      "prediction": "boolean isrefreshonsent = leaderboard.getConfig().isRefreshOnSend();",
      "raw_prediction": "boolean isrefreshonsent = leaderboard.getConfig().isRefreshOnSend();",
      "es": 0.9852941176470589,
      "em": false,
      "passed": false
    },
    {
      "index": 918,
      "groundtruth": "SqlUtils.isScheduleAlredySent(leaderboardname);",
      "prediction": "SqlUtils.isScheduleAlreadySent(leaderboardname);",
      "raw_prediction": "SqlUtils.isScheduleAlreadySent(leaderboardname);",
      "es": 0.9791666666666666,
      "em": false,
      "passed": false
    },
    {
      "index": 919,
      "groundtruth": "SqlUtils.deleteAllValues(tablename, ColumnName);",
      "prediction": "SqlUtils.deleteAllData(tablename, ColumnName);",
      "raw_prediction": "SqlUtils.deleteAllData(tablename, ColumnName);",
      "es": 0.8958333333333334,
      "em": false,
      "passed": false
    },
    {
      "index": 920,
      "groundtruth": "(TimeUtils.getTimestampDifference(currentTime, lastsent) >= SECSFORHOUR){",
      "prediction": "(TimeUtils.getTimestampDifference(currentTime, lastsent) >= SECSFORHOUR)",
      "raw_prediction": "(TimeUtils.getTimestampDifference(currentTime, lastsent) >= SECSFORHOUR){",
      "es": 0.9863013698630136,
      "em": false,
      "passed": false
    },
    {
      "index": 921,
      "groundtruth": "webhook.execute();",
      "prediction": "webhook.execute();",
      "raw_prediction": "    webhook.execute();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 922,
      "groundtruth": "= mainConfig.getDembedTitle();",
      "prediction": "= mainConfig.getDembedTitle();",
      "raw_prediction": "= mainConfig.getDembedTitle();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 923,
      "groundtruth": "webhook.setAvatarUrl(webhookAvatarUrl);",
      "prediction": "webhook.setAvatarUrl(webhookAvatarUrl);",
      "raw_prediction": "webhook.setAvatarUrl(webhookAvatarUrl);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 924,
      "groundtruth": "dwebhookAvatarUrl = mainConfig.getDwebhookAvatarUrl();",
      "prediction": "dwebhookAvatarUrl = mainConfig.getDwebhookAvatarUrl();",
      "raw_prediction": "dwebhookAvatarUrl = mainConfig.getDwebhookAvatarUrl();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 925,
      "groundtruth": "dembedImage = mainConfig.getDembedImage();",
      "prediction": "embedImage = mainConfig.getDembedImage();",
      "raw_prediction": "embedImage = mainConfig.getDembedImage();",
      "es": 0.9761904761904762,
      "em": false,
      "passed": false
    },
    {
      "index": 926,
      "groundtruth": "String description = descriptionGenerator.getDescription(true);",
      "prediction": "String description = descriptionGenerator.getDescription();",
      "raw_prediction": "String description = descriptionGenerator.getDescription();",
      "es": 0.9365079365079365,
      "em": false,
      "passed": false
    },
    {
      "index": 927,
      "groundtruth": "String delay = leaderboardConfig.getDelay();",
      "prediction": "String webhookAvatarUrl = leaderboardConfig.getWebhookAvatarUrl();",
      "raw_prediction": "String webhookAvatarUrl = leaderboardConfig.getWebhookAvatarUrl();",
      "es": 0.5757575757575757,
      "em": false,
      "passed": false
    },
    {
      "index": 928,
      "groundtruth": "String placeholder = leaderboardConfig.getPlaceholder();",
      "prediction": "return name;",
      "raw_prediction": "return name;\n    }\n\n    public String getTopListAsString(boolean withPlaceholders) {",
      "es": 0.1428571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 929,
      "groundtruth": "String dembedFooter = mainConfig.getDembedFooter();",
      "prediction": "String dembedFooter = mainConfig.getDembedFooter();",
      "raw_prediction": "String dembedFooter = mainConfig.getDembedFooter();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 930,
      "groundtruth": "embedTitle = leaderboardConfig.getEmbedTitle();",
      "prediction": "embedTitle = leaderboardConfig.getEmbedTitle();",
      "raw_prediction": "embedTitle = leaderboardConfig.getEmbedTitle();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 931,
      "groundtruth": "database.getConnection().prepareStatement(\n                        \"DELETE FROM \" + tableName + \" WHERE \" + columnName + \" IS NOT NULL\"\n                );",
      "prediction": "database.getConnection().prepareStatement(\"DELETE FROM \" + tableName + \" WHERE \" + columnName + \" IS NOT NULL\");",
      "raw_prediction": "database.getConnection().prepareStatement(\"DELETE FROM \" + tableName + \" WHERE \" + columnName + \" IS NOT NULL\");\n            } else if (mainConfig.getStorageType().equalsIgnoreCase(\"mysql\")) {\n                preparedStatement = database.getConnection().prepareStatement(\n",
      "es": 0.7272727272727273,
      "em": false,
      "passed": false
    },
    {
      "index": 932,
      "groundtruth": "database.getConnection().prepareStatement(\n                        \"REPLACE INTO Schedule (Leaderboard, LastSent) VALUES (?, ?)\"\n                );",
      "prediction": "database.getConnection().prepareStatement(\"INSERT INTO Schedule (Leaderboard, LastSent) VALUES (?, ?) \" +\n                    \"ON DUPLICATE KEY UPDATE LastSent = VALUES(LastSent)\");",
      "raw_prediction": "database.getConnection().prepareStatement(\"INSERT INTO Schedule (Leaderboard, LastSent) VALUES (?, ?) \" +\n                    \"ON DUPLICATE KEY UPDATE LastSent = VALUES(LastSent)\");\n",
      "es": 0.4917127071823204,
      "em": false,
      "passed": false
    },
    {
      "index": 933,
      "groundtruth": "SqlUtils.addUserDataToDatabase(placeholderColumnName, uuid, username, value);",
      "prediction": "SqlUtils.insertData(uuid, username, placeholderColumnName, value);",
      "raw_prediction": " SqlUtils.insertData(uuid, username, placeholderColumnName, value);",
      "es": 0.5324675324675325,
      "em": false,
      "passed": false
    },
    {
      "index": 934,
      "groundtruth": "String embedColour = leaderboardConfig.getEmbedColour();",
      "prediction": "String embedColour = leaderboardConfig.getEmbedColour();",
      "raw_prediction": "String embedColour = leaderboardConfig.getEmbedColour();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 935,
      "groundtruth": "String webhookAvatarUrl = leaderboardConfig.getWebhookAvatarUrl();",
      "prediction": "String webhookAvatarUrl = leaderboardConfig.getWebhookAvatarUrl();",
      "raw_prediction": "String webhookAvatarUrl = leaderboardConfig.getWebhookAvatarUrl();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 936,
      "groundtruth": "UnsupportedOperationException(\"Unsupported storage type: \" + mainConfig.getStorageType());",
      "prediction": "UnsupportedOperationException(\"Unsupported database type: \" + mainConfig.getStorageType())",
      "raw_prediction": "UnsupportedOperationException(\"Unsupported database type: \" + mainConfig.getStorageType())\n                );",
      "es": 0.9333333333333333,
      "em": false,
      "passed": false
    },
    {
      "index": 937,
      "groundtruth": "preparedStatement = database.getConnection().prepareStatement(\"SELECT COUNT(*) AS count FROM Schedule WHERE Leaderboard = ?\");",
      "prediction": "preparedStatement = database.getConnection().prepareStatement(\"SELECT COUNT(*) FROM Schedule WHERE Leaderboard = ?\");",
      "raw_prediction": "preparedStatement = database.getConnection().prepareStatement(\"SELECT COUNT(*) FROM Schedule WHERE Leaderboard = ?\");",
      "es": 0.9285714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 938,
      "groundtruth": "preparedStatement = database.getConnection().prepareStatement(\n                        \"UPDATE \" + tableName + \" SET \" + columnName + \" = NULL\"\n                );",
      "prediction": "preparedStatement = database.getConnection().prepareStatement(\n                        \"DELETE FROM \" + tableName + \" WHERE \" + columnName + \" IS NOT NULL\"\n                );",
      "raw_prediction": "preparedStatement = database.getConnection().prepareStatement(\n                        \"DELETE FROM \" + tableName + \" WHERE \" + columnName + \" IS NOT NULL\"\n                );\n            } else {\n                throw new UnsupportedOperationException(\"Unsupported storage type: \" + mainConfig.get",
      "es": 0.8908045977011494,
      "em": false,
      "passed": false
    },
    {
      "index": 939,
      "groundtruth": "database.getConnection().prepareStatement(\"SELECT \" + \"LastSent\" + \" FROM Schedule WHERE Leaderboard = ?\");",
      "prediction": "database.getConnection().prepareStatement(\"SELECT LastSent FROM Schedule WHERE Leaderboard = ?\");",
      "raw_prediction": "database.getConnection().prepareStatement(\"SELECT LastSent FROM Schedule WHERE Leaderboard = ?\");",
      "es": 0.9065420560747663,
      "em": false,
      "passed": false
    },
    {
      "index": 940,
      "groundtruth": ", leaderboard.getConfig().getPlaceholder());",
      "prediction": ", leaderboard.getConfig().getPlaceholder());",
      "raw_prediction": ", leaderboard.getConfig().getPlaceholder());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 941,
      "groundtruth": "database.getConnection().prepareStatement(\"MERGE INTO Schedule s USING (VALUES (?, ?)) data (Leaderboard, LastSent) ON s.Leaderboard = data.Leaderboard WHEN MATCHED THEN UPDATE SET s.LastSent = data.LastSent WHEN NOT MATCHED THEN INSERT (Leaderboard, LastSent) VALUES (data.Leaderboard, data.LastSent);",
      "prediction": "database.getConnection().prepareStatement(\"MERGE INTO Schedule s USING (VALUES (?, ?)) data (Leaderboard, LastSent) ON s.Leaderboard = data.Leaderboard WHEN MATCHED THEN UPDATE SET s.LastSent = data.LastSent",
      "raw_prediction": "database.getConnection().prepareStatement(\"MERGE INTO Schedule s USING (VALUES (?, ?)) data (Leaderboard, LastSent) ON s.Leaderboard = data.Leaderboard WHEN MATCHED THEN UPDATE SET s.LastSent = data.LastSent",
      "es": 0.685430463576159,
      "em": false,
      "passed": false
    },
    {
      "index": 942,
      "groundtruth": "String databaseName = mainConfig.getStorageType();",
      "prediction": "String databaseName = database.getConnection().getMetaData().getDatabasePro",
      "raw_prediction": "String databaseName = database.getConnection().getMetaData().getDatabaseProductName();",
      "es": 0.48,
      "em": false,
      "passed": false
    },
    {
      "index": 943,
      "groundtruth": "userData.addUserDataToDBAllPlayersThisPlaceholder();",
      "prediction": "userData.addUserDataToDBAllPlayersAllPlaceholders();",
      "raw_prediction": " userData.addUserDataToDBAllPlayersAllPlaceholders();",
      "es": 0.9038461538461539,
      "em": false,
      "passed": false
    },
    {
      "index": 944,
      "groundtruth": "outputEGLSurface = outputEglCore.createOffsetScreenSurface(renderWidth, renderHeight);",
      "prediction": "outputEglSurface = outputEglCore.createWindowSurface(null);",
      "raw_prediction": "outputEglSurface = outputEglCore.createWindowSurface(null);",
      "es": 0.5581395348837209,
      "em": false,
      "passed": false
    },
    {
      "index": 945,
      "groundtruth": "quadRenderer.drawTexture(texId, renderWidth, renderHeight);",
      "prediction": "quadRenderer.drawQuad(texId, renderWidth, renderHeight);",
      "raw_prediction": " quadRenderer.drawQuad(texId, renderWidth, renderHeight);\n                 // release fence\n                 if (fence != null) {\n                 try {\n                     fence.close();\n                 } catch (IOException e) {\n                     e.printStackTrace();\n                 }\n",
      "es": 0.8983050847457628,
      "em": false,
      "passed": false
    },
    {
      "index": 946,
      "groundtruth": "ServerCountryFlags.updateAPILanguage(null);",
      "prediction": "ServerCountryFlags.updateAPILanguage(\"en\");",
      "raw_prediction": "ServerCountryFlags.updateAPILanguage(\"en\");",
      "es": 0.9069767441860466,
      "em": false,
      "passed": false
    },
    {
      "index": 947,
      "groundtruth": ".setRequestsLeft(requestsLeft - APITimeoutManager.getRequestsSent());",
      "prediction": ".setRequestsLeft(requestsLeft);",
      "raw_prediction": ".setRequestsLeft(requestsLeft);",
      "es": 0.4492753623188406,
      "em": false,
      "passed": false
    },
    {
      "index": 948,
      "groundtruth": "APITimeoutManager.setSecondsLeftUntilReset(secondsLeft);",
      "prediction": "APITimeoutManager.setSecondsLeft(secondsLeft - APITimeoutManager.getSecondsLeft());",
      "raw_prediction": "\t\t\t\t\t\t\tAPITimeoutManager.setSecondsLeft(secondsLeft - APITimeoutManager.getSecondsLeft());\n\t\t\t\t} else {\n\t\t\t\t\tAPITimeoutManager.setRequestsLeft(APITimeoutManager.getRequestsLeft());\n\t\t\t\t",
      "es": 0.5903614457831325,
      "em": false,
      "passed": false
    },
    {
      "index": 949,
      "groundtruth": "(APITimeoutManager.isOnCooldown()) {",
      "prediction": "(servers.containsKey(ip))",
      "raw_prediction": "(servers.containsKey(ip)) {\n\t\t\tAPIResponse response = servers.get(ip);\n\t\t\tif (response.cooldown()) {\n\t\t\t\tAPITimeoutManager.incrementCooldowns();\n\t\t\t\treturn response;\n\t\t\t\t}\n\t\t\t}\n\t\t\t",
      "es": 0.19444444444444442,
      "em": false,
      "passed": false
    },
    {
      "index": 950,
      "groundtruth": "APITimeoutManager.decrementRequestsSent();",
      "prediction": "if (requestsLeft == -1 || secondsLeft == -1)",
      "raw_prediction": "\tif (requestsLeft == -1 || secondsLeft == -1) {\n\t\t\t\t\t\t\tServerCountryFlags.LOGGER.error(\"API returned invalid headers: \" + con.getHeaderFields());\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tAPITimeoutManager",
      "es": 0.11363636363636365,
      "em": false,
      "passed": false
    },
    {
      "index": 951,
      "groundtruth": "APITimeoutManager.incrementRequestsSent();",
      "prediction": "if (Config.cfg.forceEnglish)",
      "raw_prediction": "if (Config.cfg.forceEnglish) {\n\t\t\t\tapiUrlStr = API_NAME + ip + \"?fields=\" + API_FIELDS;\n\t\t\t} else if (language != null) {\n\t\t\t\t// TODO: Implement language support\n\t\t\t}\n",
      "es": 0.16666666666666663,
      "em": false,
      "passed": false
    },
    {
      "index": 952,
      "groundtruth": "request.setReturnCode(500);",
      "prediction": "request.setReturnCode(500);",
      "raw_prediction": "request.setReturnCode(500);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 953,
      "groundtruth": ">= server.getMaximumHeaderParameterCount())\n\t\t\t\t\treturn parameters;",
      "prediction": ">= server.getMaximumHeaderParameterSize())\n\t\t\t\t\tbreak;",
      "raw_prediction": ">= server.getMaximumHeaderParameterSize())\n\t\t\t\t\tbreak;",
      "es": 0.7014925373134329,
      "em": false,
      "passed": false
    },
    {
      "index": 954,
      "groundtruth": "request.getContentType());",
      "prediction": "\"application/octet-stream\");",
      "raw_prediction": "\"application/octet-stream\");\n\t\t\n\t\t//default content-length\n\t\tif(!headers.containsKey(\"Content-Length\"))\n\t\t\theaders.put(\"Content-Length\", String.valueOf(message.length))",
      "es": 0.2142857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 955,
      "groundtruth": "if(cookies.size() >= server.getMaximumCookieCount())\n\t\t\t\t\t\tbreak;",
      "prediction": "if(cookies.size() >= server.getMaximumCookieCount())\n\t\t\t\t\t\tbreak;",
      "raw_prediction": "if(cookies.size() >= server.getMaximumCookieCount())\n\t\t\t\t\t\tbreak;",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 956,
      "groundtruth": "size() >= server.getMaximumHeaderParameterSize())\n\t\t\t\t\t\tbreak;",
      "prediction": "size() >= server.getMaximumHeaderParameterCount())\n\t\t\t\t\t\tbreak;",
      "raw_prediction": "size() >= server.getMaximumHeaderParameterCount())\n\t\t\t\t\t\tbreak;",
      "es": 0.9206349206349207,
      "em": false,
      "passed": false
    },
    {
      "index": 957,
      "groundtruth": "if(value.length() < server.getMaximumHeaderParameterSize())\n\t\t\t\tvalue.append(c);",
      "prediction": "if(c != ' ')\n\t\t\t\t\tvalue.append(c);",
      "raw_prediction": "if(c != ' ')\n\t\t\t\t\tvalue.append(c);",
      "es": 0.32499999999999996,
      "em": false,
      "passed": false
    },
    {
      "index": 958,
      "groundtruth": "buffer.writeBody(bytes);",
      "prediction": "buffer.bodyBuffer.write(bytes);\t\t\t\t\t\tbuffer.body",
      "raw_prediction": "buffer.bodyBuffer.write(bytes);\t\t\t\t\t\tbuffer.bodyBuffer.reset();",
      "es": 0.33333333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 959,
      "groundtruth": "buffer.writeHeader(bytes);",
      "prediction": "buffer.read(bytes);\t\t\t\t\t\tbuffer.hasReachedEOL = buff",
      "raw_prediction": "\tbuffer.read(bytes);\t\t\t\t\t\tbuffer.hasReachedEOL = buffer.hasReachedEOL || buffer.bodyBuffer.size() > 0;",
      "es": 0.23076923076923073,
      "em": false,
      "passed": false
    },
    {
      "index": 960,
      "groundtruth": "= decoder.decodeParameters(new String(buffer.bodyBuffer.toByteArray(), StandardCharsets.UTF_8));",
      "prediction": "= decoder.decodeParameters(new String(request, StandardCharsets.UTF_8));",
      "raw_prediction": "= decoder.decodeParameters(new String(request, StandardCharsets.UTF_8));",
      "es": 0.71875,
      "em": false,
      "passed": false
    },
    {
      "index": 961,
      "groundtruth": "client.setOutputBufferCache(requestBuilder.getEncoder().generateResponse(buffer.request, requestListener.request(buffer.request)));",
      "prediction": "client.setState(100);",
      "raw_prediction": "\tclient.setState(100);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t\t\n\t\t\t\t\t//wait for the data to be sent\n\t\t\t\t\tcase 100:\n\t\t\t\t\tif(client.getOutputBuffer().size() == 0 &&\n\t\t\t\t\t\t\tSystem.currentTimeMillis",
      "es": 0.1297709923664122,
      "em": false,
      "passed": false
    },
    {
      "index": 962,
      "groundtruth": "setOutputBufferCache(requestBuilder.getEncoder().generateResponse(buffer.request,\n\t\t\t\t\t\t\t\t\trequestListener.request(buffer.request)));",
      "prediction": "getOutputBufferCache(requestBuilder.getEncoder().generateResponse(buffer.request, requestListener.request(buffer.request)));",
      "raw_prediction": "getOutputBufferCache(requestBuilder.getEncoder().generateResponse(buffer.request, requestListener.request(buffer.request)));",
      "es": 0.9172932330827068,
      "em": false,
      "passed": false
    },
    {
      "index": 963,
      "groundtruth": "cookies = decoder.decodeCookies(parameters.get(\"Cookie\"));",
      "prediction": "cookies = decoder.decodeCookies(parameters.get(\"Cookie\"));",
      "raw_prediction": "cookies = decoder.decodeCookies(parameters.get(\"Cookie\"));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 964,
      "groundtruth": "List<String> exps = RegexHelper.find(text, \"\\\\$\\\\{",
      "prediction": "List<String> exps = RegexHe",
      "raw_prediction": "List<String> exps = RegexHelper.find(text, \"\\\\$\\\\{",
      "es": 0.54,
      "em": false,
      "passed": false
    },
    {
      "index": 965,
      "groundtruth": "webAgent.url(url).execute(map);",
      "prediction": "webAgent.execute(url, map);",
      "raw_prediction": "webAgent.execute(url, map);",
      "es": 0.5483870967741935,
      "em": false,
      "passed": false
    },
    {
      "index": 966,
      "groundtruth": "data = webAgent.execute(map);",
      "prediction": "data = webAgent.execute(map); //\u83b7\u53d6\u7b2c\u4e00\u9875\u6570\u636e",
      "raw_prediction": "data = webAgent.execute(map); //\u83b7\u53d6\u7b2c\u4e00\u9875\u6570\u636e\n        if (data == null || !data.isJson()) {\n            throw new RuntimeException(\"\u8fd4\u56de\u7ed3\u679c\u4e0d\u662fjson\u683c\u5f0f\");\n        }",
      "es": 0.7435897435897436,
      "em": false,
      "passed": false
    },
    {
      "index": 967,
      "groundtruth": "!result.getStatusCode().equals(200)) {",
      "prediction": "result.getStatusCode()",
      "raw_prediction": "result.getStatusCode() < 200 || result.getStatusCode() > 299) {",
      "es": 0.5789473684210527,
      "em": false,
      "passed": false
    },
    {
      "index": 968,
      "groundtruth": "Assert.notNull(timeStamp, \"\u65f6\u95f4\u6233\u4e0d\u80fd\u4e3a\u7a7a\uff01\");",
      "prediction": "Assert.notNull(timeStamp, \"\u65f6\u95f4\u6233\u4e0d\u80fd\u4e3a\u7a7a\");",
      "raw_prediction": "Assert.notNull(timeStamp, \"\u65f6\u95f4\u6233\u4e0d\u80fd\u4e3a\u7a7a\");",
      "es": 0.9736842105263158,
      "em": false,
      "passed": false
    },
    {
      "index": 969,
      "groundtruth": "text = text.replace(el, elMap.get(tag).execute(argsMap));",
      "prediction": "text = text.replace(el, elMap.get(tag).parser(argsMap));",
      "raw_prediction": "text = text.replace(el, elMap.get(tag).parser(argsMap));",
      "es": 0.8771929824561404,
      "em": false,
      "passed": false
    },
    {
      "index": 970,
      "groundtruth": "return parent.type();",
      "prediction": "return parent.type();",
      "raw_prediction": "return parent.type();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 971,
      "groundtruth": "UnreflectType.of(source.getGenericReturnType());",
      "prediction": "UnreflectType.of(source.getReturnType());",
      "raw_prediction": "UnreflectType.of(source.getReturnType());",
      "es": 0.8541666666666666,
      "em": false,
      "passed": false
    },
    {
      "index": 972,
      "groundtruth": "if (result.getStatusCode() == 400) {",
      "prediction": "if (result.getStatusCode() == 403)",
      "raw_prediction": "if (result.getStatusCode() == 403) {\n                log.warn(\"403\u8868\u793a\u62d2\u7edd\u8bbf\u95ee\uff01\");\n            } else if (result.getStatusCode() == 400) {",
      "es": 0.9166666666666666,
      "em": false,
      "passed": false
    },
    {
      "index": 973,
      "groundtruth": "(T) accessor.invoke(null, args);",
      "prediction": "accessor.invoke(args);",
      "raw_prediction": "accessor.invoke(args);",
      "es": 0.6875,
      "em": false,
      "passed": false
    },
    {
      "index": 974,
      "groundtruth": "UnreflectType.of(source);",
      "prediction": "UnreflectType.of(source);    }",
      "raw_prediction": "UnreflectType.of(source);    }\n\n    @Override\n    ConstructorAccess<T> constructor(Object... args) {\n        return constructors()\n            .filter(constructor -> constructor.parameters().size() == args.length)\n            .findFirst()\n            .",
      "es": 0.8333333333333334,
      "em": false,
      "passed": false
    },
    {
      "index": 975,
      "groundtruth": "return (T) JdkInternals.allocateInstance(toClass());",
      "prediction": "return JdkInternals.newInstance(toClass());",
      "raw_prediction": "    return JdkInternals.newInstance(toClass());",
      "es": 0.7692307692307692,
      "em": false,
      "passed": false
    },
    {
      "index": 976,
      "groundtruth": "return new BytecodeFieldAccess((ReflectionFieldAccess) delegate.bind(object), accessor);",
      "prediction": "return delegate.bind(object);",
      "raw_prediction": "return delegate.bind(object);",
      "es": 0.3295454545454546,
      "em": false,
      "passed": false
    },
    {
      "index": 977,
      "groundtruth": "return UnreflectType.of(source.getGenericType());",
      "prediction": "return UnreflectType.of(source.getType());",
      "raw_prediction": "return UnreflectType.of(source.getType());",
      "es": 0.8571428571428572,
      "em": false,
      "passed": false
    },
    {
      "index": 978,
      "groundtruth": "webAgent.getConfig().getUrl()).set(pageIndexKey, String.valueOf(i)).getUrl();",
      "prediction": "data.getUrl()).addParam(pageIndexKey, i).getUrl();",
      "raw_prediction": "data.getUrl()).addParam(pageIndexKey, i).getUrl();",
      "es": 0.4415584415584416,
      "em": false,
      "passed": false
    },
    {
      "index": 979,
      "groundtruth": "().toClass().getSimpleName() + Parameters.toString(parameters().toList());",
      "prediction": "().name() + \".\" + source.getName();",
      "raw_prediction": "().name() + \".\" + source.getName();",
      "es": 0.2702702702702703,
      "em": false,
      "passed": false
    },
    {
      "index": 980,
      "groundtruth": "int totalRows = json.get(totalKey, Integer.class);",
      "prediction": "Integer totalRows = json.getInt(totalKey);",
      "raw_prediction": "Integer totalRows = json.getInt(totalKey);",
      "es": 0.54,
      "em": false,
      "passed": false
    },
    {
      "index": 981,
      "groundtruth": "(result.getStatusCode() == 401) {",
      "prediction": "(result.getStatusCode() == 401)",
      "raw_prediction": "(result.getStatusCode() == 401) {",
      "es": 0.9393939393939394,
      "em": false,
      "passed": false
    },
    {
      "index": 982,
      "groundtruth": ".warn(\"\u672a\u652f\u6301\u7684\u72b6\u6001\u7801: {",
      "prediction": ".warn(\"\u5176\u4ed6\u72b6\u6001\u7801\uff1a{",
      "raw_prediction": ".warn(\"\u5176\u4ed6\u72b6\u6001\u7801\uff1a{",
      "es": 0.6470588235294117,
      "em": false,
      "passed": false
    },
    {
      "index": 983,
      "groundtruth": "Assert.isTrue(data.get(0) instanceof JSONArray, \"\u6570\u636e\u683c\u5f0f\u4e0d\u5339\u914d\uff01\");",
      "prediction": "Assert.notNull(data, \"data is null\");",
      "raw_prediction": "Assert.notNull(data, \"data is null\");",
      "es": 0.33333333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 984,
      "groundtruth": "String type = result.getContentType();",
      "prediction": "String type = result.getContentType();",
      "raw_prediction": "String type = result.getContentType();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 985,
      "groundtruth": "return webAgent.execute(map);",
      "prediction": "return webAgent.execute(map);",
      "raw_prediction": "    return webAgent.execute(map);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 986,
      "groundtruth": "if (result.getStatusCode() >= 500) {",
      "prediction": "if (result.getStatusCode() == 500)",
      "raw_prediction": "if (result.getStatusCode() == 500) {",
      "es": 0.9166666666666666,
      "em": false,
      "passed": false
    },
    {
      "index": 987,
      "groundtruth": "JsonHelper json = data.getJson();",
      "prediction": "if (data == null || !data.isJson())",
      "raw_prediction": "if (data == null || !data.isJson()) {\n            return list;\n        }\n        JsonHelper json = JsonHelper.of(data.getContent());",
      "es": 0.37142857142857144,
      "em": false,
      "passed": false
    },
    {
      "index": 988,
      "groundtruth": "isTrue(headHelper.fileContent(), \"\u975e\u6587\u4ef6\u6d41\u8bf7\u6c42\uff0c\u65e0\u6cd5\u8f93\u51fa\u6587\u4ef6\uff01\");",
      "prediction": "isTrue(headHelper.isDownloadable(), \"\u6587\u4ef6\u4e0b\u8f7d\u5931\u8d25\uff1a{} \u8fd4\u56de\u7801:%s\", this.config.getUrl()",
      "raw_prediction": "isTrue(headHelper.isDownloadable(), \"\u6587\u4ef6\u4e0b\u8f7d\u5931\u8d25\uff1a{} \u8fd4\u56de\u7801:%s\", this.config.getUrl(), result.getStatusCode());",
      "es": 0.3421052631578947,
      "em": false,
      "passed": false
    },
    {
      "index": 989,
      "groundtruth": "setBody(transcoding(result.getBodyAsByes(), charset));",
      "prediction": "setCharset(charset);",
      "raw_prediction": "setCharset(charset);\n                result.setBody(transcoding(result.getBody().getBytes(), charset));",
      "es": 0.33333333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 990,
      "groundtruth": "wa = this.webAgent.execute(data);",
      "prediction": "wa = this.webAgent.execute(data);",
      "raw_prediction": "wa = this.webAgent.execute(data);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 991,
      "groundtruth": "hct.getHue()) >= 90.0 && Math.round(hct.getHue()) <= 111.0;",
      "prediction": "hct.getHue()) == 60.0;",
      "raw_prediction": "hct.getHue()) == 60.0;",
      "es": 0.3389830508474576,
      "em": false,
      "passed": false
    },
    {
      "index": 992,
      "groundtruth": "this.a2 = TonalPalette.fromHueAndChroma(hue, chroma / 3.);",
      "prediction": "this.a2 = TonalPalette.fromHueAndChroma(hue, chroma / 2.);",
      "raw_prediction": "this.a2 = TonalPalette.fromHueAndChroma(hue, chroma / 2.);\n      this.a3 = TonalPalette.fromHueAndChroma(hue + 60., chroma / 2",
      "es": 0.9827586206896551,
      "em": false,
      "passed": false
    },
    {
      "index": 993,
      "groundtruth": "ColorUtils.yFromLstar(tone);",
      "prediction": "ColorUtils.yFromLstar(tone);",
      "raw_prediction": "ColorUtils.yFromLstar(tone);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 994,
      "groundtruth": "ratioOfYs(ColorUtils.yFromLstar(t1), ColorUtils.yFromLstar(t2));",
      "prediction": "ratioOfYs(ColorUtils.yFromLstar(t1), ColorUtils.yFromLstar(t2));",
      "raw_prediction": "ratioOfYs(ColorUtils.yFromLstar(t1), ColorUtils.yFromLstar(t2));\n  }\n\n  /**\n   * Tone >= tone parameter that ensures ratio. 100 if ratio cannot be achieved.\n   *\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 995,
      "groundtruth": "Math.round(hct.getHue()) >= 90.0 && Math.round(hct.getHue()) <= 111.0;",
      "prediction": "Math.round(hct.getHue()) == 60.0;",
      "raw_prediction": "Math.round(hct.getHue()) == 60.0;",
      "es": 0.44285714285714284,
      "em": false,
      "passed": false
    },
    {
      "index": 996,
      "groundtruth": ".from(hct.getHue(), hct.getChroma(), 70.0);",
      "prediction": ".from(hct.getHue(), hct.getChroma(), hct.getTone() + 10);",
      "raw_prediction": ".from(hct.getHue(), hct.getChroma(), hct.getTone() + 10);",
      "es": 0.7192982456140351,
      "em": false,
      "passed": false
    },
    {
      "index": 997,
      "groundtruth": "round(hct.getChroma()) > 16.0;",
      "prediction": "round(hct.getChroma()) > 40.0;",
      "raw_prediction": "round(hct.getChroma()) > 40.0;",
      "es": 0.9333333333333333,
      "em": false,
      "passed": false
    },
    {
      "index": 998,
      "groundtruth": "hct.getChroma();",
      "prediction": "hct.getChroma();",
      "raw_prediction": "hct.getChroma();\n\n    // For content, we want to make sure that the key colors are bright enough to be readable against\n    // dark backgrounds. For non-content, we want to make sure that the key colors are dark",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 999,
      "groundtruth": "a1 = TonalPalette.fromHueAndChroma(hue, chroma);",
      "prediction": "a1 = TonalPalette.fromHueAndChroma(hue, max(48., chroma));",
      "raw_prediction": "a1 = TonalPalette.fromHueAndChroma(hue, max(48., chroma));",
      "es": 0.8275862068965517,
      "em": false,
      "passed": false
    },
    {
      "index": 1000,
      "groundtruth": "hct.getTone()) < 65.0;",
      "prediction": "hct.getTone()) >= 40.0 && Math.round(hct.get",
      "raw_prediction": "hct.getTone()) >= 40.0 && Math.round(hct.getTone()) <= 60.0;",
      "es": 0.40909090909090906,
      "em": false,
      "passed": false
    },
    {
      "index": 1001,
      "groundtruth": ".a3 = TonalPalette.fromHueAndChroma(hue + 60., chroma / 2.);",
      "prediction": ".a3 = TonalPalette.fromHueAndChroma(hue + 60., chroma / 3.);",
      "raw_prediction": ".a3 = TonalPalette.fromHueAndChroma(hue + 60., chroma / 3.);\n",
      "es": 0.9833333333333333,
      "em": false,
      "passed": false
    },
    {
      "index": 1002,
      "groundtruth": "ColorUtils.lstarFromY(lightY) + LUMINANCE_GAMUT_MAP_TOLERANCE;",
      "prediction": "ColorUtils.lstarFromY(lightY) + LUMINANCE_GAMUT_MAP_TOLERANCE;",
      "raw_prediction": "ColorUtils.lstarFromY(lightY) + LUMINANCE_GAMUT_MAP_TOLERANCE;",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1003,
      "groundtruth": "hue = hct.getHue();",
      "prediction": "hue = hct.getHue();",
      "raw_prediction": "hue = hct.getHue();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1004,
      "groundtruth": "= TonalPalette.fromHueAndChroma(hue, min(chroma / 12., 4.));",
      "prediction": "= TonalPalette.fromHueAndChroma(hue, min(chroma / 6., 8.));",
      "raw_prediction": "= TonalPalette.fromHueAndChroma(hue, min(chroma / 6., 8.));",
      "es": 0.95,
      "em": false,
      "passed": false
    },
    {
      "index": 1005,
      "groundtruth": "a1 = TonalPalette.fromHueAndChroma(hue, max(48., chroma));",
      "prediction": "a1 = TonalPalette.fromHueAndChroma(hue, 8.);",
      "raw_prediction": "a1 = TonalPalette.fromHueAndChroma(hue, 8.);",
      "es": 0.7586206896551724,
      "em": false,
      "passed": false
    },
    {
      "index": 1006,
      "groundtruth": "this.n2 = TonalPalette.fromHueAndChroma(hue, min(chroma / 6., 8.));",
      "prediction": "this.n2 = TonalPalette.fromHueAndChroma(hue, min(chroma / 12., 8.));",
      "raw_prediction": "this.n2 = TonalPalette.fromHueAndChroma(hue, min(chroma / 12., 8.));",
      "es": 0.9705882352941176,
      "em": false,
      "passed": false
    },
    {
      "index": 1007,
      "groundtruth": "= TonalPalette.fromHueAndChroma(hue, 16.);",
      "prediction": "= TonalPalette.fromHueAndChroma(hue, 24.);",
      "raw_prediction": "= TonalPalette.fromHueAndChroma(hue, 24.);",
      "es": 0.9523809523809523,
      "em": false,
      "passed": false
    },
    {
      "index": 1008,
      "groundtruth": "ColorUtils.blueFromArgb(argb);",
      "prediction": "ColorUtils.blueFromArgb(argb);    // Note: order of red, gre",
      "raw_prediction": "ColorUtils.blueFromArgb(argb);    // Note: order of red, green, blue is reversed in hex string.",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 1009,
      "groundtruth": "a3 = TonalPalette.fromHueAndChroma(hue + 60., 24.);",
      "prediction": "a3 = TonalPalette.fromHueAndChroma(hue - 60., 16.);",
      "raw_prediction": "a3 = TonalPalette.fromHueAndChroma(hue - 60., 16.);",
      "es": 0.9411764705882353,
      "em": false,
      "passed": false
    },
    {
      "index": 1010,
      "groundtruth": "MathUtils.clampInt(0, 255, (int) Math.round(delinearized * 255.0));",
      "prediction": "(int) Math.round(delinearized * 255.0);",
      "raw_prediction": "(int) Math.round(delinearized * 255.0);",
      "es": 0.582089552238806,
      "em": false,
      "passed": false
    },
    {
      "index": 1011,
      "groundtruth": "return new TonalPalette(hct.getHue(), hct.getChroma(), hct);",
      "prediction": "return new TonalPalette(hct.getHue(), hct.getChroma(), hct);",
      "raw_prediction": "  return new TonalPalette(hct.getHue(), hct.getChroma(), hct);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1012,
      "groundtruth": ".n1 = TonalPalette.fromHueAndChroma(hue, 4.);",
      "prediction": ".n1 = TonalPalette.fromHueAndChroma(hue, 4.);",
      "raw_prediction": ".n1 = TonalPalette.fromHueAndChroma(hue, 4.);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1013,
      "groundtruth": "return MathUtils.matrixMultiply(new double[] {",
      "prediction": "double[][] matrix = SRGB_TO_XYZ;",
      "raw_prediction": " double[][] matrix = SRGB_TO_XYZ;\n    double x = matrix[0][0] * linearR + matrix[0][1] * linearG + matrix[0][2] * linearB;\n    double y =",
      "es": 0.15217391304347827,
      "em": false,
      "passed": false
    },
    {
      "index": 1014,
      "groundtruth": "differenceDegrees(hct.getHue(), chosenHct.getHue()) < differenceDegrees) {",
      "prediction": "degreesDifference(hct.getHue(), chosenHct.getHue())",
      "raw_prediction": "degreesDifference(hct.getHue(), chosenHct.getHue()) <= differenceDegrees) {",
      "es": 0.5135135135135135,
      "em": false,
      "passed": false
    },
    {
      "index": 1015,
      "groundtruth": ") Math.floor(hct.getHue());",
      "prediction": ") Math.round(hct.getHue());",
      "raw_prediction": ") Math.round(hct.getHue());",
      "es": 0.8148148148148149,
      "em": false,
      "passed": false
    },
    {
      "index": 1016,
      "groundtruth": "= Math.abs(smallestDeltaHct.getChroma() - chroma);",
      "prediction": "= Double.MAX_VALUE;",
      "raw_prediction": "= Double.MAX_VALUE;",
      "es": 0.14,
      "em": false,
      "passed": false
    },
    {
      "index": 1017,
      "groundtruth": "= MathUtils.sanitizeDegreesInt(i);",
      "prediction": "= MathUtils.sanitizeDegreesInt(i);",
      "raw_prediction": "= MathUtils.sanitizeDegreesInt(i);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1018,
      "groundtruth": "if (MathUtils.differenceDegrees(hct.getHue(), chosenHct.getHue()) < differenceDegrees) {",
      "prediction": "if (Math.abs(chosenHct.getHue() - hct.getHue()) <= differenceDegrees)",
      "raw_prediction": " if (Math.abs(chosenHct.getHue() - hct.getHue()) <= differenceDegrees) {",
      "es": 0.625,
      "em": false,
      "passed": false
    },
    {
      "index": 1019,
      "groundtruth": "filter && (hct.getChroma() < CUTOFF_CHROMA || proportion <= CUTOFF_EXCITED_PROPORTION)) {",
      "prediction": "filter && (hct.getChroma() < CUTOFF_CHROMA || proportion < CUTOFF_EXCITED_PROPORTION)",
      "raw_prediction": "filter && (hct.getChroma() < CUTOFF_CHROMA || proportion < CUTOFF_EXCITED_PROPORTION)) {",
      "es": 0.9550561797752809,
      "em": false,
      "passed": false
    },
    {
      "index": 1020,
      "groundtruth": "MathUtils.sanitizeDegreesInt((int) Math.round(hct.getHue()));",
      "prediction": "(int) Math.floor(hct.getHue());",
      "raw_prediction": "(int) Math.floor(hct.getHue());",
      "es": 0.42622950819672134,
      "em": false,
      "passed": false
    },
    {
      "index": 1021,
      "groundtruth": "smallestDeltaHct = Hct.from(hue, chroma, startTone);",
      "prediction": "smallestDeltaHct = Hct.from(hue, chroma, startTone);",
      "raw_prediction": "smallestDeltaHct = Hct.from(hue, chroma, startTone);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1022,
      "groundtruth": "= MathUtils.sanitizeDegreesInt((int) Math.round(hct.getHue()));",
      "prediction": "= (int) Math.floor(hct.getHue());",
      "raw_prediction": "= (int) Math.floor(hct.getHue());",
      "es": 0.4444444444444444,
      "em": false,
      "passed": false
    },
    {
      "index": 1023,
      "groundtruth": "= Hct.fromInt(entry.getKey());",
      "prediction": "= Hct.fromArgb(entry.getKey());",
      "raw_prediction": "= Hct.fromArgb(entry.getKey());",
      "es": 0.8709677419354839,
      "em": false,
      "passed": false
    },
    {
      "index": 1024,
      "groundtruth": "= TonalPalette.fromHueAndChroma(25, 84.);",
      "prediction": "= TonalPalette.fromHueAndChroma(hue, 24.); // Red error color.",
      "raw_prediction": "= TonalPalette.fromHueAndChroma(hue, 24.); // Red error color.",
      "es": 0.6129032258064516,
      "em": false,
      "passed": false
    },
    {
      "index": 1025,
      "groundtruth": "hct.getChroma() < TARGET_CHROMA ? WEIGHT_CHROMA_BELOW : WEIGHT_CHROMA_ABOVE;",
      "prediction": "(hct.getChroma() > TARGET_CHROMA ? WEIGHT_CHROMA_ABOVE : WEIGHT_CHROMA_BELOW);",
      "raw_prediction": "  (hct.getChroma() > TARGET_CHROMA ? WEIGHT_CHROMA_ABOVE : WEIGHT_CHROMA_BELOW);",
      "es": 0.8461538461538461,
      "em": false,
      "passed": false
    },
    {
      "index": 1026,
      "groundtruth": "(), hct.getChroma(), hct);",
      "prediction": "(), hct.getChroma(), hct);",
      "raw_prediction": "(), hct.getChroma(), hct);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1027,
      "groundtruth": "ColorUtils.labFromArgb(color.toInt());",
      "prediction": "ColorUtils.labFromHct(hct);",
      "raw_prediction": "ColorUtils.labFromHct(hct);",
      "es": 0.6052631578947368,
      "em": false,
      "passed": false
    },
    {
      "index": 1028,
      "groundtruth": "(hue, input.getChroma(), input.getTone());",
      "prediction": "HueChromaLuminance(hue, input.getChroma(), input.getLuminance());",
      "raw_prediction": "HueChromaLuminance(hue, input.getChroma(), input.getLuminance());",
      "es": 0.6153846153846154,
      "em": false,
      "passed": false
    },
    {
      "index": 1029,
      "groundtruth": "int red = ColorUtils.redFromArgb(argb);",
      "prediction": "int red = ColorUtils.redFromArgb(argb);    // Pad with leading zeros if necess",
      "raw_prediction": "int red = ColorUtils.redFromArgb(argb);    // Pad with leading zeros if necessary.",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 1030,
      "groundtruth": "hctAdd = Hct.from(hue, chroma, startTone + delta);",
      "prediction": "hctAdd = Hct.from(hue, chroma, startTone + delta);",
      "raw_prediction": "hctAdd = Hct.from(hue, chroma, startTone + delta);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1031,
      "groundtruth": "== Math.round(smallestDeltaHct.getChroma())) {",
      "prediction": "== smallestDeltaHct.getCh",
      "raw_prediction": "== smallestDeltaHct.getChroma()) {",
      "es": 0.5434782608695652,
      "em": false,
      "passed": false
    },
    {
      "index": 1032,
      "groundtruth": "input.getHue(), coldestHue, warmestHue);",
      "prediction": "input.getHue(), coldestHue, warmestHue);",
      "raw_prediction": "input.getHue(), coldestHue, warmestHue);\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1033,
      "groundtruth": "coldestHue = getColdest().getHue();",
      "prediction": "coldestHue = getColdest().getHue();",
      "raw_prediction": "coldestHue = getColdest().getHue();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1034,
      "groundtruth": "round(input.getHue()));",
      "prediction": "round(startHue));",
      "raw_prediction": "round(startHue));\n    double complementRelativeTemp = (1. - getRelativeTemperature(input));\n\n    // Find the color in the other section, closest to the inverse percentile\n    // of the input color. This is the complement.\n",
      "es": 0.6086956521739131,
      "em": false,
      "passed": false
    },
    {
      "index": 1035,
      "groundtruth": "color = Hct.from(this.hue, this.chroma, tone).toInt();",
      "prediction": "color = Hct.from(this.hue, this.chroma, tone).toInt();",
      "raw_prediction": "color = Hct.from(this.hue, this.chroma, tone).toInt();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1036,
      "groundtruth": ".getChroma(), ColorUtils.lstarFromY(viewedInVc[1]));",
      "prediction": ".getChroma(), ColorUtils.lstarFromArgb(argb));",
      "raw_prediction": ".getChroma(), ColorUtils.lstarFromArgb(argb));",
      "es": 0.7115384615384616,
      "em": false,
      "passed": false
    },
    {
      "index": 1037,
      "groundtruth": "hue = MathUtils.sanitizeDegreesInt(startHue + i);",
      "prediction": "hue = MathUtils.sanitizeDegreesInt(startHue + i);",
      "raw_prediction": "hue = MathUtils.sanitizeDegreesInt(startHue + i);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1038,
      "groundtruth": "Cam16.fromInt(toInt());",
      "prediction": "Cam16.fromInt(argb);",
      "raw_prediction": "Cam16.fromInt(argb);",
      "es": 0.6956521739130435,
      "em": false,
      "passed": false
    },
    {
      "index": 1039,
      "groundtruth": "recastInVc.getHue(), recastInVc.getChroma(), ColorUtils.lstarFromY(viewedInVc[1]));",
      "prediction": "recastInVc.getHue(),",
      "raw_prediction": "recastInVc.getHue(),\n        recastInVc.getChroma(),\n        ColorUtils.lstarFromArgb(viewedInVc[1]));",
      "es": 0.24096385542168675,
      "em": false,
      "passed": false
    },
    {
      "index": 1040,
      "groundtruth": "= MathUtils.sanitizeDegreesDouble(\n          startHue + directionOfRotation * hueAddend);",
      "prediction": "= startHue + hueAddend;",
      "raw_prediction": "= startHue + hueAddend;",
      "es": 0.2584269662921348,
      "em": false,
      "passed": false
    },
    {
      "index": 1041,
      "groundtruth": "fromCam = Cam16.fromInt(from);",
      "prediction": "fromCam = Cam16.fromInt(from);",
      "raw_prediction": "fromCam = Cam16.fromInt(from);\n\n    // Calculate the new hue in CAM16-UCS space.",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1042,
      "groundtruth": "= Cam16.fromInt(ucs);",
      "prediction": "= Cam16.fromUcs(ucs);",
      "raw_prediction": "= Cam16.fromUcs(ucs);",
      "es": 0.8571428571428572,
      "em": false,
      "passed": false
    },
    {
      "index": 1043,
      "groundtruth": ".toRadians(MathUtils.sanitizeDegreesDouble(hue - 50.)));",
      "prediction": ".toRadians(hue))",
      "raw_prediction": ".toRadians(hue))\n            + 0.01\n                * Math.pow(chroma, 1.07)\n                * Math.sin(Math.toRadians(hue))\n            + 0.005\n                * Math",
      "es": 0.2857142857142857,
      "em": false,
      "passed": false
    },
    {
      "index": 1044,
      "groundtruth": "tone = ColorUtils.lstarFromArgb(argb);",
      "prediction": "tone = ColorUtils.lstarFromY(cam.getY());",
      "raw_prediction": "tone = ColorUtils.lstarFromY(cam.getY());",
      "es": 0.7073170731707317,
      "em": false,
      "passed": false
    },
    {
      "index": 1045,
      "groundtruth": "hue = MathUtils.sanitizeDegreesDouble(Math.toDegrees(Math.atan2(lab[2], lab[1])));",
      "prediction": "hue = Math.toDegrees(Math.atan2(lab[1], lab[2]));",
      "raw_prediction": "hue = Math.toDegrees(Math.atan2(lab[1], lab[2]));",
      "es": 0.5731707317073171,
      "em": false,
      "passed": false
    },
    {
      "index": 1046,
      "groundtruth": "fromCam.getChroma(), ColorUtils.lstarFromArgb(from));",
      "prediction": "fromCam.getChroma(), fromCam.getTone());",
      "raw_prediction": "fromCam.getChroma(), fromCam.getTone());",
      "es": 0.5471698113207547,
      "em": false,
      "passed": false
    },
    {
      "index": 1047,
      "groundtruth": "ucsCam.getHue(), fromCam.getChroma(), ColorUtils.lstarFromArgb(from));",
      "prediction": "ucsCam.getHstar(), fromCam.getChroma(), fromCam.getTone());",
      "raw_prediction": "ucsCam.getHstar(), fromCam.getChroma(), fromCam.getTone());",
      "es": 0.6,
      "em": false,
      "passed": false
    },
    {
      "index": 1048,
      "groundtruth": "HctSolver.solveToInt(hue, chroma, tone);",
      "prediction": "HctSolver.solveToInt(hue, chroma, tone);",
      "raw_prediction": "HctSolver.solveToInt(hue, chroma, tone);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1049,
      "groundtruth": "toCam.getAstar();",
      "prediction": "toCam.getAstar();",
      "raw_prediction": "toCam.getAstar();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1050,
      "groundtruth": "hue = cam.getHue();",
      "prediction": "hue = cam.getHue();",
      "raw_prediction": "hue = cam.getHue();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1051,
      "groundtruth": "fromCam.getBstar();",
      "prediction": "fromCam.getBstar();",
      "raw_prediction": "fromCam.getBstar();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1052,
      "groundtruth": "return Cam16.fromUcs(jstar, astar, bstar).toInt();",
      "prediction": "return Cam16.from(jstar, astar, bstar).toInt();",
      "raw_prediction": "return Cam16.from(jstar, astar, bstar).toInt();",
      "es": 0.94,
      "em": false,
      "passed": false
    },
    {
      "index": 1053,
      "groundtruth": "double fromJ = fromCam.getJstar();",
      "prediction": "double fromJ = fromCam.getJstar();",
      "raw_prediction": " double fromJ = fromCam.getJstar();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1054,
      "groundtruth": "toB = toCam.getBstar();",
      "prediction": "toB = toCam.getBstar();",
      "raw_prediction": "toB = toCam.getBstar();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1055,
      "groundtruth": "Hct.fromInt(designColor);",
      "prediction": "Hct.fromInt(designColor);",
      "raw_prediction": "Hct.fromInt(designColor);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1056,
      "groundtruth": "differenceDegrees = MathUtils.differenceDegrees(fromHct.getHue(), toHct.getHue());",
      "prediction": "differenceDegrees = MathUtils.sanitizeDegre",
      "raw_prediction": "differenceDegrees = MathUtils.sanitizeDegreesDouble(\n        Math.abs(toHct.getHue() - fromHct.getHue()));",
      "es": 0.4390243902439024,
      "em": false,
      "passed": false
    },
    {
      "index": 1057,
      "groundtruth": "(), fromCam.getChroma(), ColorUtils.lstarFromArgb(from));",
      "prediction": "(), toHct.getChroma(), fromHct.getTone()).toInt();",
      "raw_prediction": "(), toHct.getChroma(), fromHct.getTone()).toInt();",
      "es": 0.42105263157894735,
      "em": false,
      "passed": false
    },
    {
      "index": 1058,
      "groundtruth": "* viewingConditions.getNbb();",
      "prediction": "/ (u + 0.305);",
      "raw_prediction": "/ (u + 0.305);\n    // CAM16 chroma, colorfulness, and saturation.\n    double c = alpha * Math.sqrt(j / 100.0);\n    double m = c *",
      "es": 0.13793103448275867,
      "em": false,
      "passed": false
    },
    {
      "index": 1059,
      "groundtruth": "= MathUtils.differenceDegrees(fromHct.getHue(), toHct.getHue());",
      "prediction": "= MathUtils.angleDifferenceDegrees(inHct.getHue(), toHct.getHue());",
      "raw_prediction": "= MathUtils.angleDifferenceDegrees(inHct.getHue(), toHct.getHue());",
      "es": 0.8507462686567164,
      "em": false,
      "passed": false
    },
    {
      "index": 1060,
      "groundtruth": "fromHct.getHue()\n                + rotationDegrees * MathUtils.rotationDirection(fromHct.getHue(), toHct.getHue()));",
      "prediction": "fromHct.getHue() + rotationDegrees);",
      "raw_prediction": "    fromHct.getHue() + rotationDegrees);\n\n    return Hct.from(outputHue, fromHct.getChroma(), fromHct.getTone()).toInt();\n  }\n\n  /**\n   * Blend the design color's",
      "es": 0.31034482758620685,
      "em": false,
      "passed": false
    },
    {
      "index": 1061,
      "groundtruth": "viewingConditions.getAw() + 4.0)\n            * viewingConditions.getFlRoot();",
      "prediction": "viewingConditions.getAw() + 4.0)\n            * viewingConditions.getFlRoot());",
      "raw_prediction": "viewingConditions.getAw() + 4.0)\n            * viewingConditions.getFlRoot());",
      "es": 0.9871794871794872,
      "em": false,
      "passed": false
    },
    {
      "index": 1062,
      "groundtruth": "ColorUtils.argbFromXyz(xyz[0], xyz[1], xyz[2]);",
      "prediction": "ColorUtils.intFromArgb(ColorUtils.floatToArgb(xyz));",
      "raw_prediction": "ColorUtils.intFromArgb(ColorUtils.floatToArgb(xyz));",
      "es": 0.34615384615384615,
      "em": false,
      "passed": false
    },
    {
      "index": 1063,
      "groundtruth": "viewingConditions.getC() * viewingConditions.getZ());",
      "prediction": "viewingConditions.getNbb() / viewingConditions.getNc());",
      "raw_prediction": "  viewingConditions.getNbb() / viewingConditions.getNc());\n    double q =\n        4.0\n            / viewingConditions.getC()\n             * Math.sqrt(j / 100.0)\n             * (viewing",
      "es": 0.8928571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 1064,
      "groundtruth": "outputHue, fromHct.getChroma(), fromHct.getTone()).toInt();",
      "prediction": "outputHue, fromHct.getChroma(), fromHct.getLstar()).toInt();",
      "raw_prediction": "outputHue, fromHct.getChroma(), fromHct.getLstar()).toInt();",
      "es": 0.9166666666666666,
      "em": false,
      "passed": false
    },
    {
      "index": 1065,
      "groundtruth": "from(outputHue, fromHct.getChroma(), fromHct.getTone()).toInt();",
      "prediction": "from(outputHue, fromHct.getChroma(), fromHct.getTone()).toInt();",
      "raw_prediction": "from(outputHue, fromHct.getChroma(), fromHct.getTone()).toInt();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1066,
      "groundtruth": "viewingConditions.getRgbD()[0] * rT;",
      "prediction": "viewingConditions.getRgbD()[0] * rT;",
      "raw_prediction": "viewingConditions.getRgbD()[0] * rT;",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1067,
      "groundtruth": "Math.pow(viewingConditions.getFl() * Math.abs(bD) / 100.0, 0.42);",
      "prediction": "Math.pow(viewingConditions.getFl() * Math.abs(bD) / 100.0, 0.42);",
      "raw_prediction": "Math.pow(viewingConditions.getFl() * Math.abs(bD) / 100.0, 0.42);\n    // redness-greenness\n    double a = (11.0 * rD +",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1068,
      "groundtruth": "* viewingConditions.getZ());",
      "prediction": "/ viewingConditions.getZ());",
      "raw_prediction": "/ viewingConditions.getZ());\n    double q =\n        4.0\n            / viewingConditions.getC()\n            * Math.sqrt(j / 100.0)\n            viewingConditions.getAw() + 4.0)\n\n             viewing",
      "es": 0.9642857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 1069,
      "groundtruth": "double blueL = ColorUtils.linearized(blue);",
      "prediction": "double blueL = ColorUtils.linearized(blue);",
      "raw_prediction": " double blueL = ColorUtils.linearized(blue);\n    // Convert linearized RGB to XYZ",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1070,
      "groundtruth": "eHue * viewingConditions.getNc() * viewingConditions.getNcb();",
      "prediction": "viewingConditions.getNc() * viewingConditions.getNcb();",
      "raw_prediction": "viewingConditions.getNc() * viewingConditions.getNcb();",
      "es": 0.8870967741935484,
      "em": false,
      "passed": false
    },
    {
      "index": 1071,
      "groundtruth": "* viewingConditions.getFlRoot();",
      "prediction": "* viewingConditions.getFlRoot();",
      "raw_prediction": "* viewingConditions.getFlRoot();\n    double m =\n        50.0 * Math.sqrt((alpha * viewingConditions.getC()) / (viewingConditions.getAw() + 4.0));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1072,
      "groundtruth": "rAF = Math.pow(viewingConditions.getFl() * Math.abs(rD) / 100.0, 0.42);",
      "prediction": "rAF = Math.pow(viewingConditions.getFl() * Math.abs(rD) / 100.0, 0.42);",
      "raw_prediction": "rAF = Math.pow(viewingConditions.getFl() * Math.abs(rD) / 100.0, 0.42);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1073,
      "groundtruth": "* Math.sqrt((alpha * viewingConditions.getC()) / (viewingConditions.getAw() + 4.0));",
      "prediction": "* Math.sqrt((alpha * viewingConditions.getC()) / (viewingConditions.getAw() + 4.0));",
      "raw_prediction": "* Math.sqrt((alpha * viewingConditions.getC()) / (viewingConditions.getAw() + 4.0));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1074,
      "groundtruth": "double redL = ColorUtils.linearized(red);",
      "prediction": "double redL = ColorUtils.linearized(red);",
      "raw_prediction": " double redL = ColorUtils.linearized(red);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1075,
      "groundtruth": "m = c * viewingConditions.getFlRoot();",
      "prediction": "m = c * viewingConditions.getFlRoot();",
      "raw_prediction": "m = c * viewingConditions.getFlRoot();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1076,
      "groundtruth": "viewingConditions.getAw(),\n                viewingConditions.getC() * viewingConditions.getZ());",
      "prediction": "Math.sqrt(1.0 + 0.007 * j) + 0.007 * j);",
      "raw_prediction": "Math.sqrt(1.0 + 0.007 * j) + 0.007 * j);\n    double q =\n        4.0\n            / viewingConditions.getC()\n            * Math.sqrt(j /",
      "es": 0.16666666666666663,
      "em": false,
      "passed": false
    },
    {
      "index": 1077,
      "groundtruth": "pow(0.29, viewingConditions.getN()), 0.73) * Math.pow(t, 0.9);",
      "prediction": "pow(0.29, viewingConditions.getN()), 0.73), 1.0 / 0.9);",
      "raw_prediction": "pow(0.29, viewingConditions.getN()), 0.73), 1.0 / 0.9);\n    double gamma = 23.0 * (p2 + 0.305",
      "es": 0.8064516129032258,
      "em": false,
      "passed": false
    },
    {
      "index": 1078,
      "groundtruth": "alpha * viewingConditions.getC()) / (viewingConditions.getAw() + 4.0));",
      "prediction": "alpha * viewingConditions.getC()) / (viewingConditions.getAw() + 4.0));",
      "raw_prediction": "alpha * viewingConditions.getC()) / (viewingConditions.getAw() + 4.0));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1079,
      "groundtruth": "viewingConditions.getFlRoot();",
      "prediction": "viewingConditions.getFlRoot();",
      "raw_prediction": "viewingConditions.getFlRoot();\n    double m2 = Math.expm1(c * 0.0228) / 0.0228;\n    double m = Math.sqrt(m2);\n    double j =",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1080,
      "groundtruth": "Math.pow(getJ() / 100.0, 1.0 / viewingConditions.getC() / viewingConditions.getZ());",
      "prediction": "Math.exp(0.0228 * m2);",
      "raw_prediction": "Math.exp(0.0228 * m2);",
      "es": 0.16666666666666663,
      "em": false,
      "passed": false
    },
    {
      "index": 1081,
      "groundtruth": ") / 100.0, 1.0 / viewingConditions.getC() / viewingConditions.getZ());",
      "prediction": ") / 100.0, 0.5);",
      "raw_prediction": ") / 100.0, 0.5);",
      "es": 0.2142857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 1082,
      "groundtruth": "(100.0 / viewingConditions.getFl()) * Math.pow(gCBase, 1.0 / 0.42);",
      "prediction": "(100.0 / viewingConditions.getFl()) * Math.pow(gCBase, 1.0 / 0.42);",
      "raw_prediction": "(100.0 / viewingConditions.getFl()) * Math.pow(gCBase, 1.0 / 0.42);\n    double bCBase = max(0, (27.13 * Math",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1083,
      "groundtruth": "double c = m2 / viewingConditions.getFlRoot();",
      "prediction": "double c = Math.sqrt(m2);",
      "raw_prediction": " double c = Math.sqrt(m2);\n    double h = Math.atan2(bstar, astar) * (180.0 / Math.PI);\n    if (h < 0.0) {\n      h += 3",
      "es": 0.34782608695652173,
      "em": false,
      "passed": false
    },
    {
      "index": 1084,
      "groundtruth": "ac / viewingConditions.getNbb());",
      "prediction": "40.0 * p2 + 20.0 * a + b) / 20.0;",
      "raw_prediction": "40.0 * p2 + 20.0 * a + b) / 20.0;",
      "es": 0.06060606060606055,
      "em": false,
      "passed": false
    },
    {
      "index": 1085,
      "groundtruth": "return QuantizerWsmeans.quantize(pixels, wuClusters, maxColors);",
      "prediction": "QuantizerResult result = new QuantizerWsmeans().quantize(pixels, maxColors, wuClusters);",
      "raw_prediction": "QuantizerResult result = new QuantizerWsmeans().quantize(pixels, maxColors, wuClusters);\n    return result.colorToCount;",
      "es": 0.5340909090909092,
      "em": false,
      "passed": false
    },
    {
      "index": 1086,
      "groundtruth": "/ viewingConditions.getRgbD()[0];",
      "prediction": "/ viewingConditions.getRgbD()[0];",
      "raw_prediction": "/ viewingConditions.getRgbD()[0];",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1087,
      "groundtruth": "- Math.pow(0.29, viewingConditions.getN()), 0.73), 1.0 / 0.9);",
      "prediction": "- Math.pow(0.29, viewingConditions.getN()), 0.73), 0.9);",
      "raw_prediction": "- Math.pow(0.29, viewingConditions.getN()), 0.73), 0.9);\n    double t = p1 * Math.hypot(astar, bstar) / (astar + ",
      "es": 0.9032258064516129,
      "em": false,
      "passed": false
    },
    {
      "index": 1088,
      "groundtruth": "lab = ColorUtils.labFromArgb(argb);",
      "prediction": "lab = ColorUtils.labFromArgb(argb);",
      "raw_prediction": "lab = ColorUtils.labFromArgb(argb);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1089,
      "groundtruth": "errorPalette = TonalPalette.fromHueAndChroma(25.0, 84.0);",
      "prediction": "errorPalette = new TonalPalette(); // TODO: Implement error palette",
      "raw_prediction": "errorPalette = new TonalPalette(); // TODO: Implement error palette\n  }\n\n  /**\n   * Returns the color that has the most contrast with the source color.\n   *\n   * @return The color with the most contrast.\n  ",
      "es": 0.4328358208955224,
      "em": false,
      "passed": false
    },
    {
      "index": 1090,
      "groundtruth": "ColorUtils.whitePointD65(),\n        (200.0 / Math.PI * ColorUtils.yFromLstar(50.0) / 100.f),\n        lstar,\n        2.0,\n        false);",
      "prediction": "Cam16.D65,\n        11.72,\n        lstar,\n        2.0,\n        false);",
      "raw_prediction": "Cam16.D65,\n        11.72,\n        lstar,\n        2.0,\n        false);",
      "es": 0.4558823529411765,
      "em": false,
      "passed": false
    },
    {
      "index": 1091,
      "groundtruth": "MathUtils.sanitizeDegreesDouble(sourceHue + rotations[0]);",
      "prediction": "MathUtils.sanitizeDegreesDouble(sourceHue + rotations[0]);",
      "raw_prediction": "MathUtils.sanitizeDegreesDouble(sourceHue + rotations[0]);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1092,
      "groundtruth": "gC / viewingConditions.getRgbD()[1];",
      "prediction": "gC / viewingConditions.getRgbD()[1];",
      "raw_prediction": "gC / viewingConditions.getRgbD()[1];",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1093,
      "groundtruth": "ColorUtils.argbFromLab(lab[0], lab[1], lab[2]);",
      "prediction": "ColorUtils.argbFromLab(lab[0], lab[1], lab[2]);",
      "raw_prediction": "ColorUtils.argbFromLab(lab[0], lab[1], lab[2]);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1094,
      "groundtruth": "n = (ColorUtils.yFromLstar(backgroundLstar) / whitePoint[1]);",
      "prediction": "flRoot = Math.pow(fl, 0.25);",
      "raw_prediction": "flRoot = Math.pow(fl, 0.25);\n    double n = Math.pow(backgroundLstar / 100.0, 0.4);",
      "es": 0.1311475409836066,
      "em": false,
      "passed": false
    },
    {
      "index": 1095,
      "groundtruth": "100.0 / viewingConditions.getFl()) * Math.pow(rCBase, 1.0 / 0.42);",
      "prediction": "100.0 / viewingConditions.getFl()) * Math.pow(rCBase, 1.0 / 0.42);",
      "raw_prediction": "100.0 / viewingConditions.getFl()) * Math.pow(rCBase, 1.0 / 0.42);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1096,
      "groundtruth": "d = MathUtils.clampDouble(0.0, 1.0, d);",
      "prediction": "double nc = f;",
      "raw_prediction": "double nc = f;",
      "es": 0.23076923076923073,
      "em": false,
      "passed": false
    },
    {
      "index": 1097,
      "groundtruth": "sourceColorArgb = sourceColorHct.toInt();",
      "prediction": "sourceColorArgb = sourceColorHct.toArgb();",
      "raw_prediction": "sourceColorArgb = sourceColorHct.toArgb();",
      "es": 0.9047619047619048,
      "em": false,
      "passed": false
    },
    {
      "index": 1098,
      "groundtruth": ": MathUtils.lerp(0.525, 0.59, ((f - 0.8) * 10.0));",
      "prediction": ": MathUtils.lerp(0.69, 0.79, ((f - 0.9) * 10.0));",
      "raw_prediction": "    : MathUtils.lerp(0.69, 0.79, ((f - 0.9) * 10.0));",
      "es": 0.9,
      "em": false,
      "passed": false
    },
    {
      "index": 1099,
      "groundtruth": "final double sourceHue = sourceColorHct.getHue();",
      "prediction": "final double sourceHue = sourceColorHct.getHue();",
      "raw_prediction": "final double sourceHue = sourceColorHct.getHue();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1100,
      "groundtruth": "MathUtils.lerp(this.low, this.normal, (contrastLevel - -1) / 1);",
      "prediction": "MathUtils.lerp(this.low, this.normal, (contrastLevel + 1) / 1.0);",
      "raw_prediction": "MathUtils.lerp(this.low, this.normal, (contrastLevel + 1) / 1.0);",
      "es": 0.9384615384615385,
      "em": false,
      "passed": false
    },
    {
      "index": 1101,
      "groundtruth": "(CorePalette.of(argb));",
      "prediction": "(CorePalette.lightOf(argb));",
      "raw_prediction": "(CorePalette.lightOf(argb));\n\n  }\n\n  /** Creates a dark theme content-based Scheme from a source color in ARGB, i.e. a hex code. */\n  public static Scheme darkContent(int argb) {\n    return dark",
      "es": 0.7857142857142857,
      "em": false,
      "passed": false
    },
    {
      "index": 1102,
      "groundtruth": "MathUtils.lerp(this.normal, this.medium, (contrastLevel - 0) / 0.5);",
      "prediction": "MathUtils.lerp(this.normal, this.medium, (contrastLevel - 0) / 0.5);",
      "raw_prediction": "MathUtils.lerp(this.normal, this.medium, (contrastLevel - 0) / 0.5);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1103,
      "groundtruth": "MathUtils.lerp(this.medium, this.high, (contrastLevel - 0.5) / 0.5);",
      "prediction": "MathUtils.lerp(this.medium, this.high, (contrastLevel - 0.5) / 0.5);",
      "raw_prediction": "MathUtils.lerp(this.medium, this.high, (contrastLevel - 0.5) / 0.5);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1104,
      "groundtruth": "lightFromCorePalette(CorePalette.contentOf(argb));",
      "prediction": "lightFromCorePalette(CorePalette.contentOf(argb));",
      "raw_prediction": "lightFromCorePalette(CorePalette.contentOf(argb));\n\n  }\n\n  /** Creates a dark theme content-based Scheme from a source color in ARGB, i.e. a hex code. */\n  public static Scheme darkContent(int argb)",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1105,
      "groundtruth": "ColorUtils.yFromLstar(50.0) / 100.f),\n        lstar,\n        2.0,\n        false);",
      "prediction": "Math.cos(Math.toRadians(20.0))),\n        lstar,\n        2.0,\n        false);",
      "raw_prediction": "Math.cos(Math.toRadians(20.0))),\n        lstar,\n        2.0,\n        false);",
      "es": 0.6296296296296297,
      "em": false,
      "passed": false
    },
    {
      "index": 1106,
      "groundtruth": "pointProvider.toInt(clusters[i]);",
      "prediction": "random.nextInt(0xFFFFFF);",
      "raw_prediction": "random.nextInt(0xFFFFFF);",
      "es": 0.303030303030303,
      "em": false,
      "passed": false
    },
    {
      "index": 1107,
      "groundtruth": "distance = pointProvider.distance(clusters[i], clusters[j]);",
      "prediction": "distance = pointProvider.distance(points[i], points[j]);",
      "raw_prediction": "distance = pointProvider.distance(points[i], points[j]);\n          distanceToIndexMatrix[i][j].distance = distance;",
      "es": 0.8,
      "em": false,
      "passed": false
    },
    {
      "index": 1108,
      "groundtruth": "pointProvider.fromInt(inputPixel);",
      "prediction": "pointProvider.fromInt(inputPixel);",
      "raw_prediction": "pointProvider.fromInt(inputPixel);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1109,
      "groundtruth": "(Contrast.ratioOfTones(49, bgTone) >= desiredRatio) {",
      "prediction": "(amNearer) {",
      "raw_prediction": " (amNearer) {",
      "es": 0.15094339622641506,
      "em": false,
      "passed": false
    },
    {
      "index": 1110,
      "groundtruth": "if (Contrast.ratioOfTones(upper, answer) >= desiredRatio\n            && Contrast.ratioOfTones(lower, answer) >= desiredRatio) {",
      "prediction": "if (bgTone1 == bgTone2) {",
      "raw_prediction": " if (bgTone1 == bgTone2) {",
      "es": 0.1417322834645669,
      "em": false,
      "passed": false
    },
    {
      "index": 1111,
      "groundtruth": "= Contrast.lighter(upper, desiredRatio);",
      "prediction": "= Contrast.lighter(upper, desiredRatio);",
      "raw_prediction": "= Contrast.lighter(upper, desiredRatio);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1112,
      "groundtruth": "().quantize(pixels, colorCount);",
      "prediction": "Result();",
      "raw_prediction": "Result();\n    for (int pixel : pixels) {\n      int red = ColorUtils.redFromArgb(pixel);\n      int green = ColorUtils.greenFromArgb(pixel);\n      int blue = ColorUtils.blueFromArgb(pixel);\n      int bitsToRemove",
      "es": 0.15625,
      "em": false,
      "passed": false
    },
    {
      "index": 1113,
      "groundtruth": "pointProvider.distance(point, clusters[j]);",
      "prediction": "pointProvider.distance(point, clusters[indexMatrix[previousClusterIndex][j]]);",
      "raw_prediction": "pointProvider.distance(point, clusters[indexMatrix[previousClusterIndex][j]]);\n          if (distance < minimumDistance) {\n            minimumDistance = distance;\n            newClusterIndex = j;\n          }\n        }\n        if (newClusterIndex !=",
      "es": 0.5512820512820513,
      "em": false,
      "passed": false
    },
    {
      "index": 1114,
      "groundtruth": "red = ColorUtils.redFromArgb(pixel);",
      "prediction": "red = ColorUtils.redFromArgb(pixel);",
      "raw_prediction": "red = ColorUtils.redFromArgb(pixel);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1115,
      "groundtruth": "previousDistance = pointProvider.distance(point, previousCluster);",
      "prediction": "previousDistance = pointProvider.distance(point, previousCluster);",
      "raw_prediction": "previousDistance = pointProvider.distance(point, previousCluster);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1116,
      "groundtruth": ") -> palette, (s) -> hct.getTone());",
      "prediction": "cheme) -> palette.apply(scheme).getHct(tone.apply(scheme)), isBackground",
      "raw_prediction": "cheme) -> palette.apply(scheme).getHct(tone.apply(scheme)), isBackground);\n  }\n\n  /**\n   * Create a DynamicColor from a hex code and a background.\n   *\n   * <p>Result has a",
      "es": 0.3194444444444444,
      "em": false,
      "passed": false
    },
    {
      "index": 1117,
      "error": "RetryError[<Future at 0x10ba4b6b0 state=finished raised HTTPError>]",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1118,
      "groundtruth": "Contrast.ratioOfTones(bgTone, fInitialTone) >= fContrast\n              ? fInitialTone\n              : DynamicColor.foregroundTone(bgTone, fContrast);",
      "prediction": "Contrast.ratioOfTones(bgTone, fInitialTone) >= fContrast\n              ? fInitialTone\n             : DynamicColor.foregroundTone(bgTone, fContrast);",
      "raw_prediction": " Contrast.ratioOfTones(bgTone, fInitialTone) >= fContrast\n              ? fInitialTone\n             : DynamicColor.foregroundTone(bgTone, fContrast);",
      "es": 0.9932885906040269,
      "em": true,
      "passed": true
    },
    {
      "index": 1119,
      "groundtruth": "Contrast.ratioOfTones(bgTone, nInitialTone) >= nContrast\n              ? nInitialTone\n              : DynamicColor.foregroundTone(bgTone, nContrast);",
      "prediction": "Contrast.ratioOfTones(bgTone, nInitialTone) >= nContrast\n              ? nInitialTone\n             : DynamicColor.foregroundTone(bgTone, nContrast);",
      "raw_prediction": " Contrast.ratioOfTones(bgTone, nInitialTone) >= nContrast\n              ? nInitialTone\n             : DynamicColor.foregroundTone(bgTone, nContrast);\n",
      "es": 0.9932885906040269,
      "em": true,
      "passed": true
    },
    {
      "index": 1120,
      "groundtruth": "ColorUtils.blueFromArgb(pixel);",
      "prediction": "ColorUtils.blueFromArgb(pixel);",
      "raw_prediction": "ColorUtils.blueFromArgb(pixel);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1121,
      "groundtruth": "Contrast.ratioOfTones(bgTone, answer) >= desiredRatio) {",
      "prediction": "answer == 100) { // Already at max contrast",
      "raw_prediction": "answer == 100) { // Already at max contrast\n        return answer;\n      } else if (answer == 0) { // Already at min contrast\n        return answer;\n      } else if (desiredRatio >= ",
      "es": 0.1428571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 1122,
      "error": "RetryError[<Future at 0x10af4d1f0 state=finished raised HTTPError>]",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1123,
      "groundtruth": "alpha = MathUtils.clampInt(0, 255, (int) Math.round(percentage * 255));",
      "prediction": "alpha = (int) (percentage * 255);",
      "raw_prediction": "alpha = (int) (percentage * 255);",
      "es": 0.46478873239436624,
      "em": false,
      "passed": false
    },
    {
      "index": 1124,
      "groundtruth": "fTone = MathUtils.clampDouble(0, 100, nTone + delta * expansionDir);",
      "prediction": "nTone = MathUtils.clampDouble(0, 100, fTone - delta * expansionDir);",
      "raw_prediction": " nTone = MathUtils.clampDouble(0, 100, fTone - delta * expansionDir);\n      }\n    }\n\n     // Avoids the 50-59 awkward zone.\n     if (5",
      "es": 0.9558823529411765,
      "em": false,
      "passed": false
    },
    {
      "index": 1125,
      "groundtruth": "MathUtils.clampDouble(0, 100, fTone - delta * expansionDir);",
      "prediction": "min(nTone + delta * expansionDir, 100);",
      "raw_prediction": "min(nTone + delta * expansionDir, 100);\n          // If constraint is not satisfied, try another round.\n          if ((fTone - nTone) * expansionDir < delta) {\n            // ",
      "es": 0.41666666666666663,
      "em": false,
      "passed": false
    },
    {
      "index": 1126,
      "groundtruth": "TonalPalette.fromInt(argb);",
      "prediction": "palette.apply(scheme);",
      "raw_prediction": " palette.apply(scheme);",
      "es": 0.33333333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 1127,
      "groundtruth": "WebhookVerifier(WebhookSigner.hmacSha1(secret), Encoder.HEX);",
      "prediction": "WebhookVerifier(WebhookSigner.hmacSha1(secret), Encoder.HEX);",
      "raw_prediction": "WebhookVerifier(WebhookSigner.hmacSha1(secret), Encoder.HEX);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1128,
      "groundtruth": "ResponseUtil.errorNotFound();",
      "prediction": "ResponseUtil.errorUnauthorized();",
      "raw_prediction": "ResponseUtil.errorUnauthorized();",
      "es": 0.7272727272727273,
      "em": false,
      "passed": false
    },
    {
      "index": 1129,
      "groundtruth": "ResponseUtil.handleDashboardInfo(dashboardInfo);",
      "prediction": "ResponseUtil.handleDashboardInfo(dashboardInfo);",
      "raw_prediction": "ResponseUtil.handleDashboardInfo(dashboardInfo);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1130,
      "groundtruth": "if(TransactionUtil.isValidYear(creationYear)){",
      "prediction": "if(TransactionUtil.isValidYear(creationYear))",
      "raw_prediction": "if(TransactionUtil.isValidYear(creationYear)){",
      "es": 0.9782608695652174,
      "em": false,
      "passed": false
    },
    {
      "index": 1131,
      "groundtruth": "= DateUtil.getUnixTimeFromDate(startDate);",
      "prediction": "= DateUtil.getUnixTimeFromDate(startDate);",
      "raw_prediction": "= DateUtil.getUnixTimeFromDate(startDate);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1132,
      "groundtruth": "DateUtil.isValidDate(startDate) && DateUtil.isValidDate(endDate)) {",
      "prediction": "TransactionUtil.isValidDate(startDate)",
      "raw_prediction": "TransactionUtil.isValidDate(startDate) && TransactionUtil.isValidDate(endDate)) {",
      "es": 0.35820895522388063,
      "em": false,
      "passed": false
    },
    {
      "index": 1133,
      "groundtruth": "(TransactionUtil.idValidAmount(amount)) {",
      "prediction": "(amount != null && amount.length()>0)",
      "raw_prediction": "(amount != null && amount.length()>0) {",
      "es": 0.2195121951219512,
      "em": false,
      "passed": false
    },
    {
      "index": 1134,
      "groundtruth": ".isValidDate(startDate) && DateUtil.isValidDate(endDate)) {",
      "prediction": ".idValidDate(startDate) && Date",
      "raw_prediction": ".idValidDate(startDate) && DateUtil.idValidDate(endDate)) {",
      "es": 0.5084745762711864,
      "em": false,
      "passed": false
    },
    {
      "index": 1135,
      "groundtruth": "(!DateUtil.isValidDate(startDate) || !DateUtil.isValidDate(endDate)){",
      "prediction": "(!DateUtil.isValidDate(startDate) || !DateUtil.isValidDate(endDate))",
      "raw_prediction": " (!DateUtil.isValidDate(startDate) || !DateUtil.isValidDate(endDate)) {",
      "es": 0.9855072463768116,
      "em": false,
      "passed": false
    },
    {
      "index": 1136,
      "groundtruth": "whereGreaterThan(\"creationTimeStamp\", DateUtil.getUnixTimeFromDate(startDate))\n                    .whereLessThan(\"creationTimeStamp\", DateUtil.getUnixTimeFromDate(endDate));",
      "prediction": "whereGreaterThanOrEqualTo(\"creationDate\",startDate)\n                .whereLessThanOrEqualTo(\"creationDate\",endDate);",
      "raw_prediction": "whereGreaterThanOrEqualTo(\"creationDate\",startDate)\n                .whereLessThanOrEqualTo(\"creationDate\",endDate);\n        }\n\n        //? Check if creationDate, creationMonth, creationYear is passed and valid\n        else if(DateUtil.isValidDate(",
      "es": 0.49425287356321834,
      "em": false,
      "passed": false
    },
    {
      "index": 1137,
      "groundtruth": "&& TransactionUtil.isValidYear(creationYear)) {",
      "prediction": "&& TransactionUtil.isVali",
      "raw_prediction": "&& TransactionUtil.isValidYear(creationYear)){",
      "es": 0.5319148936170213,
      "em": false,
      "passed": false
    },
    {
      "index": 1138,
      "groundtruth": "ResponseUtil.errorLimitExceeded();",
      "prediction": "ResponseUtil.errorLimitExceeded();",
      "raw_prediction": "ResponseUtil.errorLimitExceeded();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1139,
      "groundtruth": "(TransactionUtil.idValidAmount(transactionAmount)) {",
      "prediction": "(TransactionUtil.idValidAmount(transactionAmount))",
      "raw_prediction": "(TransactionUtil.idValidAmount(transactionAmount)) {",
      "es": 0.9615384615384616,
      "em": false,
      "passed": false
    },
    {
      "index": 1140,
      "groundtruth": "DateUtil.isValidDate(endDate)){",
      "prediction": "DateUtil.isValidD",
      "raw_prediction": "DateUtil.isValidDate(endDate)) {",
      "es": 0.5483870967741935,
      "em": false,
      "passed": false
    },
    {
      "index": 1141,
      "groundtruth": "ResponseUtil.errorParsingEntity(\"Required Date must be passed in query and should be in dd-MM-yyyy format\");",
      "prediction": "new ResponseEntity<>(\"Invalid Date Range\", HttpStatus.BAD_REQUEST);",
      "raw_prediction": "new ResponseEntity<>(\"Invalid Date Range\", HttpStatus.BAD_REQUEST);",
      "es": 0.2314814814814815,
      "em": false,
      "passed": false
    },
    {
      "index": 1142,
      "groundtruth": "return ResponseUtil.errorParsingEntity(\"Error! Date format must be in dd-MM-yyyy\");",
      "prediction": "return ResponseUtil.errorParsingEntity(\"Error! Date format must be in dd-MM-yyyy\");",
      "raw_prediction": "return ResponseUtil.errorParsingEntity(\"Error! Date format must be in dd-MM-yyyy\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1143,
      "groundtruth": "(this.isNumber() && other.isNumber()) {",
      "prediction": "(this.isNumber() && other.isNumber())",
      "raw_prediction": "(this.isNumber() && other.isNumber()) {",
      "es": 0.9487179487179487,
      "em": false,
      "passed": false
    },
    {
      "index": 1144,
      "groundtruth": "other.assertNumber();",
      "prediction": "other.assertNumber();",
      "raw_prediction": "other.assertNumber();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1145,
      "groundtruth": "ResponseUtil.errorUnauthorized();",
      "prediction": "ResponseUtil.errorUnauthorized();",
      "raw_prediction": "ResponseUtil.errorUnauthorized();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1146,
      "groundtruth": "userDetail.getAuthorities());",
      "prediction": "userDetail.getAu",
      "raw_prediction": "userDetail.getAuthorities().stream().map(GrantedAuthority::getAuthority).collect(Collectors.toList()));\n        return generateToken(claims);\n    }\n\n    /**\n     * \u6839\u636e\u7528\u6237\u4fe1\u606f\u751f\u6210\u4ee4\u724c\n     *\n     * @param userId  ",
      "es": 0.5517241379310345,
      "em": false,
      "passed": false
    },
    {
      "index": 1147,
      "groundtruth": "return ResponseUtil.successAddOne();",
      "prediction": "return ResponseUtil.successCreateOne();",
      "raw_prediction": "return ResponseUtil.successCreateOne();",
      "es": 0.8461538461538461,
      "em": false,
      "passed": false
    },
    {
      "index": 1148,
      "groundtruth": "getSourceIndex(), body.getDestinationIndex());",
      "prediction": "getSourceIndex(), body.getTargetIndex());",
      "raw_prediction": "getSourceIndex(), body.getTargetIndex());\n\t}\n\t\n\t@PostMapping\n\tpublic GameListDTO insert(@RequestBody GameListDTO dto) {\n\t\tGameListDTO result = gameListService.insert(dto);\n\t\treturn result;",
      "es": 0.782608695652174,
      "em": false,
      "passed": false
    },
    {
      "index": 1149,
      "groundtruth": "body.getSourceIndex(), body.getDestinationIndex());",
      "prediction": "body.getSourceIndex(), body.getTargetIndex());",
      "raw_prediction": "body.getSourceIndex(), body.getTargetIndex());\n\t}\n\t\n\t@PostMapping\n\tpublic GameListDTO insert(@RequestBody GameListDTO dto) {\n\t\tGameListDTO result = gameListService.insert(dto);\n\t\treturn result;",
      "es": 0.803921568627451,
      "em": false,
      "passed": false
    },
    {
      "index": 1150,
      "groundtruth": "DeluxeMenuCommand> command = parser.parse(commandArgs);",
      "prediction": "DeluxeMenuCommand> command = parser.parse(commandArgs);",
      "raw_prediction": "DeluxeMenuCommand> command = parser.parse(commandArgs);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1151,
      "groundtruth": "= helixWrapper.fetchChatters(channelId, accessToken);",
      "prediction": "= helixWrapper.fetchVips(channelId, accessToken);",
      "raw_prediction": "= helixWrapper.fetchVips(channelId, accessToken);",
      "es": 0.8679245283018868,
      "em": false,
      "passed": false
    },
    {
      "index": 1152,
      "groundtruth": "channel.isAccessTokenExpired()) {",
      "prediction": "!channel.isRegiste",
      "raw_prediction": "!channel.isRegistered()) {",
      "es": 0.33333333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 1153,
      "groundtruth": "Moderator> vips = helixWrapper.fetchModerators(channelId, accessToken);",
      "prediction": "Moderator> vips = helixWrapper.fetchModerators(channelId, accessToken);",
      "raw_prediction": "Moderator> vips = helixWrapper.fetchModerators(channelId, accessToken);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1154,
      "groundtruth": "channel.getScopeNames());",
      "prediction": "null);",
      "raw_prediction": "null);",
      "es": 0.16000000000000003,
      "em": false,
      "passed": false
    },
    {
      "index": 1155,
      "groundtruth": "sum += x.getSubTotal();",
      "prediction": "sum += x.getSubTotal();",
      "raw_prediction": "\tsum += x.getSubTotal();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1156,
      "groundtruth": "setDescription(game.getDescription());",
      "prediction": "setYear(game.getYear());",
      "raw_prediction": "setYear(game.getYear());",
      "es": 0.5263157894736843,
      "em": false,
      "passed": false
    },
    {
      "index": 1157,
      "groundtruth": "setId(game.getId());",
      "prediction": "setGenre(game.getGenre());",
      "raw_prediction": "setGenre(game.getGenre());",
      "es": 0.6153846153846154,
      "em": false,
      "passed": false
    },
    {
      "index": 1158,
      "groundtruth": "(game.getId() == id){",
      "prediction": "(game.getId()==id)",
      "raw_prediction": "(game.getId()==id){",
      "es": 0.8571428571428572,
      "em": false,
      "passed": false
    },
    {
      "index": 1159,
      "groundtruth": "game.setCountOwner(game.getCountOwner() + 1);",
      "prediction": "game.setCountOwner(game.getCountOwner()+1);",
      "raw_prediction": "    game.setCountOwner(game.getCountOwner()+1);",
      "es": 0.9555555555555556,
      "em": false,
      "passed": false
    },
    {
      "index": 1160,
      "groundtruth": "(!(customer.getGames().contains(game))){",
      "prediction": "(!customer.getGames().contains(game))",
      "raw_prediction": " (!customer.getGames().contains(game)) {",
      "es": 0.925,
      "em": false,
      "passed": false
    },
    {
      "index": 1161,
      "groundtruth": ".equals(customer.getSurName()) &&\n                    customer2.getBirthYear() == customer.getBirthYear()) {",
      "prediction": ".equals(customer.getSurName())) {",
      "raw_prediction": ".equals(customer.getSurName())) {",
      "es": 0.3055555555555556,
      "em": false,
      "passed": false
    },
    {
      "index": 1162,
      "groundtruth": "(game1.getId()==id){",
      "prediction": "(game1.getId() == id)",
      "raw_prediction": "(game1.getId() == id){",
      "es": 0.8571428571428572,
      "em": false,
      "passed": false
    },
    {
      "index": 1163,
      "groundtruth": "customer2.getSurName().equals(customer.getSurName()) &&\n                    customer2.getBirthYear() == customer.getBirthYear()) {",
      "prediction": "customer2.getSurname().equals(customer.getSurname())) {",
      "raw_prediction": " customer2.getSurname().equals(customer.getSurname())) {",
      "es": 0.4076923076923077,
      "em": false,
      "passed": false
    },
    {
      "index": 1164,
      "groundtruth": ") == customer.getBirthYear()) {",
      "prediction": ").equals(customer",
      "raw_prediction": ").equals(customer.getBirthYear())) {",
      "es": 0.16129032258064513,
      "em": false,
      "passed": false
    },
    {
      "index": 1165,
      "groundtruth": "customer2.getBirthYear() == customer.getBirthYear()) {",
      "prediction": "customer2.getDateOfBirth().eq",
      "raw_prediction": " customer2.getDateOfBirth().equals(customer.getDateOfBirth())) {",
      "es": 0.42592592592592593,
      "em": false,
      "passed": false
    },
    {
      "index": 1166,
      "groundtruth": ".getName() + \" sold to \" + customer.getName()+\" cost: \"+game.getCost());",
      "prediction": ".getName() + \" sold to \" + customer.getName());",
      "raw_prediction": ".getName() + \" sold to \" + customer.getName());",
      "es": 0.6527777777777778,
      "em": false,
      "passed": false
    },
    {
      "index": 1167,
      "groundtruth": "p1.getCategories().add(cat2);",
      "prediction": "cat1.getProducts().addAll(Arrays.asList(p1, p2));",
      "raw_prediction": "\tcat1.getProducts().addAll(Arrays.asList(p1, p2));\n\t\tcat2.getProducts().addAll(Arrays.asList(p4));\n\t\tcat3.getProducts().addAll(Arrays.asList(p1, p2, p3, p5));\n\t\t\n",
      "es": 0.326530612244898,
      "em": false,
      "passed": false
    },
    {
      "index": 1168,
      "groundtruth": "setDiscountAmount(campaign.getDiscountAmount());",
      "prediction": "setPrice(campaign.getPrice());",
      "raw_prediction": "setPrice(campaign.getPrice());",
      "es": 0.45833333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 1169,
      "groundtruth": "()+\" cost: \"+game.getCost());",
      "prediction": "());",
      "raw_prediction": "());",
      "es": 0.13793103448275867,
      "em": false,
      "passed": false
    },
    {
      "index": 1170,
      "groundtruth": "(campaign1.getId()==id){",
      "prediction": "(campaign1.getId() == id)",
      "raw_prediction": "(campaign1.getId() == id){",
      "es": 0.88,
      "em": false,
      "passed": false
    },
    {
      "index": 1171,
      "groundtruth": "(campaign.getGames().get(id));",
      "prediction": "Name(campaign.getGameName());",
      "raw_prediction": "Name(campaign.getGameName());",
      "es": 0.6,
      "em": false,
      "passed": false
    },
    {
      "index": 1172,
      "groundtruth": "p2.getCategories().add(cat3);",
      "prediction": "p3.getCategories().add(cat2);",
      "raw_prediction": "\tp3.getCategories().add(cat2);",
      "es": 0.9310344827586207,
      "em": false,
      "passed": false
    },
    {
      "index": 1173,
      "groundtruth": "System.out.println(user2.getName() +\" is updated to \" + customer.getName());",
      "prediction": "System.out.println(\"User is updated.\");",
      "raw_prediction": "    System.out.println(\"User is updated.\");",
      "es": 0.4605263157894737,
      "em": false,
      "passed": false
    },
    {
      "index": 1174,
      "groundtruth": ".out.println(user2.getName() +\" is updated to \" + customer.getName());",
      "prediction": ".out.println(\"User is updated.\");",
      "raw_prediction": ".out.println(\"User is updated.\");",
      "es": 0.41428571428571426,
      "em": false,
      "passed": false
    },
    {
      "index": 1175,
      "groundtruth": "p3.getCategories().add(cat3);",
      "prediction": "p3.getCategories().add(cat1);",
      "raw_prediction": "\tp3.getCategories().add(cat1);",
      "es": 0.9655172413793104,
      "em": false,
      "passed": false
    },
    {
      "index": 1176,
      "groundtruth": "p4.getCategories().add(cat3);",
      "prediction": "p4.getCategories().add(cat2);",
      "raw_prediction": "\tp4.getCategories().add(cat2);",
      "es": 0.9655172413793104,
      "em": false,
      "passed": false
    },
    {
      "index": 1177,
      "groundtruth": ", p1.getPrice());",
      "prediction": ", p1.getPrice());",
      "raw_prediction": ", p1.getPrice());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1178,
      "groundtruth": "setSurName(customer.getSurName());",
      "prediction": "setSurname(customer.getSurname());",
      "raw_prediction": "setSurname(customer.getSurname());",
      "es": 0.9411764705882353,
      "em": false,
      "passed": false
    },
    {
      "index": 1179,
      "groundtruth": "2, p5.getPrice());",
      "prediction": "1, p5.getPrice());",
      "raw_prediction": "1, p5.getPrice());",
      "es": 0.9444444444444444,
      "em": false,
      "passed": false
    },
    {
      "index": 1180,
      "groundtruth": "userToUpdate.setBirthYear(customer.getBirthYear());",
      "prediction": "userToUpdate.setBirthDate(customer.getBirthDate());",
      "raw_prediction": "userToUpdate.setBirthDate(customer.getBirthDate());",
      "es": 0.8431372549019608,
      "em": false,
      "passed": false
    },
    {
      "index": 1181,
      "groundtruth": "setTc(customer.getTc());",
      "prediction": "setNationalityId(customer.getNationalityId());",
      "raw_prediction": "setNationalityId(customer.getNationalityId());\n                userToUpdate.setPhoneNumber(customer.getPhoneNumber());\n                userToUpdate.setAddress(customer.getAddress());\n                userToUpdate.setCreditCardNumber(customer.getCreditCardNumber());\n                userToUpdate.setCreditCardExpirationDate",
      "es": 0.4347826086956522,
      "em": false,
      "passed": false
    },
    {
      "index": 1182,
      "groundtruth": ", p3, 2, p3.getPrice());",
      "prediction": ", p2, 2, p2.getPrice());",
      "raw_prediction": ", p2, 2, p2.getPrice());",
      "es": 0.9166666666666666,
      "em": false,
      "passed": false
    },
    {
      "index": 1183,
      "groundtruth": "p5.getCategories().add(cat2);",
      "prediction": "p5.getCategories().add(cat2);",
      "raw_prediction": "\tp5.getCategories().add(cat2);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1184,
      "groundtruth": "(ClientCommandInternals.executeCommand(command)) {",
      "prediction": "(ClientCommandInternals.executeCommand(command))",
      "raw_prediction": "(ClientCommandInternals.executeCommand(command)) {",
      "es": 0.96,
      "em": false,
      "passed": false
    },
    {
      "index": 1185,
      "groundtruth": "ClientCommandInternals.finalizeInit();",
      "prediction": "ClientCommandInternals.setActiveDispatcher(commandDispatcher);        // Add",
      "raw_prediction": " ClientCommandInternals.setActiveDispatcher(commandDispatcher);        // Add the commands to the vanilla dispatcher for completion.\n        // It's done here because both the server and the client commands have\n        // to be in the same dispatcher and completion",
      "es": 0.4078947368421053,
      "em": false,
      "passed": false
    },
    {
      "index": 1186,
      "groundtruth": "ClientCommandInternals.getActiveDispatcher();",
      "prediction": "ClientCommandInternals.getActiveDispatcher();",
      "raw_prediction": "ClientCommandInternals.getActiveDispatcher();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1187,
      "groundtruth": "activeDispatcher.register(ClientCommandManager.literal(API_COMMAND_NAME).then(help));",
      "prediction": "activeDispatcher.getRoot();",
      "raw_prediction": "activeDispatcher.getRoot();",
      "es": 0.2941176470588235,
      "em": false,
      "passed": false
    },
    {
      "index": 1188,
      "groundtruth": "register(ClientCommandManager.literal(SHORT_API_COMMAND_NAME).redirect(mainNode));",
      "prediction": "register(mainNode);",
      "raw_prediction": "register(mainNode);\n            activeDispatcher.register(ClientCommandManager.literal(SHORT_API_COMMAND_NAME).redirect(mainNode));",
      "es": 0.23170731707317072,
      "em": false,
      "passed": false
    },
    {
      "index": 1189,
      "groundtruth": "LiteralArgumentBuilder<FabricClientCommandSource> help = ClientCommandManager.literal(\"help\");",
      "prediction": "LiteralArgumentBuilder<FabricClientCommandSource> help = ClientCommandManager.literal(\"help\");",
      "raw_prediction": " LiteralArgumentBuilder<FabricClientCommandSource> help = ClientCommandManager.literal(\"help\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1190,
      "groundtruth": "HelpCommandAccessor.getFailedException().create();",
      "prediction": "new CommandSyntaxException(HelpCommandAccessor.getUnknownCommandException()",
      "raw_prediction": "new CommandSyntaxException(HelpCommandAccessor.getUnknownCommandException(), Text.empty());",
      "es": 0.33333333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 1191,
      "groundtruth": ") + (int) type.getAbilityScoreIncrease(type.getSubRace()).get(\"intelligence\");",
      "prediction": ") + (int) type.getAbilityScoreIncrease(type.getSubRace()).get(\"intelligence\");",
      "raw_prediction": ") + (int) type.getAbilityScoreIncrease(type.getSubRace()).get(\"intelligence\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1192,
      "groundtruth": "type.getSubRace();",
      "prediction": "type.getSubRace();",
      "raw_prediction": "type.getSubRace();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1193,
      "groundtruth": "type.getSubRace()).containsKey(\"strength\")){",
      "prediction": "type.getSubRace()).containsKey(",
      "raw_prediction": "type.getSubRace()).containsKey(\"strength\")){",
      "es": 0.7045454545454546,
      "em": false,
      "passed": false
    },
    {
      "index": 1194,
      "groundtruth": "getModifier(stats.getStrength()) + (int) type.getAbilityScoreIncrease(type.getSubRace()).get(\"strength\");",
      "prediction": "getModifier(stats.getStrength()) + (int) type.getAbilityScoreIncrease(type.getSubRace()).get(\"strength\");",
      "raw_prediction": "getModifier(stats.getStrength()) + (int) type.getAbilityScoreIncrease(type.getSubRace()).get(\"strength\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1195,
      "groundtruth": "type.getSpeed();",
      "prediction": "type.getSpeed();",
      "raw_prediction": "type.getSpeed();\n\t}\n\n\tpublic int getArmorClass(){\n\t\treturn type.getArmorClass();\n\t}\n\n\tpublic int getHitPoints(){\n\t\treturn type.getHitPoints();\n\t}\n\n\tpublic int getHitDice(){\n\t\treturn type.getHitDice",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1196,
      "groundtruth": "stats.getModifier(stats.getCharisma());",
      "prediction": "stats.getModifier(stats.getCharisma());",
      "raw_prediction": "stats.getModifier(stats.getCharisma());\n\t\t\tdefault:\n\t\t\t\treturn 0;\n\t\t}\n\t}\n\n\tpublic int getAbilityScoreIncrease(String stat){\n\t\tswitch (stat.toLowerCase()){\n\t\t\tcase \"strength\":\n\t\t\t\tif (type.getAbilityScore",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1197,
      "groundtruth": "stats.getModifier(stats.getStrength());",
      "prediction": "stats.getModifier(stats.getStrength());",
      "raw_prediction": "stats.getModifier(stats.getStrength());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1198,
      "groundtruth": "return stats.getSavingThrow(stats.getStrength(), true);",
      "prediction": "return stats.getSavingThrow(stats.getStrength(), true);",
      "raw_prediction": "return stats.getSavingThrow(stats.getStrength(), true);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1199,
      "groundtruth": "stats.getCharisma(), false);",
      "prediction": "stats.getCharisma(), true);",
      "raw_prediction": "stats.getCharisma(), true);",
      "es": 0.8571428571428572,
      "em": false,
      "passed": false
    },
    {
      "index": 1200,
      "groundtruth": "return stats.getSavingThrow(stats.getDexterity(), false);",
      "prediction": "return stats.getSavingThrow(stats.getDexterity(), true);",
      "raw_prediction": "return stats.getSavingThrow(stats.getDexterity(), true);",
      "es": 0.9298245614035088,
      "em": false,
      "passed": false
    },
    {
      "index": 1201,
      "groundtruth": "(stats.getIntelligence(), true);",
      "prediction": "(stats.getIntelligence(), true);",
      "raw_prediction": "(stats.getIntelligence(), true);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1202,
      "groundtruth": "readResult, \"selectApdu with AID: \" + Utils.bytesToHex(command));",
      "prediction": "readResult, \"selectApdu command: \" + Utils.bytesToHex(command));",
      "raw_prediction": "readResult, \"selectApdu command: \" + Utils.bytesToHex(command));",
      "es": 0.8769230769230769,
      "em": false,
      "passed": false
    },
    {
      "index": 1203,
      "groundtruth": "writeToUiAppend(readResult, \"select CC: \" + Utils.bytesToHex(command));",
      "prediction": "writeToUiAppend(readResult, \"select CC command: \" + Utils.bytesToHex(command));",
      "raw_prediction": "writeToUiAppend(readResult, \"select CC command: \" + Utils.bytesToHex(command));",
      "es": 0.8987341772151899,
      "em": false,
      "passed": false
    },
    {
      "index": 1204,
      "groundtruth": "readResult, \"selectApdu response: \" + Utils.bytesToHex(responseSelect));",
      "prediction": "readResult, \"selectApdu with AID response: \" + Utils.bytesToHex(responseSelect));",
      "raw_prediction": "readResult, \"selectApdu with AID response: \" + Utils.bytesToHex(responseSelect));",
      "es": 0.8888888888888888,
      "em": false,
      "passed": false
    },
    {
      "index": 1205,
      "groundtruth": "(\"sendBinaryFromCc response: \" + Utils.bytesToHex(responseSendBinaryFromCc));",
      "prediction": "(\"responseSendBinaryFromCc: \" + Utils.bytesToHex(responseSendBinaryFromCc));",
      "raw_prediction": "(\"responseSendBinaryFromCc: \" + Utils.bytesToHex(responseSendBinaryFromCc));",
      "es": 0.7792207792207793,
      "em": false,
      "passed": false
    },
    {
      "index": 1206,
      "groundtruth": "System.out.println(\"capabilityContainerHeader: \" + Utils.bytesToHex(capabilityContainerHeader));",
      "prediction": "writeToUiAppend(readResult, \"capabilityContainerHeader: \" + Utils.bytesToHex(capabilityContainerHeader));",
      "raw_prediction": "writeToUiAppend(readResult, \"capabilityContainerHeader: \" + Utils.bytesToHex(capabilityContainerHeader));",
      "es": 0.780952380952381,
      "em": false,
      "passed": false
    },
    {
      "index": 1207,
      "groundtruth": "(\"responseSelect: \" + Utils.bytesToHex(responseSelect));",
      "prediction": "(\"responseSelect: \" + Utils.bytesToHex(responseSelect));",
      "raw_prediction": "(\"responseSelect: \" + Utils.bytesToHex(responseSelect));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1208,
      "groundtruth": ",\"ndefLen: \" + Utils.bytesToHex(ndefLen) + \" len (dec): \" + ndefLenInt);",
      "prediction": ", \"ndefLen (dec): \" + ndefLenInt + \" data: \" + Utils.bytesToHex(ndefLen));",
      "raw_prediction": ", \"ndefLen (dec): \" + ndefLenInt + \" data: \" + Utils.bytesToHex(ndefLen));\n                System.out.println(\"ndefLen: \" + ndefLenInt);\n",
      "es": 0.32432432432432434,
      "em": false,
      "passed": false
    },
    {
      "index": 1209,
      "groundtruth": "writeToUiAppend(readResult, \"responseSelect length: \" + responseSelectCc.length + \" data: \" + Utils.bytesToHex(responseSelectCc));",
      "prediction": "writeToUiAppend(readResult, \"responseSelectCc length: \" + responseSelectCc.length + \" data: \" + Utils.bytesToHex(responseSelectCc));",
      "raw_prediction": "writeToUiAppend(readResult, \"responseSelectCc length: \" + responseSelectCc.length + \" data: \" + Utils.bytesToHex(responseSelectCc));",
      "es": 0.9848484848484849,
      "em": false,
      "passed": false
    },
    {
      "index": 1210,
      "groundtruth": "= \"00b000\" + Utils.bytesToHex(cmdLenNew);",
      "prediction": "= \"00b00000\" + ndefLenIntRequest;",
      "raw_prediction": "= \"00b00000\" + ndefLenIntRequest;",
      "es": 0.3902439024390244,
      "em": false,
      "passed": false
    },
    {
      "index": 1211,
      "groundtruth": "] cmdLenNew = Utils.convertIntToByteArray(ndefLenIntRequest, 2);",
      "prediction": "] cmdLenNew = new byte[2];",
      "raw_prediction": "] cmdLenNew = new byte[2];\n                cmdLenNew[0] = (byte)(ndefLenIntRequest >> 8);\n     cmdLenNew[1] = (byte)(ndefLenIntRequest & 0xFF",
      "es": 0.328125,
      "em": false,
      "passed": false
    },
    {
      "index": 1212,
      "groundtruth": "writeToUiAppend(readResult,\"ndefLen new (dec): \" + ndefLenIntRequest + \" data: \" + Utils.bytesToHex(cmdLenNew) );",
      "prediction": "writeToUiAppend(readResult,\"cmdLenNew: \" + Utils.bytesToHex(cmdLenNew));",
      "raw_prediction": "writeToUiAppend(readResult,\"cmdLenNew: \" + Utils.bytesToHex(cmdLenNew));",
      "es": 0.6106194690265487,
      "em": false,
      "passed": false
    },
    {
      "index": 1213,
      "groundtruth": "if (!Utils.isSucceed(responseSelect)) {",
      "prediction": "// check if responseSelect is 90 00",
      "raw_prediction": "// check if responseSelect is 90 00\n                if (!Utils.isSucceed(responseSelect)) {",
      "es": 0.3076923076923077,
      "em": false,
      "passed": false
    },
    {
      "index": 1214,
      "groundtruth": "Utils.getTimestamp();",
      "prediction": "Calendar.getInstance().getTime();",
      "raw_prediction": " Calendar.getInstance().getTime();",
      "es": 0.303030303030303,
      "em": false,
      "passed": false
    },
    {
      "index": 1215,
      "groundtruth": "] cmdLen = Utils.hexStringToByteArray(sendReadBinaryNlen);",
      "prediction": "] ndefLenBytes = Arrays.copyOfRange(responseSendBinaryNlen, 2, 4);",
      "raw_prediction": "] ndefLenBytes = Arrays.copyOfRange(responseSendBinaryNlen, 2, 4);\n                writeToUiAppend(readResult,\"ndefLenBytes: \" + Utils.bytesToHex(ndefLenBytes));\n",
      "es": 0.3484848484848485,
      "em": false,
      "passed": false
    },
    {
      "index": 1216,
      "groundtruth": "(\"messageType\", identifierBroadcastMessageEntry.getValue().getMessageType().getID().toString());",
      "prediction": "(\"messageType\", identifierBroadcastMessageEntry.getValue().getMessageType().getId());",
      "raw_prediction": "(\"messageType\", identifierBroadcastMessageEntry.getValue().getMessageType().getId());",
      "es": 0.875,
      "em": false,
      "passed": false
    },
    {
      "index": 1217,
      "groundtruth": "resource.canBeOpened() ) {",
      "prediction": "resource.exists",
      "raw_prediction": "resource.exists() ) {",
      "es": 0.3846153846153846,
      "em": false,
      "passed": false
    },
    {
      "index": 1218,
      "groundtruth": "<Path> pathStream = pathParser.streamFilesMatchingAntPath(antPattern)) {",
      "prediction": "<Path> pathStream = pathParser.parseAn",
      "raw_prediction": "<Path> pathStream = pathParser.parseAntPath( antPattern )) {",
      "es": 0.48611111111111116,
      "em": false,
      "passed": false
    },
    {
      "index": 1219,
      "groundtruth": "circularDefinitionPreventer.throwCircularDefinitionException();",
      "prediction": "throw new IllegalArgumentException(\"Circular definition detected: \" + key);",
      "raw_prediction": "throw new IllegalArgumentException(\"Circular definition detected: \" + key);",
      "es": 0.3466666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 1220,
      "groundtruth": "( InputStream stream = resource.getInputStream() ) {",
      "prediction": "( InputStream stream = resource.getInputStream() )",
      "raw_prediction": "( InputStream stream = resource.getInputStream() ) {",
      "es": 0.9615384615384616,
      "em": false,
      "passed": false
    },
    {
      "index": 1221,
      "groundtruth": "newValue = getPropertyValue(newKey, mavenProjectProperties, environment, circularDefinitionPreventer.cloneWithAdditionalKey(key));",
      "prediction": "newValue = fromPropertiesThenSystemThenEnvironment(newKey, mavenProjectProperties, environment);",
      "raw_prediction": "newValue = fromPropertiesThenSystemThenEnvironment(newKey, mavenProjectProperties, environment);\n            circularDefinitionPreventer.markPropertyAsVisited(key);\n            circularDefinitionPreventer.markPropertyAsVisited(newKey);\n",
      "es": 0.3615384615384616,
      "em": false,
      "passed": false
    },
    {
      "index": 1222,
      "groundtruth": "circularDefinitionPreventer.isPropertyAlreadyVisited(key)) {",
      "prediction": "circularDefinitionPreventer.isCi",
      "raw_prediction": "circularDefinitionPreventer.isCircularDefinition(key)) {",
      "es": 0.5166666666666666,
      "em": false,
      "passed": false
    },
    {
      "index": 1223,
      "groundtruth": "size = queryResult.getValueListSize();",
      "prediction": "size = queryResult.size();",
      "raw_prediction": "size = queryResult.size();",
      "es": 0.6842105263157895,
      "em": false,
      "passed": false
    },
    {
      "index": 1224,
      "groundtruth": "(file.getStatements().size() != 1) {",
      "prediction": "(file.getStatements().size() != 1)",
      "raw_prediction": "(file.getStatements().size() != 1) {",
      "es": 0.9444444444444444,
      "em": false,
      "passed": false
    },
    {
      "index": 1225,
      "groundtruth": ".putAll(queryResult.getStringMappings(j, localMax));",
      "prediction": ".put(\"batch_start\", j);",
      "raw_prediction": ".put(\"batch_start\", j);\n            localValues.put(\"batch_end\", localMax - 1);",
      "es": 0.23076923076923073,
      "em": false,
      "passed": false
    },
    {
      "index": 1226,
      "groundtruth": "statement.getId(),\n                Status.FAILURE,\n                e.getMessage() + \";",
      "prediction": "statement.getId(),\n                Status.FAILURE,\n                /*",
      "raw_prediction": " statement.getId(),\n                Status.FAILURE,\n                /* payload= */ e.getMessage() + \"\\n\" + e.getClass().getName() + \"\\n\" + e.getMessage()\n                    + \"\\n\" + e.getCause() + \"\\n\"",
      "es": 0.7790697674418605,
      "em": false,
      "passed": false
    },
    {
      "index": 1227,
      "groundtruth": "statement.getId(), StringUtils.format(statement.getStatement(), parameterValues));",
      "prediction": "statement.getId(),",
      "raw_prediction": "  statement.getId(),\n          statement.getStatement().replaceAll(\"\\\\$\\\\{([^}]+)\\\\}\", v -> {\n                Object value = parameterValues.get(v);\n                if (value != null) {\n                  return value.toString();\n                } else",
      "es": 0.2195121951219512,
      "em": false,
      "passed": false
    },
    {
      "index": 1228,
      "groundtruth": "if (queryResult == null || queryResult.containsEmptyResultColumnOnly()) {",
      "prediction": "if (queryResult.getValueListSize() == 0)",
      "raw_prediction": " if (queryResult.getValueListSize() == 0) { // Empty result set.",
      "es": 0.31506849315068497,
      "em": false,
      "passed": false
    },
    {
      "index": 1229,
      "groundtruth": "+ statement.getId());",
      "prediction": "+ statement.getId());",
      "raw_prediction": "+ statement.getId());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1230,
      "groundtruth": "file.getId(),\n            Status.FAILURE,\n            /* payload= */ e.getMessage() + \";",
      "prediction": "file.getId(),\n            Status.FAILURE,\n            /*",
      "raw_prediction": "file.getId(),\n            Status.FAILURE,\n            /* payload= */ e.getMessage());\n        LOGGER.error(\"Exception stack trace:",
      "es": 0.6363636363636364,
      "em": false,
      "passed": false
    },
    {
      "index": 1231,
      "groundtruth": "readValue(StringUtils.replaceEnvVars(new File(filePath)), objectType);",
      "prediction": "readValue(readFile(filePath), objectType);",
      "raw_prediction": "readValue(readFile(filePath), objectType);\n  }\n\n  /**\n   * Reads the YAML file and replaces all environment variables (if present). Creates and returns an\n   * object of `objectType` class.\n   */\n  public static <",
      "es": 0.5857142857142856,
      "em": false,
      "passed": false
    },
    {
      "index": 1232,
      "groundtruth": "getId(), StringUtils.format(statement.getStatement(), parameterValues));",
      "prediction": "getId(),",
      "raw_prediction": "getId(),\n        statement.getStatement().replaceAll(\"\\\\$\\\\{([^}]+)\\\\}\", (m) -> {\n          String key = m.group(1);\n          Object value = parameterValues.get(key);\n          if (value == null)",
      "es": 0.11111111111111116,
      "em": false,
      "passed": false
    },
    {
      "index": 1233,
      "groundtruth": "(prompt.getOption()) {",
      "prediction": "(prompt.getOption(), prompt.getIndex())",
      "raw_prediction": "(prompt.getOption(), prompt.getIndex()) {",
      "es": 0.5128205128205128,
      "em": false,
      "passed": false
    },
    {
      "index": 1234,
      "groundtruth": "().anyMatch(prompt -> prompt.getOption().equals(o.getOption()))) {",
      "prediction": "().anyMatch(prompt -> prompt.getOption().equals(o.getOption()) || Objects.equals(prompt.getIndex(),",
      "raw_prediction": "().anyMatch(prompt -> prompt.getOption().equals(o.getOption()) || Objects.equals(prompt.getIndex(), o.getIndex()))) {",
      "es": 0.6363636363636364,
      "em": false,
      "passed": false
    },
    {
      "index": 1235,
      "groundtruth": "(rowIndex).setSnippet(str);",
      "prediction": "(rowIndex()).setSnippet(str);",
      "raw_prediction": "(rowIndex()).setSnippet(str);",
      "es": 0.9310344827586207,
      "em": false,
      "passed": false
    },
    {
      "index": 1236,
      "groundtruth": "stringStringHashMap.put(prompt.getOption(), prompt.getSnippet());",
      "prediction": "stringStringHashMap.put(prompt.getOption(), prompt.getTo());",
      "raw_prediction": "stringStringHashMap.put(prompt.getOption(), prompt.getTo());",
      "es": 0.8923076923076922,
      "em": false,
      "passed": false
    },
    {
      "index": 1237,
      "groundtruth": ".put(prompt.getOption(), prompt.getSnippet());",
      "prediction": ".put(prompt.getOption(), prompt.getTo());",
      "raw_prediction": ".put(prompt.getOption(), prompt.getTo());",
      "es": 0.8478260869565217,
      "em": false,
      "passed": false
    },
    {
      "index": 1238,
      "groundtruth": "stream().anyMatch(prompt -> prompt.getOption().equals(o.getOption()))) {",
      "prediction": "stream().anyMatch(prompt -> prompt.getOption().equals(o.getOption()) || Objects.equals(prompt.getIndex(), o.",
      "raw_prediction": "stream().anyMatch(prompt -> prompt.getOption().equals(o.getOption()) || Objects.equals(prompt.getIndex(), o.getIndex()))) {",
      "es": 0.6481481481481481,
      "em": false,
      "passed": false
    },
    {
      "index": 1239,
      "groundtruth": "prompts.get(rowIndex).setOption(str);",
      "prediction": "prompts.get(rowIndex).setOption(str);",
      "raw_prediction": "prompts.get(rowIndex).setOption(str);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1240,
      "groundtruth": "actionManager.unregisterAction(idPrefix + prompt.getOption());",
      "prediction": "actionManager.unregisterAction(idPrefix + prompt.getOption());",
      "raw_prediction": "    actionManager.unregisterAction(idPrefix + prompt.getOption());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1241,
      "groundtruth": "appSettingsStorage.unregisterActions();",
      "prediction": "if (!isModified()) {",
      "raw_prediction": "if (!isModified()) {\n            return;\n        }",
      "es": 0.1282051282051282,
      "em": false,
      "passed": false
    },
    {
      "index": 1242,
      "groundtruth": "(idPrefix + prompt.getOption());",
      "prediction": "(idPrefix + prompt.getOption());",
      "raw_prediction": "(idPrefix + prompt.getOption());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1243,
      "groundtruth": "ddlFileStatements = SQLParser.getStatements(ddlFile).getStatements();",
      "prediction": "ddlFileStatements =",
      "raw_prediction": "ddlFileStatements =\n          SQLParser.getStatements(ddlFile).getStatements().stream()\n              .map(s -> StringUtils.replaceParameters(s, parameterValues))\n              .collect(Collectors.toUnmodifiableList());",
      "es": 0.2753623188405797,
      "em": false,
      "passed": false
    },
    {
      "index": 1244,
      "groundtruth": "connection.execute(currentQuery);",
      "prediction": "connection.execute(currentQuery);",
      "raw_prediction": " connection.execute(currentQuery);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1245,
      "groundtruth": "task.getTimeTravelPhaseId() != null) {",
      "prediction": "task.getTimeTravelPha",
      "raw_prediction": "task.getTimeTravelPhaseId() != null) {",
      "es": 0.5526315789473684,
      "em": false,
      "passed": false
    },
    {
      "index": 1246,
      "groundtruth": ".forName(task.getCustomTaskExecutor())\n                .getDeclaredConstructor(\n                    SQLTelemetryRegistry.class, String.class, CustomTaskExecutorArguments.class);",
      "prediction": ".forName(task.getCustomTaskExecutor()).getConstructor();",
      "raw_prediction": ".forName(task.getCustomTaskExecutor()).getConstructor();",
      "es": 0.3163841807909604,
      "em": false,
      "passed": false
    },
    {
      "index": 1247,
      "groundtruth": "+ task.getId());",
      "prediction": "+ task.getId());",
      "raw_prediction": "+ task.getId());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1248,
      "groundtruth": "\"Unable to load custom task class: \" + task.getCustomTaskExecutor(), e);",
      "prediction": "\"Failed to create custom task executor: \" + task.getCustomTaskExecutor(),",
      "raw_prediction": "    \"Failed to create custom task executor: \" + task.getCustomTaskExecutor(),\n                e);",
      "es": 0.726027397260274,
      "em": false,
      "passed": false
    },
    {
      "index": 1249,
      "groundtruth": "form.getSettings().clone();",
      "prediction": "form.exportForm(state);",
      "raw_prediction": "form.exportForm(state);",
      "es": 0.40740740740740744,
      "em": false,
      "passed": false
    },
    {
      "index": 1250,
      "groundtruth": ", eventInfo.getEndTime()));",
      "prediction": ", Instant.now()));",
      "raw_prediction": ", Instant.now()));\n          phaseIdToEndTime.put(phase.getId(), eventInfo.getEndTime());\n        }\n\n        // Log end-to-end execution of experiment.\n        writeExperimentEvent(\n            repetitionStartTime,\n            config.getId(),\n            Status.SUCCESS,\n           ",
      "es": 0.40740740740740744,
      "em": false,
      "passed": false
    },
    {
      "index": 1251,
      "groundtruth": "if (phase.getSessions().size() > maxConcurrentSessions) {",
      "prediction": "if (phase.getSessions().size() > maxConcurrentSessions)",
      "raw_prediction": "if (phase.getSessions().size() > maxConcurrentSessions) {",
      "es": 0.9649122807017544,
      "em": false,
      "passed": false
    },
    {
      "index": 1252,
      "groundtruth": "writeTaskEvent(taskStartTime, task.getId(), Status.FAILURE);",
      "prediction": "writeTaskEvent(taskStartTime, task.getId(), Status.FAILURE);",
      "raw_prediction": " writeTaskEvent(taskStartTime, task.getId(), Status.FAILURE);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1253,
      "groundtruth": ".info(\"Running \" + phase.getId() + \" phase...\");",
      "prediction": ".info(\"Executing phase: {}\", phase.getId());",
      "raw_prediction": ".info(\"Executing phase: {}\", phase.getId());",
      "es": 0.41666666666666663,
      "em": false,
      "passed": false
    },
    {
      "index": 1254,
      "groundtruth": "return instance.getState();",
      "prediction": "return instance.getAppSettings();",
      "raw_prediction": "return instance.getAppSettings();",
      "es": 0.7272727272727273,
      "em": false,
      "passed": false
    },
    {
      "index": 1255,
      "groundtruth": "phase.getId(),\n              ChronoUnit.SECONDS.between(phaseStartTime, eventInfo.getEndTime()));",
      "prediction": "phase.getId(),\n              ChronoUnit.SECONDS.between(phaseStartTime, Instant.now()));",
      "raw_prediction": " phase.getId(),\n              ChronoUnit.SECONDS.between(phaseStartTime, Instant.now()));",
      "es": 0.8350515463917526,
      "em": false,
      "passed": false
    },
    {
      "index": 1256,
      "groundtruth": ", session.getId(), Status.FAILURE);",
      "prediction": ", session.getId(), Status.FAILURE);",
      "raw_prediction": ", session.getId(), Status.FAILURE);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1257,
      "groundtruth": "String reportFileName = contributionFilesService.getFileName(start, finish);",
      "prediction": "String reportFileName = contributionFilesService.generateReportFileName(start, finish);",
      "raw_prediction": "String reportFileName = contributionFilesService.generateReportFileName(start, finish);",
      "es": 0.8735632183908046,
      "em": false,
      "passed": false
    },
    {
      "index": 1258,
      "groundtruth": "experiment.execute();",
      "prediction": "experiment.run();",
      "raw_prediction": "experiment.run();",
      "es": 0.7142857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 1259,
      "groundtruth": "settings = AppSettingsStorage.getInstance().getState();",
      "prediction": "settings = AppSettingsStorage.getInstance(project).getSettings();",
      "raw_prediction": "settings = AppSettingsStorage.getInstance(project).getSettings();",
      "es": 0.8,
      "em": false,
      "passed": false
    },
    {
      "index": 1260,
      "groundtruth": "fdcFileMapper.processRequest(files.toArray(new String[0]), getFileName(start, finish));",
      "prediction": "fdcFileMapper.mapToXml(files, start, finish);",
      "raw_prediction": "fdcFileMapper.mapToXml(files, start, finish);",
      "es": 0.4252873563218391,
      "em": false,
      "passed": false
    },
    {
      "index": 1261,
      "groundtruth": "(next.getOption()));",
      "prediction": "(next.getKey()));",
      "raw_prediction": "(next.getKey()));",
      "es": 0.7,
      "em": false,
      "passed": false
    },
    {
      "index": 1262,
      "groundtruth": ", phase.getId(), Status.SUCCESS);",
      "prediction": ", phase.getId(), Status.RUNNING);",
      "raw_prediction": ", phase.getId(), Status.RUNNING);\n            try {\n              executor.invokeAll(threads); // wait for all threads to complete\n              writePhaseEvent(phaseStartTime, phase.getId(), Status.SUCCESS);",
      "es": 0.8181818181818181,
      "em": false,
      "passed": false
    },
    {
      "index": 1263,
      "groundtruth": "<String> contributionFiles = contributionFilesService.getFiles(start, finish);",
      "prediction": "<File> contributionFiles = contributionFilesService.getContributionFiles(start, finish);",
      "raw_prediction": "<File> contributionFiles = contributionFilesService.getContributionFiles(start, finish);",
      "es": 0.8068181818181819,
      "em": false,
      "passed": false
    },
    {
      "index": 1264,
      "groundtruth": "(task.getCustomTaskExecutor() == null) {",
      "prediction": "(task.getCustomTaskExecutor() == null)",
      "raw_prediction": "(task.getCustomTaskExecutor() == null) {",
      "es": 0.95,
      "em": false,
      "passed": false
    },
    {
      "index": 1265,
      "groundtruth": "contributionFilesService.processFiles(contributionFiles, start, finish, reportFileName);",
      "prediction": "contributionFilesService.generateReport(contributionFiles, reportFileName);",
      "raw_prediction": "contributionFilesService.generateReport(contributionFiles, reportFileName);",
      "es": 0.6818181818181819,
      "em": false,
      "passed": false
    },
    {
      "index": 1266,
      "groundtruth": "(Prompt.of(\"\u6b65\u9aa4\u6ce8\u91ca\", \"\u5e2e\u6211\u7ed9\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\u7684\u5173\u952e\u6b65\u9aa4\u6dfb\u52a0\u6ce8\u91ca\uff0c\u8fd4\u56de\u4f18\u5316\u540e\u7684\u5b8c\u6574\u4ee3\u7801\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{",
      "prediction": "(Prompt.of(\"Optimize\", \"help me optimize the following code snippet and return the optimized code. without adding any",
      "raw_prediction": "(Prompt.of(\"Optimize\", \"help me optimize the following code snippet and return the optimized code. without adding any additional information except for the optimized code. Here is the code snippet:{query}\"));\n        prompts.add(Prompt.of(\"",
      "es": 0.1367521367521367,
      "em": false,
      "passed": false
    },
    {
      "index": 1267,
      "groundtruth": "( getFdcValue(DateUtils.convertXmlGregorianToString(o),true));",
      "prediction": "String.format(\"%s\", DateUtils.convertXMLGregorianCalendarToString(o));",
      "raw_prediction": "String.format(\"%s\", DateUtils.convertXMLGregorianCalendarToString(o));",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 1268,
      "groundtruth": "return fdcFilesService.processFiles(contributionFiles, start, end);",
      "prediction": "return fdcFilesService.processFiles",
      "raw_prediction": "return fdcFilesService.processFiles(\n            contributionFiles,\n            start,\n            end,\n            fdcFilesService.getFileName(start, end)\n        );",
      "es": 0.5223880597014925,
      "em": false,
      "passed": false
    },
    {
      "index": 1269,
      "groundtruth": "Prompt.of(\"emptyForYou\", \"balabala{",
      "prediction": "Prompt.of(\"\u89e3\u91ca\", \"\u5e2e\u6211\u589e\u5f3a\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u5427\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{",
      "raw_prediction": "Prompt.of(\"\u89e3\u91ca\", \"\u5e2e\u6211\u589e\u5f3a\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u5427\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{",
      "es": 0.19672131147540983,
      "em": false,
      "passed": false
    },
    {
      "index": 1270,
      "groundtruth": "form.getGptKey();",
      "prediction": "form.getRootPane();",
      "raw_prediction": "form.getRootPane();",
      "es": 0.631578947368421,
      "em": false,
      "passed": false
    },
    {
      "index": 1271,
      "groundtruth": "add(Prompt.of(\"Readable\", \"help me enhance the readability of the following code snippet, without adding any additional information except for the optimized code. Here is the code snippet:{",
      "prediction": "add(Prompt.of(\"Optimize\", \"\u8bf7\u4f18\u5316\u4ee5\u4e0b\u4ee3\u7801\u7247\u6bb5\uff0c\u5e76\u8fd4\u56de\u4f18\u5316\u540e\u7684\u4ee3\u7801\u3002\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\u3002\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{query}\"));",
      "raw_prediction": "add(Prompt.of(\"Optimize\", \"\u8bf7\u4f18\u5316\u4ee5\u4e0b\u4ee3\u7801\u7247\u6bb5\uff0c\u5e76\u8fd4\u56de\u4f18\u5316\u540e\u7684\u4ee3\u7801\u3002\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\u3002\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{query}\"));\n        prompts.add(Prompt.of(\"Code Review",
      "es": 0.12698412698412698,
      "em": false,
      "passed": false
    },
    {
      "index": 1272,
      "groundtruth": ".add(Prompt.of(\"List Steps\", \"help me add comments to the key steps of the following code snippet and return the optimized code with comments. without adding any additional information except for the optimized code. Here is the code snippet:{",
      "prediction": ".add(Prompt.of(\"Optimize\", \"\u5e2e\u6211\u4f18\u5316\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\uff0c\u8fd4\u56de\u4f18\u5316\u540e\u7684\u5b8c\u6574\u4ee3\u7801\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{",
      "raw_prediction": ".add(Prompt.of(\"Optimize\", \"\u5e2e\u6211\u4f18\u5316\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\uff0c\u8fd4\u56de\u4f18\u5316\u540e\u7684\u5b8c\u6574\u4ee3\u7801\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{",
      "es": 0.10330578512396693,
      "em": false,
      "passed": false
    },
    {
      "index": 1273,
      "groundtruth": ".add(Prompt.of(\"Explain\", \"\u5e2e\u6211\u589e\u5f3a\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u5427\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{",
      "prediction": ".add(Prompt.of(\"Step Comments\", \"help me add comments to the key steps of the following code snippet and r",
      "raw_prediction": ".add(Prompt.of(\"Step Comments\", \"help me add comments to the key steps of the following code snippet and return the optimized code with comments. without adding any additional information except for the optimized code. Here is the code snippet:{query",
      "es": 0.2075471698113207,
      "em": false,
      "passed": false
    },
    {
      "index": 1274,
      "groundtruth": "(AppSettings.getProject(), \"Test connection failed!\", NotificationType.ERROR);",
      "prediction": "(AppSettings.getProject(), \"Test connection failed!ChatGPT error:\" + GPTClient.toString(choices), NotificationType.ER",
      "raw_prediction": "(AppSettings.getProject(), \"Test connection failed!ChatGPT error:\" + GPTClient.toString(choices), NotificationType.ERROR);",
      "es": 0.5811965811965811,
      "em": false,
      "passed": false
    },
    {
      "index": 1275,
      "groundtruth": "String, String> stringStringMap = prompts.asMap();",
      "prediction": "String, String> stringStrin",
      "raw_prediction": "String, String> stringStringMap = prompts.getPrompts().stream().collect(Collectors.toMap(Prompt::getOption, Prompt::getPrompt));",
      "es": 0.54,
      "em": false,
      "passed": false
    },
    {
      "index": 1276,
      "groundtruth": "gptKeyLink = ActionLinkUtils.newActionLink(\"https://platform.openai.com/account/api-keys\");",
      "prediction": "testConnMsg = new JTextField();",
      "raw_prediction": "testConnMsg = new JTextField();",
      "es": 0.1648351648351648,
      "em": false,
      "passed": false
    },
    {
      "index": 1277,
      "groundtruth": "notifyMessage(AppSettings.getProject(), \"Test connection successfully!ChatGPT answer:\" + GPTClient.toString(choices), NotificationType.INFORMATION);",
      "prediction": "notifyMessage(AppSettings.getProject(), \"Test connection successful!\", NotificationType.INFORMATION);",
      "raw_prediction": "notifyMessage(AppSettings.getProject(), \"Test connection successful!\", NotificationType.INFORMATION);",
      "es": 0.6824324324324325,
      "em": false,
      "passed": false
    },
    {
      "index": 1278,
      "groundtruth": "= original.clone();",
      "prediction": "= original.clone();",
      "raw_prediction": "= original.clone();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1279,
      "groundtruth": "campaign.getGames().get(id));",
      "prediction": "campaign.getGame());",
      "raw_prediction": "campaign.getGame());\n                updateToCampaign.setPrice(campaign.getPrice());",
      "es": 0.6896551724137931,
      "em": false,
      "passed": false
    },
    {
      "index": 1280,
      "groundtruth": "append(\"\\n    <string name=\\\"\" + singleStrings.getId() + \"\\\">\" + singleStrings.getValue() + \"</string>\");",
      "prediction": "append(\"\\n    <string name=\\\"\" + singleStrings.getId() + \"\\\">\" + singleStrings.getValue() + \"</string>\");",
      "raw_prediction": "append(\"\\n    <string name=\\\"\" + singleStrings.getId() + \"\\\">\" + singleStrings.getValue() + \"</string>\");\n                oldContent = oldContent.replace(0, oldContent.length(), newContent); //\u66ff\u6362\u6587\u4ef6\u5185\u5bb9\n               ",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1281,
      "groundtruth": "setBirthYear(customer.getBirthYear());",
      "prediction": "setBirthDate(customer.getBirthDate());",
      "raw_prediction": "setBirthDate(customer.getBirthDate());",
      "es": 0.7894736842105263,
      "em": false,
      "passed": false
    },
    {
      "index": 1282,
      "groundtruth": "println(user2.getName() +\" is updated to \" + customer.getName());",
      "prediction": "println(\"User found.\");",
      "raw_prediction": "println(\"User found.\");",
      "es": 0.2615384615384615,
      "em": false,
      "passed": false
    },
    {
      "index": 1283,
      "groundtruth": "if(campaign1.getId()==id){",
      "prediction": "if(campaign1.getId() == id)",
      "raw_prediction": "if(campaign1.getId() == id){",
      "es": 0.8888888888888888,
      "em": false,
      "passed": false
    },
    {
      "index": 1284,
      "groundtruth": "\"\\\"=\\\"\" + string.getValue() + \"\\\";",
      "prediction": "\"\\\" = \\\"\" + string.getValue() + \"\\\";\\n\");",
      "raw_prediction": "\"\\\" = \\\"\" + string.getValue() + \"\\\";\\n\");\n                        }\n                    }\n               } else {\n                   \"+string.getId() + \"\\\" = \\\"\" + string.getValue() + \"\\\";\\n\");\n                   } else {\n                   \"+string.getId()",
      "es": 0.8292682926829268,
      "em": false,
      "passed": false
    },
    {
      "index": 1285,
      "groundtruth": "(campaign.getId() == id){",
      "prediction": "(campaign.getId()==id)",
      "raw_prediction": "(campaign.getId()==id){",
      "es": 0.88,
      "em": false,
      "passed": false
    },
    {
      "index": 1286,
      "groundtruth": "!(customer.getGames().contains(game))){",
      "prediction": "!customer.getGames().",
      "raw_prediction": "!customer.getGames().contains(game)){",
      "es": 0.5384615384615384,
      "em": false,
      "passed": false
    },
    {
      "index": 1287,
      "groundtruth": "while (iterator.temProximo()) {",
      "prediction": "while (iterator.hasNext())",
      "raw_prediction": "while (iterator.hasNext()) {",
      "es": 0.6451612903225806,
      "em": false,
      "passed": false
    },
    {
      "index": 1288,
      "groundtruth": ".println(playlist1.execute());",
      "prediction": ".println(playlist1.toString());",
      "raw_prediction": ".println(playlist1.toString());\n\n\t\tPlaylistIterator iterator = playlist1.createIterator();\n\n\t\twhile (iterator.temProximo()) {\n\n\t\t\tPlaylistItem playlistItem = iterator.proximo();\n\t\t\tString content = playlistItem.execute();\n\n\t\t\tSystem.out",
      "es": 0.7419354838709677,
      "em": false,
      "passed": false
    },
    {
      "index": 1289,
      "groundtruth": "listener.onChangeMode();",
      "prediction": "listener.update();",
      "raw_prediction": "\tlistener.update();",
      "es": 0.5833333333333333,
      "em": false,
      "passed": false
    },
    {
      "index": 1290,
      "groundtruth": "= playlistItem.execute();",
      "prediction": "= playlistItem.getContent();",
      "raw_prediction": "= playlistItem.getContent();",
      "es": 0.75,
      "em": false,
      "passed": false
    },
    {
      "index": 1291,
      "groundtruth": "playlist1.insert(playlist2);",
      "prediction": "playlist1.insert(playlist2);",
      "raw_prediction": "\tplaylist1.insert(playlist2);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1292,
      "groundtruth": "iterator = player.createIterator();",
      "prediction": "iterator = player.createIterator();",
      "raw_prediction": "iterator = player.createIterator();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1293,
      "groundtruth": "playlistItem = iterator.proximo();",
      "prediction": "playlistItem = iterator.proximo();",
      "raw_prediction": "playlistItem = iterator.proximo();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1294,
      "groundtruth": "(\"\\n::::::::::::\\nModo: %s, est\u00e1 ativado!\\n\", player.getMode());",
      "prediction": "(\"Modo de reprodu\u00e7\u00e3o alterado para %s\\n\", this.player.getMode());",
      "raw_prediction": "(\"Modo de reprodu\u00e7\u00e3o alterado para %s\\n\", this.player.getMode());\n\t}\n\n\t@Override\n\tpublic void onPlay() {\n\t\tSystem.out.println(\"Reproduzindo...\");\n\t}\n\n\t@Override\n\tpublic void onPause()",
      "es": 0.3846153846153846,
      "em": false,
      "passed": false
    },
    {
      "index": 1295,
      "groundtruth": "player.createIterator();",
      "prediction": "player.createIterator();",
      "raw_prediction": "player.createIterator();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1296,
      "groundtruth": "MessageUtils.showNotify(\"\u8bf7\u9009\u62e9\u5e03\u5c40\u6587\u4ef6\");",
      "prediction": "return;",
      "raw_prediction": "return;\n            }\n\n            if (file.getParent().getName().endsWith(\"_s600dp\")) {",
      "es": 0.08571428571428574,
      "em": false,
      "passed": false
    },
    {
      "index": 1297,
      "groundtruth": "tokens.addAll(Lexer.tokenize(s));",
      "prediction": "tokens.addAll(Lexer.tokenize(s));",
      "raw_prediction": " tokens.addAll(Lexer.tokenize(s));\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1298,
      "groundtruth": "+ \": \"+ selectedEngineer.getFullNameWithDiscipline() + \": \" + comment + \"#@\";",
      "prediction": "+ \": \" + selectedEngineer.getFullNameWithDiscipline() + \": \" + comment + \"#@\";",
      "raw_prediction": "+ \": \" + selectedEngineer.getFullNameWithDiscipline() + \": \" + comment + \"#@\";",
      "es": 0.9871794871794872,
      "em": false,
      "passed": false
    },
    {
      "index": 1299,
      "groundtruth": "> foundCollision = collisionsRepository.findByIdFetchEngineer(id);",
      "prediction": "> foundCollision = collisionsRepository.findByIdFetchEngineer(id);",
      "raw_prediction": "> foundCollision = collisionsRepository.findByIdFetchEngineer(id);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1300,
      "groundtruth": "originalEngineer = engineersService.findOne(id);",
      "prediction": "originalEngineer = engineersService.findOne(id);",
      "raw_prediction": "originalEngineer = engineersService.findOne(id);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1301,
      "groundtruth": "\"engineers\", engineersService.findAll());",
      "prediction": "\"engineers\", engineersService.findAll());",
      "raw_prediction": "\"engineers\", engineersService.findAll());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1302,
      "groundtruth": ".findByIdFetchCollisions(engineerDetails.getEngineer().getId());",
      "prediction": ".findEngineerById(engineerDetails.getId());",
      "raw_prediction": "    .findEngineerById(engineerDetails.getId());",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 1303,
      "groundtruth": "Optional<Collision> optionalCollision = collisionsRepository.findByIdFetchEngineer(id);",
      "prediction": "Optional<Collision> optionalCollision = collisionsRepository.findById(id);",
      "raw_prediction": "Optional<Collision> optionalCollision = collisionsRepository.findById(id);",
      "es": 0.8505747126436781,
      "em": false,
      "passed": false
    },
    {
      "index": 1304,
      "groundtruth": "= engineersService.findByIdFetchCollisions(id);",
      "prediction": "= engineersService.findOne(id);",
      "raw_prediction": "= engineersService.findOne(id);",
      "es": 0.6170212765957447,
      "em": false,
      "passed": false
    },
    {
      "index": 1305,
      "groundtruth": "\"engineer\", engineersService.findOne(id));",
      "prediction": "\"engineer\", engineersService.findOne(id));",
      "raw_prediction": "\"engineer\", engineersService.findOne(id));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1306,
      "groundtruth": "collisionsRepository.findByIdFetchEngineer(id).ifPresent(\n                collision -> {",
      "prediction": "collisionsRepository.deleteById(id);",
      "raw_prediction": "collisionsRepository.deleteById(id);\n        collisionsRepository.deleteByProjectBase(project_id);\n    }\n\n    @Transactional\n    public void unassign(int id) {\n        collisionsRepository.findByIdFetchEngineer(id).ifPresent(\n                collision -> {",
      "es": 0.31818181818181823,
      "em": false,
      "passed": false
    },
    {
      "index": 1307,
      "groundtruth": "(engineerDAO.index());",
      "prediction": "();",
      "raw_prediction": "();\n        engineers.addAll(engineerDAO.findAll());",
      "es": 0.13636363636363635,
      "em": false,
      "passed": false
    },
    {
      "index": 1308,
      "groundtruth": "model.addAttribute(\"comments\", collision.getComments());",
      "prediction": "model.addAttribute(\"project\", projectService.findOne(project_id));",
      "raw_prediction": "model.addAttribute(\"project\", projectService.findOne(project_id));",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 1309,
      "groundtruth": "= collisionsService.findOneAndEngineer(id);",
      "prediction": "= collisionsService.findById(id);",
      "raw_prediction": "= collisionsService.findById(id);",
      "es": 0.6976744186046512,
      "em": false,
      "passed": false
    },
    {
      "index": 1310,
      "groundtruth": "(id, engineerDetails.getEngineer(), comment);",
      "prediction": "(id, comment, engineerDetails.getEngineer());",
      "raw_prediction": "(id, comment, engineerDetails.getEngineer());\n        return \"redirect:/projects/\" + project_id + \"/collisions/\" + id;\n    }\n\n    @PostMapping(\"/{id}/upload-report\")\n    public String uploadReport(@PathVariable(\"id",
      "es": 0.6,
      "em": false,
      "passed": false
    },
    {
      "index": 1311,
      "groundtruth": "Engineer> foundEngineer = engineersRepository.findByIdFetchCollisions(id);",
      "prediction": "Engineer> foundEngineer = engineersRepository.findById(id);",
      "raw_prediction": "Engineer> foundEngineer = engineersRepository.findById(id);",
      "es": 0.7972972972972973,
      "em": false,
      "passed": false
    },
    {
      "index": 1312,
      "groundtruth": "handle = getHandle(mapper.getLayout(target.getClass()));",
      "prediction": "handle = get.varHandle(MemoryLayout.PathElement.groupElement(model.name()));",
      "raw_prediction": "    handle = get.varHandle(MemoryLayout.PathElement.groupElement(model.name()));",
      "es": 0.4736842105263158,
      "em": false,
      "passed": false
    },
    {
      "index": 1313,
      "groundtruth": "mapper.getLayout(target.getClass()).byteOffset(MemoryLayout.PathElement.groupElement(model.name()));",
      "prediction": "mapper.offsetOf(model.name());",
      "raw_prediction": "mapper.offsetOf(model.name());",
      "es": 0.28,
      "em": false,
      "passed": false
    },
    {
      "index": 1314,
      "groundtruth": "var structDef = mapper.getOrDefineStruct(fieldType);",
      "prediction": "var structDef = mapper.getStructDef(fieldType);",
      "raw_prediction": "var structDef = mapper.getStructDef(fieldType);",
      "es": 0.7884615384615384,
      "em": false,
      "passed": false
    },
    {
      "index": 1315,
      "groundtruth": "instance.getCore().debug(\"Plugin is not setup / ProxyProtocol is off / Player is on DirectConnectWhitelist (return)\");",
      "prediction": "channel.getCore().debug(\"Player connected over IP (\" + channel.remoteAddress() + \") doesn't match to Neo-IPs (warning)\");",
      "raw_prediction": "channel.getCore().debug(\"Player connected over IP (\" + channel.remoteAddress() + \") doesn't match to Neo-IPs (warning)\");",
      "es": 0.3223140495867769,
      "em": false,
      "passed": false
    },
    {
      "index": 1316,
      "groundtruth": "instance.getCore().debug(\"Adding Handler...\");",
      "prediction": "instance.getCore().debug(\"Connecting started\");",
      "raw_prediction": "instance.getCore().debug(\"Connecting started\");\n",
      "es": 0.6595744680851063,
      "em": false,
      "passed": false
    },
    {
      "index": 1317,
      "groundtruth": ".getEventManager(), neoProtectVelocity.getLogger()));",
      "prediction": "));",
      "raw_prediction": "));\n    }\n\n    private void removePlayer(ConnectedPlayer player) {\n        Channel channel = player.getConnection().getChannel();\n        channel.eventLoop().submit(() -> channel.pipeline().remove(\"packetevents\"));",
      "es": 0.05660377358490565,
      "em": false,
      "passed": false
    },
    {
      "index": 1318,
      "groundtruth": "core.severe(exception.getMessage(), exception);",
      "prediction": "core.severe(exception.getMessage());",
      "raw_prediction": " core.severe(exception.getMessage());",
      "es": 0.7659574468085106,
      "em": false,
      "passed": false
    },
    {
      "index": 1319,
      "groundtruth": "instance.getCore().debug(\"Player connected over IP (\" + channel.remoteAddress() + \") doesn't match to Neo-IPs (warning)\");",
      "prediction": "instance.getCore().debug(\"Player has been kicked to direct connect server\");",
      "raw_prediction": "instance.getCore().debug(\"Player has been kicked to direct connect server\");",
      "es": 0.43442622950819676,
      "em": false,
      "passed": false
    },
    {
      "index": 1320,
      "groundtruth": "core.severe(\"Failed to load API-Key. Key is null or not valid\");",
      "prediction": "core.severe(\"Failed to load API-Key. Key is not valid\");",
      "raw_prediction": "core.severe(\"Failed to load API-Key. Key is not valid\");",
      "es": 0.875,
      "em": false,
      "passed": false
    },
    {
      "index": 1321,
      "groundtruth": "instance.getCore().severe(\"Cannot inject incoming channel \" + channel, ex);",
      "prediction": "instance.getCore().severe(\"Error: The server was unable to add the handler. Therefore we closed the channel.\", e",
      "raw_prediction": "instance.getCore().severe(\"Error: The server was unable to add the handler. Therefore we closed the channel.\", ex);",
      "es": 0.4196428571428571,
      "em": false,
      "passed": false
    },
    {
      "index": 1322,
      "groundtruth": "core.info(\"BackendID loaded successful '\" + backendID + \"'\");",
      "prediction": "core.info(\"BackendID loaded successful '\" + backendID + \"'\");",
      "raw_prediction": "core.info(\"BackendID loaded successful '\" + backendID + \"'\");\n        core.info(\"GeyserBackendID loaded successful '\" + geyserBackendID + \"'\");\n        core.info(\"GeyserserverIP loaded successful '\" + gey",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1323,
      "groundtruth": "core.severe(\"Failed to load GameshieldID. ID is null\");",
      "prediction": "core.severe(\"Failed to load GameshieldID. ID is null\");",
      "raw_prediction": "core.severe(\"Failed to load GameshieldID. ID is null\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1324,
      "groundtruth": "core.info(\"API-Key loaded successful '\" + \"******************************\" + APIKey.substring(32) + \"'\");",
      "prediction": "core.info(\"APIKey loaded successful '\" + APIKey + \"'\");",
      "raw_prediction": "core.info(\"APIKey loaded successful '\" + APIKey + \"'\");",
      "es": 0.5238095238095238,
      "em": false,
      "passed": false
    },
    {
      "index": 1325,
      "groundtruth": "core.info(\"GameshieldID loaded successful '\" + gameShieldID + \"'\");",
      "prediction": "core.info(\"GameshieldID loaded successful '\" + gameShieldID + \"'\");",
      "raw_prediction": " core.info(\"GameshieldID loaded successful '\" + gameShieldID + \"'\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1326,
      "groundtruth": ".equals(core.getRestAPI().getStatsServer())) {",
      "prediction": ".contains(\"https://api.neoprotect.net/v2\")",
      "raw_prediction": ".contains(\"https://api.neoprotect.net/v2\")) {",
      "es": 0.17391304347826086,
      "em": false,
      "passed": false
    },
    {
      "index": 1327,
      "groundtruth": "(Config.getAPIKey());",
      "prediction": "(Config.getInstance().getRestAPI().getApiK",
      "raw_prediction": "(Config.getInstance().getRestAPI().getApiKey());",
      "es": 0.3571428571428571,
      "em": false,
      "passed": false
    },
    {
      "index": 1328,
      "groundtruth": "instance.getCore().severe(\"Error: The server was unable to set the IP address from the 'HAProxyMessage'. Therefore we closed the channel.\", exception);",
      "prediction": "instance.getCore().severe(\"Failed to set the client address in the NetworkManager: \" + exception.getMessage());",
      "raw_prediction": "instance.getCore().severe(\"Failed to set the client address in the NetworkManager: \" + exception.getMessage());",
      "es": 0.4370860927152318,
      "em": false,
      "passed": false
    },
    {
      "index": 1329,
      "groundtruth": "instance.getCore().info(\"Proceeding with the server channel injection...\");",
      "prediction": "createServerChannelHandler();",
      "raw_prediction": " createServerChannelHandler();",
      "es": 0.2533333333333333,
      "em": false,
      "passed": false
    },
    {
      "index": 1330,
      "groundtruth": "instance.getCore().info(\"Late bind injection successful.\");",
      "prediction": "instance.getCore().info(\"Injection successful!\");",
      "raw_prediction": "    instance.getCore().info(\"Injection successful!\");",
      "es": 0.7966101694915254,
      "em": false,
      "passed": false
    },
    {
      "index": 1331,
      "groundtruth": "Reflection.getField(serverConnection.getClass(), List.class, i).get(serverConnection);",
      "prediction": "networkManagers.get(i);",
      "raw_prediction": "networkManagers.get(i);",
      "es": 0.18604651162790697,
      "em": false,
      "passed": false
    },
    {
      "index": 1332,
      "groundtruth": "instance.getCore().info(\"Delaying server channel injection due to late bind.\");",
      "prediction": "instance.getCore().info(\"Late bind detected! Attempting to inject the handler...\");",
      "raw_prediction": "instance.getCore().info(\"Late bind detected! Attempting to inject the handler...\");",
      "es": 0.49397590361445787,
      "em": false,
      "passed": false
    },
    {
      "index": 1333,
      "groundtruth": "this.instance.getCore().info(\"Found the server channel and added the handler. Injection successfully!\");",
      "prediction": "instance.getCore().debug(\"Successfully injected into channel \" + channel.remoteAddress());",
      "raw_prediction": "instance.getCore().debug(\"Successfully injected into channel \" + channel.remoteAddress());",
      "es": 0.375,
      "em": false,
      "passed": false
    },
    {
      "index": 1334,
      "groundtruth": "if (instance.getCore().isPlayerMaintainer(player.getUniqueId(), instance.getServer().getOnlineMode())) {",
      "prediction": "if (Config.isShowInfoOnLogin()) {",
      "raw_prediction": "if (Config.isShowInfoOnLogin()) {",
      "es": 0.1923076923076923,
      "em": false,
      "passed": false
    },
    {
      "index": 1335,
      "groundtruth": "instance.getCore().isPlayerMaintainer(player.getUniqueId(), instance.getProxy().getConfiguration().isOnlineMode())) {",
      "prediction": "instance.getCore().isSetup() && instance.getCore().getPlayer",
      "raw_prediction": "instance.getCore().isSetup() && instance.getCore().getPlayerInSetup().contains(player.getUniqueId())) {<|cursor|>",
      "es": 0.3931623931623932,
      "em": false,
      "passed": false
    },
    {
      "index": 1336,
      "groundtruth": ".forLanguageTag(Config.getLanguage()), new File(\"plugins/NeoProtect/languages/\"));",
      "prediction": ".ENGLISH);",
      "raw_prediction": ".ENGLISH);\n        localization.addLanguage(languageEN);\n        localization.addLanguage(languageDE);\n        localization.addLanguage(languageRU);\n        localization.addLanguage(languageUA);",
      "es": 0.04878048780487809,
      "em": false,
      "passed": false
    },
    {
      "index": 1337,
      "groundtruth": ").isPlayerMaintainer(player.getUniqueId(), instance.getProxy().getConfiguration().isOnlineMode())) {",
      "prediction": ").isSetup()) {",
      "raw_prediction": ").isSetup()) {",
      "es": 0.12,
      "em": false,
      "passed": false
    },
    {
      "index": 1338,
      "groundtruth": "\"NeoProtect\", \"NeoPlugin\", \"v\" + plugin.getPluginVersion(), VersionUtils.UpdateSetting.DISABLED).message();",
      "prediction": "plugin.getDescription().getVersion());",
      "raw_prediction": "plugin.getDescription().getVersion());\n        if (versionResult.getResult() != VersionUtils.Result.ResultType.SUCCESS) {\n            severe(\"NeoProtect detected an incompatible version of NeoProtect! Please update to the latest version.\");\n            plugin.getServer().shutdown();\n",
      "es": 0.2149532710280374,
      "em": false,
      "passed": false
    },
    {
      "index": 1339,
      "groundtruth": "return restAPIRequests.isSetup();",
      "prediction": "return playerInSetup.size() > 0;",
      "raw_prediction": "return playerInSetup.size() > 0;",
      "es": 0.36363636363636365,
      "em": false,
      "passed": false
    },
    {
      "index": 1340,
      "groundtruth": "(Config.isDebugMode()) ((Logger) LogManager.getLogger().logger).log(Level.SEVERE, output);",
      "prediction": "(isDebugRunning) {",
      "raw_prediction": "(isDebugRunning) {\n            LogManager.getLogger().log(Level.INFO, output);\n        } else {\n            LogManager.getLogger().log(Level.WARNING, output);\n        }",
      "es": 0.1333333333333333,
      "em": false,
      "passed": false
    },
    {
      "index": 1341,
      "groundtruth": "instance.getCore().getDebugPingResponses().put(player.getName(), new ArrayList<>());",
      "prediction": "map.put(player.getName(), new ArrayList<>());",
      "raw_prediction": " map.put(player.getName(), new ArrayList<>());",
      "es": 0.5238095238095238,
      "em": false,
      "passed": false
    },
    {
      "index": 1342,
      "groundtruth": "instance.getCore().getPingMap().remove(keepAliveResponseKey);",
      "prediction": "pingMap.remove(keepAliveResponseKey);",
      "raw_prediction": " pingMap.remove(keepAliveResponseKey);\n                 break;\n             }",
      "es": 0.5901639344262295,
      "em": false,
      "passed": false
    },
    {
      "index": 1343,
      "groundtruth": ".request(RequestType.GET_GAMESHIELD_BANDWIDTH, null, Config.getGameShieldID()).getResponseBodyObject();",
      "prediction": "class RestAPIRequests {",
      "raw_prediction": " class RestAPIRequests {\n\n    @SuppressWarnings(\"FieldCanBeLocal\")\n    private final String ipGetter = \"https://api4.my-ip.io/ip.json\";\n    @SuppressWarnings(\"FieldCanBeLocal\")\n    private final String pasteServer = \"https",
      "es": 0.10679611650485432,
      "em": false,
      "passed": false
    },
    {
      "index": 1344,
      "groundtruth": "POST_GAMESHIELD_BACKEND_UPDATE, requestBody, Config.getGameShieldID(),backendID).checkCode(200);",
      "prediction": "POST(RequestType.UPDATE_BACKEND, requestBody, backendID).checkCode(200);",
      "raw_prediction": "POST(RequestType.UPDATE_BACKEND, requestBody, backendID).checkCode(200);\n    }\n\n    public boolean updateFirewall(String ip, String mode) {\n        RequestBody requestBody = RequestBody.create(MediaType.parse(\"application/json\"), new",
      "es": 0.47916666666666663,
      "em": false,
      "passed": false
    },
    {
      "index": 1345,
      "groundtruth": "(isAPIInvalid(Config.getAPIKey())) {",
      "prediction": "class RestAPIManager",
      "raw_prediction": " class RestAPIManager {\n\n        private final Core core;\n        private final String baseURL = \"https://api.neoprotect.net/v1/\";\n        private final String subDirectory = \"/\";\n\n        public RestAPIManager(Core core) {\n           ",
      "es": 0.13888888888888884,
      "em": false,
      "passed": false
    },
    {
      "index": 1346,
      "groundtruth": ".request(RequestType.GET_GAMESHIELD_ISUNDERATTACK, null, Config.getGameShieldID()).getResponseBody().equals(\"true\");",
      "prediction": ".request(RequestType.GET_ATTACKS, null).checkCode(200);",
      "raw_prediction": ".request(RequestType.GET_ATTACKS, null).checkCode(200);\n    }\n\n    public boolean isUnderAttack() {\n        return rest.request(RequestType.GET_ATTACKS, null).getResponseBodyObject().getBoolean(\"underAttack\");",
      "es": 0.3879310344827587,
      "em": false,
      "passed": false
    },
    {
      "index": 1347,
      "groundtruth": "Config.getGameShieldID());",
      "prediction": "Config.getGameShieldID()).checkCode(200);",
      "raw_prediction": "Config.getGameShieldID()).checkCode(200);",
      "es": 0.6341463414634146,
      "em": false,
      "passed": false
    },
    {
      "index": 1348,
      "groundtruth": "if (Config.isUpdateIP()) {",
      "prediction": "void run() {",
      "raw_prediction": " void run() {",
      "es": 0.2692307692307693,
      "em": false,
      "passed": false
    },
    {
      "index": 1349,
      "groundtruth": "setProxyProtocol(Config.isProxyProtocol());",
      "prediction": "core.info(\"API is valid!\");",
      "raw_prediction": "core.info(\"API is valid!\");",
      "es": 0.16279069767441856,
      "em": false,
      "passed": false
    },
    {
      "index": 1350,
      "groundtruth": "Config.addAutoUpdater(getPlan().equalsIgnoreCase(\"Basic\"));",
      "prediction": "core.info(\"API is valid!\");",
      "raw_prediction": "core.info(\"API is valid!\");",
      "es": 0.18644067796610164,
      "em": false,
      "passed": false
    },
    {
      "index": 1351,
      "groundtruth": "Config.getGameShieldID()).getCode();",
      "prediction": "Config.getGameShieldID()).getCode();",
      "raw_prediction": " Config.getGameShieldID()).getCode();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1352,
      "groundtruth": "core.severe(\"Gameshield is not valid! Please run /neoprotect setgameshield to set the gameshield\");",
      "prediction": "core.severe(\"Gameshield is not valid! Please run /neoprotect setup to set the gameshield\");",
      "raw_prediction": " core.severe(\"Gameshield is not valid! Please run /neoprotect setup to set the gameshield\");",
      "es": 0.898989898989899,
      "em": false,
      "passed": false
    },
    {
      "index": 1353,
      "groundtruth": "core.severe(\"API is not valid! Please run /neoprotect setup to set the API Key\");",
      "prediction": "core.severe(\"API key is not valid! Please run /neoprotect setapikey to set the api key\");",
      "raw_prediction": " core.severe(\"API key is not valid! Please run /neoprotect setapikey to set the api key\");",
      "es": 0.8539325842696629,
      "em": false,
      "passed": false
    },
    {
      "index": 1354,
      "groundtruth": "null, Config.getGameShieldID()).getResponseBodyArray();",
      "prediction": "null, Config.getGameShieldID()).getResponseBodyArray();",
      "raw_prediction": "null, Config.getGameShieldID()).getResponseBodyArray();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1355,
      "groundtruth": "Config.setGeyserBackendID(args[1]);",
      "prediction": "Config.setBackendID(args[1]);",
      "raw_prediction": " Config.setBackendID(args[1]);\n",
      "es": 0.8285714285714285,
      "em": false,
      "passed": false
    },
    {
      "index": 1356,
      "groundtruth": "Config.setBackendID(args[1]);",
      "prediction": "Config.setJavaBackendID(args[1]);",
      "raw_prediction": "Config.setJavaBackendID(args[1]);",
      "es": 0.8787878787878788,
      "em": false,
      "passed": false
    },
    {
      "index": 1357,
      "groundtruth": "int response = instance.getCore().getRestAPI().toggle(args[1]);",
      "prediction": "int response = instance.getCore().getRestAPI().toggle(args[1], args[0].toUpperCase());",
      "raw_prediction": " int response = instance.getCore().getRestAPI().toggle(args[1], args[0].toUpperCase());",
      "es": 0.7325581395348837,
      "em": false,
      "passed": false
    },
    {
      "index": 1358,
      "groundtruth": "getBackends().stream().noneMatch(e -> e.compareById(backendID));",
      "prediction": "!new ResponseManager(rest.callRequest(rest.defaultBuilder().url(rest.getBaseURL() + rest.getSubD",
      "raw_prediction": "!new ResponseManager(rest.callRequest(rest.defaultBuilder().url(rest.getBaseURL() + rest.getSubDirectory(RequestType.GET_BACKEND_INFO, backendID)).build())).checkCode(200);",
      "es": 0.17708333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 1359,
      "groundtruth": "= instance.getCore().getRestAPI().getTraffic();",
      "prediction": "});",
      "raw_prediction": "        });",
      "es": 0.04255319148936165,
      "em": false,
      "passed": false
    },
    {
      "index": 1360,
      "groundtruth": "Config.setGameShieldID(args[1]);",
      "prediction": "Config.setGameshieldID(args[1]);",
      "raw_prediction": "Config.setGameshieldID(args[1]);\n",
      "es": 0.96875,
      "em": false,
      "passed": false
    },
    {
      "index": 1361,
      "groundtruth": "instance.sendMessage(sender, \"\u00a77\u00a7l----- \u00a7bFirewall (\" + args[0].toUpperCase() + \")\u00a77\u00a7l -----\");",
      "prediction": "if (isViaConsole) {",
      "raw_prediction": "if (isViaConsole) {\n                instance.sendMessage(sender, localization.get(Locale.getDefault(), \"console.command\"));\n            } else {",
      "es": 0.09473684210526312,
      "em": false,
      "passed": false
    },
    {
      "index": 1362,
      "groundtruth": "Config.setAPIKey(msg);",
      "prediction": "if (instance.getCore().getRestAPI().isApiKey",
      "raw_prediction": " if (instance.getCore().getRestAPI().isApiKeyInvalid(msg)) {\n            instance.sendMessage(sender, localization.get(locale, \"apikey.invalid\"));\n            return;\n        }",
      "es": 0.18181818181818177,
      "em": false,
      "passed": false
    },
    {
      "index": 1363,
      "groundtruth": "(instance.getPluginType() == NeoProtectPlugin.PluginType.SPIGOT) {",
      "prediction": "(args.length == 1) {",
      "raw_prediction": "(args.length == 1) {",
      "es": 0.18181818181818177,
      "em": false,
      "passed": false
    },
    {
      "index": 1364,
      "groundtruth": "instance.getCore().severe(ex.getMessage(), ex);",
      "prediction": "instance.sendMessage(sender, localization.get(locale, \"err.debug\"));",
      "raw_prediction": " instance.sendMessage(sender, localization.get(locale, \"err.debug\"));\n                    }",
      "es": 0.3382352941176471,
      "em": false,
      "passed": false
    },
    {
      "index": 1365,
      "groundtruth": "response = instance.getCore().getRestAPI().updateFirewall(ip, action, mode);",
      "prediction": "response = instance.getCore().getRestAPI().toggleFirewall(ip, action, mode);",
      "raw_prediction": "response = instance.getCore().getRestAPI().toggleFirewall(ip, action, mode);",
      "es": 0.9342105263157895,
      "em": false,
      "passed": false
    },
    {
      "index": 1366,
      "groundtruth": "instance.getCore().getDirectConnectWhitelist().add(args[1]);",
      "prediction": "instance.sendMessage(sender, localization.get(locale, \"command.directconnectwhitelist.adde",
      "raw_prediction": " instance.sendMessage(sender, localization.get(locale, \"command.directconnectwhitelist.added\", args[1]));",
      "es": 0.3111111111111111,
      "em": false,
      "passed": false
    },
    {
      "index": 1367,
      "groundtruth": "(\"general.ProxyPlugins\", instance.getPlugins());",
      "prediction": "(\"general.proxyPlayers\", stats.getOnlinePlayers());",
      "raw_prediction": "(\"general.proxyPlayers\", stats.getOnlinePlayers());\n            configuration.set(\"general.proxyCps\", stats.getCps());\n            configuration.set(\"general.proxyLatency\", stats.getLatency());\n            configuration.set(\"general.proxyUptime\", stats.get",
      "es": 0.607843137254902,
      "em": false,
      "passed": false
    },
    {
      "index": 1368,
      "groundtruth": "if (instance.getCore().getRestAPI().isAPIInvalid(msg)) {",
      "prediction": "if (msg.equalsIgnoreCase(\"help\"))",
      "raw_prediction": " if (msg.equalsIgnoreCase(\"help\")) {\n            showHelp();\n            return;\n        }\n\n        if (msg.equalsIgnoreCase(\"setup\")) {\n            setup();\n            return;\n        }\n\n        if (msg.equalsIgnoreCase(\"ipanic\")) {\n            iPanic(args",
      "es": 0.2321428571428571,
      "em": false,
      "passed": false
    },
    {
      "index": 1369,
      "groundtruth": "instance.getCore().setDebugRunning(false);",
      "prediction": "instance.sendMessage(sender, localization.get(locale, \"debug.cancelled\"));",
      "raw_prediction": "instance.sendMessage(sender, localization.get(locale, \"debug.cancelled\"));\n                return;\n            }\n         }\n        }\n\n        private void debugTool(String[] args) {\n        if (instance.getPluginType() == NeoProtectPlugin.PluginType.SPI",
      "es": 0.29729729729729726,
      "em": false,
      "passed": false
    },
    {
      "index": 1370,
      "groundtruth": "instance.getCore().isDebugRunning()) {",
      "prediction": "instance.getCore().is",
      "raw_prediction": "instance.getCore().isDebugRunning()) {",
      "es": 0.5526315789473684,
      "em": false,
      "passed": false
    },
    {
      "index": 1371,
      "groundtruth": "instance.getCore().getPlayerInSetup().add(sender);",
      "prediction": "if (instance.getCore().getRestAPI().isAPIInvalid(msg))",
      "raw_prediction": "\n        if (instance.getCore().getRestAPI().isAPIInvalid(msg)) {\n            instance.sendMessage(sender, localization.get(locale, \"apikey.invalid\"));\n            return;\n        }\n\n        Config.setAPIKey(msg);\n\n        instance.sendMessage(sender,",
      "es": 0.4444444444444444,
      "em": false,
      "passed": false
    },
    {
      "index": 1372,
      "groundtruth": ", instance.getCore().getRestAPI().togglePanicMode() ? \"utils.activated\" : \"utils.deactivated\")));",
      "prediction": ".getTimestamp())));",
      "raw_prediction": ".getTimestamp())));\n        } else {\n            instance.sendMessage(sender, localization.get(locale, \"usage.ipanic\"));",
      "es": 0.14432989690721654,
      "em": false,
      "passed": false
    },
    {
      "index": 1373,
      "groundtruth": "instance.sendMessage(sender, \"\u00a77\u00a7l--------- \u00a7bAnalytics \u00a77\u00a7l---------\");",
      "prediction": "if (instance.getPluginType() == NeoProtectPlugin.PluginType.SPIGOT)",
      "raw_prediction": "if (instance.getPluginType() == NeoProtectPlugin.PluginType.SPIGOT) {\n            instance.sendMessage(sender, localization.get(locale, \"analytics.spigot\"));\n            return;\n        }\n",
      "es": 0.16666666666666663,
      "em": false,
      "passed": false
    },
    {
      "index": 1374,
      "groundtruth": "instance.getCore().getDebugPingResponses().clear();",
      "prediction": "instance.sendMessage(sender, localization.get(locale, \"debug.finished.second",
      "raw_prediction": "instance.sendMessage(sender, localization.get(locale, \"debug.finished.second\") + \" (took \" + (System.currentTimeMillis() - startTime) + \"ms)\");\n                        } catch (Exception ex) {\n                        instance.getCore().severe(ex.getMessage(),",
      "es": 0.26315789473684215,
      "em": false,
      "passed": false
    },
    {
      "index": 1375,
      "groundtruth": "instance.sendMessage(sender, \"\u00a7cCan not found setting '\" + args[1] + \"'\");",
      "prediction": "instance.sendMessage(sender, localization.get(locale, \"err.upgrade-plan\"));",
      "raw_prediction": " instance.sendMessage(sender, localization.get(locale, \"err.upgrade-plan\"));",
      "es": 0.5066666666666666,
      "em": false,
      "passed": false
    },
    {
      "index": 1376,
      "groundtruth": "instance.getCore().setDebugRunning(true);",
      "prediction": "instance.getCore().setDebugRunning(true);",
      "raw_prediction": "instance.getCore().setDebugRunning(true);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1377,
      "groundtruth": "instance.sendMessage(sender, \" - /np analytics\");",
      "prediction": "instance.sendMessage(sender, \" - /np analytics\");",
      "raw_prediction": "instance.sendMessage(sender, \" - /np analytics\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1378,
      "groundtruth": "List<Gameshield> gameshieldList = instance.getCore().getRestAPI().getGameshields();",
      "prediction": "List<Gameshield> gameshieldList = instance.getCore().getRestAPI().getGameshields();",
      "raw_prediction": "List<Gameshield> gameshieldList = instance.getCore().getRestAPI().getGameshields();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1379,
      "groundtruth": "instance.getCore().getDebugPingResponses().keySet().forEach((playerName -> {",
      "prediction": "configuration.set(\"general.proxyLatency\", stats.getProxyLatency());",
      "raw_prediction": "configuration.set(\"general.proxyLatency\", stats.getProxyLatency());\n                         configuration.set(\"general.proxyUptime\", stats.getProxyUptime());\n                         configuration.set(\"general.proxyPlayers\", stats.getProxyPlayers());\n                         configuration.set(\"general.proxy",
      "es": 0.11842105263157898,
      "em": false,
      "passed": false
    },
    {
      "index": 1380,
      "groundtruth": "instance.getCore().getRestAPI().isGameshieldInvalid(args[1])) {",
      "prediction": "instance.getCore().getRestAPI().i",
      "raw_prediction": "instance.getCore().getRestAPI().isGameshieldInvalid(args[1])) {",
      "es": 0.5238095238095238,
      "em": false,
      "passed": false
    },
    {
      "index": 1381,
      "groundtruth": "List<DebugPingResponse> list = instance.getCore().getDebugPingResponses().get(playerName);",
      "prediction": "List<DebugPingResponse> list = instance.getCore().getDebugPingResponses().get(playerName);",
      "raw_prediction": " List<DebugPingResponse> list = instance.getCore().getDebugPingResponses().get(playerName);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1382,
      "groundtruth": "instance.getCore().getRestAPI().getAnalytics().keySet().forEach(ak -> {",
      "prediction": "analytics.keySet().forEach(ak -> {",
      "raw_prediction": "analytics.keySet().forEach(ak -> {",
      "es": 0.47887323943661975,
      "em": false,
      "passed": false
    },
    {
      "index": 1383,
      "groundtruth": "instance.sendMessage(sender, \" - /np toggle (option)\");",
      "prediction": "instance.sendMessage(sender, \" - /np toggle (setting) (true/false)\");",
      "raw_prediction": "instance.sendMessage(sender, \" - /np toggle (setting) (true/false)\");\n        instance.sendMessage(sender, \" - /np whitelist (add/remove) (ip)\");",
      "es": 0.7391304347826086,
      "em": false,
      "passed": false
    },
    {
      "index": 1384,
      "groundtruth": "backendList = instance.getCore().getRestAPI().getBackends();",
      "prediction": "backendList = instance.getCore().getRestAPI().getBackends();",
      "raw_prediction": "backendList = instance.getCore().getRestAPI().getBackends();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1385,
      "groundtruth": "instance.sendMessage(sender, \" - /np debugTool (cancel / amount)\");",
      "prediction": "instance.sendMessage(sender, \" - /np whitelist (add/remove) (ip)\");",
      "raw_prediction": " instance.sendMessage(sender, \" - /np whitelist (add/remove) (ip)\");\n        instance.sendMessage(sender, \" - /np debugtool\");",
      "es": 0.6417910447761195,
      "em": false,
      "passed": false
    },
    {
      "index": 1386,
      "groundtruth": "instance.sendMessage(sender, \" - /np setup\");",
      "prediction": "instance.sendMessage(sender, \" - /np setup\");",
      "raw_prediction": "instance.sendMessage(sender, \" - /np setup\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1387,
      "groundtruth": "instance.getCore().getPlayerInSetup().remove(sender)) {",
      "prediction": "!instance.getCore().getRestAP",
      "raw_prediction": "!instance.getCore().getRestAPI().testCredentials()) {\n            instance.sendMessage(sender, localization.get(locale, \"err.backend.test\"));\n            return;\n        }\n\n        instance.getCore().getRestAPI().testCredentials();\n        instance.getCore",
      "es": 0.4181818181818182,
      "em": false,
      "passed": false
    },
    {
      "index": 1388,
      "groundtruth": "instance.getCore().getRestAPI().testCredentials();",
      "prediction": "if (instance.getCore().getPlayerInSetup().remove(sender))",
      "raw_prediction": " if (instance.getCore().getPlayerInSetup().remove(sender)) {\n            instance.sendMessage(sender, localization.get(locale, \"setup.finished\"));\n        }\n    }\n\n    private void bedrockBackendSelector() {\n        List<Backend> backendList =",
      "es": 0.49122807017543857,
      "em": false,
      "passed": false
    },
    {
      "index": 1389,
      "groundtruth": "instance.sendMessage(sender, \" - /np whitelist (add/remove) (ip)\");",
      "prediction": "instance.sendMessage(sender, \" - /np whitelist (add/remove) (ip)\");",
      "raw_prediction": "instance.sendMessage(sender, \" - /np whitelist (add/remove) (ip)\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1390,
      "groundtruth": "instance.sendMessage(sender, \" - /np directConnectWhitelist (ip)\");",
      "prediction": "instance.sendMessage(sender, \" - /np setgameshield (select)\");",
      "raw_prediction": "instance.sendMessage(sender, \" - /np setgameshield (select)\");\n        instance.sendMessage(sender, \" - /np setbackend (select)\");\n        instance.sendMessage(sender, \" - /np setgeyserbackend (select)\");\n        instance",
      "es": 0.7014925373134329,
      "em": false,
      "passed": false
    },
    {
      "index": 1391,
      "groundtruth": "instance.sendMessage(sender, \" - /np setgameshield [id]\");",
      "prediction": "instance.sendMessage(sender, \" - /np setgameshield [id]\");",
      "raw_prediction": "instance.sendMessage(sender, \" - /np setgameshield [id]\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1392,
      "groundtruth": "if(backend.isGeyser())continue;",
      "prediction": "if(!backend.isJava())continue;",
      "raw_prediction": " if(!backend.isJava())continue;",
      "es": 0.7741935483870968,
      "em": false,
      "passed": false
    },
    {
      "index": 1393,
      "groundtruth": ".get(locale, \"hover.backend\", backend.getIp(), backend.getPort(), backend.getId()));",
      "prediction": ".get(locale, \"hover.backend\", backend.getIp(), backend.getPort(), backend.getId()));",
      "raw_prediction": ".get(locale, \"hover.backend\", backend.getIp(), backend.getPort(), backend.getId()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1394,
      "groundtruth": "gameshield.getName(), gameshield.getId()));",
      "prediction": "gameshield.getName(), gameshield.getId()));",
      "raw_prediction": "gameshield.getName(), gameshield.getId()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1395,
      "groundtruth": "Component.text(core.getPrefix() + text);",
      "prediction": "TextComponent.text(text);",
      "raw_prediction": "TextComponent.text(text);\n\n        if (publicKey != null)\n            msg = msg.clickEvent(ClickEvent.clickEvent(ClickEvent.Action.OPEN_URL, publicKey));",
      "es": 0.42500000000000004,
      "em": false,
      "passed": false
    },
    {
      "index": 1396,
      "groundtruth": "set(\"general.pluginVersion\", stats.getPluginVersion());",
      "prediction": "set(\"general.proxyName\", instance.getCore().getRestAPI().getServerName());",
      "raw_prediction": "set(\"general.proxyName\", instance.getCore().getRestAPI().getServerName());\n                        configuration.set(\"general.proxyVersion\", instance.getCore().getRestAPI().getServerVersion());\n                        configuration.set(\"general.proxyPlugins\", instance.get",
      "es": 0.4054054054054054,
      "em": false,
      "passed": false
    },
    {
      "index": 1397,
      "groundtruth": "\"general.ProxyVersion\", stats.getServerVersion());",
      "prediction": "\"general.ProxyPlayers\", stats.getOnlinePlayers());",
      "raw_prediction": "\"general.ProxyPlayers\", stats.getOnlinePlayers());\n",
      "es": 0.62,
      "em": false,
      "passed": false
    },
    {
      "index": 1398,
      "groundtruth": ", stats.getServerName());",
      "prediction": ", stats.getProxyName());",
      "raw_prediction": ", stats.getProxyName());",
      "es": 0.8,
      "em": false,
      "passed": false
    },
    {
      "index": 1399,
      "groundtruth": "), gameshield.getId()));",
      "prediction": "), gameshield.getDescription()));",
      "raw_prediction": "), gameshield.getDescription()));",
      "es": 0.6666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 1400,
      "groundtruth": "product.setDescription(\"\u042d\u0442\u043e \u0432\u0430\u0448\u0435 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435!\");",
      "prediction": "product.setDescription(\"\u042d\u0442\u043e \u0432\u0430\u0448\u0435 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435!\");",
      "raw_prediction": "product.setDescription(\"\u042d\u0442\u043e \u0432\u0430\u0448\u0435 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435!\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1401,
      "groundtruth": "setEmail(user.getEmail());",
      "prediction": "setPassword(user.getPassword());",
      "raw_prediction": "setPassword(user.getPassword());",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 1402,
      "groundtruth": "existUser.setRole(user.getRole());",
      "prediction": "existUser.setRole(user.getRole());",
      "raw_prediction": "existUser.setRole(user.getRole());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1403,
      "groundtruth": "(user.getRole().equals(\"ADMIN\")) {",
      "prediction": "(user.getRole().equals(\"admin\"))",
      "raw_prediction": "(user.getRole().equals(\"admin\")) {",
      "es": 0.7941176470588236,
      "em": false,
      "passed": false
    },
    {
      "index": 1404,
      "groundtruth": "if (product.getCreatedBy().getId().equals(currentUserId)) {",
      "prediction": "if (product.getCreatedBy().getId().equals(currentUserId))",
      "raw_prediction": " if (product.getCreatedBy().getId().equals(currentUserId)) {",
      "es": 0.9661016949152542,
      "em": false,
      "passed": false
    },
    {
      "index": 1405,
      "groundtruth": "user.setStatus(\"\u0410\u043a\u0442\u0438\u0432\u043d\u044b\u0439\");",
      "prediction": "user.setLastLogin(LocalDateTime.now());",
      "raw_prediction": "user.setLastLogin(LocalDateTime.now());",
      "es": 0.3076923076923077,
      "em": false,
      "passed": false
    },
    {
      "index": 1406,
      "groundtruth": "(!currentUser.getId().equals(id)) {",
      "prediction": "(currentUser.getId().equals(id))",
      "raw_prediction": "(currentUser.getId().equals(id)) {",
      "es": 0.9142857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 1407,
      "groundtruth": "product.setArtist(updatedProduct.getArtist());",
      "prediction": "product.setCategory(updatedProduct.getCategory());",
      "raw_prediction": "product.setCategory(updatedProduct.getCategory());",
      "es": 0.72,
      "em": false,
      "passed": false
    },
    {
      "index": 1408,
      "groundtruth": "user.setCreationDate(LocalDateTime.now());",
      "prediction": "user.setRegistrationDate(LocalDateTime.now());",
      "raw_prediction": "user.setRegistrationDate(LocalDateTime.now());",
      "es": 0.8478260869565217,
      "em": false,
      "passed": false
    },
    {
      "index": 1409,
      "groundtruth": "\"productId\", product.get().getId());",
      "prediction": "\"error\", null);",
      "raw_prediction": "\"error\", null);\n            model.addAttribute(\"success\", null);",
      "es": 0.2222222222222222,
      "em": false,
      "passed": false
    },
    {
      "index": 1410,
      "groundtruth": "setImageUrl(updatedProduct.getImageUrl());",
      "prediction": "setCategory(updatedProduct.getCategory());",
      "raw_prediction": "setCategory(updatedProduct.getCategory());",
      "es": 0.7142857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 1411,
      "groundtruth": "List<Comment> comments = commentRepository.findByProductId(id);",
      "prediction": "List<Comment> comments = commentRepository.findByProductId(id);",
      "raw_prediction": "List<Comment> comments = commentRepository.findByProductId(id);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1412,
      "groundtruth": "product.setCreationDate(LocalDateTime.now());",
      "prediction": "product.setCreatedDate(LocalDateTime.now());",
      "raw_prediction": "product.setCreatedDate(LocalDateTime.now());",
      "es": 0.9333333333333333,
      "em": false,
      "passed": false
    },
    {
      "index": 1413,
      "groundtruth": "user.setRole(\"USER\");",
      "prediction": "user.setRole(\"USER\");",
      "raw_prediction": "user.setRole(\"USER\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1414,
      "groundtruth": "product.get().getPrice().doubleValue());",
      "prediction": "product.get().getPrice().doubleValue());",
      "raw_prediction": "product.get().getPrice().doubleValue());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1415,
      "groundtruth": "System.out.println(transaction.getBuyerId());",
      "prediction": "System.out.println(transaction.getBuyerId());",
      "raw_prediction": "System.out.println(transaction.getBuyerId());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1416,
      "groundtruth": "instance.getCore().getDebugPingResponses().put(player.getUsername(), new ArrayList<>());",
      "prediction": "map.put(player.getUsername(), new ArrayList<>());",
      "raw_prediction": " map.put(player.getUsername(), new ArrayList<>());",
      "es": 0.5454545454545454,
      "em": false,
      "passed": false
    },
    {
      "index": 1417,
      "groundtruth": "<OrderItem> orderItems = productService.findOrderItemsByProduct(id);",
      "prediction": "<OrderItem> orderItems = productService.getOrderItemsByProductId(id);",
      "raw_prediction": "<OrderItem> orderItems = productService.getOrderItemsByProductId(id);",
      "es": 0.9130434782608696,
      "em": false,
      "passed": false
    },
    {
      "index": 1418,
      "groundtruth": "Optional<User> userOptional = userService.validateUser(username, password);",
      "prediction": "Optional<User> userOptional = userRepository.findByLogin(username);",
      "raw_prediction": "Optional<User> userOptional = userRepository.findByLogin(username);",
      "es": 0.6266666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 1419,
      "groundtruth": "return orderItemRepository.findAllByProduct_Id(productId);",
      "prediction": "return orderItemRepository.findByProductId(productId);",
      "raw_prediction": "return orderItemRepository.findByProductId(productId);",
      "es": 0.9310344827586207,
      "em": false,
      "passed": false
    },
    {
      "index": 1420,
      "groundtruth": "TypeUtils.isPrimitiveOrSimpleType(typeCanonicalText)) {",
      "prediction": "TypeUtils.isPrimitiveOrSimple",
      "raw_prediction": "TypeUtils.isPrimitiveOrSimpleType(typeCanonicalText)) {",
      "es": 0.5272727272727273,
      "em": false,
      "passed": false
    },
    {
      "index": 1421,
      "groundtruth": "(TypeUtils.isMap(typeCanonicalText)) {",
      "prediction": "(TypeUtils.isMap(typeCanonicalText))",
      "raw_prediction": "(TypeUtils.isMap(typeCanonicalText)) {",
      "es": 0.9473684210526316,
      "em": false,
      "passed": false
    },
    {
      "index": 1422,
      "groundtruth": "= TypeUtils.primitiveToBox(typeCanonicalText);",
      "prediction": "= TypeUtils.convertPrimitiveToWrapper(typeCanonicalText);",
      "raw_prediction": "= TypeUtils.convertPrimitiveToWrapper(typeCanonicalText);",
      "es": 0.736842105263158,
      "em": false,
      "passed": false
    },
    {
      "index": 1423,
      "groundtruth": "if (TypeUtils.isPrimitiveOrSimpleType(fieldType.replaceAll(\"\\\\[]\", \"\"))) {",
      "prediction": "if (fieldType.contains(\"<\"))) {",
      "raw_prediction": " if (fieldType.contains(\"<\"))) {\n                fieldType = fieldType.substring(0, fieldType.indexOf(\"<\"));\n            }\n            if (PsiClassHelper.findPsiClass(fieldType, project) != null && !fieldType.contains(\"<\"))) {",
      "es": 0.31081081081081086,
      "em": false,
      "passed": false
    },
    {
      "index": 1424,
      "groundtruth": "TypeUtils.getExampleValue(typeCanonicalText, false);",
      "prediction": "TypeUtils.getExampleValue(typeCanonicalText, false);",
      "raw_prediction": "TypeUtils.getExampleValue(typeCanonicalText, false);\n            }\n            return Collections.emptyList();\n        }\n\n        // Map\n        if (TypeUtils.isMap(typeCanonicalText)) {\n            return Collections.emptyMap();\n        }\n\n        if (auto",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1425,
      "groundtruth": ".equals(date) && booking.getTime().equals(time)) {",
      "prediction": ".equals(date) && booking.ge",
      "raw_prediction": ".equals(date) && booking.getTime().equals(time)) {",
      "es": 0.54,
      "em": false,
      "passed": false
    },
    {
      "index": 1426,
      "groundtruth": ".getId() == tableId && booking.getDate().equals(date) && booking.getTime().equals(time)) {",
      "prediction": ".getId() == tableId && booking.getDate().equals",
      "raw_prediction": ".getId() == tableId && booking.getDate().equals(date) && booking.getTime().equals(time)) {",
      "es": 0.5222222222222221,
      "em": false,
      "passed": false
    },
    {
      "index": 1427,
      "groundtruth": "staffRepository.findByLogin(login) != null;",
      "prediction": "staffRepository.existsByLogin(login);",
      "raw_prediction": "staffRepository.existsByLogin(login);",
      "es": 0.6976744186046512,
      "em": false,
      "passed": false
    },
    {
      "index": 1428,
      "groundtruth": "staff.setApparatusEmployed(new java.sql.Date(currentDate.getTime()));",
      "prediction": "staff.setCreatedAt(currentDate);",
      "raw_prediction": "staff.setCreatedAt(currentDate);",
      "es": 0.4057971014492754,
      "em": false,
      "passed": false
    },
    {
      "index": 1429,
      "groundtruth": "dishService.editDishDetails(id, name, description, recipe);",
      "prediction": "dishService.editDishDetails(id, name, description, recipe);",
      "raw_prediction": "dishService.editDishDetails(id, name, description, recipe);\n//        dishService.editDishImage(id, image.getOriginalFilename(), image.getContentType(), image.getBytes());\n        return \"redirect:/menu/{id}/details\";\n   ",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1430,
      "groundtruth": "DishType dishType = dishTypeRepository.findByName(typeName);",
      "prediction": "DishType dishType = dishTypeRepository.findByName(typeName);",
      "raw_prediction": "DishType dishType = dishTypeRepository.findByName(typeName);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1431,
      "groundtruth": "(dishService.checkIfDishIsOrdered(id)) {",
      "prediction": "(dishService.checkIfDishIsOrdered(id))",
      "raw_prediction": "(dishService.checkIfDishIsOrdered(id)) {",
      "es": 0.95,
      "em": false,
      "passed": false
    },
    {
      "index": 1432,
      "groundtruth": "orderedDish.setStatus(status);",
      "prediction": "orderedDish.setStatus(status);",
      "raw_prediction": " orderedDish.setStatus(status);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1433,
      "groundtruth": "<OrderedDish> dishesInOrder = orderedDishRepository.findAllByOrder(orderedDish.getOrder());",
      "prediction": "<OrderedDish> dishesInOrder = orderRepository.findById(orderedDish.getOrder().getId())",
      "raw_prediction": "<OrderedDish> dishesInOrder = orderRepository.findById(orderedDish.getOrder().getId())\n                    .orElseThrow(() -> new RuntimeException(\"Order not found\")).getOrderedDishes();",
      "es": 0.7692307692307692,
      "em": false,
      "passed": false
    },
    {
      "index": 1434,
      "groundtruth": "if (dishService.checkIfDishIsOrdered(id)) {",
      "prediction": "if (dishService.checkIfDishIsOrdered(id))",
      "raw_prediction": "if (dishService.checkIfDishIsOrdered(id)) {",
      "es": 0.9534883720930233,
      "em": false,
      "passed": false
    },
    {
      "index": 1435,
      "groundtruth": "model.addAttribute(\"staff\", staffService.getAllStaff());",
      "prediction": "model.addAttribute(\"newStaff\", staff);",
      "raw_prediction": " model.addAttribute(\"newStaff\", staff);\n            return \"redirect:/staff\";\n        }\n\n        if (staffService.emailExists(staff.getEmail())) {\n            model.addAttribute(\"error\", \"Email \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442!\");",
      "es": 0.5535714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 1436,
      "groundtruth": "<Tables> allTables = tableBookingService.getAllTables();",
      "prediction": "<Tables> allTables = tableBookingService.getAllTables();",
      "raw_prediction": "<Tables> allTables = tableBookingService.getAllTables();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1437,
      "groundtruth": "= orderedDish.getOrder();",
      "prediction": "= orderedDish.getOrder();",
      "raw_prediction": "= orderedDish.getOrder();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1438,
      "groundtruth": "loginExists(staff.getLogin())) {",
      "prediction": "isLoginExists(staff.getLogin())",
      "raw_prediction": "isLoginExists(staff.getLogin())) {",
      "es": 0.8125,
      "em": false,
      "passed": false
    },
    {
      "index": 1439,
      "groundtruth": "!config.getMajorRules().isEmpty() || !config.getMinorRules().isEmpty()) {",
      "prediction": "config.getMajorRules() != null && conf",
      "raw_prediction": "config.getMajorRules() != null && config.getMajorRules().length > 0) {",
      "es": 0.3835616438356164,
      "em": false,
      "passed": false
    },
    {
      "index": 1440,
      "groundtruth": ").isEmpty() || !config.getMinorRules().isEmpty()) {",
      "prediction": ").isEmpty()) {",
      "raw_prediction": ").isEmpty()) {",
      "es": 0.27450980392156865,
      "em": false,
      "passed": false
    },
    {
      "index": 1441,
      "groundtruth": "semverConfigVersionTag = config.getVersionTag();",
      "prediction": "semverConfigVersionTag = config.getVersionTag();",
      "raw_prediction": "semverConfigVersionTag = config.getVersionTag();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1442,
      "groundtruth": "commitHistory.getChanges()) {",
      "prediction": "commitHistory.ge",
      "raw_prediction": "commitHistory.getChanges()) {",
      "es": 0.5517241379310345,
      "em": false,
      "passed": false
    },
    {
      "index": 1443,
      "groundtruth": "= versionRules.getTagPattern().matcher(tag);",
      "prediction": "= versionRules.getVersionPattern().matcher(tag);",
      "raw_prediction": "= versionRules.getVersionPattern().matcher(tag);",
      "es": 0.8541666666666666,
      "em": false,
      "passed": false
    },
    {
      "index": 1444,
      "groundtruth": "= commitHistory.getLastVersionTag();",
      "prediction": "= commitHistory.getLatestVersionTag();",
      "raw_prediction": "= commitHistory.getLatestVersionTag();",
      "es": 0.9473684210526316,
      "em": false,
      "passed": false
    },
    {
      "index": 1445,
      "groundtruth": "userRepository.getUserByUserId(userId);",
      "prediction": "null; // Return null or throw an exception if user not found",
      "raw_prediction": "null; // Return null or throw an exception if user not found\n        }\n    }\n\n    public User updateUser(String userId, User updatedUser) {\n        User existingUser = userRepository.getUserByUserId(userId);\n        if (existingUser != null",
      "es": 0.16666666666666663,
      "em": false,
      "passed": false
    },
    {
      "index": 1446,
      "groundtruth": "List<Reservation> reservations = reservationRepository.getAllReservations().stream()\n                .filter(res -> {",
      "prediction": "List<Reservation> reservations = reservationRepository.getAl",
      "raw_prediction": "List<Reservation> reservations = reservationRepository.getAllReservations().stream()\n            .filter(res -> {",
      "es": 0.5128205128205128,
      "em": false,
      "passed": false
    },
    {
      "index": 1447,
      "groundtruth": "User existingUser = userRepository.getUserByUserId(userId);",
      "prediction": "User existingUser = userRepository.getUserByUserId(userId);",
      "raw_prediction": "User existingUser = userRepository.getUserByUserId(userId);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1448,
      "groundtruth": "ArrayList<>(userRepository.getAllUsers());",
      "prediction": "ArrayList<>(List.of(user1, user2));",
      "raw_prediction": "ArrayList<>(List.of(user1, user2));",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 1449,
      "groundtruth": "= deepCopy(object.getApplication());",
      "prediction": "= deepCopy(bindings);",
      "raw_prediction": "= deepCopy(bindings);",
      "es": 0.4722222222222222,
      "em": false,
      "passed": false
    },
    {
      "index": 1450,
      "groundtruth": "locator = ((Locator) binding.getValue()).getPath();",
      "prediction": "locator = ((Locator) binding.getValue()).get();",
      "raw_prediction": "locator = ((Locator) binding.getValue()).get();",
      "es": 0.9215686274509804,
      "em": false,
      "passed": false
    },
    {
      "index": 1451,
      "groundtruth": "orgGroupSendHeaders.setXAcsDingtalkAccessToken(accessTokenService.getAccessToken());",
      "prediction": "orgGroupSendHeaders.setAccessToken(accessTokenService.getAccessToken());",
      "raw_prediction": " orgGroupSendHeaders.setAccessToken(accessTokenService.getAccessToken());",
      "es": 0.8571428571428572,
      "em": false,
      "passed": false
    },
    {
      "index": 1452,
      "groundtruth": "box.get(object.getName()));",
      "prediction": "box.get(object.getName()));",
      "raw_prediction": "box.get(object.getName()));\n        final Map<String, Entity> bindings2 = deepCopy(bindings);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1453,
      "groundtruth": "tokenizer.getToken();",
      "prediction": "tokenizer.getToken();",
      "raw_prediction": "tokenizer.getToken();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1454,
      "groundtruth": ").getName();",
      "prediction": ").getName();",
      "raw_prediction": ").getName();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1455,
      "groundtruth": "((FlatObject) binding.getValue()).getLocator())\n                    );",
      "prediction": "\"\u03be\")\n                    );",
      "raw_prediction": "\"\u03be\")\n                    );",
      "es": 0.34285714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 1456,
      "groundtruth": "robotGroupMessagesService.send(openConversationId, \"hello\");",
      "prediction": "robotGroupMessagesService.sendRobotMessage(openConversationId, msg);",
      "raw_prediction": "robotGroupMessagesService.sendRobotMessage(openConversationId, msg);",
      "es": 0.7205882352941176,
      "em": false,
      "passed": false
    },
    {
      "index": 1457,
      "groundtruth": "this.tokenizer.next();",
      "prediction": "if (name.equals(\"}\")) {",
      "raw_prediction": " if (name.equals(\"}\")) {\n                 break;\n             }",
      "es": 0.04347826086956519,
      "em": false,
      "passed": false
    },
    {
      "index": 1458,
      "groundtruth": "(storage.getName());",
      "prediction": "(Text.of(\"Guest\"));",
      "raw_prediction": "(Text.of(\"Guest\"));\n        player.setScoreboardTeam(null);",
      "es": 0.19999999999999996,
      "em": false,
      "passed": false
    },
    {
      "index": 1459,
      "groundtruth": ".add(BlockRegistry.get(member.brokenRaft()), beautifyName(member.brokenRaft()));",
      "prediction": ".add(BlockRegistry.get(member.brokenRaft()), \"\u635f\u574f\u7684\" + member.chinese + \"\u7b4f\");",
      "raw_prediction": ".add(BlockRegistry.get(member.brokenRaft()), \"\u635f\u574f\u7684\" + member.chinese + \"\u7b4f\");",
      "es": 0.6875,
      "em": false,
      "passed": false
    },
    {
      "index": 1460,
      "groundtruth": ".add(BlockRegistry.get(member.raft()), member.chinese + \"\u7b4f\");",
      "prediction": ".add(BlockRegistry.get(member.raft()), member.chinese + \"\u7b4f\");",
      "raw_prediction": ".add(BlockRegistry.get(member.raft()), member.chinese + \"\u7b4f\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1461,
      "groundtruth": ".add(BlockRegistry.get(member.fence()), beautifyName(member.fence()));",
      "prediction": ".add(BlockRegistry.get(member.fence()), \"\u7b80\u6613\" + member.chinese + \"\u6805\u680f\");",
      "raw_prediction": ".add(BlockRegistry.get(member.fence()), \"\u7b80\u6613\" + member.chinese + \"\u6805\u680f\");",
      "es": 0.6428571428571428,
      "em": false,
      "passed": false
    },
    {
      "index": 1462,
      "groundtruth": "(BlockRegistry.get(member.rack()), beautifyName(member.rack()));",
      "prediction": "(BlockRegistry.get(member.rack()), beautifyName(member.rack()));",
      "raw_prediction": "(BlockRegistry.get(member.rack()), beautifyName(member.rack()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1463,
      "groundtruth": "beautifyName(member.raft()));",
      "prediction": "beautifyName(member.raft()));",
      "raw_prediction": "beautifyName(member.raft()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1464,
      "groundtruth": "fence()), beautifyName(member.fence()));",
      "prediction": "fence()), beautifyName(member.fence()));",
      "raw_prediction": "fence()), beautifyName(member.fence()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1465,
      "groundtruth": "member.rack()), beautifyName(member.rack()));",
      "prediction": "member.rack()), beautifyName(member.rack()));",
      "raw_prediction": "member.rack()), beautifyName(member.rack()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1466,
      "groundtruth": ".get(member.crossedFence()), beautifyName(member.crossedFence()));",
      "prediction": ".get(member.crossedFence()), beautifyName(member.crossedFence()));",
      "raw_prediction": ".get(member.crossedFence()), beautifyName(member.crossedFence()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1467,
      "groundtruth": ", beautifyName(member.brokenRaft()));",
      "prediction": ", \"\u635f\u574f\u7684\" + member.raft());",
      "raw_prediction": ", \"\u635f\u574f\u7684\" + member.raft());",
      "es": 0.45945945945945943,
      "em": false,
      "passed": false
    },
    {
      "index": 1468,
      "groundtruth": "Logger.writeError(\"Invalid server response\");",
      "prediction": "Logger.writeError(\"Failed to get color from server\");",
      "raw_prediction": "\tLogger.writeError(\"Failed to get color from server\");\n\t\t\t\t\tSystem.exit(0);\n\t\t\t\t}\n\t\t\t} catch (UnknownHostException ex){\n\t\t\tLogger.writeError(\"Unknown host: \" + ip);\n\t\t\tSystem.exit(0);\n\t\t",
      "es": 0.5660377358490566,
      "em": false,
      "passed": false
    },
    {
      "index": 1469,
      "groundtruth": "(\"position fen \"+b.getFEN());",
      "prediction": "(\"position fen \"+b.getFen());",
      "raw_prediction": "(\"position fen \"+b.getFen());",
      "es": 0.9310344827586207,
      "em": false,
      "passed": false
    },
    {
      "index": 1470,
      "groundtruth": "username = jwtUtil.verifyToken(token);",
      "prediction": "username = jwtUtil.getUsernameFromToken(token);",
      "raw_prediction": "username = jwtUtil.getUsernameFromToken(token);",
      "es": 0.7234042553191489,
      "em": false,
      "passed": false
    },
    {
      "index": 1471,
      "groundtruth": "getIncrementTime(), b.getIncrementTime()));",
      "prediction": "getInc(Color.WHITE), b.getInc(Color.BLACK)));",
      "raw_prediction": "getInc(Color.WHITE), b.getInc(Color.BLACK)));\n\t\twriteCommand(\"depth 20\");",
      "es": 0.4666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 1472,
      "groundtruth": "Color.WHITE), b.getTime(Color.BLACK), b.getIncrementTime(), b.getIncrementTime()));",
      "prediction": "), b.getTime(), b.getInc(), b.getInc()));",
      "raw_prediction": "), b.getTime(), b.getInc(), b.getInc()));\n\t\twriteCommand(\"go depth \"+b.getDepth());",
      "es": 0.49397590361445787,
      "em": false,
      "passed": false
    },
    {
      "index": 1473,
      "groundtruth": "cm.reply();",
      "prediction": "cm.start();",
      "raw_prediction": "cm.start();",
      "es": 0.5454545454545454,
      "em": false,
      "passed": false
    },
    {
      "index": 1474,
      "groundtruth": "user = userDetailsService.loadUserByUsername((String)auth.getPrincipal());",
      "prediction": "user = userDetailsService.loadUserByUsername(auth.getName());",
      "raw_prediction": "user = userDetailsService.loadUserByUsername(auth.getName());",
      "es": 0.7702702702702703,
      "em": false,
      "passed": false
    },
    {
      "index": 1475,
      "groundtruth": "auth.eraseCredentials();",
      "prediction": "auth.setDetails(user);",
      "raw_prediction": "\tauth.setDetails(user);",
      "es": 0.41666666666666663,
      "em": false,
      "passed": false
    },
    {
      "index": 1476,
      "groundtruth": "ecoproveedor.calcularPuntosTotales();",
      "prediction": "ecoproveedor.getPuntos() + producto.getPuntos();",
      "raw_prediction": "ecoproveedor.getPuntos() + producto.getPuntos();",
      "es": 0.47916666666666663,
      "em": false,
      "passed": false
    },
    {
      "index": 1477,
      "groundtruth": "builder.add(BlockRegistry.get(member.brokenRaft()), \"\u635f\u574f\u7684\" + member.chinese + \"\u7b4f\");",
      "prediction": "builder.add(BlockRegistry.get(member.brokenRaft()), member.chinese + \"\u7834\u635f\u7b4f\");",
      "raw_prediction": "builder.add(BlockRegistry.get(member.brokenRaft()), member.chinese + \"\u7834\u635f\u7b4f\");",
      "es": 0.8780487804878049,
      "em": false,
      "passed": false
    },
    {
      "index": 1478,
      "groundtruth": ".stream().filter(piece -> piece.getType().getName() == Piece.PIECE_PAWN).count();",
      "prediction": ".stream().filter(piece -> piece.getType().getName() == Piece.PIECE_PAWN).count();",
      "raw_prediction": ".stream().filter(piece -> piece.getType().getName() == Piece.PIECE_PAWN).count();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1479,
      "groundtruth": "Flotage.id(id), block);",
      "prediction": "Flotage.id(id), block);",
      "raw_prediction": "Flotage.id(id), block);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1480,
      "groundtruth": "().getNamespace(), \"block/\" + member.log().getPath());",
      "prediction": "().getNamespace(), \"block/\" + member.log().getPath()));",
      "raw_prediction": "().getNamespace(), \"block/\" + member.log().getPath()));\n",
      "es": 0.9818181818181818,
      "em": false,
      "passed": false
    },
    {
      "index": 1481,
      "groundtruth": "() && p.getColor() == piece.getColor()){",
      "prediction": "()){",
      "raw_prediction": "()){\n\t\t\t\t\tif\t\tidentical.add(p);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tPiece capture = this.board[p2[0]][p2[1]];\n\t\t\t\t\tif (this.enPassant != null",
      "es": 0.09999999999999998,
      "em": false,
      "passed": false
    },
    {
      "index": 1482,
      "groundtruth": ").filter(piece -> piece.getType().getName() == Piece.PIECE_KNIGHT).count();",
      "prediction": ").filter(piece -> piece.getType().getName() == Piece.PIECE_KNIGHT).count();",
      "raw_prediction": ").filter(piece -> piece.getType().getName() == Piece.PIECE_KNIGHT).count();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1483,
      "groundtruth": "if (piece == null || piece.getColor() != this.player) return false;",
      "prediction": "if (piece == null || piece.getColor() != this.player) return false;",
      "raw_prediction": "\tif (piece == null || piece.getColor() != this.player) return false;\n\t\t\tif (piece.getType().getName() == Piece.PIECE_KING && (piece.getX() != p1[0] || piece.getY() != p",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1484,
      "groundtruth": "> pieces = getPiecesOnBoard().stream().filter(piece -> piece.getColor() == color).toList();",
      "prediction": "> pieces = getPiecesOnBoard();",
      "raw_prediction": "> pieces = getPiecesOnBoard();",
      "es": 0.3296703296703297,
      "em": false,
      "passed": false
    },
    {
      "index": 1485,
      "groundtruth": "p.getColor() == piece.getColor()){",
      "prediction": "piece.getX() == p2[",
      "raw_prediction": "piece.getX() == p2[0] && piece.getY() == p2[1]){",
      "es": 0.23529411764705888,
      "em": false,
      "passed": false
    },
    {
      "index": 1486,
      "groundtruth": ".WHITE && newLegalMoves.contains(convertPosition(this.blackKing.getX(), this.blackKing.getY()))){",
      "prediction": ".WHITE && newLegalMoves.contains(convertPosition(this.blackKing.getX(), this.blackKing.getY()))",
      "raw_prediction": ".WHITE && newLegalMoves.contains(convertPosition(this.blackKing.getX(), this.blackKing.getY()))){",
      "es": 0.979381443298969,
      "em": false,
      "passed": false
    },
    {
      "index": 1487,
      "groundtruth": "pos) == recipe.getMode()) {",
      "prediction": "pos)) { // \u5224\u65ad\u662f\u5426\u53ef\u4ee5\u5de5\u4f5c",
      "raw_prediction": "pos)) { // \u5224\u65ad\u662f\u5426\u53ef\u4ee5\u5de5\u4f5c\n                    if (WorkingMode.judge(world, pos)) { // \u5224\u65ad\u662f\u5426\u53ef\u4ee5\u5de5\u4f5c\n                    if (WorkingMode.judge(world, pos)) { // \u5224\u65ad\u662f\u5426\u53ef\u4ee5\u5de5\u4f5c\n",
      "es": 0.18518518518518523,
      "em": false,
      "passed": false
    },
    {
      "index": 1488,
      "groundtruth": ".filter(piece -> piece.getType().getName() == Piece.PIECE_ROOK).count();",
      "prediction": ".filter(piece -> piece.getType().getName() == Piece.PIECE_ROOK).count();",
      "raw_prediction": ".filter(piece -> piece.getType().getName() == Piece.PIECE_ROOK).count();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1489,
      "groundtruth": "if (MapUtils.isNotEmpty(this.properties.getConfig())) {",
      "prediction": "if (args.length == FEIGN_ARGS_LEN)",
      "raw_prediction": " if (args.length == FEIGN_ARGS_LEN) {",
      "es": 0.18181818181818177,
      "em": false,
      "passed": false
    },
    {
      "index": 1490,
      "groundtruth": ".wrapperTimeoutOptions(this.properties.getHostConfig(uri.getHost()), uri);",
      "prediction": ".wrapperTimeoutOptions(this.properties.getConfig().get(uri.getHost()), uri);",
      "raw_prediction": ".wrapperTimeoutOptions(this.properties.getConfig().get(uri.getHost()), uri);\n                } else {\n                    throw new IllegalArgumentException(\"feign args length is not equal to \" + FEIGN_ARGS_LEN);",
      "es": 0.868421052631579,
      "em": false,
      "passed": false
    },
    {
      "index": 1491,
      "groundtruth": "[capture.getX()][capture.getY()] = null;",
      "prediction": "[p2[0]][p1[1]] = null;",
      "raw_prediction": "[p2[0]][p1[1]] = null;\n\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (prom != null){\n\t\t\t\tPiece.Pieces promotion = Piece.getType(prom);\n\t\t\t\tthis.board[p2[0]][p2[",
      "es": 0.35,
      "em": false,
      "passed": false
    },
    {
      "index": 1492,
      "groundtruth": "add(BlockRegistry.get(member.crossedFence()), member.chinese + \"\u5341\u5b57\u6805\u680f\");",
      "prediction": "add(BlockRegistry.get(member.crossedFence()), \"\u7b80\u6613\" + member.chinese + \"\u4ea4\u53c9\u6805\u680f\");",
      "raw_prediction": "add(BlockRegistry.get(member.crossedFence()), \"\u7b80\u6613\" + member.chinese + \"\u4ea4\u53c9\u6805\u680f\");",
      "es": 0.8846153846153846,
      "em": false,
      "passed": false
    },
    {
      "index": 1493,
      "groundtruth": "display.getMode().toString()));",
      "prediction": "display.getMode()));",
      "raw_prediction": "display.getMode()));\n        widgets.add(Widgets.withTooltip(arrow, Text.translatable(\"tip.flotage.rack.processtime\", display.getProcesstime() / 20), text));\n\n        widgets.add(Widgets.createSlot",
      "es": 0.6451612903225806,
      "em": false,
      "passed": false
    },
    {
      "index": 1494,
      "groundtruth": "add(BlockRegistry.get(member.rack()), member.chinese + \"\u7f6e\u7269\u67b6\");",
      "prediction": "add(BlockRegistry.get(member.rack()), \"\u7f6e\u7269\u67b6\");",
      "raw_prediction": "add(BlockRegistry.get(member.rack()), \"\u7f6e\u7269\u67b6\");",
      "es": 0.7258064516129032,
      "em": false,
      "passed": false
    },
    {
      "index": 1495,
      "groundtruth": "member.fence()), \"\u7b80\u6613\" + member.chinese + \"\u6805\u680f\");",
      "prediction": "member.fence()), member.chinese + \"\u6805\u680f\");",
      "raw_prediction": "member.fence()), member.chinese + \"\u6805\u680f\");",
      "es": 0.851063829787234,
      "em": false,
      "passed": false
    },
    {
      "index": 1496,
      "groundtruth": "inventory.getStack(0).getNbt();",
      "prediction": "inventory.getStack(0).getNbt();",
      "raw_prediction": "inventory.getStack(0).getNbt();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1497,
      "groundtruth": "add(Widgets.withTooltip(arrow, Text.translatable(\"tip.flotage.rack.processtime\", display.getProcesstime() / 20), text));",
      "prediction": "add(Widgets.createLabel(new Point(bgBounds.x + 39, bgBounds.y + 36), text).leftAligned().scale(0.75f));",
      "raw_prediction": "add(Widgets.createLabel(new Point(bgBounds.x + 39, bgBounds.y + 36), text).leftAligned().scale(0.75f));",
      "es": 0.23333333333333328,
      "em": false,
      "passed": false
    },
    {
      "index": 1498,
      "groundtruth": "add(BlockRegistry.get(member.crossedFence()));",
      "prediction": "add(BlockRegistry.get(member.rack()));",
      "raw_prediction": "add(BlockRegistry.get(member.rack()));",
      "es": 0.782608695652174,
      "em": false,
      "passed": false
    },
    {
      "index": 1499,
      "groundtruth": ".board.getPlayer() != this.viewPoint && (this.engineMove || !this.overTheBoard)){",
      "prediction": ".board.getPlayer() != this.viewPoint){",
      "raw_prediction": ".board.getPlayer() != this.viewPoint){\n\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\tif (this.board.getMovesN() == 1 && this.board.getMoves().get(0).equals(\"e4\")) this.board.setPlayer(\"stockfish",
      "es": 0.4691358024691358,
      "em": false,
      "passed": false
    },
    {
      "index": 1500,
      "groundtruth": "this.client.getColor();",
      "prediction": "this.viewPoint;",
      "raw_prediction": "this.viewPoint;\n\t\t\t\t\t\t\tthis.board.setPlayer(this.viewPoint);\n\t\t\t\t\t\t\tthis.board.setGameTime(Long.parseLong(timeControl.getText().split(\"\\\\+\")[0])*1000);\n\t\t\t\t\t\t\tthis.board.setIncrementTime(Integer.parseInt(timeControl.getText().",
      "es": 0.3913043478260869,
      "em": false,
      "passed": false
    },
    {
      "index": 1501,
      "groundtruth": "this.client.getMessage();",
      "prediction": "this.client.receiveMessage();",
      "raw_prediction": "this.client.receiveMessage();",
      "es": 0.7931034482758621,
      "em": false,
      "passed": false
    },
    {
      "index": 1502,
      "groundtruth": "(this.board.getFEN()+\"\\n\\n\"+this.board.getPGN());",
      "prediction": "();",
      "raw_prediction": "();\n\t\t\t\t\tdata.setText(text);\n\t\t\t\t\tdata.setEditable(false);\n\t\t\t\t\tdata.setWrapText(true);\n\t\t\t\t\tdata.setMaxWidth(WIDTH*0.7);\n\t\t\t\t\tdata.setMaxHeight(HEIGHT*0.7);\n\t\t\t\t\tCheckBox otb = new CheckBox",
      "es": 0.061224489795918324,
      "em": false,
      "passed": false
    },
    {
      "index": 1503,
      "groundtruth": "if (this.board.getBoard()[x][y].getColor() == this.viewPoint){",
      "prediction": "if (getPremoves().contains(not)){",
      "raw_prediction": "if (getPremoves().contains(not)){\n\t\t\t\t\t\t\t\tthis.premoves.clear();\n\t\t\t\t\t\t\t} else {",
      "es": 0.27419354838709675,
      "em": false,
      "passed": false
    },
    {
      "index": 1504,
      "groundtruth": "out.println(this.board.getFEN());",
      "prediction": "out.println(this.board.getPGN());",
      "raw_prediction": "out.println(this.board.getPGN());\n\t\t\t\t\tAlert alert = new Alert(Alert.AlertType.INFORMATION);\n\t\t\t\t\talert.setTitle(\"Settings\");\n\t\t\t\t\talert.setHeaderText(\"Setup game\");\n\t\t\t\t\tGridPane layout = new GridPane();\n\t\t\t\t\tlayout.set",
      "es": 0.9393939393939394,
      "em": false,
      "passed": false
    },
    {
      "index": 1505,
      "groundtruth": "(this.board.getBoard()[x][y] == null && !getPremoves().contains(not)){",
      "prediction": "(this.board.getBoard()[x][y] == null)",
      "raw_prediction": "(this.board.getBoard()[x][y] == null){\n\t\t\t\t\t\t\t\tthis.currentSelection = not;\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.currentSelection = null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tboolean isProm = isPromotion",
      "es": 0.5285714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 1506,
      "groundtruth": "this.board.getBoard()[x][y] != null){",
      "prediction": "this.board.getBoard()",
      "raw_prediction": "this.board.getBoard()[x][y] != null){\n\t\t\t\t\t\t\tthis.currentSelection = not;\n\t\t\t\t\t\t\tthis.currentMoves = this.board.getValidMoves(this.board.getBoard()[x][y]);\n\t\t\t\t\t\t\tthis.draggingPiece = this.board.getBoard",
      "es": 0.5675675675675675,
      "em": false,
      "passed": false
    },
    {
      "index": 1507,
      "groundtruth": "this.gameFinished = this.board.isGameFinished();",
      "prediction": "if (this.board.getMovesN() > 1 && !this.gameFinished) makeEngineMove(false);",
      "raw_prediction": "if (this.board.getMovesN() > 1 && !this.gameFinished) makeEngineMove(false);\n\t\t\t\t\t\t\t\t\t\t\t} else {",
      "es": 0.3157894736842105,
      "em": false,
      "passed": false
    },
    {
      "index": 1508,
      "groundtruth": ")+\"\\n\\n\"+this.board.getPGN());",
      "prediction": "));",
      "raw_prediction": "));\n\t\t\t\t\tdata.setEditable(false);\n\t\t\t\t\tdata.setWrapText(true);\n\t\t\t\t\tdata.setPrefSize(WIDTH*0.7, HEIGHT*0.7);\n\t\t\t\t\tdata.setStyle(\"-fx-font-size: 12px;\");",
      "es": 0.09999999999999998,
      "em": false,
      "passed": false
    },
    {
      "index": 1509,
      "groundtruth": "= Piece.getType(prom);",
      "prediction": "= Piece.Pieces.valueOf(prom.toUpperCase());",
      "raw_prediction": "= Piece.Pieces.valueOf(prom.toUpperCase());",
      "es": 0.39534883720930236,
      "em": false,
      "passed": false
    },
    {
      "index": 1510,
      "groundtruth": "= this.board.getValidMoves(this.board.getBoard()[x][y]);",
      "prediction": "= this.board.getValidMoves(this.board.getBoard()[x][y]);",
      "raw_prediction": "= this.board.getValidMoves(this.board.getBoard()[x][y]);\n\t\t\t\t\t\t\tif (this.currentMoves.size() == 1){\n\t\t\t\t\t\t\tthis.makeUserMove(this.currentMoves.get(0), x, y, false, \"Q",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1511,
      "groundtruth": "!this.client.isConnected()){",
      "prediction": "this.client.getC",
      "raw_prediction": "this.client.getColor() == Color.WHITE){\n\t\t\t\t\t\t\t\tthis.client.sendMessage(this.board.getFEN());\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.client.sendMessage(this.board.getPGN());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} catch (IOException | NumberFormatException ex){\n\t\t\t\t\t\t",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 1512,
      "groundtruth": "println(this.board.getPGN());",
      "prediction": "println(this.board.getPGN());",
      "raw_prediction": "println(this.board.getPGN());\n\t\t\t\t\t}\n\t\t\t\t} catch (Exception ex){\n\t\t\t\t\tLogger.writeError(ex.getMessage());\n\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\n\t\tcanvas.setOnMouseMoved(e -> {\n\t\t\tif (e.getY",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1513,
      "groundtruth": "this.board.getGameTime(), this.board.getIncrementTime());",
      "prediction": "time, inc);",
      "raw_prediction": "time, inc);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.board = new Board(text, time, inc);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tthis.gameFinished = false;\n\t\t\t\t\t\t\tthis.moveStart = null;\n\t\t\t\t\t\t\tthis.moveEnd = null;\n\t\t\t\t\t\t\tthis.h",
      "es": 0.19298245614035092,
      "em": false,
      "passed": false
    },
    {
      "index": 1514,
      "groundtruth": "getAttackers(piece.getColor() == Color.WHITE ? this.whiteKing : this.blackKing) != null){",
      "prediction": "getAttackers(this.player == Color.WHITE ? this.blackKing : this.whiteKing)",
      "raw_prediction": "getAttackers(this.player == Color.WHITE ? this.blackKing : this.whiteKing) != null){\n\t\t\t\trestoreBackup(backup);\n\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\n\t\t\tif (capture != null) capture(capture);\n\t\t\t\n\t\t\t\tboolean",
      "es": 0.6179775280898876,
      "em": false,
      "passed": false
    },
    {
      "index": 1515,
      "groundtruth": "return jdbcProcessors.path(driver, generatedHost, generatedDatabase);",
      "prediction": "return jdbcProcessors.process(driver, generatedHost, generatedUser, generatedDatabase, urlSecondPart);",
      "raw_prediction": "return jdbcProcessors.process(driver, generatedHost, generatedUser, generatedDatabase, urlSecondPart);\n    }\n\n    public interface JdbcProcessors {\n        OddrnPath process(String driver, String host, String user, String database, String",
      "es": 0.6470588235294117,
      "em": false,
      "passed": false
    },
    {
      "index": 1516,
      "groundtruth": "if (booking.isApproved()) {",
      "prediction": "if (booking.getStatus().equals(\"APPROVED\"))",
      "raw_prediction": "if (booking.getStatus().equals(\"APPROVED\")) {",
      "es": 0.32558139534883723,
      "em": false,
      "passed": false
    },
    {
      "index": 1517,
      "groundtruth": "bookingRepository.deleteByTimeFinalBefore(LocalDateTime.now());",
      "prediction": "List<Booking> bookings = bookingRepository.findPending();",
      "raw_prediction": "List<Booking> bookings = bookingRepository.findPending();\n\n        for (Booking booking : bookings) {\n            if (isBusy(Optional.of(booking))) {\n                logService.updateStatus(booking, \"busy\");\n                bookingRepository.updateStatus(",
      "es": 0.19047619047619047,
      "em": false,
      "passed": false
    },
    {
      "index": 1518,
      "groundtruth": "booking.setTimeRequest(LocalDateTime.now());",
      "prediction": "booking.setDate(date);",
      "raw_prediction": "booking.setDate(date);",
      "es": 0.40909090909090906,
      "em": false,
      "passed": false
    },
    {
      "index": 1519,
      "groundtruth": "b.getId());",
      "prediction": "b);",
      "raw_prediction": "b);",
      "es": 0.2727272727272727,
      "em": false,
      "passed": false
    },
    {
      "index": 1520,
      "groundtruth": "protectionRune = CustomItems.createProtectionRune();",
      "prediction": "protectionRune = CustomItems.createProtectionRune();",
      "raw_prediction": "protectionRune = CustomItems.createProtectionRune();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1521,
      "groundtruth": "ItemStack protectionRune = CustomItems.createProtectionRune();",
      "prediction": "ItemStack protectionRune = CustomItems.createProtectionRune();",
      "raw_prediction": " ItemStack protectionRune = CustomItems.createProtectionRune();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1522,
      "groundtruth": "bookingService.save(login, subject, lab, date, timeInit, timeFinal);",
      "prediction": "bookingService.saveBooking(login, lab, subject, date, timeInit, timeFinal);",
      "raw_prediction": "bookingService.saveBooking(login, lab, subject, date, timeInit, timeFinal);",
      "es": 0.7733333333333333,
      "em": false,
      "passed": false
    },
    {
      "index": 1523,
      "groundtruth": "(professorService.getProfessorByLogin(login));",
      "prediction": "(professorService.getProfessor(login));",
      "raw_prediction": "(professorService.getProfessor(login));",
      "es": 0.8478260869565217,
      "em": false,
      "passed": false
    },
    {
      "index": 1524,
      "groundtruth": "int count = bookingRepository.isBusy(b.getLab().getId(), b.getTimeInit(), b.getTimeFinal());",
      "prediction": "int count = bookingRepository.countByDateAndTime",
      "raw_prediction": " int count = bookingRepository.countByDateAndTimeInitAndTimeFinalAndProfessorAndSubjectAndLab(\n                     b.getDate(), b.getTimeInit(), b.getTimeFinal(), b.getProfessor(), b.getSubject(), b.getLab());",
      "es": 0.42391304347826086,
      "em": false,
      "passed": false
    },
    {
      "index": 1525,
      "groundtruth": ".BOLD + \"\" + Utils.getEnhancementInfo(enhancementLevel).getEnhanceName());",
      "prediction": ".BOLD + \"MAX\");",
      "raw_prediction": ".BOLD + \"MAX\");",
      "es": 0.14864864864864868,
      "em": false,
      "passed": false
    },
    {
      "index": 1526,
      "groundtruth": "booking.setTimeInit(initialTime);",
      "prediction": "booking.setTimeInit(initialTime);",
      "raw_prediction": "booking.setTimeInit(initialTime);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1527,
      "groundtruth": "), b.getTimeInit(), b.getTimeFinal());",
      "prediction": "), b.getTimeInit(), b.getTimeFinal());",
      "raw_prediction": "), b.getTimeInit(), b.getTimeFinal());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1528,
      "groundtruth": ", b.getTimeInit(), b.getTimeFinal());",
      "prediction": ", b.getTimeInit(), b.getTimeFinal());",
      "raw_prediction": ", b.getTimeInit(), b.getTimeFinal());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1529,
      "groundtruth": "(Environment.getProgram(), taintFunction);",
      "prediction": "(Environment.getProgram(), startFunc);",
      "raw_prediction": "(Environment.getProgram(), startFunc);",
      "es": 0.8333333333333334,
      "em": false,
      "passed": false
    },
    {
      "index": 1530,
      "groundtruth": "analyzer.startAnalyzing();",
      "prediction": "analyzer.analyze();",
      "raw_prediction": " analyzer.analyze();",
      "es": 0.6923076923076923,
      "em": false,
      "passed": false
    },
    {
      "index": 1531,
      "groundtruth": "setSubject(subjectService.getSubject(subject));",
      "prediction": "setSubject(subjectService.getSubject(subject));",
      "raw_prediction": "setSubject(subjectService.getSubject(subject));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1532,
      "groundtruth": "func = FunctionUtil.getFunctionWith(Environment.getProgram(), connAdd);",
      "prediction": "func = FunctionUtil.getFunctionWith(Environment.getProgram(), startAdd);",
      "raw_prediction": "func = FunctionUtil.getFunctionWith(Environment.getProgram(), startAdd);\n        if (func == null) {\n            System.out.println(\"No function found at address: \" + startAdd);\n            return;\n        }\n\n        // get parameters of",
      "es": 0.9305555555555556,
      "em": false,
      "passed": false
    },
    {
      "index": 1533,
      "groundtruth": ".decompileFuncNormalize(Environment.getProgram(), FunctionUtil.getFunctionWith(Environment.getProgram(), startAdd));",
      "prediction": ".decompileFuncNormalize(program, FunctionUtil.getFunctionWith(program, signalNode.getAddress()));",
      "raw_prediction": ".decompileFuncNormalize(program, FunctionUtil.getFunctionWith(program, signalNode.getAddress()));",
      "es": 0.5862068965517242,
      "em": false,
      "passed": false
    },
    {
      "index": 1534,
      "groundtruth": "decompileFuncNormalize(Environment.getProgram(), FunctionUtil.getFunctionWith(Environment.getProgram(), startAdd));",
      "prediction": "decompileFuncNormalize(program, FunctionUtil.getFunctionWith(program, signalNode.getAddress()));",
      "raw_prediction": "decompileFuncNormalize(program, FunctionUtil.getFunctionWith(program, signalNode.getAddress()));\n            if (decompileResults == null)\n                return;\n",
      "es": 0.5826086956521739,
      "em": false,
      "passed": false
    },
    {
      "index": 1535,
      "groundtruth": "= FileUtil.readFromFile(configPath);",
      "prediction": "= FileUtil.readFile(configPath);",
      "raw_prediction": "= FileUtil.readFile(configPath);",
      "es": 0.8888888888888888,
      "em": false,
      "passed": false
    },
    {
      "index": 1536,
      "groundtruth": "jo.getProperty(name).cast(JSFunction.class);",
      "prediction": "jo.getJSFunction(method.getName());",
      "raw_prediction": "jo.getJSFunction(method.getName());",
      "es": 0.31818181818181823,
      "em": false,
      "passed": false
    },
    {
      "index": 1537,
      "groundtruth": "DecompileResults decompileResults = Decompiler.decompileFuncRegister(Environment.getProgram(), currentFunc);",
      "prediction": "DecompileResults decompileResults = Decompiler.decompileFunc(Environment.getProgram(), currentFunc);",
      "raw_prediction": " DecompileResults decompileResults = Decompiler.decompileFunc(Environment.getProgram(), currentFunc);",
      "es": 0.9259259259259259,
      "em": false,
      "passed": false
    },
    {
      "index": 1538,
      "groundtruth": "getFunctionWith(Environment.getProgram(), inputs[0].getAddress());",
      "prediction": "getFunctionWith(program, op.getInputs()[0].getAddress());",
      "raw_prediction": "getFunctionWith(program, op.getInputs()[0].getAddress());\n                    if (func.getName().equals(\"operator==\")) {\n                        java.util.*;\n\nclass QT QTaintEngine {\n    private Address start;\n    private Function taintFunction;\n",
      "es": 0.6363636363636364,
      "em": false,
      "passed": false
    },
    {
      "index": 1539,
      "groundtruth": "jo.getJavaObject();",
      "prediction": "context.get",
      "raw_prediction": "context.getQuickJS().getAdapter(rawType).fromJSValue(context, jo);\n    // If the object is already instance of rawType, return it directly.",
      "es": 0.21052631578947367,
      "em": false,
      "passed": false
    },
    {
      "index": 1540,
      "groundtruth": "enhancementLevel).getEnhanceColor() + \"+\" + Utils.getEnhancementInfo(enhancementLevel).getEnhanceName());",
      "prediction": "enhancementLevel).getEnhanceColor() + \"\" + Utils.getEnhancementInfo(enhancementLevel).getEnhanceName());",
      "raw_prediction": "enhancementLevel).getEnhanceColor() + \"\" + Utils.getEnhancementInfo(enhancementLevel).getEnhanceName());\n        } else {\n            return Component.text(Utils.getEnhancementInfo(enhancementLevel).getEnhance",
      "es": 0.9904761904761905,
      "em": false,
      "passed": false
    },
    {
      "index": 1541,
      "groundtruth": "CustomItems.createBlackStoneWeapon();",
      "prediction": "CustomItems.createBlackStoneWeapon();",
      "raw_prediction": "CustomItems.createBlackStoneWeapon();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1542,
      "groundtruth": "protectionStone = random.nextBoolean() ? CustomItems.createProtectionRune() : CustomItems.createProtectionRune();",
      "prediction": "protectionStone = random.nextBoolean() ? CustomItems.createProtectionStoneWeapon() : CustomItems.createProtectionStoneArmor();",
      "raw_prediction": "protectionStone = random.nextBoolean() ? CustomItems.createProtectionStoneWeapon() : CustomItems.createProtectionStoneArmor();",
      "es": 0.8650793650793651,
      "em": false,
      "passed": false
    },
    {
      "index": 1543,
      "groundtruth": "CustomItems.createConcentratedMagicalBlackStoneWeapon();",
      "prediction": "CustomItems.createConcentratedMagicalBlackStoneWeapon();",
      "raw_prediction": "CustomItems.createConcentratedMagicalBlackStoneWeapon();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1544,
      "groundtruth": "itemToGive = CustomItems.createProtectionRune();",
      "prediction": "itemToGive = CustomItems.createPStone();",
      "raw_prediction": "itemToGive = CustomItems.createPStone();",
      "es": 0.8125,
      "em": false,
      "passed": false
    },
    {
      "index": 1545,
      "groundtruth": "? CustomItems.createConcentratedMagicalBlackStoneWeapon() : CustomItems.createConcentratedMagicalBlackStoneArmor();",
      "prediction": "? CustomItems.createConcentratedBlackStoneWeapon() : CustomItems.createConcentratedBlackStoneArmor();",
      "raw_prediction": "? CustomItems.createConcentratedBlackStoneWeapon() : CustomItems.createConcentratedBlackStoneArmor();",
      "es": 0.8782608695652174,
      "em": false,
      "passed": false
    },
    {
      "index": 1546,
      "groundtruth": "25, enhanceGUI.createEnhanceButton());",
      "prediction": "25, null);",
      "raw_prediction": "25, null);\n        }, 1 * 20L); // Wait for 1 second before removing the error block\n    }\n\n    @EventHandler\n    public void onInventoryDrag(InventoryDragEvent event) {\n        if",
      "es": 0.21052631578947367,
      "em": false,
      "passed": false
    },
    {
      "index": 1547,
      "groundtruth": ".nextBoolean() ? CustomItems.createProtectionRune() : CustomItems.createProtectionRune();",
      "prediction": ".nextBoolean() ? CustomItems.createProtectionStoneWeapon() : CustomItems.createProtectionStoneArmor();",
      "raw_prediction": ".nextBoolean() ? CustomItems.createProtectionStoneWeapon() : CustomItems.createProtectionStoneArmor();",
      "es": 0.8333333333333334,
      "em": false,
      "passed": false
    },
    {
      "index": 1548,
      "groundtruth": "nextBoolean() ? CustomItems.createConcentratedMagicalBlackStoneWeapon() : CustomItems.createConcentratedMagicalBlackStoneArmor();",
      "prediction": "nextBoolean() ? CustomItems.createConcentratedBlackStoneWeapon() : CustomItems.createConcentratedBlackStoneArmor();",
      "raw_prediction": "nextBoolean() ? CustomItems.createConcentratedBlackStoneWeapon() : CustomItems.createConcentratedBlackStoneArmor();",
      "es": 0.8914728682170543,
      "em": false,
      "passed": false
    },
    {
      "index": 1549,
      "groundtruth": "add(inputBox1.getVBox());",
      "prediction": "add(inputBox1.getVBox());",
      "raw_prediction": "add(inputBox1.getVBox());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1550,
      "groundtruth": "inputBox1.setInitialConversion(false);",
      "prediction": "inputBox2.setInitialConversion(true);",
      "raw_prediction": "inputBox2.setInitialConversion(true);\n        inputBox2.startConversion();\n\n        // Establecer el \u00edndice base para las conversiones",
      "es": 0.868421052631579,
      "em": false,
      "passed": false
    },
    {
      "index": 1551,
      "groundtruth": "inputBox1.startConversion();",
      "prediction": "inputBox1.setInitialConversion(false);",
      "raw_prediction": "inputBox1.setInitialConversion(false);\n        InputBox.setBaseIndex(0);\n\n        // Crear la tercera instancia de InputBox con el valor de ComboBox \"EUR\"\n        counter++;\n        InputBox inputBox3 = new",
      "es": 0.6842105263157895,
      "em": false,
      "passed": false
    },
    {
      "index": 1552,
      "groundtruth": "inputBox1.setInitialConversion(true);",
      "prediction": "inputBoxes.get(0).startConversion();",
      "raw_prediction": "inputBoxes.get(0).startConversion();\n        inputBoxes.get(0).setInitialConversion(false);\n        // Establecer el \u00edndice base para las conversiones\n        InputBox.setBaseIndex(1);\n\n        // Iniciar la",
      "es": 0.5945945945945945,
      "em": false,
      "passed": false
    },
    {
      "index": 1553,
      "groundtruth": "professorService.deleteById(id);",
      "prediction": "professorService.delete(id);",
      "raw_prediction": "professorService.delete(id);",
      "es": 0.875,
      "em": false,
      "passed": false
    },
    {
      "index": 1554,
      "groundtruth": "List<Booking> bookings = bookingRepository.findByProfessor(id);",
      "prediction": "List<Booking> bookings = bookingRepository.findByProfessor(id);",
      "raw_prediction": "List<Booking> bookings = bookingRepository.findByProfessor(id);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1555,
      "groundtruth": "bookingRepository.approve(id);",
      "prediction": "b.setApproved(true);",
      "raw_prediction": "b.setApproved(true);",
      "es": 0.30000000000000004,
      "em": false,
      "passed": false
    },
    {
      "index": 1556,
      "groundtruth": "InputBox.setBaseIndex(1);",
      "prediction": "// Agregar un bot\u00f3n para agregar m\u00e1s componentes",
      "raw_prediction": "\n        // Agregar un bot\u00f3n para agregar m\u00e1s componentes\n        addButton1();",
      "es": 0.08333333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 1557,
      "groundtruth": "newComponent.getVBox().setId(String.valueOf(counter));",
      "prediction": "newComponent.getComboBox().setValue(\"USD\");",
      "raw_prediction": "newComponent.getComboBox().setValue(\"USD\");\n        newComponent.getTextField().setText(\"1\");",
      "es": 0.5185185185185186,
      "em": false,
      "passed": false
    },
    {
      "index": 1558,
      "groundtruth": "String exchangeRate = conversion.getExchangeRate();",
      "prediction": "double exchangeRate = Double.parseDouble(result.split(\",\")[0]);",
      "raw_prediction": "double exchangeRate = Double.parseDouble(result.split(\",\")[0]);",
      "es": 0.39682539682539686,
      "em": false,
      "passed": false
    },
    {
      "index": 1559,
      "groundtruth": "Errors.noConexion();",
      "prediction": "return \"offline\";",
      "raw_prediction": " return \"offline\";\n        }\n    }\n\n    public String convertOffline(String amount, String currencyInput, String currencyOutput) {\n        return String.format(\"%.2f\",Double.parseDouble(getExchangeRate()) * Double.parseDouble(amount));\n    }\n\n    public",
      "es": 0.30000000000000004,
      "em": false,
      "passed": false
    },
    {
      "index": 1560,
      "groundtruth": "inputBox.getComboBox().getValue());",
      "prediction": "inputBox.getComboBox().getValue());",
      "raw_prediction": "inputBox.getComboBox().getValue());\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1561,
      "groundtruth": "String resultOffline = conversion.convertOffline(exchangeRateOffline, baseTextField);",
      "prediction": "isFound = true;",
      "raw_prediction": " isFound = true;\n                        inputBox.setTextField(resultOffline);\n             inputBox.getLabel2().setTextFill(Color.RED);\n             inputBox.setLabel2(\" | Tipo de cambio: \" + exchangeRateOffline + \" (\" + date + \"",
      "es": 0.10588235294117643,
      "em": false,
      "passed": false
    },
    {
      "index": 1562,
      "groundtruth": "inputBox.setTextField(resultOffline);",
      "prediction": "inputBox.setTextField(resultOffline);",
      "raw_prediction": "inputBox.setTextField(resultOffline);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1563,
      "groundtruth": "startsWith(baseComboBox) && key.toString().endsWith(inputBox.getComboBox().getValue())) {",
      "prediction": "contains(baseComboBox + \"->\" + inputBox.getComboBox().getValue())",
      "raw_prediction": "contains(baseComboBox + \"->\" + inputBox.getComboBox().getValue())) {",
      "es": 0.5730337078651686,
      "em": false,
      "passed": false
    },
    {
      "index": 1564,
      "groundtruth": "inputBox.getComboBox().getValue() + \" : \" + exchangeRate);",
      "prediction": "inputBox.getComboBox().getValue() + \" = \" + result);",
      "raw_prediction": "inputBox.getComboBox().getValue() + \" = \" + result);\n            inputBox.getLabel2().setTextFill(Color.GREEN);\n            isFound = true;\n            } else {\n                Platform.runLater(() -> {\n                    inputBox.setTextField(\"\");\n",
      "es": 0.7931034482758621,
      "em": false,
      "passed": false
    },
    {
      "index": 1565,
      "groundtruth": "inputBox.getLabel2().setTextFill(Color.RED);",
      "prediction": "inputBox.setLabel2(\" | Tipo de cambio: \" + exchangeRateOffline + \" (\" + date + \" )\");",
      "raw_prediction": " inputBox.setLabel2(\" | Tipo de cambio: \" + exchangeRateOffline + \" (\" + date + \" )\");\n                        isFound = true;\n                    }\n                });\n                if (!isFound) {\n                inputBox.setTextField(\"\");\n",
      "es": 0.3058823529411765,
      "em": false,
      "passed": false
    },
    {
      "index": 1566,
      "groundtruth": "inputBox.setTextField(result);",
      "prediction": "inputBox.setTextField(result);",
      "raw_prediction": "     inputBox.setTextField(result);\n                inputBox.getLabel2().setTextFill(Color.GREEN);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1567,
      "groundtruth": "inputBox.setLabel2(\" | Tipo de cambio: \" + exchangeRateOffline + \" (\" + date + \" ) \u26a0\");",
      "prediction": "inputBox.setLabel2(\" | Tipo de cambio: \" + baseComboBox + \" -> \" + inputBox.getComboBox().getValue() + \" : \" + exchangeRateOffline",
      "raw_prediction": "inputBox.setLabel2(\" | Tipo de cambio: \" + baseComboBox + \" -> \" + inputBox.getComboBox().getValue() + \" : \" + exchangeRateOffline + \" (\" + date + \")\");\n                        inputBox.setLabel2",
      "es": 0.46923076923076923,
      "em": false,
      "passed": false
    },
    {
      "index": 1568,
      "groundtruth": "inputBox.setLabel2(\" | No hay datos guardados \u26a0\");",
      "prediction": "inputBox.setLabel2(\" | No hay conexi\u00f3n a internet. Por favor, int\u00e9ntelo m\u00e1s",
      "raw_prediction": " inputBox.setLabel2(\" | No hay conexi\u00f3n a internet. Por favor, int\u00e9ntelo m\u00e1s tarde.\");",
      "es": 0.48,
      "em": false,
      "passed": false
    },
    {
      "index": 1569,
      "groundtruth": "Node node : MainController.getVBox().getChildren()) {",
      "prediction": "Node node : MainController.g",
      "raw_prediction": "Node node : MainController.getVBox().getChildren()) {",
      "es": 0.5283018867924528,
      "em": false,
      "passed": false
    },
    {
      "index": 1570,
      "groundtruth": "= Utils.addCurrencies();",
      "prediction": "= Utils.getCurrencies();",
      "raw_prediction": "= Utils.getCurrencies();",
      "es": 0.875,
      "em": false,
      "passed": false
    },
    {
      "index": 1571,
      "groundtruth": "modified |= mySettingsComponent.isAutoPopup() != settings.autoPopup;",
      "prediction": "modified |= !mySettingsComponent.get_AUTO_POPUP().equals(settings.AUTO_POPUP);",
      "raw_prediction": "modified |= !mySettingsComponent.get_AUTO_POPUP().equals(settings.AUTO_POPUP);",
      "es": 0.6025641025641026,
      "em": false,
      "passed": false
    },
    {
      "index": 1572,
      "groundtruth": "|= mySettingsComponent.isAutoSaveToNewFile() != settings.autoSaveToNewFile;",
      "prediction": "|= !mySettingsComponent.isAutoSaveToNewFile() != settings.autoSaveToNewFile;",
      "raw_prediction": "|= !mySettingsComponent.isAutoSaveToNewFile() != settings.autoSaveToNewFile;",
      "es": 0.9868421052631579,
      "em": false,
      "passed": false
    },
    {
      "index": 1573,
      "groundtruth": "Utils.obtenerCodigoPais(item);",
      "prediction": "Utils.obtenerCodigoPais(item);",
      "raw_prediction": "Utils.obtenerCodigoPais(item);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1574,
      "groundtruth": "modified |= mySettingsComponent.isAutoAddComments() != settings.autoAddComments;",
      "prediction": "modified |= mySettingsComponent.isAutoAddComments() != settings.autoAddComments;",
      "raw_prediction": "modified |= mySettingsComponent.isAutoAddComments() != settings.autoAddComments;",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1575,
      "groundtruth": "modified = !mySettingsComponent.get_OPENAI_API_KEY().equals(settings.OPENAI_API_KEY);",
      "prediction": "modified = false;",
      "raw_prediction": "modified = false;\n        modified |= !mySettingsComponent.get_OPENAI_API_KEY().equals(settings.OPENAI_API_KEY);",
      "es": 0.18823529411764706,
      "em": false,
      "passed": false
    },
    {
      "index": 1576,
      "groundtruth": "!mySettingsComponent.getCustomRefactor().equals(settings.customRefactor);",
      "prediction": "mySettingsComponent.getCustomRefactor().equals(settings.customRefactor);",
      "raw_prediction": "mySettingsComponent.getCustomRefactor().equals(settings.customRefactor);",
      "es": 0.9863013698630136,
      "em": false,
      "passed": false
    },
    {
      "index": 1577,
      "groundtruth": "mySettingsComponent.isAutoReplaceCode() != settings.autoReplaceCode;",
      "prediction": "mySettingsComponent.isAutoReplaceCode() != settings.autoReplaceCode;",
      "raw_prediction": "mySettingsComponent.isAutoReplaceCode() != settings.autoReplaceCode;",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1578,
      "groundtruth": ".setText(Utils.addSymbol(baseComboBox) + \"0\");",
      "prediction": ".setText(\"USD: 0\");",
      "raw_prediction": ".setText(\"USD: 0\");\n        label2.setFont(Font.font(15));\n        label2.setTextFill(Color.DIMGRAY);\n        label2.setWrapText(true);\n        label2.setPadding(new Insets(0.0, ",
      "es": 0.32608695652173914,
      "em": false,
      "passed": false
    },
    {
      "index": 1579,
      "groundtruth": "label1.setText(Utils.addSymbol(baseComboBox) + formattedNumber);",
      "prediction": "textField.setText(formattedNumber);",
      "raw_prediction": " textField.setText(formattedNumber);\n         } else {\n             textField.setText(\"\");\n         }",
      "es": 0.40625,
      "em": false,
      "passed": false
    },
    {
      "index": 1580,
      "groundtruth": "ok(this.orderService.getCustomerOrders(id));",
      "prediction": "ok(this.orderService.getByCustomer(id));",
      "raw_prediction": "ok(this.orderService.getByCustomer(id));",
      "es": 0.8181818181818181,
      "em": false,
      "passed": false
    },
    {
      "index": 1581,
      "groundtruth": "ok(this.pizzaService.getCheapest(price));",
      "prediction": "ok(this.pizzaService.getCheapestPizzas(price));",
      "raw_prediction": "ok(this.pizzaService.getCheapestPizzas(price));",
      "es": 0.8723404255319149,
      "em": false,
      "passed": false
    },
    {
      "index": 1582,
      "groundtruth": "orderRepository.findAllByMethodIn(methods);",
      "prediction": "orderRepository.findByMethodIn(methods);",
      "raw_prediction": "orderRepository.findByMethodIn(methods);",
      "es": 0.9302325581395349,
      "em": false,
      "passed": false
    },
    {
      "index": 1583,
      "groundtruth": "orderRepository.findCustomerOrders(idCustomer);",
      "prediction": "orderRepository.findByCustomerId(idCustomer);",
      "raw_prediction": "orderRepository.findByCustomerId(idCustomer);",
      "es": 0.851063829787234,
      "em": false,
      "passed": false
    },
    {
      "index": 1584,
      "groundtruth": "this.pizzaRepository.findAllByAvailableTrueAndDescriptionContainingIgnoreCase(ingredient);",
      "prediction": "this.pizzaRepository.findAllByAvailableTrueAndDescriptionContainingIgnoreCase(ingredient);",
      "raw_prediction": "this.pizzaRepository.findAllByAvailableTrueAndDescriptionContainingIgnoreCase(ingredient);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1585,
      "groundtruth": "orderRepository.findSummary(orderId);",
      "prediction": "orderRepository.getSummary(orderId);",
      "raw_prediction": "orderRepository.getSummary(orderId);",
      "es": 0.8918918918918919,
      "em": false,
      "passed": false
    },
    {
      "index": 1586,
      "groundtruth": "return this.pizzaRepository.findFirstByAvailableTrueAndNameIgnoreCase(name).orElseThrow(() -> new RuntimeException(\"La pizza no existe\"));",
      "prediction": "return this.pizzaRepository.findByName(name);",
      "raw_prediction": "return this.pizzaRepository.findByName(name);",
      "es": 0.32608695652173914,
      "em": false,
      "passed": false
    },
    {
      "index": 1587,
      "groundtruth": "return mergePluginManagement != null ? mergePluginManagement : mixins.isMergePluginManagement();",
      "prediction": "return mergePluginManagement != null ? mergePluginManagement : mixins.isMergePluginManagement();",
      "raw_prediction": "return mergePluginManagement != null ? mergePluginManagement : mixins.isMergePluginManagement();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1588,
      "groundtruth": ".pizzaRepository.findTop3ByAvailableTrueAndPriceLessThanEqualOrderByPriceAsc(price);",
      "prediction": ".pizzaRepository.findAllByAvailableTrueAndPriceLessThan(price);",
      "raw_prediction": ".pizzaRepository.findAllByAvailableTrueAndPriceLessThan(price);",
      "es": 0.7142857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 1589,
      "groundtruth": "null ? mergePlugins : mixins.isMergePlugins();",
      "prediction": "null ? mergePlugins : mixins.isMergePlugins();",
      "raw_prediction": "null ? mergePlugins : mixins.isMergePlugins();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1590,
      "groundtruth": "null ? mergeDistributionManagement : mixins.isMergeDistributionManagement();",
      "prediction": "null ? mergeDistributionManagement : mixins.isMergeDistributionManagement();",
      "raw_prediction": "null ? mergeDistributionManagement : mixins.isMergeDistributionManagement();\n    }\n\n    public void setMergeDistributionManagement(Boolean mergeDistributionManagement) {\n        this.mergeDistributionManagement = mergeDistributionManagement;",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1591,
      "groundtruth": "!= null ? activateProfiles : mixins.isActivateProfiles();",
      "prediction": "!= null ? activateProfiles : mixins.isActivateProfiles();",
      "raw_prediction": "!= null ? activateProfiles : mixins.isActivateProfiles();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1592,
      "groundtruth": "mixins.getDefaultMixinType();",
      "prediction": "\"jar\";",
      "raw_prediction": "\"jar\";",
      "es": 0.06896551724137934,
      "em": false,
      "passed": false
    },
    {
      "index": 1593,
      "groundtruth": "recurse != null ? recurse : mixins.isRecurse();",
      "prediction": "recurse != null ? recurse : mixins.isRecurse();",
      "raw_prediction": "recurse != null ? recurse : mixins.isRecurse();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1594,
      "groundtruth": "!= null ? mergeRepositories : mixins.isMergeRepositories();",
      "prediction": "!= null ? mergeRepositories : mixins.isMergeRepositories();",
      "raw_prediction": "!= null ? mergeRepositories : mixins.isMergeRepositories();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1595,
      "groundtruth": "ok(eventService.getUserEvents(userId));",
      "prediction": "badRequest().build();",
      "raw_prediction": "badRequest().build();",
      "es": 0.17948717948717952,
      "em": false,
      "passed": false
    },
    {
      "index": 1596,
      "groundtruth": "attendanceRepository.findByUserIdAndRole(userId, role).forEach(\n                attendance -> events.add(attendance.getEvent())\n        );",
      "prediction": "if (!user.get().getRole().equals(role)) {\n            throw new AcmException(\"User does not have the required role\", HttpStatus.FORBIDDEN);",
      "raw_prediction": "if (!user.get().getRole().equals(role)) {\n            throw new AcmException(\"User does not have the required role\", HttpStatus.FORBIDDEN);\n        }\n        attendanceRepository.findByUserId(userId).forEach(\n                attendance -> events.add",
      "es": 0.15107913669064743,
      "em": false,
      "passed": false
    },
    {
      "index": 1597,
      "groundtruth": "eventService.getSingleEvent(eventId);",
      "prediction": "eventService.getSingleEvent(eventId);",
      "raw_prediction": "eventService.getSingleEvent(eventId);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1598,
      "groundtruth": "String username = jwtService.extractUsername(jwtToken);",
      "prediction": "String username = jwtService.extractUsername(jwtToken);",
      "raw_prediction": "String username = jwtService.extractUsername(jwtToken);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1599,
      "groundtruth": "attendanceRepository.findByUserId(userId).forEach(\n                attendance -> events.add(attendance.getEvent())\n        );",
      "prediction": "for (Attendance attendance : attendanceRepository.findByUserId(userId))",
      "raw_prediction": "for (Attendance attendance : attendanceRepository.findByUserId(userId)) {\n            events.add(attendance.getEvent());\n        }",
      "es": 0.21599999999999997,
      "em": false,
      "passed": false
    },
    {
      "index": 1600,
      "groundtruth": "return this.pizzaRepository.findAllByAvailableTrueAndDescriptionContainingIgnoreCase(ingredient);",
      "prediction": "return this.pizzaRepository.findAllByAvailableTrueAndDescriptionContainingIgnoreCase(ingredient);",
      "raw_prediction": "return this.pizzaRepository.findAllByAvailableTrueAndDescriptionContainingIgnoreCase(ingredient);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1601,
      "groundtruth": ".orderRepository.findCustomerOrders(idCustomer);",
      "prediction": ".orderRepository.findByCustomerId(idCustomer);",
      "raw_prediction": ".orderRepository.findByCustomerId(idCustomer);",
      "es": 0.8541666666666666,
      "em": false,
      "passed": false
    },
    {
      "index": 1602,
      "groundtruth": "this.pizzaRepository.findTop3ByAvailableTrueAndPriceLessThanEqualOrderByPriceAsc(price);",
      "prediction": "this.pizzaRepository.findAllByAvailableTrueAndPriceLessThan(price);",
      "raw_prediction": "this.pizzaRepository.findAllByAvailableTrueAndPriceLessThan(price);",
      "es": 0.7272727272727273,
      "em": false,
      "passed": false
    },
    {
      "index": 1603,
      "groundtruth": "this.orderService.getCustomerOrders(id));",
      "prediction": "this.orderService.getByCustomer(id));",
      "raw_prediction": "this.orderService.getByCustomer(id));",
      "es": 0.8048780487804879,
      "em": false,
      "passed": false
    },
    {
      "index": 1604,
      "groundtruth": "!= null && !encryptor.isEncrypted(propValue)) {",
      "prediction": "!= null && !encryptor.isE",
      "raw_prediction": "!= null && !encryptor.isEncrypted(propValue)) {",
      "es": 0.5319148936170213,
      "em": false,
      "passed": false
    },
    {
      "index": 1605,
      "groundtruth": "return customerRepository.findCustomerByName(name);",
      "prediction": "return customerRepository.findCustomerByName(name);",
      "raw_prediction": " return customerRepository.findCustomerByName(name);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1606,
      "groundtruth": "encryptor.decrypt(encryptedValue).toString();",
      "prediction": "encryptor.decrypt(encryptedValue);",
      "raw_prediction": "encryptor.decrypt(encryptedValue);",
      "es": 0.7555555555555555,
      "em": false,
      "passed": false
    },
    {
      "index": 1607,
      "groundtruth": "= encryptor.decrypt(value).toString();",
      "prediction": "= decrypt(value);",
      "raw_prediction": "= decrypt(value);",
      "es": 0.4473684210526315,
      "em": false,
      "passed": false
    },
    {
      "index": 1608,
      "groundtruth": "if (encryptor.isEncrypted(value)) {",
      "prediction": "if (encryptor.isEncrypted(value))",
      "raw_prediction": "\tif (encryptor.isEncrypted(value)) {",
      "es": 0.9428571428571428,
      "em": false,
      "passed": false
    },
    {
      "index": 1609,
      "groundtruth": "loader.mergeMixins();",
      "prediction": "loader.loadMixins();",
      "raw_prediction": " loader.loadMixins();",
      "es": 0.7619047619047619,
      "em": false,
      "passed": false
    },
    {
      "index": 1610,
      "groundtruth": "mDiracSound.getMusic() == 1;",
      "prediction": "mDiracSound.isEnabled();",
      "raw_prediction": "mDiracSound.isEnabled();",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 1611,
      "groundtruth": "String name = wrapper.getName();",
      "prediction": "String name = wrapper.getName();",
      "raw_prediction": " String name = wrapper.getName();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1612,
      "groundtruth": "return getFriendlyString().compareTo(o.getFriendlyString());",
      "prediction": "if (o instanceof StringVersion)",
      "raw_prediction": " if (o instanceof StringVersion) {\n\n            return version.compareTo(((StringVersion) o).version);\n        } else {\n            throw new IllegalArgumentException(\"Cannot compare StringVersion with non-StringVersion object\");\n        }",
      "es": 0.23333333333333328,
      "em": false,
      "passed": false
    },
    {
      "index": 1613,
      "groundtruth": "mod.getMetadata().getId() + \"->\" + value;",
      "prediction": "mod.getMetadata().getId() + \"->(0.2.x)\" + value;",
      "raw_prediction": "mod.getMetadata().getId() + \"->(0.2.x)\" + value;",
      "es": 0.8541666666666666,
      "em": false,
      "passed": false
    },
    {
      "index": 1614,
      "groundtruth": "return VersionParser.parseSemantic(s);",
      "prediction": "return VersionParser.parseSemantic(s);",
      "raw_prediction": "return VersionParser.parseSemantic(s);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1615,
      "groundtruth": "return o.hasWildcard() ? 0 : -1;",
      "prediction": "return hasWildcard() ? 0 : -1;",
      "raw_prediction": "return hasWildcard() ? 0 : -1;",
      "es": 0.9375,
      "em": false,
      "passed": false
    },
    {
      "index": 1616,
      "groundtruth": "return VersionParser.parse(string, false);",
      "prediction": "return VersionParser.parse(string);",
      "raw_prediction": " return VersionParser.parse(string);",
      "es": 0.8333333333333334,
      "em": false,
      "passed": false
    },
    {
      "index": 1617,
      "groundtruth": "().getMetadata().getId(), ex);",
      "prediction": "(), ex);",
      "raw_prediction": "(), ex);",
      "es": 0.2666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 1618,
      "groundtruth": "exception = new EntrypointException(key, entry.getModContainer().getMetadata().getId(), t);",
      "prediction": "exception = new EntrypointException(key, entry.getModContainer().getMetadata().getId(), t);",
      "raw_prediction": "exception = new EntrypointException(key, entry.getModContainer().getMetadata().getId(), t);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1619,
      "groundtruth": "(ForgePatch.getGameDir());",
      "prediction": "(new File(System.getProperty(\"user.dir\")).toPath());",
      "raw_prediction": "(new File(System.getProperty(\"user.dir\")).toPath());\n    }\n\n    @Override\n    public void addMod(ModContainer mod) {\n        modMap.put(mod.getId(), mod);\n        mods.add(mod);",
      "es": 0.2692307692307693,
      "em": false,
      "passed": false
    },
    {
      "index": 1620,
      "groundtruth": "parent.getVersionComponentCount();",
      "prediction": "parent.getVersionComponentCount();",
      "raw_prediction": "parent.getVersionComponentCount();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1621,
      "groundtruth": "userDAO.getById(id);",
      "prediction": "userDAO.findById(id);",
      "raw_prediction": "userDAO.findById(id);",
      "es": 0.8095238095238095,
      "em": false,
      "passed": false
    },
    {
      "index": 1622,
      "groundtruth": "parent = SemanticVersion.parse(version);",
      "prediction": "this(parent = new SemanticVersionImpl(version, storeX));",
      "raw_prediction": " this(parent = new SemanticVersionImpl(version, storeX));\n    }\n\n    public SemanticVersionImpl(SemanticVersion parent) {\n        this.parent = parent;\n    }\n\n    @Override\n    public boolean isStable() {\n        return",
      "es": 0.5714285714285714,
      "em": false,
      "passed": false
    },
    {
      "index": 1623,
      "groundtruth": "userDAO.getCount();",
      "prediction": "userDAO.getUserCount();",
      "raw_prediction": "userDAO.getUserCount();",
      "es": 0.8260869565217391,
      "em": false,
      "passed": false
    },
    {
      "index": 1624,
      "groundtruth": "userDAO.getByName(name);",
      "prediction": "userDAO.findByName(name);",
      "raw_prediction": "userDAO.findByName(name);",
      "es": 0.84,
      "em": false,
      "passed": false
    },
    {
      "index": 1625,
      "groundtruth": "documentDAO.getCount();",
      "prediction": "documentDAO.getCountDocument();",
      "raw_prediction": "documentDAO.getCountDocument();",
      "es": 0.7419354838709677,
      "em": false,
      "passed": false
    },
    {
      "index": 1626,
      "groundtruth": "return mod.getMetadata().getId() + \"->(0.3.x)\" + value;",
      "prediction": "return mod.getMetadata().getId() + \"->\" + value;",
      "raw_prediction": " return mod.getMetadata().getId() + \"->\" + value;",
      "es": 0.8727272727272728,
      "em": false,
      "passed": false
    },
    {
      "index": 1627,
      "groundtruth": "controllerInfo.getMethod();",
      "prediction": "psiClass.findMe",
      "raw_prediction": "psiClass.findMethodsByName(controllerInfo.getMethodName(), false)[0];",
      "es": 0.14814814814814814,
      "em": false,
      "passed": false
    },
    {
      "index": 1628,
      "groundtruth": "if(controllerInfo.getRequestMethod().toLowerCase().contains(lowerCase)){",
      "prediction": "if(controllerInfo.getName().toLowerCase().contains(lowerCase))",
      "raw_prediction": "if(controllerInfo.getName().toLowerCase().contains(lowerCase)){",
      "es": 0.8194444444444444,
      "em": false,
      "passed": false
    },
    {
      "index": 1629,
      "groundtruth": "if(controllerInfo.getPath().toLowerCase().contains(lowerCase)){",
      "prediction": "if(controllerInfo.getPath().toLowerCase().contains(lowerCase))",
      "raw_prediction": "if(controllerInfo.getPath().toLowerCase().contains(lowerCase)){\n            return true;\n        }\n        if(controllerInfo.getControllerName().toLowerCase().contains(lowerCase)){",
      "es": 0.9841269841269842,
      "em": false,
      "passed": false
    },
    {
      "index": 1630,
      "groundtruth": "getSwaggerInfo() != null && controllerInfo.getSwaggerInfo().toLowerCase().contains(lowerCase)){",
      "prediction": "getSummary() != null && controllerInfo.getSummary",
      "raw_prediction": "getSummary() != null && controllerInfo.getSummary().toLowerCase().contains(lowerCase)){",
      "es": 0.42105263157894735,
      "em": false,
      "passed": false
    },
    {
      "index": 1631,
      "groundtruth": "() != null && controllerInfo.getSwaggerNotes().toLowerCase().contains(lowerCase)){",
      "prediction": "() != null && controllerInfo.getSwaggerNote",
      "raw_prediction": "() != null && controllerInfo.getSwaggerNotes().toLowerCase().contains(lowerCase)){",
      "es": 0.524390243902439,
      "em": false,
      "passed": false
    },
    {
      "index": 1632,
      "groundtruth": "controllerInfo.getSwaggerNotes() != null && controllerInfo.getSwaggerNotes().toLowerCase().contains(lowerCase)){",
      "prediction": "controllerInfo.getDescription() != null && controllerInfo.",
      "raw_prediction": "controllerInfo.getDescription() != null && controllerInfo.getDescription().toLowerCase().contains(lowerCase)){",
      "es": 0.4285714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 1633,
      "groundtruth": "= controllerInfo.getMethod().getContainingFile();",
      "prediction": "= controllerInfo.getFile();",
      "raw_prediction": "= controllerInfo.getFile();",
      "es": 0.5510204081632653,
      "em": false,
      "passed": false
    },
    {
      "index": 1634,
      "groundtruth": "(feignInfo.getMethod());",
      "prediction": "(feignInfo.getFeignClass());",
      "raw_prediction": "(feignInfo.getFeignClass());",
      "es": 0.6785714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 1635,
      "groundtruth": "if(controllerInfo.getSwaggerInfo() != null && controllerInfo.getSwaggerInfo().toLowerCase().contains(lowerCase)){",
      "prediction": "if(controllerInfo.getDescription() != null && controllerInfo.getDescription().toLowerCase().contains(lowerCase))",
      "raw_prediction": "if(controllerInfo.getDescription() != null && controllerInfo.getDescription().toLowerCase().contains(lowerCase)){",
      "es": 0.7964601769911505,
      "em": false,
      "passed": false
    },
    {
      "index": 1636,
      "groundtruth": "database.getConnection().close();",
      "prediction": "// Closing database connection",
      "raw_prediction": " // Closing database connection\n            database.disconnect();",
      "es": 0.18181818181818177,
      "em": false,
      "passed": false
    },
    {
      "index": 1637,
      "groundtruth": "genre.setTitle(resultSet.getString(\"title\"));",
      "prediction": "genre.setTitle(resultSet.getString(\"title\"));",
      "raw_prediction": " genre.setTitle(resultSet.getString(\"title\"));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1638,
      "groundtruth": "genre.setId(resultSet.getInt(\"id\"));",
      "prediction": "genre.setId(resultSet.getInt(\"id\"));",
      "raw_prediction": "genre.setId(resultSet.getInt(\"id\"));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1639,
      "groundtruth": "comment.setText(res.getString(\"text\"));",
      "prediction": "comment.setText(res.getString(\"text\"));",
      "raw_prediction": "comment.setText(res.getString(\"text\"));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1640,
      "groundtruth": "relocation.getPattern(),\n                        relocation.getRelocatedPattern(),\n                        relocation.getIncludes(),\n                        relocation.getExcludes()\n                ));",
      "prediction": "relocation.getFrom(),\n                        relocation.getTo(),\n                        relocation.getExcludes(),\nfrom relocation.getIncludes()\n                ));",
      "raw_prediction": " relocation.getFrom(),\n                        relocation.getTo(),\n                        relocation.getExcludes(),\nfrom relocation.getIncludes()\n                ));",
      "es": 0.7562189054726368,
      "em": false,
      "passed": false
    },
    {
      "index": 1641,
      "groundtruth": "relocation.getIncludes(),\n                        relocation.getExcludes()\n                ));",
      "prediction": "relocation.getExclusions(),\npublic relocation.getInclusions()\n                ));",
      "raw_prediction": " relocation.getExclusions(),\npublic relocation.getInclusions()\n                ));",
      "es": 0.6276595744680851,
      "em": false,
      "passed": false
    },
    {
      "index": 1642,
      "groundtruth": "relocation.getRelocatedPattern(),\n                        relocation.getIncludes(),\n                        relocation.getExcludes()\n                ));",
      "prediction": "relocation.getReplacement(),\npublic relocation.getExclusions(),\npublic relocation.getInclusions()\n                ));",
      "raw_prediction": " relocation.getReplacement(),\npublic relocation.getExclusions(),\npublic relocation.getInclusions()\n                ));\n            }\n\n            this.jarRelocatorRunMethod.invoke(this.jarRelocatorConstructor.newInstance(in.toFile(), out.toFile(), rules));\n        } catch (final",
      "es": 0.5460526315789473,
      "em": false,
      "passed": false
    },
    {
      "index": 1643,
      "groundtruth": "comment.setId(res.getInt(\"id\"));",
      "prediction": "comment.setId(res.getInt(\"id\"));",
      "raw_prediction": " comment.setId(res.getInt(\"id\"));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1644,
      "groundtruth": "playlist.setUser(res.getInt(\"user\"));",
      "prediction": "playlist.setUser(res.getInt(\"user\"));",
      "raw_prediction": "playlist.setUser(res.getInt(\"user\"));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1645,
      "groundtruth": "playlist.setPublic(res.getBoolean(\"is_public\"));",
      "prediction": "playlist.setPublic(res.getBoolean(\"is_public\"));",
      "raw_prediction": "playlist.setPublic(res.getBoolean(\"is_public\"));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1646,
      "groundtruth": ".setArtistObj(crudArtist.getArtistById(music.getArtist()));",
      "prediction": "",
      "raw_prediction": "\n",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1647,
      "error": "RetryError[<Future at 0x10ae8ee40 state=finished raised HTTPError>]",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1648,
      "error": "RetryError[<Future at 0x10a2b37a0 state=finished raised HTTPError>]",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1649,
      "error": "RetryError[<Future at 0x10bb33710 state=finished raised HTTPError>]",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1650,
      "error": "RetryError[<Future at 0x10af0de50 state=finished raised HTTPError>]",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1651,
      "error": "RetryError[<Future at 0x10a197fe0 state=finished raised HTTPError>]",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1652,
      "error": "RetryError[<Future at 0x10a7ce480 state=finished raised HTTPError>]",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1653,
      "groundtruth": "(response.getStatusCode() == 200) {",
      "prediction": "(response.getStatus() == 200)",
      "raw_prediction": "(response.getStatus() == 200){",
      "es": 0.8285714285714285,
      "em": false,
      "passed": false
    },
    {
      "index": 1654,
      "groundtruth": "album.setReleaseDate(new java.sql.Date(new java.util.Date().getTime()));",
      "prediction": "album.setCoverPicPath(\"path\");",
      "raw_prediction": "album.setCoverPicPath(\"path\");",
      "es": 0.25,
      "em": false,
      "passed": false
    },
    {
      "index": 1655,
      "groundtruth": ".setText(String.valueOf(album.getArtist()));",
      "prediction": ".setText(album.getArtist());",
      "raw_prediction": ".setText(album.getArtist());",
      "es": 0.6363636363636364,
      "em": false,
      "passed": false
    },
    {
      "index": 1656,
      "groundtruth": "genre.getId() == albumId){",
      "prediction": "genre.getId() =",
      "raw_prediction": "genre.getId() == album.getGenre()){",
      "es": 0.5769230769230769,
      "em": false,
      "passed": false
    },
    {
      "index": 1657,
      "groundtruth": "(buffer.asInputStream())\n                .build()\n            );",
      "prediction": "(buffer.asByteBuffer())\n                .headers(headers)\n                .build()\n            )",
      "raw_prediction": "(buffer.asByteBuffer())\n                .headers(headers)\n                .build()\n            );",
      "es": 0.5625,
      "em": false,
      "passed": false
    },
    {
      "index": 1658,
      "groundtruth": "a.getVariable());",
      "prediction": "a.getVariable());",
      "raw_prediction": "a.getVariable());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1659,
      "groundtruth": "a.isString() && b.isString()) {",
      "prediction": "a.isString() && b",
      "raw_prediction": "a.isString() && b.isString()) {",
      "es": 0.5483870967741935,
      "em": false,
      "passed": false
    },
    {
      "index": 1660,
      "groundtruth": "(a.isString() && b.isString()) {",
      "prediction": "(a.isString() && b.isString())",
      "raw_prediction": "(a.isString() && b.isString()) {",
      "es": 0.9375,
      "em": false,
      "passed": false
    },
    {
      "index": 1661,
      "groundtruth": "[i] = new Token(tokenMethod.getMethod().process(a));",
      "prediction": "[i + 1] = new Token(method.process(a));",
      "raw_prediction": "[i + 1] = new Token(method.process(a));\n                    continue;",
      "es": 0.5769230769230769,
      "em": false,
      "passed": false
    },
    {
      "index": 1662,
      "groundtruth": "((TokenMethod) token).getMethod());",
      "prediction": "((TokenMethod) token).getMethod());",
      "raw_prediction": "((TokenMethod) token).getMethod());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1663,
      "groundtruth": ".setAttribute(\"user_reg\", teacher.getName());",
      "prediction": ".setAttribute(\"name\", teacher.getName());",
      "raw_prediction": ".setAttribute(\"name\", teacher.getName());",
      "es": 0.8444444444444444,
      "em": false,
      "passed": false
    },
    {
      "index": 1664,
      "groundtruth": "genre.getId() == music.getGenre()){",
      "prediction": "genre.getId() == mu",
      "raw_prediction": "genre.getId() == music.getGenre()){",
      "es": 0.5428571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 1665,
      "groundtruth": "u.setName(rs.getString(3));",
      "prediction": "u.setName(rs.getString(3));",
      "raw_prediction": "u.setName(rs.getString(3));\n\t\t\t\tu.setContact(rs.getString(4));\n\t\t\t\t\tu.setDepartment(rs.getString(5));\n\t\t\t\t\tu.setDesignation(rs.getString(6));\n\t\t\t\t\tu.setSalary(rs.getDouble(7));\n\t\t\t\t\tu.setQual",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1666,
      "groundtruth": "u.setPassword(rs.getString(4));",
      "prediction": "u.setPassword(rs.getString(4));",
      "raw_prediction": "u.setPassword(rs.getString(4));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1667,
      "groundtruth": "u.setMail(rs.getString(1));",
      "prediction": "u.setId(rs.getInt(1));",
      "raw_prediction": "u.setId(rs.getInt(1));\n\t\t\t\t\tu.setMail(rs.getString(4));",
      "es": 0.6666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 1668,
      "groundtruth": "u.setPass(rs.getString(2));",
      "prediction": "u.setPassword(rs.getString(2));",
      "raw_prediction": "u.setPassword(rs.getString(2));",
      "es": 0.8709677419354839,
      "em": false,
      "passed": false
    },
    {
      "index": 1669,
      "groundtruth": "u.setReg(rs.getString(3));",
      "prediction": "u.setReg(rs.getString(2));",
      "raw_prediction": "u.setReg(rs.getString(2));\n\t\t\t\tu.setEmail(rs.getString(3));",
      "es": 0.9615384615384616,
      "em": false,
      "passed": false
    },
    {
      "index": 1670,
      "groundtruth": "return reduce.get(0).getVariable();",
      "prediction": "return resultTokens[0];",
      "raw_prediction": "return resultTokens[0];",
      "es": 0.37142857142857144,
      "em": false,
      "passed": false
    },
    {
      "index": 1671,
      "groundtruth": "u.setFullname(rs.getString(1));",
      "prediction": "u.setId(rs.getInt(1));",
      "raw_prediction": "u.setId(rs.getInt(1));\n\t\t\t\tu.setFullname(rs.getString(2));",
      "es": 0.5806451612903225,
      "em": false,
      "passed": false
    },
    {
      "index": 1672,
      "groundtruth": "album.getId() == music.getArtist()){",
      "prediction": "album.getId() == mus",
      "raw_prediction": "album.getId() == music.getAlbum()){",
      "es": 0.5555555555555556,
      "em": false,
      "passed": false
    },
    {
      "index": 1673,
      "groundtruth": "(album.getId() == music.getArtist()){",
      "prediction": "(album.getId() == music.getAlbum())",
      "raw_prediction": "(album.getId() == music.getAlbum()){",
      "es": 0.8378378378378378,
      "em": false,
      "passed": false
    },
    {
      "index": 1674,
      "groundtruth": "playlistName.setText(playlist.getTitle());",
      "prediction": "playlistName.setText(playlist.getName());",
      "raw_prediction": " playlistName.setText(playlist.getName());",
      "es": 0.9047619047619048,
      "em": false,
      "passed": false
    },
    {
      "index": 1675,
      "groundtruth": "(genre.getId() == music.getGenre()){",
      "prediction": "(genre.getId() == music.getGenre())",
      "raw_prediction": "(genre.getId() == music.getGenre()){",
      "es": 0.9722222222222222,
      "em": false,
      "passed": false
    },
    {
      "index": 1676,
      "groundtruth": "Operator operator = tokenOperator.getOperation();",
      "prediction": "Operator operator = tokenOperator.getOperation();",
      "raw_prediction": "Operator operator = tokenOperator.getOperation();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1677,
      "groundtruth": "Token(operator.getName() + resultTokens[i + 1].getVariable());",
      "prediction": "Token(operator.getName() + resultTokens[i + 1].getVariable());",
      "raw_prediction": "Token(operator.getName() + resultTokens[i + 1].getVariable());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1678,
      "groundtruth": "= new Token(operator.getName() + resultTokens[i + 1].getVariable());",
      "prediction": "= new Token(operator.getName() + resultTokens[i + 1].getVariable());",
      "raw_prediction": "= new Token(operator.getName() + resultTokens[i + 1].getVariable());\n                } else if (a instanceof TokenMethod) {\n                    setSafeToken(resultTokens, i - 1, null);\n                } else if (a",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1679,
      "groundtruth": "response.getJson(), Music.class);",
      "prediction": "response.getJson(), Music.class));",
      "raw_prediction": "response.getJson(), Music.class));",
      "es": 0.9705882352941176,
      "em": false,
      "passed": false
    },
    {
      "index": 1680,
      "groundtruth": "System.out.println(\"test\" + response.getMessage());",
      "prediction": "System.out.println(response.getMessage());",
      "raw_prediction": "    System.out.println(response.getMessage());",
      "es": 0.8235294117647058,
      "em": false,
      "passed": false
    },
    {
      "index": 1681,
      "groundtruth": "setHeaderText(response1.getMessage());",
      "prediction": "setHeaderText(null);",
      "raw_prediction": "setHeaderText(null);\n                            alert.setContentText(\"Music added to playlist successfully!\");\n                            alert.show();\n                        } catch (IOException | ClassNotFoundException e) {\n                            throw new RuntimeException(e);\n                        }\n                    }\n                });\n\n                addToPlaylistVbox.getChildren().",
      "es": 0.4473684210526315,
      "em": false,
      "passed": false
    },
    {
      "index": 1682,
      "groundtruth": "a.getVariable().toString().isEmpty()) {",
      "prediction": "!(a instanceof TokenMethod)",
      "raw_prediction": "!(a instanceof TokenMethod)) {\n                    setSafeToken(resultTokens, i - 2, null);",
      "es": 0.15384615384615385,
      "em": false,
      "passed": false
    },
    {
      "index": 1683,
      "groundtruth": "(album.getCoverPicPath() != null) {",
      "prediction": "(album.getCoverPicPath() != null)",
      "raw_prediction": "(album.getCoverPicPath() != null){",
      "es": 0.9428571428571428,
      "em": false,
      "passed": false
    },
    {
      "index": 1684,
      "groundtruth": "final GptTurboModel model = GptTurboDto.convertToGptTurboModel(dto);",
      "prediction": "GPTTurboModel model = chatServiceimpl.fetch(dto);",
      "raw_prediction": "GPTTurboModel model = chatServiceimpl.fetch(dto);",
      "es": 0.4411764705882353,
      "em": false,
      "passed": false
    },
    {
      "index": 1685,
      "groundtruth": "() + \"_\" + getIdentityResolver().getIdentityKey(), getConfiguration());",
      "prediction": "(), getConfiguration(), getIdentityResolver());",
      "raw_prediction": "(), getConfiguration(), getIdentityResolver());\n    }\n\n    @Override\n    public String toString() {\n        return \"BucketPod{\" +\n                \"id='\" + id + '\\'' +\n                \", configuration=\" + configuration +\n                \", identityResolver=\"",
      "es": 0.3802816901408451,
      "em": false,
      "passed": false
    },
    {
      "index": 1686,
      "groundtruth": "dslParser.parse(arrangement);",
      "prediction": "dslParser.parse(arrangement);",
      "raw_prediction": "dslParser.parse(arrangement);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1687,
      "groundtruth": "el.getTypename();",
      "prediction": "el.getType();",
      "raw_prediction": "el.getType();",
      "es": 0.7647058823529411,
      "em": false,
      "passed": false
    },
    {
      "index": 1688,
      "groundtruth": "body.getVariables().getRepresentations();",
      "prediction": "body.getEntities();",
      "raw_prediction": "body.getEntities();",
      "es": 0.3902439024390244,
      "em": false,
      "passed": false
    },
    {
      "index": 1689,
      "groundtruth": "query = body.getQuery().replaceFirst(\".+?\\\\)\", \"\");",
      "prediction": "query = body.getQuery();",
      "raw_prediction": "query = body.getQuery();",
      "es": 0.47058823529411764,
      "em": false,
      "passed": false
    },
    {
      "index": 1690,
      "groundtruth": "int status = ProcessUtils.runAndWait(cmd, tempDir);",
      "prediction": "ProcessUtils.runAndWait(cmd, tempDir, options.listener);",
      "raw_prediction": " ProcessUtils.runAndWait(cmd, tempDir, options.listener);",
      "es": 0.4464285714285714,
      "em": false,
      "passed": false
    },
    {
      "index": 1691,
      "groundtruth": "FileUtils.writeFile(new File(cwd, \"eula.txt\"), \"eula=true\");",
      "prediction": "String eula = options.cwd + \"/eula.txt\";",
      "raw_prediction": " String eula = options.cwd + \"/eula.txt\";\n             FileUtils.writeFile(eula, \"eula=true\");\n        }\n\n        if (options.properties != null) {\n            for (String property : options.properties) {\n                String[] parts",
      "es": 0.2666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 1692,
      "groundtruth": "Logger.info(\"Process exited with code: \" + exitCode);",
      "prediction": "Logger.info(\"Server exited with code: \" + exitCode);",
      "raw_prediction": "Logger.info(\"Server exited with code: \" + exitCode);",
      "es": 0.8867924528301887,
      "em": false,
      "passed": false
    },
    {
      "index": 1693,
      "groundtruth": "setNumero(endereco.getNumero());",
      "prediction": "setLogradouro(endereco.getLogradouro());",
      "raw_prediction": "setLogradouro(endereco.getLogradouro());\n        enderecoSalvo.setNumero(endereco.getNumero());\n        enderecoSalvo.setBairro(endereco.getBairro());\n        enderecoSalvo.setCidade(endereco.getCidade());\n        enderecoSalvo.set",
      "es": 0.6,
      "em": false,
      "passed": false
    },
    {
      "index": 1694,
      "groundtruth": "endereco = modelMapper.getMapper().map(enderecoForm, Endereco.class);",
      "prediction": "endereco = modelMapper.getMapper().map(enderecoForm, Endereco.class);",
      "raw_prediction": "endereco = modelMapper.getMapper().map(enderecoForm, Endereco.class);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1695,
      "groundtruth": "setComplemento(endereco.getComplemento());",
      "prediction": "setComplemento(endereco.getComplemento());",
      "raw_prediction": "setComplemento(endereco.getComplemento());\n        enderecoSalvo.setBairro(endereco.getBairro());\n        enderecoSalvo.setCidade(endereco.getCidade());\n        enderecoSalvo.setEstado(endereco.getEstado());\n        endereco",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1696,
      "groundtruth": "DownloadUtils.download(this.url, finalFile, ignoreExist);",
      "prediction": "if (!ignoreExist && finalFile.exists())",
      "raw_prediction": "if (!ignoreExist && finalFile.exists()) {\n            return;\n        }\n\n        DownloadUtils.download(this.url, finalFile);",
      "es": 0.33333333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 1697,
      "groundtruth": "FileUtils.deleteRecursive(tempDir);",
      "prediction": "installerFile.delete(); // Delete the temporary installer file",
      "raw_prediction": " installerFile.delete(); // Delete the temporary installer file\n        }\n\n        if (installer != null && installer.getPostInstall() != null) {\n            String postInstall = installer.getPostInstall().replace(\"{version}\", version).replace(\"{java",
      "es": 0.30645161290322576,
      "em": false,
      "passed": false
    },
    {
      "index": 1698,
      "groundtruth": "installerFile = DownloadUtils.downloadTemp(this.url);",
      "prediction": "installerFile = new File(options.cwd, installer.getJAR());",
      "raw_prediction": "installerFile = new File(options.cwd, installer.getJAR());",
      "es": 0.4655172413793104,
      "em": false,
      "passed": false
    },
    {
      "index": 1699,
      "groundtruth": "DebugChannel channel = Preconditions.checkNonNull(getChannel(key));",
      "prediction": "DebugChannel channel = Preconditions.checkNonNull(getChannel(key));",
      "raw_prediction": "DebugChannel channel = Preconditions.checkNonNull(getChannel(key));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1700,
      "groundtruth": "FileUtils.writeFile(new File(options.cwd, \".mcdeploy\"), this.getJARName());",
      "prediction": "FileUtils.deleteRecursive(options.cwd);",
      "raw_prediction": " FileUtils.deleteRecursive(options.cwd);",
      "es": 0.3733333333333333,
      "em": false,
      "passed": false
    },
    {
      "index": 1701,
      "groundtruth": "FileUtils.readFile(dotMCDFile);",
      "prediction": "dotMCDFile.exists() ? dotMCDFile.getName() : \"server.jar\";",
      "raw_prediction": "dotMCDFile.exists() ? dotMCDFile.getName() : \"server.jar\";",
      "es": 0.2586206896551724,
      "em": false,
      "passed": false
    },
    {
      "index": 1702,
      "groundtruth": "modelMapper.getMapper().map(enderecoForm, Endereco.class);",
      "prediction": "modelMapper.getMapper().map(enderecoForm, Endereco.class);",
      "raw_prediction": "modelMapper.getMapper().map(enderecoForm, Endereco.class);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1703,
      "groundtruth": "List<Endereco> enderecoPelosCEP = enderecoRepository.getEnderecosPeloCEP(cep);",
      "prediction": "List<Endereco> enderecoPelosCEP = enderecoRepository.getEnderecoPorCEP(cep);",
      "raw_prediction": "List<Endereco> enderecoPelosCEP = enderecoRepository.getEnderecoPorCEP(cep);",
      "es": 0.9487179487179487,
      "em": false,
      "passed": false
    },
    {
      "index": 1704,
      "groundtruth": "listaEnderecos = enderecoRepository.getEnderecoList();",
      "prediction": "listaEnderecos = enderecoRepository.listarEnderecos();",
      "raw_prediction": "listaEnderecos = enderecoRepository.listarEnderecos();",
      "es": 0.8518518518518519,
      "em": false,
      "passed": false
    },
    {
      "index": 1705,
      "groundtruth": "return R.error(\"\u672a\u77e5\u9519\u8bef\");",
      "prediction": "return R.error(\"\u8c03\u7528\u5931\u8d25\");",
      "raw_prediction": "return R.error(\"\u8c03\u7528\u5931\u8d25\");",
      "es": 0.8260869565217391,
      "em": false,
      "passed": false
    },
    {
      "index": 1706,
      "groundtruth": ").put(\"name\", source.name()).put(\"version\", source.version()));",
      "prediction": ")",
      "raw_prediction": ")\n                .put(\"name\", sources.name())\n                .put(\"version\", sources.version())\n                .put(\"type\", sources.type())\n                .put(\"sourceUrl\", sources.sourceUrl())\n                .put(\"license\", sources.license",
      "es": 0.015873015873015928,
      "em": false,
      "passed": false
    },
    {
      "index": 1707,
      "groundtruth": ").purl().getType());",
      "prediction": "));",
      "raw_prediction": "));",
      "es": 0.15000000000000002,
      "em": false,
      "passed": false
    },
    {
      "index": 1708,
      "groundtruth": "().map(v -> v.purl().getType()).distinct().toList();",
      "prediction": "()",
      "raw_prediction": "()\n            .map(PackageRef::getPackageManager)\n            .distinct()\n            .collect(Collectors.toList()));",
      "es": 0.038461538461538436,
      "em": false,
      "passed": false
    },
    {
      "index": 1709,
      "groundtruth": "severity(SeverityUtils.fromScore(score));",
      "prediction": "severity(SeverityUtils.getSeverity(score))",
      "raw_prediction": "severity(SeverityUtils.getSeverity(score))\n        .description(data.get(\"description\").asText());\n  }\n\n  public String buildRequest(String purl) {\n    ObjectNode root = mapper.createObjectNode().put(\"coordinates\", purl);\n   ",
      "es": 0.7380952380952381,
      "em": false,
      "passed": false
    },
    {
      "index": 1710,
      "groundtruth": "tree.root(), allDeps);",
      "prediction": "tree.root(), Collections.emptySet());",
      "raw_prediction": "tree.root(), Collections.emptySet());\n    rootNode.put(\"pkgId\", getId(tree.root()));",
      "es": 0.5135135135135135,
      "em": false,
      "passed": false
    },
    {
      "index": 1711,
      "groundtruth": "(\"pkgs\", addPackages(depGraph, req.tree()));",
      "prediction": "(\"packages\", addPackages(depGraph, req.graph()));",
      "raw_prediction": "(\"packages\", addPackages(depGraph, req.graph()));\n",
      "es": 0.8367346938775511,
      "em": false,
      "passed": false
    },
    {
      "index": 1712,
      "groundtruth": "().add(createPkg(tree.root()));",
      "prediction": "();",
      "raw_prediction": "();\n\n    ArrayNodes depsGraph = mapper.createArrayNode();",
      "es": 0.09677419354838712,
      "em": false,
      "passed": false
    },
    {
      "index": 1713,
      "groundtruth": "c -> PackageRef.builder().purl(c.getPurl()).build())));",
      "prediction": "c -> PackageRef.builder().purl(c.getPurl()).build())));",
      "raw_prediction": " c -> PackageRef.builder().purl(c.getPurl()).build())));\n      }\n\n      if (!componentPurls.isEmpty()) {",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1714,
      "groundtruth": "&& !req.tree().getAll().isEmpty();",
      "prediction": "&& !req.tree().dependencies().isEmpty();",
      "raw_prediction": "&& !req.tree().dependencies().isEmpty();\n  }\n\n  public String buildDependenciesRequest(List<PackageRef> packages) throws JsonProcessingException {\n    ArrayNode coordinates = mapper.createArrayNode();\n    packages.stream()\n        .map(Package",
      "es": 0.725,
      "em": false,
      "passed": false
    },
    {
      "index": 1715,
      "groundtruth": "ref.name()).append(\"@\").append(ref.version()).toString();",
      "prediction": "ref.groupId())",
      "raw_prediction": "ref.groupId())\n        .append(\":\")\n        .append(ref.artifactId())\n        .append(\":\")\n        .append(ref.version())\n        .toString();\n  }\n\n  private ObjectNode createNode(PackagesRefs source, Set<Package",
      "es": 0.1578947368421053,
      "em": false,
      "passed": false
    },
    {
      "index": 1716,
      "groundtruth": "PackageRef.builder().purl(pkgRef).build();",
      "prediction": "new PackageRef(pkgRef);",
      "raw_prediction": "new PackageRef(pkgRef);",
      "es": 0.3571428571428571,
      "em": false,
      "passed": false
    },
    {
      "index": 1717,
      "groundtruth": "\"/*?\" + stonecutter.currentActive() + \" {",
      "prediction": "\"/*?}\");",
      "raw_prediction": "\"/*?}\");\n                editor.getCaretModel().moveToOffset(selectionStart + 1);\n             });\n        }\n\n        private void clickNewElse(ActionEvent e) {\n            StackingPopupDispatcher.getInstance().closeActivePopup();\n            String selectionText",
      "es": 0.12195121951219512,
      "em": false,
      "passed": false
    },
    {
      "index": 1718,
      "groundtruth": ").missingTokens.isEmpty() ? \"\" : stonecutter.tokenCache().missingTokens.iterator().next());",
      "prediction": ").identifierPattern.pattern());",
      "raw_prediction": ").identifierPattern.pattern());\n        tReader.setText(stonecutter.tokenCache().readerPattern.pattern());\n        tWriter.setText(stonecutter.tokenCache().writerPattern.pattern());\n    }\n\n    @Override\n    protected void doOKAction()",
      "es": 0.21978021978021978,
      "em": false,
      "passed": false
    },
    {
      "index": 1719,
      "groundtruth": "(ref.name(), issues);",
      "prediction": "(pkgRef, issues);",
      "raw_prediction": "(pkgRef, issues);",
      "es": 0.5714285714285714,
      "em": false,
      "passed": false
    },
    {
      "index": 1720,
      "groundtruth": "add(ref.purl().getType());",
      "prediction": "add(ref.purl().getType());",
      "raw_prediction": "add(ref.purl().getType());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1721,
      "groundtruth": "(ref.name()).append(\"@\").append(ref.version()).toString();",
      "prediction": "()",
      "raw_prediction": "()\n        .append(ref.groupId())\n        .append(\":\")\n        .append(ref.artifactId())\n        .append(\":\")\n        .append(ref.version())\n        .toString();",
      "es": 0.03448275862068961,
      "em": false,
      "passed": false
    },
    {
      "index": 1722,
      "groundtruth": "CharUtil.isBlankChar(str.charAt(i))) {",
      "prediction": "Character.isWhitespac",
      "raw_prediction": "Character.isWhitespace(str.charAt(i))) {",
      "es": 0.26315789473684215,
      "em": false,
      "passed": false
    },
    {
      "index": 1723,
      "groundtruth": "stonecutter.tokenCache().tokensByVersion.get(cVersion.getSelectedItem()).values());",
      "prediction": "stonecutter.tokenMapper().tokens());",
      "raw_prediction": "stonecutter.tokenMapper().tokens());\n            tTokens.clearSelection();\n            tTokens.setRowCount(loadedTokens.size());",
      "es": 0.37349397590361444,
      "em": false,
      "passed": false
    },
    {
      "index": 1724,
      "groundtruth": "(stonecutter.currentActive());",
      "prediction": "(\"Edit Syntax\");",
      "raw_prediction": "(\"Edit Syntax\");\n        bTokens.setText(\"New Constraint\");\n\n        refreshUI();\n    }\n\n    private void refreshUI() {\n        if (mainSyntaxRange != null) {\n            root.remove(root.getComponentCount() - 1);\n        }",
      "es": 0.19999999999999996,
      "em": false,
      "passed": false
    },
    {
      "index": 1725,
      "groundtruth": "(moduleByRoot.get((setup.gradleProject().getChildProjects().get(version)).getProjectDir()), setup);",
      "prediction": "IfAbsent(module, setup);",
      "raw_prediction": "IfAbsent(module, setup);\n    }\n\n    public void loadFromGradle() {\n        ExternalProjectDataCache gradleCache = ExternalProjectDataCache.getInstance(project);\n        ModuleManager moduleManager = ModuleManager.getInstance(project);\n\n        byController.clear",
      "es": 0.1515151515151515,
      "em": false,
      "passed": false
    },
    {
      "index": 1726,
      "groundtruth": "conditionResult = stonecutter.testVersion(expression);",
      "prediction": "conditionResult = !conditionResult;",
      "raw_prediction": " conditionResult = !conditionResult;",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 1727,
      "groundtruth": "req.tree() != null && !req.tree().getAll().isEmpty();",
      "prediction": "req.getDependencies() != null && !req.getDependencies().isEmpty();",
      "raw_prediction": "req.getDependencies() != null && !req.getDependencies().isEmpty();",
      "es": 0.6212121212121212,
      "em": false,
      "passed": false
    },
    {
      "index": 1728,
      "groundtruth": ".of(param.outputSideParam()), RetryJob.NEVER_RETRY);",
      "prediction": ".of(param.outputSideParam()), RetryJob.NEVER_RETRY));",
      "raw_prediction": ".of(param.outputSideParam()), RetryJob.NEVER_RETRY));",
      "es": 0.9811320754716981,
      "em": false,
      "passed": false
    },
    {
      "index": 1729,
      "groundtruth": "PackageRef ref = tree.root();",
      "prediction": "PackageRef ref = tree.root();",
      "raw_prediction": " PackageRef ref = tree.root();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1730,
      "groundtruth": "findExternalProject(entry.getValue().gradleProject(), entry.getKey()).keySet()) {",
      "prediction": "getSourcesets(moduleByRoot.get(entry.getKey().getName()).getProjectDir())",
      "raw_prediction": "getSourcesets(moduleByRoot.get(entry.getKey().getName()).getProjectDir()).keySet()) {",
      "es": 0.2222222222222222,
      "em": false,
      "passed": false
    },
    {
      "index": 1731,
      "groundtruth": "job.setJobIndex(listIndexHolder.getAndIncrement());",
      "prediction": "{",
      "raw_prediction": "{\n                int index = listIndexHolder.getAndIncrement();\n                if (index < jobList.size()) {\n                    jobList.get(index).accept(job);\n                 }else {\n                 job.run();\n                 }",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1732,
      "groundtruth": "(StrUtil.isBlank(str)) {",
      "prediction": "(str == null)",
      "raw_prediction": "(str == null) {",
      "es": 0.20833333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 1733,
      "groundtruth": "filePipe.close();",
      "prediction": "System.out.println(\"run finished\")",
      "raw_prediction": "System.out.println(\"run finished\");",
      "es": 0.1470588235294118,
      "em": false,
      "passed": false
    },
    {
      "index": 1734,
      "groundtruth": "deleteJob.run();",
      "prediction": "if (!input.exists(path))",
      "raw_prediction": "if (!input.exists(path)) {\n            return;\n        }\n        if (output.exists(path)) {\n            deleteJob.run();\n        }",
      "es": 0.125,
      "em": false,
      "passed": false
    },
    {
      "index": 1735,
      "groundtruth": "deleteJob = RetryJob.fastFailWrap(DelJob.of(param.outputSideParam()));",
      "prediction": "deleteJob = param.getDeleteJob();",
      "raw_prediction": "deleteJob = param.getDeleteJob();",
      "es": 0.3285714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 1736,
      "groundtruth": "= param.getSubParams(MIRROR_MODE_PARAM, MIRROR_MODE_FULL).equals(MIRROR_MODE_APPEND);",
      "prediction": "= param.getSubParams(MIRROR_MODE_PARAM, MIRROR_MODE_APPEND).equals(MIRROR_MODE_APPEND);",
      "raw_prediction": "= param.getSubParams(MIRROR_MODE_PARAM, MIRROR_MODE_APPEND).equals(MIRROR_MODE_APPEND);",
      "es": 0.9310344827586207,
      "em": false,
      "passed": false
    },
    {
      "index": 1737,
      "groundtruth": "stonecutter.versions())\n                versionModel.add(version);",
      "prediction": "stonecutter.versions()) {\n                versionModel.addElement(version);",
      "raw_prediction": "stonecutter.versions()) {\n                versionModel.addElement(version);\n             }\n",
      "es": 0.88,
      "em": false,
      "passed": false
    },
    {
      "index": 1738,
      "groundtruth": "return ActivityJDBC.instance().update(ctx.body().asPojo(Activity.class).setId(id));",
      "prediction": "return ActivityJDBC.instance().update(found, ctx.body().asJsonObject().mapTo(RequestActivityCommit.class).formActivity(ctx.u",
      "raw_prediction": " return ActivityJDBC.instance().update(found, ctx.body().asJsonObject().mapTo(RequestActivityCommit.class).formActivity(ctx.user()));\n        }).onFailure(ctx::fail).onSuccess(aVoid -> ctx.response().end());\n    }\n\n   ",
      "es": 0.5887096774193548,
      "em": false,
      "passed": false
    },
    {
      "index": 1739,
      "groundtruth": "(request.getLogin(), request.getPassword()).onComplete(ar -> {",
      "prediction": "(request.getUsername(), request.getPassword())",
      "raw_prediction": "(request.getUsername(), request.getPassword()).onComplete(ar -> {",
      "es": 0.5806451612903225,
      "em": false,
      "passed": false
    },
    {
      "index": 1740,
      "groundtruth": "ActivityJDBC.instance().getById(id).compose(found -> {",
      "prediction": "ActivityJDBC.instance().getBy",
      "raw_prediction": " ActivityJDBC.instance().getById(id).compose(found -> {",
      "es": 0.537037037037037,
      "em": false,
      "passed": false
    },
    {
      "index": 1741,
      "groundtruth": "UserJDBC.instance().login(request.getLogin(), request.getPassword()).onComplete(ar -> {",
      "prediction": "UserJDBC.instance().login(request.getUsername(), request.getPassword())",
      "raw_prediction": "UserJDBC.instance().login(request.getUsername(), request.getPassword()).onFailure(ctx::fail).onSuccess(ar -> {",
      "es": 0.7011494252873562,
      "em": false,
      "passed": false
    },
    {
      "index": 1742,
      "groundtruth": "task.getOutputDir().set(task.getInputDir().get());",
      "prediction": "task.setOutputDir(afterEvaluate.file(\"./build/\" + versionData.version()));",
      "raw_prediction": "task.setOutputDir(afterEvaluate.file(\"./build/\" + versionData.version()));",
      "es": 0.3918918918918919,
      "em": false,
      "passed": false
    },
    {
      "index": 1743,
      "groundtruth": "instance().login(request.getLogin(), request.getPassword()).onComplete(ar -> {",
      "prediction": "instance().login(request.getUsername(), request.getPassword())",
      "raw_prediction": "instance().login(request.getUsername(), request.getPassword()).onComplete(ar -> {",
      "es": 0.6666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 1744,
      "groundtruth": "task.getInputDir().set(afterEvaluate.file(\"./src\"));",
      "prediction": "task.getInputDir().set(versionProject.getBuildDir().toPath().resolve(\"stonecut",
      "raw_prediction": "task.getInputDir().set(versionProject.getBuildDir().toPath().resolve(\"stonecutter\").resolve(\"build\"));",
      "es": 0.41025641025641024,
      "em": false,
      "passed": false
    },
    {
      "index": 1745,
      "groundtruth": ".getOutputDir().set(task.getInputDir().get());",
      "prediction": ".setOutputDir(afterEvaluate.file(\"./build/\" + versionData.version()));",
      "raw_prediction": ".setOutputDir(afterEvaluate.file(\"./build/\" + versionData.version()));\n                task.getOutputJar().set(afterEvaluate.file(\"./build/\" + versionData.version() + \"/stonecutter-\" + versionData.version() + \".jar\"));",
      "es": 0.3571428571428571,
      "em": false,
      "passed": false
    },
    {
      "index": 1746,
      "groundtruth": "switch (matchPlayer.getTeam()) {",
      "prediction": "switch (matchPlayer.getTeam())",
      "raw_prediction": " switch (matchPlayer.getTeam()) {",
      "es": 0.9375,
      "em": false,
      "passed": false
    },
    {
      "index": 1747,
      "groundtruth": "(valorantAPI.sendRestRequest(\"/v2/match/\" + matchId).getAsJsonObject().getAsJsonObject(\"data\"));",
      "prediction": "(valorantAPI.getMatchById(matchId));",
      "raw_prediction": "(valorantAPI.getMatchById(matchId));",
      "es": 0.30208333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 1748,
      "groundtruth": "JsonObject statusData = sendRestRequest(\"/v1/status/\" + region.getQuery()).getAsJsonObject().getAsJsonObject(\"data\");",
      "prediction": "JsonObject statusData = sendRestRequest(\"/v1/status\").getAsJsonObject();",
      "raw_prediction": "JsonObject statusData = sendRestRequest(\"/v1/status\").getAsJsonObject();",
      "es": 0.6153846153846154,
      "em": false,
      "passed": false
    },
    {
      "index": 1749,
      "groundtruth": "+ region.getQuery() + \"?name=\" + data[0] + \"&tag=\" + data[1]).getAsJsonArray();",
      "prediction": "+ region.getQuery() + \"/\" + data[0] + \"#\" + data[1]).getAsJsonArray();",
      "raw_prediction": "+ region.getQuery() + \"/\" + data[0] + \"#\" + data[1]).getAsJsonArray();\n        }\n\n        if(leaderboardData.size() == 0) {\n            throw new IncorrectDataException(\"No data found",
      "es": 0.8607594936708861,
      "em": false,
      "passed": false
    },
    {
      "index": 1750,
      "groundtruth": "commands.getOrderById(orderId),\n                HttpStatus.OK);",
      "prediction": "commands.getOrderById(orderId),\n                HttpStatus.OK);",
      "raw_prediction": "commands.getOrderById(orderId),\n                HttpStatus.OK);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1751,
      "groundtruth": "= commands.createRequest(body.get(\"bookId\"))\n                .toString();",
      "prediction": "= commands.createRequest(body.get(\"bookId\"), body.get(\"userId\"));",
      "raw_prediction": "= commands.createRequest(body.get(\"bookId\"), body.get(\"userId\"));",
      "es": 0.6438356164383562,
      "em": false,
      "passed": false
    },
    {
      "index": 1752,
      "groundtruth": "> booksToOrder = bookService.getBooksByIds(ids);",
      "prediction": "> booksToOrder = bookService.getBooksByIds(ids);",
      "raw_prediction": "> booksToOrder = bookService.getBooksByIds(ids);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1753,
      "groundtruth": "<>(commands.getNumberOfRequestsOnBook(bookId),\n                HttpStatus.OK);",
      "prediction": "<>(commands.getNumberOfRequestsOnBook(bookId), HttpStatus.OK);",
      "raw_prediction": "<>(commands.getNumberOfRequestsOnBook(bookId), HttpStatus.OK);",
      "es": 0.7948717948717949,
      "em": true,
      "passed": true
    },
    {
      "index": 1754,
      "groundtruth": "List<jenaTripleParser> result = serviceJena.getTriples(filePath, url, ontologyContentEncoded64) ;",
      "prediction": "List<String> result = serviceJena.rdfToTriples(filePath, url, ontologyContentEncoded64);",
      "raw_prediction": "List<String> result = serviceJena.rdfToTriples(filePath, url, ontologyContentEncoded64);",
      "es": 0.7938144329896908,
      "em": false,
      "passed": false
    },
    {
      "index": 1755,
      "groundtruth": "dependency.getVersion(),\n                dependency.getType(),\n                dependency.getClassifier(),\n                dependency.getScope()\n        );",
      "prediction": "dependency.getVersion(),\n                dependency.getType(),\n                dependency.getClassifier(),\n                dependency.getScope());",
      "raw_prediction": " dependency.getVersion(),\n                dependency.getType(),\n                dependency.getClassifier(),\n                dependency.getScope());",
      "es": 0.9419354838709677,
      "em": false,
      "passed": false
    },
    {
      "index": 1756,
      "groundtruth": "dependency.getClassifier(),\n                dependency.getScope()\n        );",
      "prediction": "dependency.getClassifier(),\n                dependency.getScope());",
      "raw_prediction": "dependency.getClassifier(),\n                dependency.getScope());",
      "es": 0.881578947368421,
      "em": false,
      "passed": false
    },
    {
      "index": 1757,
      "groundtruth": "pomFile).execute(() -> dependencyCommand().accept(pomFile, dependency));",
      "prediction": "pomFile)",
      "raw_prediction": "pomFile)\n                .change(dependencyCommand())\n                .apply();",
      "es": 0.11111111111111116,
      "em": false,
      "passed": false
    },
    {
      "index": 1758,
      "groundtruth": "dependency.getType(),\n                dependency.getClassifier(),\n                dependency.getScope()\n        );",
      "prediction": "dependency.getType(),\n                dependency.getClassifier(),\n                dependency.getScope());",
      "raw_prediction": " dependency.getType(),\n                dependency.getClassifier(),\n                dependency.getScope());",
      "es": 0.9210526315789473,
      "em": false,
      "passed": false
    },
    {
      "index": 1759,
      "groundtruth": "SWRLService.SWRLruleReclassification(filePath, url,reqBodies,reqHead);",
      "prediction": "SWRLService.SWRLruleReclassification(filePath,url,reqBodies,reqHead);",
      "raw_prediction": "SWRLService.SWRLruleReclassification(filePath,url,reqBodies,reqHead);",
      "es": 0.9857142857142858,
      "em": false,
      "passed": false
    },
    {
      "index": 1760,
      "groundtruth": "equivalentClass = request.getEquivalentClass();",
      "prediction": "equivalentClass = request.getEquivalentClass();",
      "raw_prediction": "equivalentClass = request.getEquivalentClass();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1761,
      "groundtruth": "result = SWRLService.SWRLruleReclassificationB64(ontologyContentDecoded64,reqBodies,reqHead);",
      "prediction": "result = SWRLService.SWRLruleVAB64(ontologyContentDecoded64,reqBodies,reqHead);",
      "raw_prediction": "\tresult = SWRLService.SWRLruleVAB64(ontologyContentDecoded64,reqBodies,reqHead);",
      "es": 0.8279569892473118,
      "em": false,
      "passed": false
    },
    {
      "index": 1762,
      "groundtruth": "DisjointClasses  = request.getDisjointClasses();",
      "prediction": "DisjointClasses = request.getDisjointClasses();",
      "raw_prediction": "DisjointClasses = request.getDisjointClasses();",
      "es": 0.9791666666666666,
      "em": true,
      "passed": true
    },
    {
      "index": 1763,
      "groundtruth": "= request.getParams();",
      "prediction": "= request.getParametres().split(\",\");",
      "raw_prediction": "= request.getParametres().split(\",\");\n    \t String[] valuesList = new String[reqParametres.length];\n    \tfor (int i = 0; i < reqParametres.length; i++) {\n    \t\tvaluesList[i",
      "es": 0.5945945945945945,
      "em": false,
      "passed": false
    },
    {
      "index": 1764,
      "groundtruth": "= reasonerService.getUnsatisfaisableClasses(filePath, url);",
      "prediction": "= reasonerService.getUnsatisfiableClasses(filePath, url);",
      "raw_prediction": "= reasonerService.getUnsatisfiableClasses(filePath, url);",
      "es": 0.9661016949152542,
      "em": false,
      "passed": false
    },
    {
      "index": 1765,
      "groundtruth": "= reasonerService.postConsistency(filePath, url);",
      "prediction": "= reasonerService.postConsistency(filePath, url);",
      "raw_prediction": "= reasonerService.postConsistency(filePath, url);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1766,
      "groundtruth": "reasonerService.postConsistencyContent(ontologyContentDecoded64);",
      "prediction": "reasonerService.postConsistencyContent(ontologyContentDecoded64);",
      "raw_prediction": "reasonerService.postConsistencyContent(ontologyContentDecoded64);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1767,
      "groundtruth": "reasonerService.postInferences(filePath, url,valuesList);",
      "prediction": "reasonerService.postInferences(filePath, url,valuesList);",
      "raw_prediction": "reasonerService.postInferences(filePath, url,valuesList);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1768,
      "groundtruth": "result = reasonerService.postInferencesContent(ontologyContentDecoded64,valuesList);",
      "prediction": "result = reasonerService.postInferencesContent(ontologyContentDecoded64,valuesList);",
      "raw_prediction": "\tresult = reasonerService.postInferencesContent(ontologyContentDecoded64,valuesList);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1769,
      "groundtruth": "result = reasonerService.getInferences(filePath, url);",
      "prediction": "result ;",
      "raw_prediction": "result ;\n            \tif (!(filePath == null) || !(url == null) ) {\n                result = reasonerService.getInferences(filePath, url);\n            \t}else {\n            \tresult = reasonerService.getInferencesContent(ontologyContentDecoded6",
      "es": 0.14814814814814814,
      "em": false,
      "passed": false
    },
    {
      "index": 1770,
      "groundtruth": "= reasonerService.postUnsatisfaisableClasses(filePath, url);",
      "prediction": "= reasonerService.postUnsatisfaisableClasses(filePath, url);",
      "raw_prediction": "= reasonerService.postUnsatisfaisableClasses(filePath, url);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1771,
      "groundtruth": "callbackConfigCall = RestAdapter.createApi().getJsonUrl(url);",
      "prediction": "callbackConfigCall = RestAdapter.createApi().getJsonFile(url);",
      "raw_prediction": "    callbackConfigCall = RestAdapter.createApi().getJsonFile(url);",
      "es": 0.9516129032258065,
      "em": false,
      "passed": false
    },
    {
      "index": 1772,
      "groundtruth": "RestAdapter.createApi().getDriveJsonFileId(url);",
      "prediction": "RestAdapter.createApi().getJsonUrl(url);",
      "raw_prediction": "RestAdapter.createApi().getJsonUrl(url);",
      "es": 0.7916666666666666,
      "em": false,
      "passed": false
    },
    {
      "index": 1773,
      "groundtruth": "()).showAdIfAvailable(ActivitySplash.this, this::requestConfig);",
      "prediction": "()).showAdIfAvailable(ActivitySplash.this, this::requestConfig);",
      "raw_prediction": "()).showAdIfAvailable(ActivitySplash.this, this::requestConfig);\n                            } else {\n                                requestConfig();\n                            }\n                            break;\n                        case STARTAPP:\n                            if (!Constant.STARTAPP_APP_OPEN_AD_ID.equals(\"0\")) {\n                               ",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1774,
      "groundtruth": "displayData(sharedPref.getPostList());",
      "prediction": "displayData(getPosts());",
      "raw_prediction": " displayData(getPosts());",
      "es": 0.631578947368421,
      "em": false,
      "passed": false
    },
    {
      "index": 1775,
      "groundtruth": "= RestAdapter.createApi().getDriveJsonFileId(googleDriveFileId);",
      "prediction": "= RestAdapter.createApi().getDriveJsonFileId(googleDriveFileId);",
      "raw_prediction": "= RestAdapter.createApi().getDriveJsonFileId(googleDriveFileId);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1776,
      "groundtruth": "adapterPost.setOnItemClickListener((view, obj, position) -> {",
      "prediction": "adapterPost.notifyDataSetChanged();",
      "raw_prediction": " adapterPost.notifyDataSetChanged();\n        } else {\n            adapterPost.setListData(null, 0);\n            adapterPost.notifyDataSetChanged();\n            Toast.makeText(getApplicationContext(), \"No data found\", Toast.LENGTH_SHORT).show();\n        }\n    }\n\n    private void load",
      "es": 0.29508196721311475,
      "em": false,
      "passed": false
    },
    {
      "index": 1777,
      "groundtruth": "(Tools.getAdSizeMREC());",
      "prediction": "(Tools.getAdSizeMREC());",
      "raw_prediction": "(Tools.getAdSizeMREC());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1778,
      "groundtruth": "writer.writeInt(length);",
      "prediction": "writer.writeInt(length);",
      "raw_prediction": "writer.writeInt(length);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1779,
      "groundtruth": ": return NbtTagValue.fromByte(readByte());",
      "prediction": ": return NbtTagValue.fromByte(readByte());",
      "raw_prediction": ": return NbtTagValue.fromByte(readByte());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1780,
      "groundtruth": "writer.writeShortUnsigned(value.length());",
      "prediction": "writer.writeInt(value.length());",
      "raw_prediction": "writer.writeInt(value.length());",
      "es": 0.7142857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 1781,
      "groundtruth": "visitor.visitByte(value);",
      "prediction": "visitor.visitByte(value);",
      "raw_prediction": "visitor.visitByte(value);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1782,
      "groundtruth": "writer.writeInt(value.length);",
      "prediction": "package sh.pancake.serdemc.data.nbt.io;",
      "raw_prediction": "\npackage sh.pancake.serdemc.data.nbt.io;\n\nimport java.io.IOException;\nimport java.util.Map;\n\nimport javax.annotation.Nullable;\n\nimport lombok.AllArgsConstructor;\nimport sh.pancake.serdemc.data.nbt.NbtRootCompound",
      "es": 0.15384615384615385,
      "em": false,
      "passed": false
    },
    {
      "index": 1783,
      "groundtruth": "DoMainUtil.firstLevel(subDoMain)) {",
      "prediction": "DoMainUtil.firstLev",
      "raw_prediction": "DoMainUtil.firstLevel(subDoMain)) {",
      "es": 0.5428571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 1784,
      "groundtruth": "= reader.readInt();",
      "prediction": "= reader.readShort();",
      "raw_prediction": "= reader.readShort();",
      "es": 0.8095238095238095,
      "em": false,
      "passed": false
    },
    {
      "index": 1785,
      "groundtruth": "reader.readBytes(data);",
      "prediction": "reader.readBytes(data);",
      "raw_prediction": "reader.readBytes(data);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1786,
      "groundtruth": "int length = reader.readShort();",
      "prediction": "int length = reader.readInt();",
      "raw_prediction": "int length = reader.readInt();",
      "es": 0.875,
      "em": false,
      "passed": false
    },
    {
      "index": 1787,
      "groundtruth": ".matcher(rule.getKafkaTopicTemplate());",
      "prediction": ".matcher(mappedKafkaTopic);",
      "raw_prediction": ".matcher(mappedKafkaTopic);",
      "es": 0.5641025641025641,
      "em": false,
      "passed": false
    },
    {
      "index": 1788,
      "groundtruth": "kafkaConfig.getProducerConfig().getConfig());",
      "prediction": "KafkaConfig.BridgeConfigProperties);",
      "raw_prediction": "KafkaConfig.BridgeConfigProperties);",
      "es": 0.5333333333333333,
      "em": false,
      "passed": false
    },
    {
      "index": 1789,
      "groundtruth": "ACKS_CONFIG, String.valueOf(producerAckLevel.getValue()));",
      "prediction": "KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());",
      "raw_prediction": "KEY_SERIALIZER_CLASS_CONFIG, StringSerializer.class.getName());\n        props.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, ByteArraySerializer.class.getName());\n        props.put(ProducerConfig.ACKS_CONFIG, producerAckLevel.toString());",
      "es": 0.33333333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 1790,
      "groundtruth": "length = reader.readInt();",
      "prediction": "length = reader.readInt();",
      "raw_prediction": "length = reader.readInt();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1791,
      "groundtruth": "type = reader.readByte()) != NbtTagValue.TAG_END;",
      "prediction": "type = reader.readByte()) != NbtTagValue.TAG_END;",
      "raw_prediction": "type = reader.readByte()) != NbtTagValue.TAG_END; ",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1792,
      "groundtruth": "?> codec = MetadataCodec.getCodec(type);",
      "prediction": "?> codec = MetadataCodec.getCodec(type);",
      "raw_prediction": "?> codec = MetadataCodec.getCodec(type);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1793,
      "groundtruth": "> codec = (MetadataCodec<Object>) MetadataCodec.getCodec(type);",
      "prediction": "> codec = MetadataCodec.getCodec(type);",
      "raw_prediction": "> codec = MetadataCodec.getCodec(type);",
      "es": 0.6190476190476191,
      "em": false,
      "passed": false
    },
    {
      "index": 1794,
      "groundtruth": "matcher(rule.getMqttTopicPattern());",
      "prediction": "matcher(rule.getKafkaTopicTemplate());",
      "raw_prediction": "matcher(rule.getKafkaTopicTemplate());",
      "es": 0.6578947368421053,
      "em": false,
      "passed": false
    },
    {
      "index": 1795,
      "groundtruth": "= rule.getMqttTopicPattern().split(MQTT_TOPIC_SEPARATOR);",
      "prediction": "= rule.getMqttTopicPattern().split(MQTT_TOPIC_SEPARATOR);",
      "raw_prediction": "= rule.getMqttTopicPattern().split(MQTT_TOPIC_SEPARATOR);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1796,
      "groundtruth": "properties.getCachePrefix() + \":\" + beanName + \":\" + method + \":%s:\" + key.toString();",
      "prediction": "properties.getCache().getPrefix() + beanName + \"-\" + method + \"-\";",
      "raw_prediction": "properties.getCache().getPrefix() + beanName + \"-\" + method + \"-\";",
      "es": 0.6046511627906976,
      "em": false,
      "passed": false
    },
    {
      "index": 1797,
      "groundtruth": "cache.put(String.format(cacheKey, FAIL), bindData, Duration.ofSeconds(cacheTime));",
      "prediction": "cache.put(String.format(cacheKey, FAIL), bindData, Duration.ofSeconds(cacheTime));",
      "raw_prediction": "  cache.put(String.format(cacheKey, FAIL), bindData, Duration.ofSeconds(cacheTime));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1798,
      "groundtruth": "(!jacksonExpandProperties.isCanExpandToNotExistField() && writeClass == null) {",
      "prediction": "(writeClass == null) {",
      "raw_prediction": "(writeClass == null) {\n            gen.writeObject(bindData);\n            return;\n        }\n\n        // \u5982\u679c\u662f\u6570\u7ec4\uff0c\u76f4\u63a5\u5199\u5165\n        if (writeClass.isArray()) {",
      "es": 0.2784810126582279,
      "em": false,
      "passed": false
    },
    {
      "index": 1799,
      "groundtruth": "if (jacksonExpandProperties.getExpandStrategy() == ExpandStrategy.COPY) {",
      "prediction": "if (jacksonExpandProperties.getExpandStrategy() == ExpandStrategy.COPY)",
      "raw_prediction": "if (jacksonExpandProperties.getExpandStrategy() == ExpandStrategy.COPY) {",
      "es": 0.9726027397260274,
      "em": false,
      "passed": false
    },
    {
      "index": 1800,
      "groundtruth": "setCacheTime(jacksonExpandProperties.getCacheTimeout());",
      "prediction": "setCacheTime(jacksonExpandProperties.getDefaultCacheTime());",
      "raw_prediction": "setCacheTime(jacksonExpandProperties.getDefaultCacheTime());",
      "es": 0.8333333333333334,
      "em": false,
      "passed": false
    },
    {
      "index": 1801,
      "groundtruth": "cache.put(String.format(cacheKey, OK), result, Duration.ofSeconds(cacheTime));",
      "prediction": "cache.put(String.format(cacheKey, OK), result, Duration.ofSeconds(cacheTime));",
      "raw_prediction": " cache.put(String.format(cacheKey, OK), result, Duration.ofSeconds(cacheTime));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1802,
      "groundtruth": "jacksonExpandProperties.getExpandStrategy() == ExpandStrategy.COVER) {",
      "prediction": "jacksonExpandProperties.getExpandStra",
      "raw_prediction": "jacksonExpandProperties.getExpandStrategy() == ExpandStrategy.REPLACE) {",
      "es": 0.5285714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 1803,
      "groundtruth": "cache.get(String.format(cacheKey, OK));",
      "prediction": "cache.get(String.format(cacheKey, OK));",
      "raw_prediction": "cache.get(String.format(cacheKey, OK));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1804,
      "groundtruth": "lock = lockCache.get(cacheKey, new StampedLock(), Duration.ofSeconds(300));",
      "prediction": "lock = new StampedLock();",
      "raw_prediction": "lock = new StampedLock();",
      "es": 0.33333333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 1805,
      "groundtruth": "format(jacksonExpandProperties.getCopyStrategyFormat(), gen.getOutputContext().getCurrentName());",
      "prediction": "join(\".\", writeFieldPath.split(\"\\\\.\"));",
      "raw_prediction": "join(\".\", writeFieldPath.split(\"\\\\.\"));",
      "es": 0.1649484536082474,
      "em": false,
      "passed": false
    },
    {
      "index": 1806,
      "groundtruth": "(jacksonExpandProperties.getDynamicExpandParameterName());",
      "prediction": "(writeFieldPath);",
      "raw_prediction": "(writeFieldPath);",
      "es": 0.18965517241379315,
      "em": false,
      "passed": false
    },
    {
      "index": 1807,
      "groundtruth": "(this.mqttConfig.getHost(), this.mqttConfig.getPort()).sync();",
      "prediction": "(mqttConfig.getPort()).sync();",
      "raw_prediction": "(mqttConfig.getPort()).sync();",
      "es": 0.4838709677419355,
      "em": false,
      "passed": false
    },
    {
      "index": 1808,
      "groundtruth": "mqttConfig = MqttConfig.fromMap(map);",
      "prediction": "mqttConfig = MqttConfig.fromMap(map);",
      "raw_prediction": "mqttConfig = MqttConfig.fromMap(map);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1809,
      "groundtruth": "dataHolder.setVideoPopularLink(videoData.get(8));",
      "prediction": "dataHolder.setVideoDescription(videoData.get(8));",
      "raw_prediction": "\tdataHolder.setVideoDescription(videoData.get(8));\n\t\t\tdataHolder.setVideoThumbnail(videoData.get(9));",
      "es": 0.7959183673469388,
      "em": false,
      "passed": false
    },
    {
      "index": 1810,
      "groundtruth": "(config.getKafkaConfig());",
      "prediction": "(config);",
      "raw_prediction": "(config);",
      "es": 0.34615384615384615,
      "em": false,
      "passed": false
    },
    {
      "index": 1811,
      "groundtruth": "config.getMqttConfig();",
      "prediction": "new MqttConfig(config.getMqttConfig());",
      "raw_prediction": "new MqttConfig(config.getMqttConfig());",
      "es": 0.5897435897435898,
      "em": false,
      "passed": false
    },
    {
      "index": 1812,
      "groundtruth": "mqttServer.stop();",
      "prediction": "mqttServer.stop();",
      "raw_prediction": " mqttServer.stop();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1813,
      "groundtruth": ", this.mqttConfig.getPort()).sync();",
      "prediction": ", this.mqttConfig.getPort()).sync();",
      "raw_prediction": ", this.mqttConfig.getPort()).sync();\n\n        logger.info(\"Netty server started on {}:{}\", this.mqttConfig.getHost(), this.mqttConfig.getPort());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1814,
      "groundtruth": "MappingRulesLoader.getInstance().init(mappingRulesFile);",
      "prediction": "MappingRulesLoader.setMappingRulesFile(mappingRulesFile);",
      "raw_prediction": "MappingRulesLoader.setMappingRulesFile(mappingRulesFile);",
      "es": 0.736842105263158,
      "em": false,
      "passed": false
    },
    {
      "index": 1815,
      "groundtruth": "return Integer.toString(record.getStatus());",
      "prediction": "return record.getStatus();",
      "raw_prediction": "return record.getStatus();",
      "es": 0.5909090909090908,
      "em": false,
      "passed": false
    },
    {
      "index": 1816,
      "groundtruth": "record.getTruncated();",
      "prediction": "Integer.toString(record.isTruncated());",
      "raw_prediction": "Integer.toString(record.isTruncated());",
      "es": 0.46153846153846156,
      "em": false,
      "passed": false
    },
    {
      "index": 1817,
      "groundtruth": "CCMimeCounter.main(new String[]{",
      "prediction": "CCFileExtractor.countMimes(args[1]);",
      "raw_prediction": " CCFileExtractor.countMimes(args[1]);\n        } else if (command.equals(\"CountUrls\")) {\n            CCFileExtractor.countUrls(",
      "es": 0.2777777777777778,
      "em": false,
      "passed": false
    },
    {
      "index": 1818,
      "groundtruth": "CCFileExtractor.main(new String[]{",
      "prediction": "CCFileFetcher.main(new String[]{",
      "raw_prediction": " CCFileFetcher.main(new String[]{",
      "es": 0.8235294117647058,
      "em": false,
      "passed": false
    },
    {
      "index": 1819,
      "groundtruth": "R.error(\"bad request\");",
      "prediction": "R.error(e.getMessage());",
      "raw_prediction": "R.error(e.getMessage());",
      "es": 0.45833333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 1820,
      "groundtruth": "return R.error(error.get(\"errorMsg\").toString());",
      "prediction": "return R.error(error.get(\"errorMsg\").toString());",
      "raw_prediction": " return R.error(error.get(\"errorMsg\").toString());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1821,
      "groundtruth": "R.error();",
      "prediction": "R.error",
      "raw_prediction": "R.error(e.getMessage());",
      "es": 0.7,
      "em": false,
      "passed": false
    },
    {
      "index": 1822,
      "groundtruth": "r.getOffset(), r.getLength(), r.getTruncated());",
      "prediction": "r.getOffset(), r.getLength(), r.getTruncated());",
      "raw_prediction": " r.getOffset(), r.getLength(), r.getTruncated());\n            //TODO: log this somewhere\n            //System.out.println(\"TRUNCATED: \" + url);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1823,
      "groundtruth": "R.ok(\"Verify successfully\");",
      "prediction": "R.ok(SessionResp.builder().build());",
      "raw_prediction": "R.ok(SessionResp.builder().build());",
      "es": 0.36111111111111116,
      "em": false,
      "passed": false
    },
    {
      "index": 1824,
      "groundtruth": "!clause.select(val)) {",
      "prediction": "!clause.selec",
      "raw_prediction": "!clause.select(val)) {\n                    return false;\n                }\n            }\n        }\n\n        for (Map.Entry<String, List<SelectorClause>> e : should.entrySet()) {\n            String val = getStringValue(e.getKey(), record);\n            if (",
      "es": 0.5909090909090908,
      "em": false,
      "passed": false
    },
    {
      "index": 1825,
      "groundtruth": "StringBuilder sb = new StringBuilder(SpringUtil.getClientIp()).append(\"-\");",
      "prediction": "StringBuilder sb = new StringBuilder();",
      "raw_prediction": " StringBuilder sb = new StringBuilder();",
      "es": 0.52,
      "em": false,
      "passed": false
    },
    {
      "index": 1826,
      "groundtruth": "), r.getLength(), r.getTruncated());",
      "prediction": "), r.getLength());",
      "raw_prediction": "), r.getLength());\n            //we don't want to extract these, so we just return true\n            //and let the next processor deal with it.",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 1827,
      "groundtruth": "sse.isDone()) {",
      "prediction": "sse.isDon",
      "raw_prediction": "sse.isDone()) {",
      "es": 0.6,
      "em": false,
      "passed": false
    },
    {
      "index": 1828,
      "groundtruth": "extracted = counter.getFilesExtracted().incrementAndGet();",
      "prediction": "extracted = counter.getExtracted().incrementAndGet();",
      "raw_prediction": "extracted = counter.getExtracted().incrementAndGet();",
      "es": 0.9137931034482758,
      "em": false,
      "passed": false
    },
    {
      "index": 1829,
      "groundtruth": "url = r.getUrl();",
      "prediction": "url = r.getUrl();",
      "raw_prediction": "url = r.getUrl();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1830,
      "groundtruth": "if (fetcherConfig.getNumThreads() > 10) {",
      "prediction": "if (fetcherConfig.getReportEvery() > 0)",
      "raw_prediction": "  if (fetcherConfig.getReportEvery() > 0) {\n            reportEvery = fetcherConfig.getReportEvery();\n        } else {",
      "es": 0.6585365853658536,
      "em": false,
      "passed": false
    },
    {
      "index": 1831,
      "groundtruth": "getNormalizedMimeDetected(), r.getFilename(),\n                    r.getOffset(), r.getLength(), r.getTruncated());",
      "prediction": "getNormalizedMimeDetected(),\n                    r.getWarcFile(), r.getWarcOffset(), r.getWarcLength(), r.getTruncated());",
      "raw_prediction": "getNormalizedMimeDetected(),\n                    r.getWarcFile(), r.getWarcOffset(), r.getWarcLength(), r.getTruncated());",
      "es": 0.6557377049180328,
      "em": false,
      "passed": false
    },
    {
      "index": 1832,
      "groundtruth": "(fetcherConfig.getMaxFilesTruncated() > -1 &&\n                    truncated >= fetcherConfig.getMaxFilesTruncated()) {",
      "prediction": "(fetcherConfig.getMaxTruncatedFiles() > -1 &&\n                    (truncated >= fetcherConfig.getMaxTruncatedFiles()))",
      "raw_prediction": "(fetcherConfig.getMaxTruncatedFiles() > -1 &&\n                    (truncated >= fetcherConfig.getMaxTruncatedFiles())) {",
      "es": 0.8050847457627118,
      "em": false,
      "passed": false
    },
    {
      "index": 1833,
      "groundtruth": "if (fetcherConfig.isExtractTruncated() || StringUtils.isBlank(r.getTruncated())) {",
      "prediction": "if (r.getExtracted()) {",
      "raw_prediction": "if (r.getExtracted()) {\n            //already extracted, skip\n            return true;\n        }\n        if (r.getExtractable()) {",
      "es": 0.24390243902439024,
      "em": false,
      "passed": false
    },
    {
      "index": 1834,
      "groundtruth": "if (fetcherConfig.isDryRun()) {",
      "prediction": "if (fetcherConfig.isDryRun())",
      "raw_prediction": "if (fetcherConfig.isDryRun()) {",
      "es": 0.935483870967742,
      "em": false,
      "passed": false
    },
    {
      "index": 1835,
      "groundtruth": ".indexFetcher = fetcherConfig.newIndexFetcher();",
      "prediction": ".indexFetcher = fetcherConfig.getIndexFetcher();",
      "raw_prediction": ".indexFetcher = fetcherConfig.getIndexFetcher();",
      "es": 0.9583333333333334,
      "em": false,
      "passed": false
    },
    {
      "index": 1836,
      "groundtruth": "ccIndexReaderCounter.getEmptyPayload().incrementAndGet();",
      "prediction": "ccIndexReaderCounter.getNoPayload().incrementAndGet();",
      "raw_prediction": "ccIndexReaderCounter.getNoPayload().incrementAndGet();",
      "es": 0.9122807017543859,
      "em": false,
      "passed": false
    },
    {
      "index": 1837,
      "groundtruth": "finishedWorkers < fetcherConfig.getNumThreads()) {",
      "prediction": "finishedWorkers < fetcherCo",
      "raw_prediction": "finishedWorkers < fetcherConfig.getNumThreads()) {",
      "es": 0.54,
      "em": false,
      "passed": false
    },
    {
      "index": 1838,
      "groundtruth": "streamEmitter = fetcherConfig.newEmitter();",
      "prediction": "streamEmitter = fetcherConfig.newStreamEmitter();",
      "raw_prediction": "streamEmitter = fetcherConfig.newStreamEmitter();\n\n            LOGGER.info(\"Index fetcher started\");",
      "es": 0.8775510204081632,
      "em": false,
      "passed": false
    },
    {
      "index": 1839,
      "groundtruth": ", record.getFilename(), record.getOffset(),\n                record.getLength());",
      "prediction": ", record.getUrl(), record.getFilename(), record.getOffset());",
      "raw_prediction": ", record.getUrl(), record.getFilename(), record.getOffset());\n\n        //TODO: make digest and encoding configurable\n        String targetDigest = null;\n        try {\n            targetDigest = DigestUtils.sha256Hex(record.getFilename());\n       ",
      "es": 0.5375,
      "em": false,
      "passed": false
    },
    {
      "index": 1840,
      "groundtruth": ".debug(\"going to fetch {",
      "prediction": ".debug(\"fetching {} {}->{}\", record.getFilename(",
      "raw_prediction": ".debug(\"fetching {} {}->{}\", record.getFilename(), record.getOffset(),\n            record.getLength());\n        FetchEmitTuple t = new FetchEmitTuple(record.getFilename(),\n            new FetchKey(\"\", record.getFilename(), record.getOffset",
      "es": 0.3125,
      "em": false,
      "passed": false
    },
    {
      "index": 1841,
      "groundtruth": "record.getLength());",
      "prediction": "record.getLength());",
      "raw_prediction": " record.getLength());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1842,
      "groundtruth": "run(), TimeConverter.toTicks(delay, unit)\n                )\n        );",
      "prediction": "run(), delay, unit\n                )\n        );",
      "raw_prediction": "run(), delay, unit\n                )\n        );",
      "es": 0.6714285714285715,
      "em": false,
      "passed": false
    },
    {
      "index": 1843,
      "groundtruth": "TimeConverter.toTicks(period, unit))\n        );",
      "prediction": "TimeConverter.toTicks(period, unit))\n        );",
      "raw_prediction": " TimeConverter.toTicks(period, unit))\n        );\n    }\n\n    @Override\n    public WrappedTask runTimerAsync(Runnable runnable, long delay, long period, TimeUnit unit) {\n        return new WrappedBukkitTask(\n                this.scheduler",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1844,
      "groundtruth": "TimeConverter.toTicks(delay, unit),\n                        TimeConverter.toTicks(period, unit)\n                )\n        );",
      "prediction": "TimeConverter.toTicks(delay, unit),\n                 TimeConverter.toTicks(period, unit)\n             )\n         );",
      "raw_prediction": " TimeConverter.toTicks(delay, unit),\n                 TimeConverter.toTicks(period, unit)\n             )\n         );",
      "es": 0.9112903225806451,
      "em": true,
      "passed": true
    },
    {
      "index": 1845,
      "groundtruth": "TimeConverter.toTicks(delay, unit),\n                        TimeConverter.toTicks(period, unit))\n        );",
      "prediction": "TimeConverter.toTicks(delay, unit),",
      "raw_prediction": " TimeConverter.toTicks(delay, unit),\n\npublic TaskConverter<Void> runAtLocationLater(Location location, Runnable runnable, long delay, TimeUnit unit) {\n        return new WrappedBukkitTask(\n            this.scheduler.runTaskLater(plugin, runnable,",
      "es": 0.3271028037383178,
      "em": false,
      "passed": false
    },
    {
      "index": 1846,
      "groundtruth": "runTaskLater(plugin, runnable, TimeConverter.toTicks(delay, unit))\n        );",
      "prediction": "runTaskLater(plugin, runnable, TimeConverter.toTicks(delay, unit))\n        );",
      "raw_prediction": "runTaskLater(plugin, runnable, TimeConverter.toTicks(delay, unit))\n        );",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1847,
      "groundtruth": "record.getOffset() + record.getLength() - 1), new EmitKey());",
      "prediction": "record.getLength()), new Metadata());",
      "raw_prediction": "                record.getLength()), new Metadata());\n        t.setEmitKey(new EmitKey(EmitKey.Type.FILE, record.getFilename()));\n        t.setEmitKey(new EmitKey(EmitKey.Type.URL, record.getUrl()));",
      "es": 0.4590163934426229,
      "em": false,
      "passed": false
    },
    {
      "index": 1848,
      "groundtruth": ".equals(ccIndexRecord.getDigest())) {",
      "prediction": ".equals(ccIndexRecord.getDigest())",
      "raw_prediction": ".equals(ccIndexRecord.getDigest())) {",
      "es": 0.9189189189189189,
      "em": false,
      "passed": false
    },
    {
      "index": 1849,
      "groundtruth": ".getOffset() + record.getLength() - 1), new EmitKey());",
      "prediction": ".getLength()), new Metadata());",
      "raw_prediction": ".getLength()), new Metadata());\n        //TODO: add mime type detection here?",
      "es": 0.4,
      "em": false,
      "passed": false
    },
    {
      "index": 1850,
      "groundtruth": "ccIndexRecord.getOffset(), ccIndexRecord.getLength(),\n                    ccIndexRecord.getTruncated(), targetDigest, length,\n                    targetPath);",
      "prediction": "ccIndexRecord.getOffset(), ccIndexRecord.getLength(), targetDigest, length, targetPath);",
      "raw_prediction": " ccIndexRecord.getOffset(), ccIndexRecord.getLength(), targetDigest, length, targetPath);",
      "es": 0.5569620253164558,
      "em": false,
      "passed": false
    },
    {
      "index": 1851,
      "groundtruth": "totalCounts, r.getNormalizedMimeDetected());",
      "prediction": "totalCounts, r.getNormalizedMimeDetected());",
      "raw_prediction": "totalCounts, r.getNormalizedMimeDetected());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1852,
      "groundtruth": ".getOffset(), ccIndexRecord.getLength(),\n                    ccIndexRecord.getTruncated(), targetDigest, length,\n                    targetPath);",
      "prediction": ".getOffset(), ccIndexRecord.getLength(),\n                    targetDigest, length,\n                    targetPath);",
      "raw_prediction": ".getOffset(), ccIndexRecord.getLength(),\n                    targetDigest, length,\n                    targetPath);",
      "es": 0.7931034482758621,
      "em": false,
      "passed": false
    },
    {
      "index": 1853,
      "groundtruth": "ccIndexRecord.getOffset(), ccIndexRecord.getLength(),\n                    targetDigest, length,\n                    targetPath);",
      "prediction": "ccIndexRecord.getOffset(), ccIndexRecord.getLength(),\n                    targetDigest, length,\n                    targetPath);",
      "raw_prediction": " ccIndexRecord.getOffset(), ccIndexRecord.getLength(),\n                    targetDigest, length,\n                    targetPath);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1854,
      "groundtruth": "targetPath = targetPathRewriter.rewrite(targetDigest);",
      "prediction": "targetPath = targetPathRewriter.rewritePath(id, base32Sha1);",
      "raw_prediction": "targetPath = targetPathRewriter.rewritePath(id, base32Sha1);",
      "es": 0.7166666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 1855,
      "groundtruth": "RangeFetcher) fetcherConfig.newFetcher();",
      "prediction": "RangeFetcher) fetcherConfig.getFetcher();",
      "raw_prediction": "RangeFetcher) fetcherConfig.getFetcher();",
      "es": 0.9512195121951219,
      "em": false,
      "passed": false
    },
    {
      "index": 1856,
      "groundtruth": "ccIndexRecord.getFilename(),\n                    ccIndexRecord.getOffset(), ccIndexRecord.getLength(),\n                    targetDigest, length,\n                    targetPath);",
      "prediction": "ccIndexRecord.getFilename(),\n                    ccIndexRecord.getOffset(), ccIndexRecord.getLength(),\n                    targetDigest, length,\n                    targetPath);",
      "raw_prediction": "ccIndexRecord.getFilename(),\n                    ccIndexRecord.getOffset(), ccIndexRecord.getLength(),\n                    targetDigest, length,\n                    targetPath);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1857,
      "groundtruth": ".targetPathRewriter = fetcherConfig.getTargetPathRewriter();",
      "prediction": ".targetPathRewriter = fetcherConfig.getTargetPathRewriter();",
      "raw_prediction": ".targetPathRewriter = fetcherConfig.getTargetPathRewriter();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1858,
      "groundtruth": "ccIndexRecord.getTruncated(), targetDigest, length,\n                    targetPath);",
      "prediction": "targetDigest, length,\n                    targetPath);",
      "raw_prediction": " targetDigest, length,\n                    targetPath);",
      "es": 0.6428571428571428,
      "em": false,
      "passed": false
    },
    {
      "index": 1859,
      "groundtruth": "r.getNormalizedMimeDetected());",
      "prediction": "r.getNormalizedMimeDetected());",
      "raw_prediction": "r.getNormalizedMimeDetected());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1860,
      "groundtruth": ".INSTANCE.getNumberPlan(deviceContext.getLineType(), deviceContext.getCountryCode());",
      "prediction": ".getNumberPlan(deviceContext.getCountryCode(), deviceContext.getNationalDestinationCode());",
      "raw_prediction": ".getNumberPlan(deviceContext.getCountryCode(), deviceContext.getNationalDestinationCode());\n        }\n\n        if (numberplan == null) {\n            LOGGER.debug(\"Numberplan was not found for given device context.\");\n            return wrapper.getDialableNumber();",
      "es": 0.6373626373626373,
      "em": false,
      "passed": false
    },
    {
      "index": 1861,
      "groundtruth": ".put(DeFixedLineNumberPlan.getCountryCode(), new DeFixedLineNumberPlan());",
      "prediction": ".put(DeFixedLineNumberPlan.getCountryCode(), new DeFixedLineNumberPlan());",
      "raw_prediction": ".put(DeFixedLineNumberPlan.getCountryCode(), new DeFixedLineNumberPlan());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1862,
      "groundtruth": "(), deviceContext.getCountryCode());",
      "prediction": "());",
      "raw_prediction": "());\n        }\n\n        if (numberplan == null) {\n            LOGGER.debug(\"Numberplan was not found for line type {}\", deviceContext.getLineType());\n            return wrapper.getDialableNumber();",
      "es": 0.11111111111111116,
      "em": false,
      "passed": false
    },
    {
      "index": 1863,
      "groundtruth": "deviceContext.getNationalDestinationCode());",
      "prediction": "deviceContext.getCountryCode());",
      "raw_prediction": "deviceContext.getCountryCode());\n        }\n\n        if (wrapper.hasNationalAccessCode() && deviceContext != null) {\n            //Number plan is using a NationalPrefix aka Trunc Code ... so we could add Area Code if not included in",
      "es": 0.6363636363636364,
      "em": false,
      "passed": false
    },
    {
      "index": 1864,
      "groundtruth": "(!normalizedDeviceContext.getCountryCode().equals(DeviceContext.UNKNOWN_VALUE)) {",
      "prediction": "(normalizedDeviceContext.getCountryCode() != null)",
      "raw_prediction": "(normalizedDeviceContext.getCountryCode() != null) {",
      "es": 0.5308641975308642,
      "em": false,
      "passed": false
    },
    {
      "index": 1865,
      "groundtruth": "= PhoneLibWrapper.getRegionCodeForCountryCode(normalizedDeviceContext.getCountryCode());",
      "prediction": "= normalizedDeviceContext.getCountryCode();",
      "raw_prediction": "= normalizedDeviceContext.getCountryCode();",
      "es": 0.48863636363636365,
      "em": false,
      "passed": false
    },
    {
      "index": 1866,
      "groundtruth": "if (! normalizerPhoneNumber.isNormalizingTried()) {",
      "prediction": "if (normalizerPhoneNumber.getSemiNormalizedNumber() == null)",
      "raw_prediction": "if (normalizerPhoneNumber.getSemiNormalizedNumber() == null) {",
      "es": 0.6,
      "em": false,
      "passed": false
    },
    {
      "index": 1867,
      "groundtruth": "(PhoneLibWrapper.getCountryCodeForRegion(fallBackRegionCode) > 0) {",
      "prediction": "(fallBackRegionCode != null && !fallBackRegionCode.isEmpty())",
      "raw_prediction": "(fallBackRegionCode != null && !fallBackRegionCode.isEmpty()) {",
      "es": 0.31343283582089554,
      "em": false,
      "passed": false
    },
    {
      "index": 1868,
      "groundtruth": "(wrapper.hasRegionNationalAccessCode() && deviceContext != null) {",
      "prediction": "(wrapper.isNationalPrefixUsed(numberplan))",
      "raw_prediction": "(wrapper.isNationalPrefixUsed(numberplan)) {",
      "es": 0.36363636363636365,
      "em": false,
      "passed": false
    },
    {
      "index": 1869,
      "groundtruth": ".extendNumberByDefaultAreaCodeAndCountryCode(wrapper.getNationalAccessCode(), deviceContext.getNationalDestinationCode());",
      "prediction": ".getE164Formatted();",
      "raw_prediction": ".getE164Formatted();",
      "es": 0.10655737704918034,
      "em": false,
      "passed": false
    },
    {
      "index": 1870,
      "groundtruth": ") : wrapper.getE164Formatted();",
      "prediction": ") :",
      "raw_prediction": ") :\n            wrapper.getE164Formatted();",
      "es": 0.09677419354838712,
      "em": false,
      "passed": false
    },
    {
      "index": 1871,
      "groundtruth": "return wrapper.getE164Formatted();",
      "prediction": "return wrapper.getE164Formatted();",
      "raw_prediction": "return wrapper.getE164Formatted();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1872,
      "groundtruth": "boolean hasNoCCAndNoNAC = wrapper.hasNoCountryCodeNorNationalAccessCode();",
      "prediction": "boolean hasNoCCAndNoNAC = wrapper.getNationalNumber().equals(wrapper.getNationalNumberWithTruncation());",
      "raw_prediction": "boolean hasNoCCAndNoNAC = wrapper.getNationalNumber().equals(wrapper.getNationalNumberWithTruncation());",
      "es": 0.4903846153846154,
      "em": false,
      "passed": false
    },
    {
      "index": 1873,
      "groundtruth": "!normalizedDeviceContext.getNationalDestinationCode().equals(DeviceContext.UNKNOWN_VALUE)) {",
      "prediction": "!normalizerPhoneNumber.isNormalizingTried()) {",
      "raw_prediction": "!normalizerPhoneNumber.isNormalizingTried()) {\n                // Number is already normalized:\n                return normalizerPhoneNumber.getDialableNumber();\n            }\n            // Device Context with CountryCode and AreaCode ...\n            if (normalizedDeviceContext.get",
      "es": 0.2717391304347826,
      "em": false,
      "passed": false
    },
    {
      "index": 1874,
      "groundtruth": "(hitIndicator.expired())\n                latestHitIndicators.remove(i);",
      "prediction": "(hitIndicator.expired()) {\n                latestHitIndicators.remove(i);",
      "raw_prediction": "(hitIndicator.expired()) {\n                latestHitIndicators.remove(i);\n            }",
      "es": 0.9726027397260274,
      "em": false,
      "passed": false
    },
    {
      "index": 1875,
      "groundtruth": "if (!destroyed || !capacity.isDestroyed() || this.stress != Integer.MAX_VALUE){",
      "prediction": "if (block.getSpeed()>0){",
      "raw_prediction": "if (block.getSpeed()>0){\n                    block.getLevel().playSound(null,block.getBlockPos(), SoundEvents.BLOCK_WOODEN_COG_CRACK, SoundSource.BLOCKS, 1.0f, 1.0",
      "es": 0.189873417721519,
      "em": false,
      "passed": false
    },
    {
      "index": 1876,
      "groundtruth": "capacity.setDestroyed(true);",
      "prediction": "detachKinetics();",
      "raw_prediction": "detachKinetics();\n                    block.getLevel().playSound(null, block.getBlockPos(), SoundEvents.BLOCK_GLASS_BREAK, SoundSource.BLOCKS, 1.0f, 1.0f);",
      "es": 0.2857142857142857,
      "em": false,
      "passed": false
    },
    {
      "index": 1877,
      "groundtruth": "MachineCapacityEntry config = MachineCapacityStorage.getInstance().getCapacity(block.getBlockState().getBlock());",
      "prediction": "MachineCapacityEntry config = MachineCapacityStorage.getInstance().getMachineCapacityConfig(block);",
      "raw_prediction": "MachineCapacityEntry config = MachineCapacityStorage.getInstance().getMachineCapacityConfig(block);\n        if (config == null){\n            return;\n        }\n        if (config.durabilityMax <= 0){\n            return;\n        }\n        if (",
      "es": 0.7256637168141593,
      "em": false,
      "passed": false
    },
    {
      "index": 1878,
      "groundtruth": "(capacity.getDurability()+damage_for_speed);",
      "prediction": "(capacity.getDurability()-damage_for_speed);",
      "raw_prediction": "(capacity.getDurability()-damage_for_speed);\n            block.setSpeed(block.getSpeed()-damage_for_speed);\n            block.getLevel().playSound(null, block.getBlockPos(), SoundEvents.BLOCK_WOODEN_BUTTON_CLICK_ON, SoundSource",
      "es": 0.9772727272727273,
      "em": false,
      "passed": false
    },
    {
      "index": 1879,
      "groundtruth": "= config.durabilityMax - capacity.getDurability();",
      "prediction": "= config.durabilityMax - capacity.getDurability();",
      "raw_prediction": "= config.durabilityMax - capacity.getDurability();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1880,
      "groundtruth": "(MachineCapacityStorage.getInstance().isBlackListBlock(block)){",
      "prediction": "(!block.getLevel().isClientSide())",
      "raw_prediction": "(!block.getLevel().isClientSide()) {",
      "es": 0.25396825396825395,
      "em": false,
      "passed": false
    },
    {
      "index": 1881,
      "groundtruth": "put(\"machine_capacity\",createMachineCapacity().toTag());",
      "prediction": "put(\"machine_capacity\", this.machineCapacity.toTag(new CompoundTag()));",
      "raw_prediction": "put(\"machine_capacity\", this.machineCapacity.toTag(new CompoundTag()));",
      "es": 0.647887323943662,
      "em": false,
      "passed": false
    },
    {
      "index": 1882,
      "groundtruth": "(!MachineCapacityStorage.getInstance().active){",
      "prediction": "(!block.getLevel().isClientSide())",
      "raw_prediction": "(!block.getLevel().isClientSide()){\n            if (this.lifeBlockBlocked){\n                this.lifeBlock -= 0.1f;\n                if (this.lifeBlock <= 0){\n                    this.lifeBlockBlocked = false;\n                    this",
      "es": 0.21276595744680848,
      "em": false,
      "passed": false
    },
    {
      "index": 1883,
      "groundtruth": "element.setContent(text);",
      "prediction": "element.setText(text);",
      "raw_prediction": "element.setText(text);",
      "es": 0.8,
      "em": false,
      "passed": false
    },
    {
      "index": 1884,
      "groundtruth": "itemheight = element.getHeight(this.width);",
      "prediction": "itemheight = element.getHeight();",
      "raw_prediction": "itemheight = element.getHeight();\n                if (itemheight > 0) {",
      "es": 0.7674418604651163,
      "em": false,
      "passed": false
    },
    {
      "index": 1885,
      "groundtruth": "TagElement element = serializer.deserialize(mapAttributes(child.getAttributes()));",
      "prediction": "TagElement element = serializer.deserialize(mapAttributes(child.getAttributes()), child.getTextContent());",
      "raw_prediction": " TagElement element = serializer.deserialize(mapAttributes(child.getAttributes()), child.getTextContent());",
      "es": 0.7735849056603774,
      "em": false,
      "passed": false
    },
    {
      "index": 1886,
      "groundtruth": "element.mouseClicked(mouseX - (columnWidth * index), mouseY, button, columnWidth)) {",
      "prediction": "element.mouseClicked(mouseX, mouseY, button, columnWidth)",
      "raw_prediction": "element.mouseClicked(mouseX, mouseY, button, columnWidth)) {",
      "es": 0.6785714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 1887,
      "groundtruth": ".max(element.getHeight(width), 20);",
      "prediction": ".max(element.getHeight(width - 40), 20);",
      "raw_prediction": ".max(element.getHeight(width - 40), 20);",
      "es": 0.875,
      "em": false,
      "passed": false
    },
    {
      "index": 1888,
      "groundtruth": "child.getHeight(width);",
      "prediction": "element.getHeight(width());",
      "raw_prediction": "element.getHeight(width());",
      "es": 0.6666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 1889,
      "groundtruth": "element.mouseClicked(mouseX, mouseY, button, width - 40);",
      "prediction": "element.mouseClicked(mouseX, mouseY, button, width - 40);",
      "raw_prediction": "element.mouseClicked(mouseX, mouseY, button, width - 40);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1890,
      "groundtruth": "element.getHeight(width - indexWidth - 2), Minecraft.getInstance().font.lineHeight + 1);",
      "prediction": "element.getHeight(width - indexWidth - 2), Minecraft.getInstance().font.lineHeight + 1);",
      "raw_prediction": "element.getHeight(width - indexWidth - 2), Minecraft.getInstance().font.lineHeight + 1);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1891,
      "groundtruth": "bot.getCommand(cmdId).isPresent()) {",
      "prediction": "bot.hasCommand(cmdId)",
      "raw_prediction": "bot.hasCommand(cmdId)) {",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 1892,
      "groundtruth": "String key = command.getId();",
      "prediction": "String key = command.getId();",
      "raw_prediction": "String key = command.getId();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1893,
      "groundtruth": "filter(c -> c.getSources().length == 0).findFirst();",
      "prediction": "filter(c -> c.getClass().isAnnotationPresent(Command.class)).findFirst();",
      "raw_prediction": "filter(c -> c.getClass().isAnnotationPresent(Command.class)).findFirst();",
      "es": 0.4931506849315068,
      "em": false,
      "passed": false
    },
    {
      "index": 1894,
      "groundtruth": "= bot.getStartCommand();",
      "prediction": "= bot.getStartCommand();",
      "raw_prediction": "= bot.getStartCommand();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1895,
      "groundtruth": "return command.getHelp();",
      "prediction": "return null;",
      "raw_prediction": "return null;",
      "es": 0.4,
      "em": false,
      "passed": false
    },
    {
      "index": 1896,
      "groundtruth": ", \"checkExecutionOrder of {",
      "prediction": ", \"{",
      "raw_prediction": ", \"{",
      "es": 0.14814814814814814,
      "em": false,
      "passed": false
    },
    {
      "index": 1897,
      "groundtruth": "(command.getId());",
      "prediction": "();",
      "raw_prediction": "();",
      "es": 0.16666666666666663,
      "em": false,
      "passed": false
    },
    {
      "index": 1898,
      "groundtruth": "this.execute(command, null);",
      "prediction": "if (command != null)",
      "raw_prediction": "if (command != null) {\n            if (!this.context.addEvent(command.getId(), command.getCreatedAt())) {\n                return;\n            }\n        }\n\n        String key = command.getId();\n\n        this.context.addCommandToStack(key);\n\n        try {\n\n",
      "es": 0.4642857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 1899,
      "groundtruth": ".getSizeZ() <= 1 && Math.abs(center.getY() - pos.getY()) <= area.getSizeY();",
      "prediction": ".getSizeZ() <= 1 && Math.abs(pos.getZ()) <= area.getSizeZ();",
      "raw_prediction": ".getSizeZ() <= 1 && Math.abs(pos.getZ()) <= area.getSizeZ();",
      "es": 0.7631578947368421,
      "em": false,
      "passed": false
    },
    {
      "index": 1900,
      "groundtruth": "load(gameMap, gameMap.getName() + \"_\" + System.currentTimeMillis());",
      "prediction": "load(gameMap, gameMap.getName());",
      "raw_prediction": "load(gameMap, gameMap.getName());",
      "es": 0.4852941176470589,
      "em": false,
      "passed": false
    },
    {
      "index": 1901,
      "groundtruth": "center = area.getCenter();",
      "prediction": "center = area.getCenter();",
      "raw_prediction": "center = area.getCenter();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1902,
      "groundtruth": "(gameMap.getSource(), activeWorldFolder);",
      "prediction": "(gameMap.getSource(), activeWorldFolder);",
      "raw_prediction": "(gameMap.getSource(), activeWorldFolder);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1903,
      "groundtruth": "= csStats.getProfileInfos(userid);",
      "prediction": "= csStats.getProfileInfo(userid);",
      "raw_prediction": "= csStats.getProfileInfo(userid);\n        if (profileData == null) {\n            String msg = String.format(\"Couldn't find user profile: %s\", user);\n            event.reply(msg).queue();\n            return;\n        }\n\n       ",
      "es": 0.9705882352941176,
      "em": false,
      "passed": false
    },
    {
      "index": 1904,
      "groundtruth": "= csStats.getStatistics(userid);",
      "prediction": "= csStats.getUserStats(userid); // Shouldn't return null because",
      "raw_prediction": "= csStats.getUserStats(userid); // Shouldn't return null because profile visibility is linked with game details visibility",
      "es": 0.359375,
      "em": false,
      "passed": false
    },
    {
      "index": 1905,
      "groundtruth": "Main.getLogger().error(\"The json body for request '{",
      "prediction": "Main.getLogger().error(\"The response for request '{}",
      "raw_prediction": "Main.getLogger().error(\"The response for request '{}",
      "es": 0.8269230769230769,
      "em": false,
      "passed": false
    },
    {
      "index": 1906,
      "groundtruth": "Main.getLogger().error(\"'success' was not '1' when trying to get statistics for {",
      "prediction": "return String.format(\"Invalid vanity URL: {0",
      "raw_prediction": "return String.format(\"Invalid vanity URL: {0",
      "es": 0.16049382716049387,
      "em": false,
      "passed": false
    },
    {
      "index": 1907,
      "groundtruth": "(hangman.initialize()) {",
      "prediction": "(hangman.startGame())",
      "raw_prediction": "(hangman.startGame()) {",
      "es": 0.5833333333333333,
      "em": false,
      "passed": false
    },
    {
      "index": 1908,
      "groundtruth": "if (!mTXVodPlayerWrapper.isPlaying()) {",
      "prediction": "if (mTXVodPlayerWrapper.isPlaying())",
      "raw_prediction": " if (mTXVodPlayerWrapper.isPlaying()) {",
      "es": 0.9230769230769231,
      "em": false,
      "passed": false
    },
    {
      "index": 1909,
      "groundtruth": "TAG, \"[setTXVodPlayer] , PLAY_EVT_PLAY_PROGRESS\uff0c\" + mTXVodPlayerWrapper.getVodPlayer().hashCode() + \" url \" + TXVodPlayerWrapper.getUrl());",
      "prediction": "TAG, \"[setTXVodPlayer] mTXVodPlayerWrapper.url \" + mTXVodPlayerWrapper.getUrl());",
      "raw_prediction": "TAG, \"[setTXVodPlayer] mTXVodPlayerWrapper.url \" + mTXVodPlayerWrapper.getUrl());",
      "es": 0.5683453237410072,
      "em": false,
      "passed": false
    },
    {
      "index": 1910,
      "groundtruth": "mTXVodPlayerWrapper.setVodChangeListener(this);",
      "prediction": "mTXVodPlayerWrapper.setVodChangeListener(this);",
      "raw_prediction": "mTXVodPlayerWrapper.setVodChangeListener(this);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1911,
      "groundtruth": "i(TAG, \"[setTXVodPlayer] , PLAY_EVT_PLAY_PROGRESS\uff0c\" + mTXVodPlayerWrapper.getVodPlayer().hashCode() + \" url \" + TXVodPlayerWrapper.getUrl());",
      "prediction": "i(TAG, \"[setTXVodPlayer] mTXVodPlayerWrapper.url \" + mTXVodPlayerWrapper.getUrl());",
      "raw_prediction": "i(TAG, \"[setTXVodPlayer] mTXVodPlayerWrapper.url \" + mTXVodPlayerWrapper.getUrl());",
      "es": 0.574468085106383,
      "em": false,
      "passed": false
    },
    {
      "index": 1912,
      "groundtruth": "Main.getLogger().error(\"The callable didn't return a value when trying to run 'quote'\");",
      "prediction": "Main.getLogger().error(\"The callable didn't return a value when trying to run 'quote'\");",
      "raw_prediction": "Main.getLogger().error(\"The callable didn't return a value when trying to run 'quote'\");\n            } else {",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1913,
      "groundtruth": "mTXVodPlayerWrapper.resumePlay();",
      "prediction": "startPlay();",
      "raw_prediction": " startPlay();\n            } else {",
      "es": 0.2727272727272727,
      "em": false,
      "passed": false
    },
    {
      "index": 1914,
      "groundtruth": "Log.i(TAG, \"[startPlay] mTXVodPlayerWrapper.url \" + mTXVodPlayerWrapper.getUrl());",
      "prediction": "Log.i(TAG, \"[startPlay] mTXVodPlayerWrapper.url \" + mTXVodPlayerWrapper.getUrl());",
      "raw_prediction": "Log.i(TAG, \"[startPlay] mTXVodPlayerWrapper.url \" + mTXVodPlayerWrapper.getUrl());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1915,
      "groundtruth": "(scramble.initialize()) {",
      "prediction": "(scramble.start())",
      "raw_prediction": "(scramble.start()) {",
      "es": 0.6,
      "em": false,
      "passed": false
    },
    {
      "index": 1916,
      "groundtruth": ".status = HttpStatus.getEnum(code);",
      "prediction": ".status = HttpStatus.valueOf(code);",
      "raw_prediction": ".status = HttpStatus.valueOf(code);",
      "es": 0.8,
      "em": false,
      "passed": false
    },
    {
      "index": 1917,
      "groundtruth": "videoView.stopForPlaying();",
      "prediction": "if (videoView != null)",
      "raw_prediction": "if (videoView != null) {\n            videoView.release();\n        }",
      "es": 0.2592592592592593,
      "em": false,
      "passed": false
    },
    {
      "index": 1918,
      "groundtruth": "model.addAttribute(\"flights\", flightService.getUserFlights(principal));",
      "prediction": "model.addAttribute(\"flights\", flightService.getFlightsByUser(principal));",
      "raw_prediction": "model.addAttribute(\"flights\", flightService.getFlightsByUser(principal));",
      "es": 0.863013698630137,
      "em": false,
      "passed": false
    },
    {
      "index": 1919,
      "groundtruth": "txVodPlayerWrapper.stopPlay();",
      "prediction": "txVodPlayerWrapper.stopPlay();",
      "raw_prediction": "txVodPlayerWrapper.stopPlay();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1920,
      "groundtruth": "userRepository.findByEmail(principal.getName());",
      "prediction": "userRepository.findByUsername(principal.getName()).orElse(null);",
      "raw_prediction": "userRepository.findByUsername(principal.getName()).orElse(null);",
      "es": 0.6875,
      "em": false,
      "passed": false
    },
    {
      "index": 1921,
      "groundtruth": "Main.getLogger().error(\"The callable didn't return a value when trying to run 'joke'\");",
      "prediction": "Main.getLogger().error(\"The callable didn't return a value when trying to run 'joke'\");",
      "raw_prediction": "        Main.getLogger().error(\"The callable didn't return a value when trying to run 'joke'\");\n            event void handle(SlashCommandInteractionEvent event) {\n                String category = ArgumentParser.getString(event.getOption(\"category\"), null);\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1922,
      "groundtruth": "flightRepository.findFlightsByUser(userRepository.findByEmail(principal.getName()));",
      "prediction": "flightRepository.findByUser(userRepository.findByEmail(principal.getName()));",
      "raw_prediction": "flightRepository.findByUser(userRepository.findByEmail(principal.getName()));",
      "es": 0.9166666666666666,
      "em": false,
      "passed": false
    },
    {
      "index": 1923,
      "groundtruth": "String quote = Utils.getFromCallable(callable);",
      "prediction": "String quote = Utils.getFromCallable(callable);",
      "raw_prediction": "String quote = Utils.getFromCallable(callable);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1924,
      "groundtruth": "setUser(userRepository.findByEmail(principal.getName()));",
      "prediction": "setUser(userRepository.findByEmail(principal.getName()));",
      "raw_prediction": "setUser(userRepository.findByEmail(principal.getName()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1925,
      "groundtruth": "flightService.orderFlight(id, principal);",
      "prediction": "flightService.orderFlight(id, principal.getName());",
      "raw_prediction": "flightService.orderFlight(id, principal.getName());",
      "es": 0.803921568627451,
      "em": false,
      "passed": false
    },
    {
      "index": 1926,
      "groundtruth": "mTXVodPlayerWrapper.stopForPlaying();",
      "prediction": "mTXVodPlayerWrapper.stopPlay();",
      "raw_prediction": "mTXVodPlayerWrapper.stopPlay();",
      "es": 0.8378378378378378,
      "em": false,
      "passed": false
    },
    {
      "index": 1927,
      "groundtruth": "ShortVideoModel.getInstance(this).setOnDataLoadFullListener(this);",
      "prediction": "LiteAVSDKService.init(getApplicationContext());",
      "raw_prediction": " LiteAVSDKService.init(getApplicationContext());",
      "es": 0.21212121212121215,
      "em": false,
      "passed": false
    },
    {
      "index": 1928,
      "groundtruth": "getEmail(), userForm.getPassword());",
      "prediction": "toUser());",
      "raw_prediction": "toUser());\n",
      "es": 0.2222222222222222,
      "em": false,
      "passed": false
    },
    {
      "index": 1929,
      "groundtruth": "user = us.create(userForm.getEmail(), userForm.getPassword());",
      "prediction": "user = us.createUser(userForm.toUser());",
      "raw_prediction": "user = us.createUser(userForm.toUser());\n\n        // Para crear un recurso, necesitamos un URI. Para eso, usamos el m\u00e9todo getBaseUriBuilder() de UriInfo.\n        // Luego, usamos el m\u00e9todo",
      "es": 0.5806451612903225,
      "em": false,
      "passed": false
    },
    {
      "index": 1930,
      "groundtruth": "response.getFirstLine()));",
      "prediction": "response.getStatus().getBytes()));",
      "raw_prediction": "response.getStatus().getBytes()));\n        channel.write(ByteBuffer.wrap(\"\\r\\n\".getBytes()));",
      "es": 0.5882352941176471,
      "em": false,
      "passed": false
    },
    {
      "index": 1931,
      "groundtruth": "ShortVideoModel.getInstance(this).loadDefaultVideo();",
      "prediction": "ShortVideoModel.getInstance(this).setOnDataLoadFullListener(this);",
      "raw_prediction": " ShortVideoModel.getInstance(this).setOnDataLoadFullListener(this);",
      "es": 0.6515151515151515,
      "em": false,
      "passed": false
    },
    {
      "index": 1932,
      "groundtruth": "response.getHeaders().toString().getBytes()));",
      "prediction": "response.getHeaders().toString()));",
      "raw_prediction": "response.getHeaders().toString()));",
      "es": 0.7608695652173914,
      "em": false,
      "passed": false
    },
    {
      "index": 1933,
      "groundtruth": "channel.write(ByteBuffer.wrap(response.getBody()));",
      "prediction": "channel.write(ByteBuffer.wrap(response.getBody()));",
      "raw_prediction": "channel.write(ByteBuffer.wrap(response.getBody()));\n        channel.shutdownOutput();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1934,
      "groundtruth": "ShortVideoModel.getInstance(this).getVideoByFileId();",
      "prediction": "ShortVideoModel.getInstance(this).loadDefaultVideo();",
      "raw_prediction": " ShortVideoModel.getInstance(this).loadDefaultVideo();",
      "es": 0.7169811320754718,
      "em": false,
      "passed": false
    },
    {
      "index": 1935,
      "groundtruth": "write(response.getFirstLine());",
      "prediction": "write(response.getStatus().getBytes());",
      "raw_prediction": "write(response.getStatus().getBytes());\n        outputStream.write(\"\\r\\n\".getBytes());",
      "es": 0.641025641025641,
      "em": false,
      "passed": false
    },
    {
      "index": 1936,
      "groundtruth": ".write(response.getBody());",
      "prediction": ".write(response.getBody());",
      "raw_prediction": ".write(response.getBody());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1937,
      "groundtruth": "ShortVideoModel.getInstance(this).release();",
      "prediction": "ShortVideoModel.getInstance(this).getVideoByFileId();",
      "raw_prediction": "ShortVideoModel.getInstance(this).getVideoByFileId();",
      "es": 0.7547169811320755,
      "em": false,
      "passed": false
    },
    {
      "index": 1938,
      "groundtruth": "response.getHeaders().toString().getBytes());",
      "prediction": "\"\\r\\n\".getBytes());",
      "raw_prediction": "\"\\r\\n\".getBytes());\n        for (String header : response.getHeaders().getAllHeaders()) {\n            outputStream.write(header.getBytes());\n            outputStream.write(\"\\r\\n\".getBytes());\n        }",
      "es": 0.33333333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 1939,
      "groundtruth": "ShortVideoModel.getInstance(this).setOnDataLoadFullListener(null);",
      "prediction": "LiteAVSDKService.release();",
      "raw_prediction": "LiteAVSDKService.release();",
      "es": 0.19696969696969702,
      "em": false,
      "passed": false
    },
    {
      "index": 1940,
      "groundtruth": "faceProvider.invalidateCache();",
      "prediction": "faceProvider.reloadConfig();",
      "raw_prediction": "faceProvider.reloadConfig();",
      "es": 0.5806451612903225,
      "em": false,
      "passed": false
    },
    {
      "index": 1941,
      "groundtruth": "String mrState = mrEvent.getMrState();",
      "prediction": "String mrState = mrEvent.getMrState();",
      "raw_prediction": "\tString mrState = mrEvent.getMrState();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1942,
      "groundtruth": "Long projectId = mrEvent.getProjectId();",
      "prediction": "Long projectId = mrEvent.getProjectId();",
      "raw_prediction": " Long projectId = mrEvent.getProjectId();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1943,
      "groundtruth": "CascadeResult result = gitLabService.createResult(gitlabEventUUID);",
      "prediction": "CascadeResult result = gitLabService.createResult(gitlabEventUUID);",
      "raw_prediction": "\tCascadeResult result = gitLabService.createResult(gitlabEventUUID);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1944,
      "groundtruth": "String gitlabEventUUID = mrSimple.getGitlabEventUUID();",
      "prediction": "String gitlabEventUUID = mrSimple.getGitlabEventUUID();",
      "raw_prediction": "String gitlabEventUUID = mrSimple.getGitlabEventUUID();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1945,
      "groundtruth": "result.setError(\"Invalid path: \" + path);",
      "prediction": "if (result.getError() != null)",
      "raw_prediction": "if (result.getError() != null) {\n\t\t\t\trc.response()\n\t\t\t\t\t\t.setStatusCode(500)\n\t\t\t\t\t\t.end(Json.encode(result));\n\t\t\t} else {",
      "es": 0.3414634146341463,
      "em": false,
      "passed": false
    },
    {
      "index": 1946,
      "groundtruth": "result.setPreviousAutoMrMergedError(e.getMessage());",
      "prediction": "result.setPreviousAutoMrMergedError(e.getMessage());",
      "raw_prediction": "result.setPreviousAutoMrMergedError(e.getMessage());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1947,
      "groundtruth": "Long mrNumber = mrEvent.getMrNumber();",
      "prediction": "Long mrNumber = mrEvent.getMrNumber();",
      "raw_prediction": "\tLong mrNumber = mrEvent.getMrNumber();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1948,
      "groundtruth": "Long userId = mrEvent.getUserId();",
      "prediction": "Long userId = mrEvent.getUserId();",
      "raw_prediction": "\tLong userId = mrEvent.getUserId();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1949,
      "groundtruth": "= mrEvent.getMergeCommitSha();",
      "prediction": "= mrEvent.getMergeSha();",
      "raw_prediction": "= mrEvent.getMergeSha();\n\t\tString prevSourceBranch = removeMrPrefixPattern(sourceBranch);\n",
      "es": 0.8,
      "em": false,
      "passed": false
    },
    {
      "index": 1950,
      "groundtruth": "result.setExistingBranchDeleteError(e.getMessage());",
      "prediction": "result.setExistingBranchDeleteError(e.getMessage());",
      "raw_prediction": "\tresult.setExistingBranchDeleteError(e.getMessage());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1951,
      "groundtruth": "result.setCreatedAutoMrError(e.getMessage());",
      "prediction": "result.setCreatedAutoMrError(e.getMessage());",
      "raw_prediction": "result.setCreatedAutoMrError(e.getMessage());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1952,
      "groundtruth": "presentation.setTitle(getTitle(doc, SHOWTITLE));",
      "prediction": "if (!doc.getNodeName().equals(\"presentation\"))",
      "raw_prediction": " if (!doc.getNodeName().equals(\"presentation\")) {\n\t\t\t\tthrow new SAXException(\"Invalid XML file\");\n\t\t\t}",
      "es": 0.14583333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 1953,
      "groundtruth": ".print(((BitmapItem) slideItem).getName());",
      "prediction": ".print(((BitmapItem) slideItem).getImage());",
      "raw_prediction": ".print(((BitmapItem) slideItem).getImage());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tSystem.out.println(\"Ignoring \" + slideItem);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tout.println(\"</item>\");\n\t\t\t\t}\n\n\t\t\t\t\tout.println(\"</slide>\");\n\t\t\t\t",
      "es": 0.9318181818181819,
      "em": false,
      "passed": false
    },
    {
      "index": 1954,
      "groundtruth": "mrEvent.getProjectId(), mrEvent.getUserId(), mrEvent.getTargetBranch(), mrEvent.getMrNumber(), mrState, mrAction);",
      "prediction": "projectId, userId, targetBranch, mrNumber, mrState, mrAction);",
      "raw_prediction": "projectId, userId, targetBranch, mrNumber, mrState, mrAction);\n\t\tresult.setSkipped();",
      "es": 0.5263157894736843,
      "em": false,
      "passed": false
    },
    {
      "index": 1955,
      "groundtruth": "= Style.getStyle(slideItem.getLevel());",
      "prediction": "= Style.getStyle(title.getLevel());",
      "raw_prediction": "= Style.getStyle(title.getLevel());",
      "es": 0.8205128205128205,
      "em": false,
      "passed": false
    },
    {
      "index": 1956,
      "groundtruth": "out.print(((TextItem) slideItem).getText());",
      "prediction": "out.print(((TextItem) slideItem).getText());",
      "raw_prediction": "out.print(((TextItem) slideItem).getText());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1957,
      "groundtruth": ".print(\"\\\"text\\\" level=\\\"\" + slideItem.getLevel() + \"\\\">\");",
      "prediction": ".print(\"\\\"text\\\" level=\\\"\" + slideItem.getLevel() + \"\\\">\");",
      "raw_prediction": ".print(\"\\\"text\\\" level=\\\"\" + slideItem.getLevel() + \"\\\">\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1958,
      "groundtruth": "< presentation.getSize();",
      "prediction": "< presentation.getNumberOfSlides());",
      "raw_prediction": "< presentation.getNumberOfSlides());",
      "es": 0.6666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 1959,
      "groundtruth": ", mrEvent.getUserId(), mrEvent.getTargetBranch(), mrEvent.getMrNumber(), mrState, mrAction);",
      "prediction": ", mrEvent.getUserId(), mrEvent.getTargetBranch(), mrEvent.getMrNumber(), mrState, mrAction);",
      "raw_prediction": ", mrEvent.getUserId(), mrEvent.getTargetBranch(), mrEvent.getMrNumber(), mrState, mrAction);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1960,
      "groundtruth": "bookDTO.setAuthorName(\"Ranjan Sir\");",
      "prediction": "bookDTO.setAuthorName(\"Author One\");",
      "raw_prediction": "bookDTO.setAuthorName(\"Author One\");",
      "es": 0.75,
      "em": false,
      "passed": false
    },
    {
      "index": 1961,
      "groundtruth": "bookDTO.setAuthorEmail(\"author1@gmail.com\");",
      "prediction": "bookDTO.setAuthorId(123L);",
      "raw_prediction": "bookDTO.setAuthorId(123L);",
      "es": 0.4772727272727273,
      "em": false,
      "passed": false
    },
    {
      "index": 1962,
      "groundtruth": "bookDTO.setAvailableQty(10);",
      "prediction": "bookDTO.setAuthorPhone(\"9876543210\");",
      "raw_prediction": "bookDTO.setAuthorPhone(\"9876543210\");",
      "es": 0.45945945945945943,
      "em": false,
      "passed": false
    },
    {
      "index": 1963,
      "groundtruth": "bookDTO.setDescription(\"Book One Description\");",
      "prediction": "bookDTO.setCategory(\"Computer Science\");",
      "raw_prediction": "bookDTO.setCategory(\"Computer Science\");",
      "es": 0.42553191489361697,
      "em": false,
      "passed": false
    },
    {
      "index": 1964,
      "groundtruth": "bookDTO.setName(\"PlacementPrep\");",
      "prediction": "bookDTO.setName(\"Book One\");",
      "raw_prediction": "bookDTO.setName(\"Book One\");",
      "es": 0.6666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 1965,
      "groundtruth": "bookDTO.setPricePerQty(88.959);",
      "prediction": "bookDTO.setPricePerQty(250);",
      "raw_prediction": "bookDTO.setPricePerQty(250);",
      "es": 0.8387096774193549,
      "em": false,
      "passed": false
    },
    {
      "index": 1966,
      "groundtruth": "!code.equals(twoFactorService.getTOTPCode(secret)))\n            return ResponseEntity.status(403).build();",
      "prediction": "!twoFactorService.verifyCode(code, secret)) return ResponseEntity.status(403).build();",
      "raw_prediction": "!twoFactorService.verifyCode(code, secret)) return ResponseEntity.status(403).build();",
      "es": 0.6509433962264151,
      "em": false,
      "passed": false
    },
    {
      "index": 1967,
      "groundtruth": "token = BackendApplication.generateString(20);",
      "prediction": "token = BackendApplication.generateRandomString(24);",
      "raw_prediction": "token = BackendApplication.generateRandomString(24);",
      "es": 0.8653846153846154,
      "em": false,
      "passed": false
    },
    {
      "index": 1968,
      "groundtruth": "= twoFactorService.getGoogleAuthenticatorBarCode(secret, username, company);",
      "prediction": "= twoFactorService.createBarcode(company, username, secret);",
      "raw_prediction": "= twoFactorService.createBarcode(company, username, secret);\n        String qr = twoFactorService.createQRCode(barCode, 400, 400);\n\n        JSONObject object = new JSONObject().put(\"secret\", secret).",
      "es": 0.5526315789473684,
      "em": false,
      "passed": false
    },
    {
      "index": 1969,
      "groundtruth": "twoFactorService.createQRCode(barCode, 400, 400);",
      "prediction": "twoFactorService.getGoogleAuthenticatorQRCode(secret, username, company);",
      "raw_prediction": "twoFactorService.getGoogleAuthenticatorQRCode(secret, username, company);",
      "es": 0.452054794520548,
      "em": false,
      "passed": false
    },
    {
      "index": 1970,
      "groundtruth": "ok(service.getUserByUsername(username));",
      "prediction": "ok(service.findByUsername(username));",
      "raw_prediction": "ok(service.findByUsername(username));",
      "es": 0.825,
      "em": false,
      "passed": false
    },
    {
      "index": 1971,
      "groundtruth": "ok(service.searchByUsername(username));",
      "prediction": "ok(service.searchByUsername(username));",
      "raw_prediction": "ok(service.searchByUsername(username));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1972,
      "groundtruth": "return ResponseEntity.ok(service.findAll());",
      "prediction": "return ResponseEntity.ok(service.getAll());",
      "raw_prediction": " return ResponseEntity.ok(service.getAll());\n    }\n\n    @GetMapping(\"/status\")\n    public ResponseEntity<Integer> getStatus() {\n        AccountData accountData = (AccountData) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n        if (accountData ==",
      "es": 0.9090909090909091,
      "em": false,
      "passed": false
    },
    {
      "index": 1973,
      "groundtruth": "min = URL.convertDate(minDate, new Date(0L));",
      "prediction": "min = URL.convertDate(minDate, new Date()); // converte a data para o formato correto",
      "raw_prediction": "min = URL.convertDate(minDate, new Date()); // converte a data para o formato correto",
      "es": 0.48235294117647054,
      "em": false,
      "passed": false
    },
    {
      "index": 1974,
      "groundtruth": "Post> list = postService.fullSearch(text, min ,max);",
      "prediction": "Post> list = postService.fullSearch(body, min, max);",
      "raw_prediction": "Post> list = postService.fullSearch(body, min, max);",
      "es": 0.8846153846153846,
      "em": false,
      "passed": false
    },
    {
      "index": 1975,
      "groundtruth": "obj.getId()) ;",
      "prediction": "obj.getId());",
      "raw_prediction": "obj.getId());",
      "es": 0.9285714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 1976,
      "groundtruth": "text = URL.decodeParam(text);",
      "prediction": "String decodingText = URL.decodeParam(text);",
      "raw_prediction": "String decodingText = URL.decodeParam(text);",
      "es": 0.6590909090909092,
      "em": false,
      "passed": false
    },
    {
      "index": 1977,
      "groundtruth": "= URL.convertDate(maxDate, new Date());",
      "prediction": "= URL.convertDate(maxDate, new Date());",
      "raw_prediction": "= URL.convertDate(maxDate, new Date());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1978,
      "groundtruth": "post1.getCommentsList().addAll(Arrays.asList(c1,c2));",
      "prediction": "post1.getCommentsList().addAll(Arrays.asList(c1,c2));",
      "raw_prediction": "post1.getCommentsList().addAll(Arrays.asList(c1,c2));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1979,
      "groundtruth": "return new User(objDTO.getId(), objDTO.getName(), objDTO.getEmail());",
      "prediction": "return new User(objDTO.getId(),objDTO.getName(),objDTO.getEmail());",
      "raw_prediction": "return new User(objDTO.getId(),objDTO.getName(),objDTO.getEmail());",
      "es": 0.9710144927536232,
      "em": false,
      "passed": false
    },
    {
      "index": 1980,
      "groundtruth": "messageHandler.destroySession(username);",
      "prediction": "messageHandler.deleteSession(username);",
      "raw_prediction": "messageHandler.deleteSession(username);",
      "es": 0.875,
      "em": false,
      "passed": false
    },
    {
      "index": 1981,
      "groundtruth": "MethodStatistics(row.getCount()));",
      "prediction": "MethodStatistics(row.getCount(), row.getModifier()));",
      "raw_prediction": "MethodStatistics(row.getCount(), row.getModifier()));\n            }\n        }\n        return stat;\n    }\n\n    @Override\n    public String getTitle() {\n        return this.title;\n    }\n\n    @Override\n    public CSV getCSV() {\n       ",
      "es": 0.6415094339622642,
      "em": false,
      "passed": false
    },
    {
      "index": 1982,
      "groundtruth": "row.getCount(), Modifier.CONSTRUCTOR));",
      "prediction": "row.getMethod()));",
      "raw_prediction": "row.getMethod()));",
      "es": 0.33333333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 1983,
      "groundtruth": "return this.modifiers.isInstanceOverridden();",
      "prediction": "boolean isInstancePublic",
      "raw_prediction": "    boolean isInstancePublicOverriding() {\n        return this.modifiers.isInstancePublicOverriding();",
      "es": 0.28888888888888886,
      "em": false,
      "passed": false
    },
    {
      "index": 1984,
      "groundtruth": "maria.getPosts().addAll(Arrays.asList(post1,post2));",
      "prediction": "maria.getPostsList().addAll(Arrays.asList(post1,post2));",
      "raw_prediction": " maria.getPostsList().addAll(Arrays.asList(post1,post2));",
      "es": 0.9285714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 1985,
      "groundtruth": "new GitHubMetrics(this.project.githubUrl())\n        ).cells();",
      "prediction": "new StatisticsCaseWithoutModifiers(title, csv, project, filters)\n        ).cells();",
      "raw_prediction": " new StatisticsCaseWithoutModifiers(title, csv, project, filters)\n        ).cells();",
      "es": 0.45783132530120485,
      "em": false,
      "passed": false
    },
    {
      "index": 1986,
      "groundtruth": "method -> !method.isConstructor())\n            .mapToLong(MethodStatistics::total)\n            .sum();",
      "prediction": "MethodStatistics::isMethod)\n            .mapToLong(MethodStatistics::total)\n            .sum();",
      "raw_prediction": "MethodStatistics::isMethod)\n            .mapToLong(MethodStatistics::total)\n            .sum();",
      "es": 0.7647058823529411,
      "em": false,
      "passed": false
    },
    {
      "index": 1987,
      "groundtruth": "(this.project.path())) {",
      "prediction": "(Application.getProject().getProjectDir())",
      "raw_prediction": "(Application.getProject().getProjectDir())) {",
      "es": 0.26190476190476186,
      "em": false,
      "passed": false
    },
    {
      "index": 1988,
      "groundtruth": ".modifiers.isStaticPackagePrivate();",
      "prediction": ".modifiers.isStaticPackage();",
      "raw_prediction": ".modifiers.isStaticPackage();",
      "es": 0.8055555555555556,
      "em": false,
      "passed": false
    },
    {
      "index": 1989,
      "groundtruth": "modifiers.isInstancePackage();",
      "prediction": "modifiers.isInstancePackagePrivate();",
      "raw_prediction": "modifiers.isInstancePackagePrivate();",
      "es": 0.8108108108108107,
      "em": false,
      "passed": false
    },
    {
      "index": 1990,
      "groundtruth": "obj.setId(id);",
      "prediction": "obj.setId(id);",
      "raw_prediction": " obj.setId(id);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1991,
      "groundtruth": "proxyServer.open();",
      "prediction": "proxyServer.start();",
      "raw_prediction": "proxyServer.start();",
      "es": 0.75,
      "em": false,
      "passed": false
    },
    {
      "index": 1992,
      "groundtruth": "proxyClient.authSuccess();",
      "prediction": "proxyClient.startHeartbeat();",
      "raw_prediction": "proxyClient.startHeartbeat();\n        } else if (opCode == 0x5) {\n            log.info(\"proxy update heartbeattime\");\n            proxyClient.updateHeatbeatTime();",
      "es": 0.6206896551724138,
      "em": false,
      "passed": false
    },
    {
      "index": 1993,
      "groundtruth": "proxyClient.shutdown();",
      "prediction": "log.info(\"close proxy\");",
      "raw_prediction": "log.info(\"close proxy\");",
      "es": 0.16666666666666663,
      "em": false,
      "passed": false
    },
    {
      "index": 1994,
      "groundtruth": "proxyClient.updateHeatbeatTime();",
      "prediction": "proxyClient.updateHeatbeatTime();",
      "raw_prediction": " proxyClient.updateHeatbeatTime();\n        } else if (opCode == 0x82) {\n            log.info(\"proxy online success\");\n            proxyClient.authSuccess();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1995,
      "groundtruth": "().write(Json.parseToJson(this.body));",
      "prediction": "().write(this.json.toJson(this.body).toString());",
      "raw_prediction": "().write(this.json.toJson(this.body).toString());",
      "es": 0.5714285714285714,
      "em": false,
      "passed": false
    },
    {
      "index": 1996,
      "groundtruth": "message, status.getValue(), request.getRequestURI(), new Date())).build(response);",
      "prediction": "new Date(), message)).contentType(ContentType.APPLICATION_JSON.getValue()).build(response);",
      "raw_prediction": "new Date(), message)).contentType(ContentType.APPLICATION_JSON.getValue()).build(response);",
      "es": 0.37362637362637363,
      "em": false,
      "passed": false
    },
    {
      "index": 1997,
      "groundtruth": "ResponseEntity.ok().body(obj.getPosts());",
      "prediction": "ResponseEntity.ok(obj.getPosts());",
      "raw_prediction": "ResponseEntity.ok(obj.getPosts());",
      "es": 0.8292682926829268,
      "em": false,
      "passed": false
    },
    {
      "index": 1998,
      "groundtruth": "= tenantRepository.findByTenantId(tenant).get();",
      "prediction": "= tenantRepository.findByTenantId(tenant);",
      "raw_prediction": "= tenantRepository.findByTenantId(tenant);",
      "es": 0.875,
      "em": false,
      "passed": false
    },
    {
      "index": 1999,
      "groundtruth": "String encryptedPassword = encryptionService.encrypt(password, secret, salt);",
      "prediction": "String encryptedPassword = encryptionService.encrypt(password, secret, salt);",
      "raw_prediction": "String encryptedPassword = encryptionService.encrypt(password, secret, salt);\n\n        if (isolationType == IsolationType.DISCRIMINATOR && !databaseName.equals(dbOrSchema)) {\n            throw new TenantCreationException(\"When using DIS",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2000,
      "groundtruth": "= masterTenantRepository.findByTenantId(key)\n                                .orElseThrow(() -> new RuntimeException(\"No such tenant: \" + key));",
      "prediction": "= masterTenantRepository.findByTenantId(key);",
      "raw_prediction": "= masterTenantRepository.findByTenantId(key);",
      "es": 0.3125,
      "em": false,
      "passed": false
    },
    {
      "index": 2001,
      "groundtruth": "String tenant = TenantContext.getTenantId();",
      "prediction": "// Set the default schema based on the tenant context",
      "raw_prediction": " // Set the default schema based on the tenant context\n        Tenant tenant = TenantContext.getTenant();",
      "es": 0.28301886792452835,
      "em": false,
      "passed": false
    },
    {
      "index": 2002,
      "groundtruth": "gpuTestCurlAnimView.flipSetToDefault();",
      "prediction": "gpuTestCurlAnimView.flipEnd();",
      "raw_prediction": " gpuTestCurlAnimView.flipEnd();",
      "es": 0.6923076923076923,
      "em": false,
      "passed": false
    },
    {
      "index": 2003,
      "groundtruth": "f.setXY(width, height);",
      "prediction": "f.setXY(0, height);",
      "raw_prediction": "f.setXY(0, height);",
      "es": 0.782608695652174,
      "em": false,
      "passed": false
    },
    {
      "index": 2004,
      "groundtruth": "animationEffecter.onScroll();",
      "prediction": "animationEffecter.computeScroll();",
      "raw_prediction": "animationEffecter.computeScroll();",
      "es": 0.8235294117647058,
      "em": false,
      "passed": false
    },
    {
      "index": 2005,
      "groundtruth": "return animationEffecter.animInEffect();",
      "prediction": "return animationEffecter.isRunning();",
      "raw_prediction": "return animationEffecter.isRunning();",
      "es": 0.725,
      "em": false,
      "passed": false
    },
    {
      "index": 2006,
      "groundtruth": "f.setXY(0, 0);",
      "prediction": "f.setXY(width, height);",
      "raw_prediction": "f.setXY(width, height);",
      "es": 0.5217391304347826,
      "em": false,
      "passed": false
    },
    {
      "index": 2007,
      "groundtruth": "readAnimView.buildBitmap(coverSlideDirection);",
      "prediction": "if (moveSampling.size() > MAX_COUNT)",
      "raw_prediction": "if (moveSampling.size() > MAX_COUNT) {\n                        moveSampling.remove(0);\n                    }\n                 }\n                 if (prepareDrawCoverAnimEffect) {\n                     if (moveSampling.size() == 0\n                             || x != move",
      "es": 0.13043478260869568,
      "em": false,
      "passed": false
    },
    {
      "index": 2008,
      "groundtruth": "animationEffecter.onViewAttachedToWindow();",
      "prediction": "animationEffecter.onViewAttachedToWindow();",
      "raw_prediction": "animationEffecter.onViewAttachedToWindow();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2009,
      "groundtruth": "f.setXY(width, 0);",
      "prediction": "f.setXY(0, 0);",
      "raw_prediction": "f.setXY(0, 0);",
      "es": 0.7222222222222222,
      "em": false,
      "passed": false
    },
    {
      "index": 2010,
      "groundtruth": "a.setXY(-1, -1);",
      "prediction": "holderBitmap = Bitmap.createBitm",
      "raw_prediction": "holderBitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);\n        bitmapCanvas = new Canvas(holderBitmap);",
      "es": 0.0625,
      "em": false,
      "passed": false
    },
    {
      "index": 2011,
      "groundtruth": "animationEffecter.onViewSizeChanged(vWidth, vHeight);",
      "prediction": "animationEffecter.setView(this);",
      "raw_prediction": "animationEffecter.setView(this);",
      "es": 0.5094339622641509,
      "em": false,
      "passed": false
    },
    {
      "index": 2012,
      "groundtruth": "(readAnimView.getPreviousBitmap(), -leftOffset, 0, paint);",
      "prediction": "(readAnimView.getNextBitmap(), 0, 0, paint);",
      "raw_prediction": "(readAnimView.getNextBitmap(), 0, 0, paint);\n            canvas.restore();\n            canvas.save();\n            canvas.clipPath(getPathAToLeft());\n            canvas.drawBitmap(readAnimView.getCurrentBitmap(), 0, 0,",
      "es": 0.6896551724137931,
      "em": false,
      "passed": false
    },
    {
      "index": 2013,
      "groundtruth": "int i = mRetrofitUrlManager.getPathSize();",
      "prediction": "int i = 0;",
      "raw_prediction": "int i = 0;",
      "es": 0.2142857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 2014,
      "groundtruth": "(slideDirection == AnimHelper.SLID_DIRECTION_LEFT && (null != readAnimView.getNextBitmap() && null != readAnimView.getCurrentBitmap())) {",
      "prediction": "(slideDirection == AnimHelper.SLID_DIRECTION_LEFT && null != readAnimView.getNextBitmap())",
      "raw_prediction": "(slideDirection == AnimHelper.SLID_DIRECTION_LEFT && null != readAnimView.getNextBitmap()) {",
      "es": 0.656934306569343,
      "em": false,
      "passed": false
    },
    {
      "index": 2015,
      "groundtruth": "+ mRetrofitUrlManager.getPathSize();",
      "prediction": "+ domainUrl.encodedQuery() + url.encodedQuery();",
      "raw_prediction": "+ domainUrl.encodedQuery() + url.encodedQuery();\n    }\n\n    @Override\n    public void clearCache() {\n        mCache.clear();",
      "es": 0.25,
      "em": false,
      "passed": false
    },
    {
      "index": 2016,
      "groundtruth": "+ mRetrofitUrlManager.getBaseUrl().host()\n                                + mRetrofitUrlManager.getBaseUrl().encodedPath()));",
      "prediction": "+ mRetrofitUrlManager.getBaseUrl().host() + \":\"\n                                + mRetrofitUrlManager.getBaseUrl().port() + \"/\"));",
      "raw_prediction": "+ mRetrofitUrlManager.getBaseUrl().host() + \":\"\n                                + mRetrofitUrlManager.getBaseUrl().port() + \"/\"));\n            }\n\n            if (!domainUrl.queryParameterNames().isEmpty()) {\n                for (String query",
      "es": 0.8538461538461538,
      "em": false,
      "passed": false
    },
    {
      "index": 2017,
      "groundtruth": "() > mRetrofitUrlManager.getPathSize()) {",
      "prediction": "() > mRetrofitUrlManag",
      "raw_prediction": "() > mRetrofitUrlManager.getPathSize()) {",
      "es": 0.5365853658536586,
      "em": false,
      "passed": false
    },
    {
      "index": 2018,
      "groundtruth": "drawable = readAnimView.getAnimHelper().getCoverGradientDrawable();",
      "prediction": "drawable = new GradientDrawable(GradientDrawable.Orientation.LEFT_RIGHT, new int[]{0x000000, 0x00000",
      "raw_prediction": "drawable = new GradientDrawable(GradientDrawable.Orientation.LEFT_RIGHT, new int[]{0x000000, 0x000000});\n        drawable.setCornerRadius(10);",
      "es": 0.26,
      "em": false,
      "passed": false
    },
    {
      "index": 2019,
      "groundtruth": "DLog.log(\"touchUp coverAnimationRunning=%s\", coverAnimationRunning);",
      "prediction": "if (isTouching) {",
      "raw_prediction": "if (isTouching) {\n            isTouching = false;\n            if (prepareDrawCoverAnimEffect) {\n                if (moveSampling.size() > 0) {\n                 float lastMoveX = moveSampling.get(moveSampling.size",
      "es": 0.11764705882352944,
      "em": false,
      "passed": false
    },
    {
      "index": 2020,
      "groundtruth": "readLayoutManger.getBookFlipMode();",
      "prediction": "readLayoutManger.getBookFlipMode();",
      "raw_prediction": "readLayoutManger.getBookFlipMode();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2021,
      "groundtruth": "readLayoutManger.setonStopScroller(new ItemOnScrollStop());",
      "prediction": "read LayoutManager getLayoutMan",
      "raw_prediction": "read LayoutManager getLayoutManager() {\n        return readLayoutManger;",
      "es": 0.3220338983050848,
      "em": false,
      "passed": false
    },
    {
      "index": 2022,
      "groundtruth": "readLayoutManger.setAutoLeftScroll(finallyMoveX < 10);",
      "prediction": "readLayoutManger.setAutoLeftScroll(finallyMoveX > 0);",
      "raw_prediction": " readLayoutManger.setAutoLeftScroll(finallyMoveX > 0);",
      "es": 0.962962962962963,
      "em": false,
      "passed": false
    },
    {
      "index": 2023,
      "groundtruth": "readLayoutManger.onRecyclerViewSizeChange();",
      "prediction": "read android.view.View;",
      "raw_prediction": "read android.view.View;",
      "es": 0.2954545454545454,
      "em": false,
      "passed": false
    },
    {
      "index": 2024,
      "groundtruth": "readLayoutManger.setAutoLeftScroll(finallyMoveX < 0);",
      "prediction": "readLayoutManger.setAutoLeftScroll(finallyMoveX < 10);",
      "raw_prediction": " readLayoutManger.setAutoLeftScroll(finallyMoveX < 10);",
      "es": 0.9814814814814815,
      "em": false,
      "passed": false
    },
    {
      "index": 2025,
      "groundtruth": "readLayoutManger.setBookFlipMode(flipMode);",
      "prediction": "if (null == readLayoutManger) return;",
      "raw_prediction": "if (null == readLayoutManger) return;",
      "es": 0.13953488372093026,
      "em": false,
      "passed": false
    },
    {
      "index": 2026,
      "groundtruth": "DLog.log(\"coverAnimationRunning coverAnimationRunning=%s \u7ed3\u675f\uff0c\u5ef6\u65f6\u5f00\u542f \u72b6\u6001\u91cd\u7f6e\", coverAnimationRunning);",
      "prediction": "readAnimView.postDelayed(new Runnable() {",
      "raw_prediction": "readAnimView.postDelayed(new Runnable() {\n                    @Override\n                    void run() {\n                        readAnimView.post(scrollRunnable);\n                     }\n                 }, 100);",
      "es": 0.12631578947368416,
      "em": false,
      "passed": false
    },
    {
      "index": 2027,
      "groundtruth": "readLayoutManger.forceScrollToPosition(position);",
      "prediction": "readLayoutManger.scrollToPosition(position);",
      "raw_prediction": "readLayoutManger.scrollToPosition(position);",
      "es": 0.8775510204081632,
      "em": false,
      "passed": false
    },
    {
      "index": 2028,
      "groundtruth": "readLayoutManger.setOnForceLayoutCompleted(new ItemOnForceLayoutCompleted());",
      "prediction": "setNestedScrollingEnabled(false);",
      "raw_prediction": " setNestedScrollingEnabled(false);",
      "es": 0.19480519480519476,
      "em": false,
      "passed": false
    },
    {
      "index": 2029,
      "groundtruth": "Food americanFoodA = AmericanFoodFactory.produce(\"A\");",
      "prediction": "Food americanFoodA = AmericanFoodFactory.produce(\"A\");",
      "raw_prediction": "Food americanFoodA = AmericanFoodFactory.produce(\"A\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2030,
      "groundtruth": ").animRunning();",
      "prediction": ").animRunning();",
      "raw_prediction": ").animRunning();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2031,
      "groundtruth": "animParentView.onClickMenuArea();",
      "prediction": "if (null != eventProxyWeakReference && null !=eventProxyWeakRefere",
      "raw_prediction": "if (null != eventProxyWeakReference && null !=eventProxyWeakReference.get()){\n            eventProxyWeakReference.get().onClickMenu();\n        }",
      "es": 0.18181818181818177,
      "em": false,
      "passed": false
    },
    {
      "index": 2032,
      "groundtruth": "= AmericanFoodFactory.produce(\"A\");",
      "prediction": "= AmericanFoodFactory.produce(\"B\");",
      "raw_prediction": "= AmericanFoodFactory.produce(\"B\");",
      "es": 0.9714285714285714,
      "em": false,
      "passed": false
    },
    {
      "index": 2033,
      "groundtruth": "DLog.log(\"CoverAnimationEffect draw 1\");",
      "prediction": "DLog.log(\"CoverAnimationEffect draw 1\");",
      "raw_prediction": "DLog.log(\"CoverAnimationEffect draw 1\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2034,
      "groundtruth": "PlayingSessionInformation.isOnNetwork()) {",
      "prediction": "PlayingSessionInformation.isOnServer()) { return; }",
      "raw_prediction": "PlayingSessionInformation.isOnServer()) { return; }\n        // Check if the player has permission to use this macro\n        if(!client.player.hasPermissionLevel(2)) { return; }\n        // Check if the player is in a lobby",
      "es": 0.7058823529411764,
      "em": false,
      "passed": false
    },
    {
      "index": 2035,
      "groundtruth": "!XenyriaConfigManager.getConfig().improvedShootingDetectionForPaintSquad) {",
      "prediction": "!XenyriaConfigManager.get().getBoolean(\"paint-squad.input.enabled\")",
      "raw_prediction": "!XenyriaConfigManager.get().getBoolean(\"paint-squad.input.enabled\")) {\n                    PacketListener.LOGGER.info(\"PaintSquad input polling task disabled.\");\n                    executor.shutdownNow();\n                    return;\n                }\n                // Check if the",
      "es": 0.45333333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 2036,
      "groundtruth": "configData = config.toJSON().toString(4);",
      "prediction": "configData = config.toJson().toString();",
      "raw_prediction": "configData = config.toJson().toString();",
      "es": 0.9024390243902439,
      "em": false,
      "passed": false
    },
    {
      "index": 2037,
      "groundtruth": "discordActivityAccess.start(applicationId);",
      "prediction": "discordActivityAccess.start();",
      "raw_prediction": " discordActivityAccess.start();",
      "es": 0.6976744186046512,
      "em": false,
      "passed": false
    },
    {
      "index": 2038,
      "groundtruth": "!XenyriaConfigManager.getConfig().shareServerActivity) {",
      "prediction": "!XenyriaConfigManager.getInsta",
      "raw_prediction": "!XenyriaConfigManager.getInstance().getDiscord().isEnabled()) {\n                        richPresenceData.put(\"details\", \"No activity shared\");\n                        richPresenceData.put(\"state\", \"No activity shared\");\n                    richPresenceData.put(\"activity",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 2039,
      "groundtruth": "PlayingSessionInformation.setOnNetwork(true);",
      "prediction": "// Then we determine the server type based on the server ID",
      "raw_prediction": " // Then we determine the server type based on the server ID",
      "es": 0.15254237288135597,
      "em": false,
      "passed": false
    },
    {
      "index": 2040,
      "groundtruth": "discordActivityAccess.stop();",
      "prediction": "discordActivityAccess.stop();",
      "raw_prediction": " discordActivityAccess.stop();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2041,
      "groundtruth": "String instanceId = packet.getData().getString(\"server_id\");",
      "prediction": "int instanceId = packet.getData().getInt(\"instance_id\");",
      "raw_prediction": " int instanceId = packet.getData().getInt(\"instance_id\");",
      "es": 0.7333333333333334,
      "em": false,
      "passed": false
    },
    {
      "index": 2042,
      "groundtruth": "EXenyriaServerType.determineServerType(instanceId)\n                        );",
      "prediction": "EXenyriaServerType.valueOf(packet.getData().getString(\"server_type\")));",
      "raw_prediction": "EXenyriaServerType.valueOf(packet.getData().getString(\"server_type\")));\n                    } else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.HANDSHAKE_RESPONSE) {\n                        // Orion responds back with a handshake",
      "es": 0.3246753246753247,
      "em": false,
      "passed": false
    },
    {
      "index": 2043,
      "groundtruth": "setLastReceivedRichPresence(packet.getData());",
      "prediction": "updateRichPresence(packet.getData());",
      "raw_prediction": "updateRichPresence(packet.getData());\n                    } else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.SERVER_INFO) {\n                        // Orion sends one server info packet on login\n                        // This packet contains the current server",
      "es": 0.7391304347826086,
      "em": false,
      "passed": false
    },
    {
      "index": 2044,
      "groundtruth": "\"Current server id: \" + PlayingSessionInformation.getServerInstanceId());",
      "prediction": "\"Current server instance ID: \" + PlayingSessionInformation.getServerInstanceId());",
      "raw_prediction": "\"Current server instance ID: \" + PlayingSessionInformation.getServerInstanceId());",
      "es": 0.8780487804878049,
      "em": false,
      "passed": false
    },
    {
      "index": 2045,
      "groundtruth": "responsePacket.sendToServer();",
      "prediction": "ClientPlayNetwork",
      "raw_prediction": " ClientPlayNetworking.sendToServer(\n                    ID,\n                    new XenyriaServerPacket(\n                            XenyriaServerPacket.EPacketType.HANDSHAKE_RESPONSE,\n                            new JSONObject()\n                    )\n            );",
      "es": 0.19999999999999996,
      "em": false,
      "passed": false
    },
    {
      "index": 2046,
      "groundtruth": "XenyriaServerPacket packet = XenyriaServerPacket.parsePacket(rawJsonText);",
      "prediction": "JSONObject jsonPacket = new JSONObject(rawJsonText);",
      "raw_prediction": "JSONObject jsonPacket = new JSONObject(rawJsonText);\n                    XenyriaServerPacket packet = XenyriaServerPacket.parse(jsonPacket);",
      "es": 0.3783783783783784,
      "em": false,
      "passed": false
    },
    {
      "index": 2047,
      "groundtruth": "(\"Current network state: \" + PlayingSessionInformation.isOnNetwork());",
      "prediction": "(\"Debug packet received: \" + packet.getData().toString());",
      "raw_prediction": "(\"Debug packet received: \" + packet.getData().toString());\n                    } else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.SERVER_INFO) {\n                        LOGGER.info(\"Server info packet received: \" + packet.getData",
      "es": 0.2857142857142857,
      "em": false,
      "passed": false
    },
    {
      "index": 2048,
      "groundtruth": "XenyriaConfigManager.getConfig().enableDiscordRichPresence) {",
      "prediction": "XenyriaConfigManager.getInstance",
      "raw_prediction": "XenyriaConfigManager.getInstance().isRichPresenceEnabled()) {",
      "es": 0.47540983606557374,
      "em": false,
      "passed": false
    },
    {
      "index": 2049,
      "groundtruth": "PlayingSessionInformation.setServerInstanceId(instanceId);",
      "prediction": "PlayingSessionInformation.setServerInstanceId(instanceId);",
      "raw_prediction": " PlayingSessionInformation.setServerInstanceId(instanceId);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2050,
      "groundtruth": "else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.DEBUG) {",
      "prediction": "else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.HANDSHAKE_RESPONSE)",
      "raw_prediction": "else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.HANDSHAKE_RESPONSE) {\n            // Orion responds back with a handshake response packet\n            // This packet contains the current server ID\n            String instance",
      "es": 0.8023255813953488,
      "em": false,
      "passed": false
    },
    {
      "index": 2051,
      "groundtruth": "(packet.getPacketType() == XenyriaServerPacket.EPacketType.RP) {",
      "prediction": "(packet.getPacketType() == XenyriaServerPacket.EPacketType.RICH_PRESENCE)",
      "raw_prediction": "(packet.getPacketType() == XenyriaServerPacket.EPacketType.RICH_PRESENCE) {",
      "es": 0.8356164383561644,
      "em": false,
      "passed": false
    },
    {
      "index": 2052,
      "groundtruth": ".lexer.lex(markdown)).visit(compiler);",
      "prediction": ".lexer.lex(markdown));",
      "raw_prediction": ".lexer.lex(markdown));\n\n        compiler.setRootNode(this.parser.getRootNode());",
      "es": 0.5789473684210527,
      "em": false,
      "passed": false
    },
    {
      "index": 2053,
      "groundtruth": "+ feature.name() + \"' is incompatible with compiler '\" + testCompiler.name() + \"'\");",
      "prediction": "+ feature.getClass().getSimpleName() + \"' does not support compiler \" + testCompiler.getClass().getSimpleName());",
      "raw_prediction": "+ feature.getClass().getSimpleName() + \"' does not support compiler \" + testCompiler.getClass().getSimpleName());",
      "es": 0.4601769911504425,
      "em": false,
      "passed": false
    },
    {
      "index": 2054,
      "groundtruth": "builder.pushStyle(style -> style.withColor(Formatting.GRAY).withItalic(true));",
      "prediction": "builder.pushStyle(style -> style.withColor(Formatting.GRAY)); // gray quotes",
      "raw_prediction": "builder.pushStyle(style -> style.withColor(Formatting.GRAY)); // gray quotes",
      "es": 0.7692307692307692,
      "em": false,
      "passed": false
    },
    {
      "index": 2055,
      "groundtruth": "this.builder.popStyle();",
      "prediction": "this.builder.popStyle();",
      "raw_prediction": " this.builder.popStyle();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2056,
      "groundtruth": "return RealCameraCore.isRenderingWorld && config.shouldDisableRender(modelPartName) && RealCameraCore.isActive();",
      "prediction": "return ModConfig.Disable.optionalParts.contains(modelPartName);",
      "raw_prediction": "return ModConfig.Disable.optionalParts.contains(modelPartName);",
      "es": 0.3008849557522124,
      "em": false,
      "passed": false
    },
    {
      "index": 2057,
      "groundtruth": "modConfig.set(new ModConfig());",
      "prediction": "modConfig.reset();",
      "raw_prediction": "modConfig.reset();",
      "es": 0.4838709677419355,
      "em": false,
      "passed": false
    },
    {
      "index": 2058,
      "groundtruth": "get(config.getModelModID()).test(tickDelta, matrixStack);",
      "prediction": "get(getModelPartName()).test(tickDelta, matrixStack);",
      "raw_prediction": "get(getModelPartName()).test(tickDelta, matrixStack);",
      "es": 0.736842105263158,
      "em": false,
      "passed": false
    },
    {
      "index": 2059,
      "groundtruth": "else config.setAdjustOffset(!config.isAdjustingOffset());",
      "prediction": "else config.cycleBindingAdjustMode();",
      "raw_prediction": "else config.cycleBindingAdjustMode();",
      "es": 0.4385964912280702,
      "em": false,
      "passed": false
    },
    {
      "index": 2060,
      "groundtruth": "(config.isClassic()) config.adjustClassicZ(true);",
      "prediction": "(config.isClassic()) config.adjustClassicZ(true);",
      "raw_prediction": "(config.isClassic()) config.adjustClassicZ(true);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2061,
      "groundtruth": "(config.isClassic()) config.cycleClassicAdjustMode();",
      "prediction": "(config.isAdjustingOffset()) config.setAdjustOffset(false);",
      "raw_prediction": "(config.isAdjustingOffset()) config.setAdjustOffset(false);",
      "es": 0.423728813559322,
      "em": false,
      "passed": false
    },
    {
      "index": 2062,
      "groundtruth": "!config.isClassic());",
      "prediction": "!config.isClassic());",
      "raw_prediction": "!config.isClassic());\n            ConfigFile.save();\n        }\n        while (ADJUST_BACK.wasPressed()) {\n            if (config.isClassic()) config.adjustClassicX(false);\n            else config.adjustBindingX(false);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2063,
      "groundtruth": "RealCameraCore.isActive();",
      "prediction": "!config.shouldDisableRenderAll();",
      "raw_prediction": "!config.shouldDisableRenderAll();",
      "es": 0.18181818181818177,
      "em": false,
      "passed": false
    },
    {
      "index": 2064,
      "groundtruth": "config.isEnabled();",
      "prediction": "config.isEnabled();",
      "raw_prediction": "config.isEnabled();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2065,
      "groundtruth": "config.isClassic()) config.cycleClassicAdjustMode();",
      "prediction": "config.isAdjustingOffset()) config.setAdjustOffset(false);",
      "raw_prediction": "config.isAdjustingOffset()) config.setAdjustOffset(false);",
      "es": 0.4137931034482759,
      "em": false,
      "passed": false
    },
    {
      "index": 2066,
      "groundtruth": ")) config.adjustClassicZ(true);",
      "prediction": ")) config.adjustClassicZ(true);",
      "raw_prediction": ")) config.adjustClassicZ(true);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2067,
      "groundtruth": "config.adjustBindingZ(true);",
      "prediction": "config.adjustBindingZ(true);",
      "raw_prediction": "config.adjustBindingZ(true);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2068,
      "groundtruth": "return config.getModModelPartName();",
      "prediction": "return config.getModelModID();",
      "raw_prediction": " return config.getModelModID();",
      "es": 0.6944444444444444,
      "em": false,
      "passed": false
    },
    {
      "index": 2069,
      "groundtruth": "TableFieldUtil.getFieldMap(r.getClass());",
      "prediction": "TableFieldUtil.getColumnNames(tableClass);",
      "raw_prediction": "TableFieldUtil.getColumnNames(tableClass);",
      "es": 0.5952380952380952,
      "em": false,
      "passed": false
    },
    {
      "index": 2070,
      "groundtruth": "Object result = StringConvertUtil.convertType(type, value);",
      "prediction": "if (type.equals(String.class))",
      "raw_prediction": "if (type.equals(String.class)) {\n            field.set(object, value);\n        } else if (type.equals(Integer.class)) {\n            field.set(object, Integer.parseInt(value));\n\n        } else if (type.equals(Long.class)) {\n            field",
      "es": 0.18644067796610164,
      "em": false,
      "passed": false
    },
    {
      "index": 2071,
      "groundtruth": ") config.adjustClassicX(false);",
      "prediction": ") config.adjustClassicX(false);",
      "raw_prediction": ") config.adjustClassicX(false);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2072,
      "groundtruth": "= canalProperties.getRabbitMq();",
      "prediction": "= canalProperties.getMq();",
      "raw_prediction": "= canalProperties.getMq();",
      "es": 0.8125,
      "em": false,
      "passed": false
    },
    {
      "index": 2073,
      "groundtruth": "(VirtualRenderer.shouldDisableRender(\"jacket\")) model.jacket.visible = false;",
      "prediction": "(VirtualRenderer.shouldDisableRender(\"leftBoot\")) model.leftBoot.visible = false;",
      "raw_prediction": "(VirtualRenderer.shouldDisableRender(\"leftBoot\")) model.leftBoot.visible = false;\n        if (VirtualRenderer.shouldDisableRender(\"rightBoot\")) model.rightBoot.visible = false;",
      "es": 0.8271604938271605,
      "em": false,
      "passed": false
    },
    {
      "index": 2074,
      "groundtruth": "() && DoABarrelRollCompat.modEnabled() && RealCameraCore.isActive()) {",
      "prediction": "&& DoABarrelRollCompat.isDoABarrelRol",
      "raw_prediction": " && DoABarrelRollCompat.isDoABarrelRollEnabled()) {\n            DoABarrelRollCompat.onBeforeCameraUpdate(tickDelta, matrixStack);\n        }\n    }\n\n    @Inject(method = \"renderWorld\", at",
      "es": 0.3857142857142857,
      "em": false,
      "passed": false
    },
    {
      "index": 2075,
      "groundtruth": ".modEnabled() && RealCameraCore.isActive()) {",
      "prediction": ".isEnabled()) {",
      "raw_prediction": ".isEnabled()) {\n            DoABarrelRollCompat.onBeforeCameraUpdate(tickDelta, matrixStack);\n        }\n    }\n\n    @Inject(method = \"renderWorld\", at = @At(value = \"INVOKE\",\n            target = \"",
      "es": 0.28888888888888886,
      "em": false,
      "passed": false
    },
    {
      "index": 2076,
      "groundtruth": "if (VirtualRenderer.shouldDisableRender(\"leftPants\")) model.leftPants.visible = false;",
      "prediction": "if (VirtualRenderer.shouldDisableRender(\"leftPants\")) model.leftPants.visible = false;",
      "raw_prediction": " if (VirtualRenderer.shouldDisableRender(\"leftPants\")) model.leftPants.visible = false;",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2077,
      "groundtruth": "&& camera.isThirdPerson() && RealCameraCore.isActive() &&\n                !ConfigFile.modConfig.allowRenderingHandWhen(client)) {",
      "prediction": "&& RealCameraCore.isActive()) {",
      "raw_prediction": "&& RealCameraCore.isActive()) {",
      "es": 0.24031007751937983,
      "em": false,
      "passed": false
    },
    {
      "index": 2078,
      "groundtruth": ").OnMessageReceive(m_baseObject, code, msg);",
      "prediction": ").OnMessageReceive(fragment, code, msg);",
      "raw_prediction": ").OnMessageReceive(fragment, code, msg);",
      "es": 0.7954545454545454,
      "em": false,
      "passed": false
    },
    {
      "index": 2079,
      "groundtruth": "m_metaphorManager.showFragment(strTag);",
      "prediction": "m_metaphorManager.showFragment(strTag);",
      "raw_prediction": "m_metaphorManager.showFragment(strTag);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2080,
      "groundtruth": "m_fx1 = FragmentX1.newInstance();",
      "prediction": "m_fx1 = FragmentX1.newInstance();",
      "raw_prediction": "m_fx1 = FragmentX1.newInstance();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2081,
      "groundtruth": "settings.setTemperature(getMaxTemperatureValue(form.getTemperature()));",
      "prediction": "settings.setTemperature(getMaxTemperatureValue(form.getTemperature()));",
      "raw_prediction": "settings.setTemperature(getMaxTemperatureValue(form.getTemperature()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2082,
      "groundtruth": "!form.getTemperature().equals(String.valueOf(settings.getTemperature()));",
      "prediction": "!form.getTemperature().equals(String.valueOf(settings.getTemperature()));",
      "raw_prediction": "!form.getTemperature().equals(String.valueOf(settings.getTemperature()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2083,
      "groundtruth": "return form.getMainPanel();",
      "prediction": "form.setApiKey(settings.getApiKey());",
      "raw_prediction": "form.setApiKey(settings.getApiKey());\n    form.setModel(settings.getModel());\n    form.setMaxTokens(String.valueOf(settings.getMaxTokens()));\n    form.setTemperature(String.valueOf(settings.getTemperature()));\n    return form.getRootPanel();",
      "es": 0.2432432432432432,
      "em": false,
      "passed": false
    },
    {
      "index": 2084,
      "groundtruth": "(testRun.getTestRunOutcome() == null) {",
      "prediction": "(testRun.getTestRunOutcome() == null)",
      "raw_prediction": "(testRun.getTestRunOutcome() == null) {",
      "es": 0.9487179487179487,
      "em": false,
      "passed": false
    },
    {
      "index": 2085,
      "groundtruth": "form.getTemperature().equals(String.valueOf(settings.getTemperature()));",
      "prediction": "form.getTemperature().equals(String.valueOf(settings.getTemperature()));",
      "raw_prediction": "form.getTemperature().equals(String.valueOf(settings.getTemperature()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2086,
      "groundtruth": "apiResponse.getMessage(),\n              String.format(\"%d ExceptionAI Error\", apiResponse.getCode()),\n              Messages.getErrorIcon());",
      "prediction": "\"\\n\" + apiResponse.getMessage(),\n              \"ExceptionAI Suggestions\",\n              Messages.getErrorIcon());",
      "raw_prediction": " \"\\n\" + apiResponse.getMessage(),\n              \"ExceptionAI Suggestions\",\n              Messages.getErrorIcon());\n        }\n      });\n    } catch (Throwable t) {\n      // ignore.\n    }\n  }\n\n  private void showSuggestion(Hyperlink",
      "es": 0.6453900709219857,
      "em": false,
      "passed": false
    },
    {
      "index": 2087,
      "groundtruth": "\"\\n\" + apiResponse.getMessage(),\n              \"ExceptionAI Suggestions\",\n              Messages.getInformationIcon());",
      "prediction": "apiResponse.getSuggestion(),\n              \"ExceptionAI Suggestion\",\n              Messages.INFORMATION_MESSAGE\n          );",
      "raw_prediction": " apiResponse.getSuggestion(),\n              \"ExceptionAI Suggestion\",\n              Messages.INFORMATION_MESSAGE\n          );",
      "es": 0.6370967741935484,
      "em": false,
      "passed": false
    },
    {
      "index": 2088,
      "groundtruth": "= testRun.getDateTime();",
      "prediction": "= testRun.getD",
      "raw_prediction": "= testRun.getDateTime().format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm:ss\"));",
      "es": 0.5833333333333333,
      "em": false,
      "passed": false
    },
    {
      "index": 2089,
      "groundtruth": "switch (testRun.getTestRunOutcome()) {",
      "prediction": "switch (testRun.getTestRunOutcome())",
      "raw_prediction": "switch (testRun.getTestRunOutcome()) {",
      "es": 0.9473684210526316,
      "em": false,
      "passed": false
    },
    {
      "index": 2090,
      "groundtruth": "14, testRun.getCommit());",
      "prediction": "50);",
      "raw_prediction": "50);\n                historyContent.add(exampleGreenCirclePanel, historyGbc);\n\n                //circle\n                historyGbc.gridy = i;\n                historyGbc.gridx = 1;\n\n                Color circleColor2 = Color.BLACK;\n\n                switch",
      "es": 0.07999999999999996,
      "em": false,
      "passed": false
    },
    {
      "index": 2091,
      "groundtruth": "= testRun.getPrediction() == Prediction.CORRECT ? AllIcons.RunConfigurations.TestPassed : AllIcons.RunConfigurations.TestFailed;",
      "prediction": "= null;",
      "raw_prediction": "= null;\n                switch (testRun.getTestRunOutcome()) {\n                    case PASSED:\n                        icon = AllIcons.General.Checkmark;\n                        break;\n                    case FAILED:\n                        icon = AllIcons.General.Error;\n                        break;\n                    case",
      "es": 0.0546875,
      "em": false,
      "passed": false
    },
    {
      "index": 2092,
      "groundtruth": "apiResponse.getCode() == 200) {",
      "prediction": "apiResponse.getCo",
      "raw_prediction": "apiResponse.getCode() == 200) {",
      "es": 0.5483870967741935,
      "em": false,
      "passed": false
    },
    {
      "index": 2093,
      "groundtruth": "<Class<?>, List<ISubscriber>> registeredSubs = SubscriberFinder.find(subscriber);",
      "prediction": "<Class<?>, List<ISubscriber>> registeredSubs = new HashMap<>();",
      "raw_prediction": "<Class<?>, List<ISubscriber>> registeredSubs = new HashMap<>();\n        Arrays.stream(subscriber.getClass().getDeclaredMethods())\n                .filter(method -> method.isAnnotationPresent(Subscribe.class))\n                .forEach(method -> {\n                    Subscribe",
      "es": 0.6419753086419753,
      "em": false,
      "passed": false
    },
    {
      "index": 2094,
      "groundtruth": "subscriber.getThreadType() == ThreadType.ASYNC) {",
      "prediction": "subscriber.getThreadType()",
      "raw_prediction": "subscriber.getThreadType() == ThreadType.THREAD_POOL) {",
      "es": 0.5306122448979591,
      "em": false,
      "passed": false
    },
    {
      "index": 2095,
      "groundtruth": "(sub -> sub.getSubscriber() == subscriber);",
      "prediction": "(subscriber::equals);",
      "raw_prediction": "(subscriber::equals);",
      "es": 0.32558139534883723,
      "em": false,
      "passed": false
    },
    {
      "index": 2096,
      "groundtruth": "DataSourceContext.get();",
      "prediction": "DataSourceContext.get();",
      "raw_prediction": "DataSourceContext.get();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2097,
      "groundtruth": "return TransactionContext.get() != null;",
      "prediction": "return TransactionContext.get() != null;",
      "raw_prediction": "return TransactionContext.get() != null;",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2098,
      "groundtruth": "= transaction.getNoRollbackFor();",
      "prediction": "= transaction.getNoRollbackFor();",
      "raw_prediction": "= transaction.getNoRollbackFor();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2099,
      "groundtruth": "TransactionContext.remove();",
      "prediction": "TxConnectionContext.notify(tid, true);",
      "raw_prediction": " TxConnectionContext.notify(tid, true);",
      "es": 0.4736842105263158,
      "em": false,
      "passed": false
    },
    {
      "index": 2100,
      "groundtruth": "= transaction.proceed();",
      "prediction": "= transaction.proceed();",
      "raw_prediction": "= transaction.proceed();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2101,
      "groundtruth": "Extractor.warning(\"Warning: Did not match as a member: \" + line);",
      "prediction": "Extractor.warning(\"Warning: Did not match as a member: \" + line);",
      "raw_prediction": " Extractor.warning(\"Warning: Did not match as a member: \" + line);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2102,
      "groundtruth": "Extractor.warning(\"Warning: Did not match as a class/interface: \" + line);",
      "prediction": "Extractor.warning(\"Warning: Did not match as a class: \" + line);",
      "raw_prediction": " Extractor.warning(\"Warning: Did not match as a class: \" + line);",
      "es": 0.8648648648648649,
      "em": false,
      "passed": false
    },
    {
      "index": 2103,
      "groundtruth": "action.deleteCache();",
      "prediction": "action.clearCache();",
      "raw_prediction": "action.clearCache();",
      "es": 0.8095238095238095,
      "em": false,
      "passed": false
    },
    {
      "index": 2104,
      "groundtruth": "callback.onCompletion(content);",
      "prediction": "callback.onCompletion(content); // \u56de\u8c03\u5b8c\u6210\u65b9\u6cd5",
      "raw_prediction": " callback.onCompletion(content); // \u56de\u8c03\u5b8c\u6210\u65b9\u6cd5\n                 BotUtil.updatePrompt(chatBO.getSessionId(), content); // \u66f4\u65b0\u63d0\u793a\u8bcd\n                 BotUtil.savePrompt(chatBO.getSessionId(), content); // \u4fdd\u5b58\u63d0\u793a\u8bcd\u5230redis",
      "es": 0.7560975609756098,
      "em": false,
      "passed": false
    },
    {
      "index": 2105,
      "groundtruth": "BotUtil.resetAll();",
      "prediction": "BotUtil.res",
      "raw_prediction": "BotUtil.resetPrompt(chatBO.getSessionId());\n            BotUtil.resetModel(chatBO.getSessionId());",
      "es": 0.5789473684210527,
      "em": false,
      "passed": false
    },
    {
      "index": 2106,
      "groundtruth": "rateLimiter.setPrompt(sessionId, prompt);",
      "prediction": "rateLimiter.setPrompt(sessionId, prompt);",
      "raw_prediction": "rateLimiter.setPrompt(sessionId, prompt);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2107,
      "groundtruth": "FixProtocolVersion.fix();",
      "prediction": "//ChatGPT Plus",
      "raw_prediction": "//ChatGPT Plus\n        model = \"gpt-4\";\n        maxToken = 8192;\n        temperature = 0.7;\n        basicPrompt = \"\u8be6\u7ec6\u56de\u7b54\";\n        apiKeyPlus.forEach(apiKey ->",
      "es": 0.07999999999999996,
      "em": false,
      "passed": false
    },
    {
      "index": 2108,
      "groundtruth": "this.code = code.getValue();",
      "prediction": "this.code = code.getValue();",
      "raw_prediction": " this.code = code.getValue();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2109,
      "groundtruth": "HttpContextUtil.setAttributeToSession(\"verifyCode\", code);",
      "prediction": "HttpContextUtil.setAttributeToInSession(\"verifyCode\", code);",
      "raw_prediction": " HttpContextUtil.setAttributeToInSession(\"verifyCode\", code);",
      "es": 0.9666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 2110,
      "groundtruth": "request.getName())\n                .createdBy(userId)\n                .build();",
      "prediction": "request.getName())\n                .status(OrgStatus.ACTIVE)\n                .createdBy(userId)\n                .creat",
      "raw_prediction": "request.getName())\n                .status(OrgStatus.ACTIVE)\n                .createdBy(userId)\n                .createdAt(System.currentTimeMillis())\n                .build();",
      "es": 0.576271186440678,
      "em": false,
      "passed": false
    },
    {
      "index": 2111,
      "groundtruth": "(request.getTenantId(), id)\n                .orElseThrow(() -> {",
      "prediction": "(request.getTenantId(), id)",
      "raw_prediction": "(request.getTenantId(), id)\n                .orElseThrow(() -> {",
      "es": 0.421875,
      "em": false,
      "passed": false
    },
    {
      "index": 2112,
      "groundtruth": "= status.code();",
      "prediction": "= status.getCode();",
      "raw_prediction": "= status.getCode();",
      "es": 0.7894736842105263,
      "em": false,
      "passed": false
    },
    {
      "index": 2113,
      "groundtruth": "assertOrgName.shouldNotEmpty(newName);",
      "prediction": "assertOrgName.shouldN",
      "raw_prediction": " assertOrgName.shouldNotDuplicatedInSameLevel(org.getTenantId(), org.getId(), newName);",
      "es": 0.5526315789473684,
      "em": false,
      "passed": false
    },
    {
      "index": 2114,
      "groundtruth": "(request.getSuperiorId())\n                .name(request.getName())\n                .createdBy(userId)\n                .build();",
      "prediction": "(request.getSuperiorId())\n                .name(request.getName())",
      "raw_prediction": "(request.getSuperiorId())\n                .name(request.getName())\n                .status(OrgStatus.ACTIVE)\n                .createdBy(userId)\n                .createdAt(System.currentTimeMillis())\n                .build();",
      "es": 0.5196850393700787,
      "em": false,
      "passed": false
    },
    {
      "index": 2115,
      "groundtruth": "org, request.getName() , request.getLeaderId(), userId);",
      "prediction": "org, request, userId);",
      "raw_prediction": "org, request, userId);",
      "es": 0.3928571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 2116,
      "groundtruth": "return orgService.cancelOrg(tenant, id, userId);",
      "prediction": "return orgService.cancelOrg(id, userId, tenant);",
      "raw_prediction": "return orgService.cancelOrg(id, userId, tenant);",
      "es": 0.6875,
      "em": false,
      "passed": false
    },
    {
      "index": 2117,
      "groundtruth": "orgHandler.updateBasic(org, request.getName() , request.getLeaderId(), userId);",
      "prediction": "orgHandler.updateBasic(org, request, userId);",
      "raw_prediction": "orgHandler.updateBasic(org, request, userId);",
      "es": 0.5696202531645569,
      "em": false,
      "passed": false
    },
    {
      "index": 2118,
      "groundtruth": "if (newLeader != null && !newLeader.equals(org.getLeaderId())) {",
      "prediction": "if (newLeader != null && !newLeader.equals(org.getLeaderId()))",
      "raw_prediction": " if (newLeader != null && !newLeader.equals(org.getLeaderId())) {\n            assertOrgLeader.shouldNotEmpty(newLeader);",
      "es": 0.96875,
      "em": false,
      "passed": false
    },
    {
      "index": 2119,
      "groundtruth": "org.cancel();",
      "prediction": "org.setS",
      "raw_prediction": "org.setStatus(OrgStatus.CANCELED);\n        org.setLastUpdatedBy(userId);\n        org.setLastUpdatedAt(LocalDateTime.now());",
      "es": 0.3846153846153846,
      "em": false,
      "passed": false
    },
    {
      "index": 2120,
      "groundtruth": "OrgStatus.ofCode(statusCode));",
      "prediction": "statusCode);",
      "raw_prediction": "statusCode);",
      "es": 0.4,
      "em": false,
      "passed": false
    },
    {
      "index": 2121,
      "groundtruth": "assertOrgType.shouldEffective(tenantId, orgTypeCode);",
      "prediction": "assertOrgType.shouldEffective(tenantId, orgTypeCode);",
      "raw_prediction": "assertOrgType.shouldEffective(tenantId, orgTypeCode);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2122,
      "groundtruth": "= assertSuperior.shouldEffective(tenantId, superiorId);",
      "prediction": "= assertSuperior.shouldEffective(tenantId, superiorId);",
      "raw_prediction": "= assertSuperior.shouldEffective(tenantId, superiorId);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2123,
      "groundtruth": "assertOrgLeader.shouldEffective(org.getTenantId(), newLeader);",
      "prediction": "assertOrgLeader.shouldNotEmpty(newLeader);",
      "raw_prediction": "assertOrgLeader.shouldNotEmpty(newLeader);",
      "es": 0.5967741935483871,
      "em": false,
      "passed": false
    },
    {
      "index": 2124,
      "groundtruth": "assertOrgName.shouldNotEmpty(name);",
      "prediction": "assertOrgName.shouldNotEmpty(name);",
      "raw_prediction": " assertOrgName.shouldNotEmpty(name);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2125,
      "groundtruth": "), org.getSuperiorId(), newName);",
      "prediction": "), newName);",
      "raw_prediction": "), newName);",
      "es": 0.36363636363636365,
      "em": false,
      "passed": false
    },
    {
      "index": 2126,
      "groundtruth": "shouldNotDuplicatedInSameSuperior(org.getTenantId(), org.getSuperiorId(), newName);",
      "prediction": "shouldNotContainIllegalChar(newName);",
      "raw_prediction": "shouldNotContainIllegalChar(newName);",
      "es": 0.3132530120481928,
      "em": false,
      "passed": false
    },
    {
      "index": 2127,
      "groundtruth": "assertOrgLeader.shouldEffective(tenantId, leaderId);",
      "prediction": "assertOrgLeader.shouldNotEmpty(leaderId);",
      "raw_prediction": "assertOrgLeader.shouldNotEmpty(leaderId);",
      "es": 0.6538461538461539,
      "em": false,
      "passed": false
    },
    {
      "index": 2128,
      "groundtruth": "assertOrgName.shouldNotDuplicatedInSameSuperior(tenantId, superiorId, name);",
      "prediction": "}",
      "raw_prediction": "}\n\n    private void validateOrgType() {",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 2129,
      "groundtruth": "assertOrgType.shouldNotEntp(orgTypeCode);",
      "prediction": "assertOrgType.shouldNotDuplicatedInSameSuperior(tenantId, superiorId, orgTypeCode)",
      "raw_prediction": "assertOrgType.shouldNotDuplicatedInSameSuperior(tenantId, superiorId, orgTypeCode);",
      "es": 0.4512195121951219,
      "em": false,
      "passed": false
    },
    {
      "index": 2130,
      "groundtruth": "+ \"' \u7684\u7ec4\u7ec7\u7684\u7ec4\u7ec7\u7c7b\u578b\u4ee3\u7801 '\" + superiorOrg.getOrgTypeCode() + \"' \u65e0\u6548!\"));",
      "prediction": "+ \"' \u7684\u4e0a\u7ea7\u7ec4\u7ec7\u7c7b\u578b\u4ee3\u7801 '\" + superiorOrg.getOrgTypeCode() + \"' \u4e0d\u662f\u6709\u6548\u7684\u7c7b\u578b\u4ee3\u7801\uff01\"));",
      "raw_prediction": " + \"' \u7684\u4e0a\u7ea7\u7ec4\u7ec7\u7c7b\u578b\u4ee3\u7801 '\" + superiorOrg.getOrgTypeCode() + \"' \u4e0d\u662f\u6709\u6548\u7684\u7c7b\u578b\u4ee3\u7801\uff01\"));\n    }\n\n    // \u5f00\u53d1\u4e2d\u5fc3\u548c\u76f4\u5c5e\u90e8\u95e8\u7684\u4e0a\u7ea7\u4e0d\u80fd\u662f\u5f00\u53d1\u4e2d\u5fc3\n    public void ofDevCenter",
      "es": 0.8235294117647058,
      "em": false,
      "passed": false
    },
    {
      "index": 2131,
      "groundtruth": "assertOrgType.shouldNotEmpty(orgTypeCode);",
      "prediction": "assertOrgType.shouldNotEmpty(orgTypeCode);",
      "raw_prediction": "assertOrgType.shouldNotEmpty(orgTypeCode);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2132,
      "groundtruth": "waitPoint.reset();",
      "prediction": "if (waitPoint.getCount() == 0)",
      "raw_prediction": " if (waitPoint.getCount() == 0) {\n            return;\n        }",
      "es": 0.4666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 2133,
      "groundtruth": "metrics.start();",
      "prediction": "metrics.start();",
      "raw_prediction": "metrics.start();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2134,
      "groundtruth": "null, flow.getServiceContext());",
      "prediction": "flow.getContext(), service.getMessage());",
      "raw_prediction": "flow.getContext(), service.getMessage());\n                    // \u8fd9\u91cc\u53ef\u4ee5\u6dfb\u52a0\u4e00\u4e9b\u65e5\u5fd7\u8bb0\u5f55\u6216\u8005\u76d1\u63a7\u4fe1\u606f\u3002",
      "es": 0.3414634146341463,
      "em": false,
      "passed": false
    },
    {
      "index": 2135,
      "groundtruth": "process(input, getFlow().getServiceContext());",
      "prediction": "process(executionId, input);",
      "raw_prediction": "process(executionId, input);\n        log.info(\"\u6267\u884c\u5b8c\u6210\uff0c\u8f93\u51fa\uff1a{}\", output);",
      "es": 0.32608695652173914,
      "em": false,
      "passed": false
    },
    {
      "index": 2136,
      "groundtruth": "if (StringUtils.hasText(groovyCode) && HadesCache.diff(instanceName, groovyCode)) {",
      "prediction": "if (StringUtils.hasText(groovyCode)) {",
      "raw_prediction": " if (StringUtils.hasText(groovyCode)) {",
      "es": 0.45783132530120485,
      "em": false,
      "passed": false
    },
    {
      "index": 2137,
      "groundtruth": "= GroovyUtils.parseClass(instanceName, groovyCode);",
      "prediction": "= GroovyUtils.loadGroovyClass(groovyCode);",
      "raw_prediction": "= GroovyUtils.loadGroovyClass(groovyCode);",
      "es": 0.5686274509803921,
      "em": false,
      "passed": false
    },
    {
      "index": 2138,
      "groundtruth": "Object bean = registerBeanService.registerBean(instanceName, clazz);",
      "prediction": "registerBeanService.registerBean(clazz);",
      "raw_prediction": " registerBeanService.registerBean(clazz);",
      "es": 0.5882352941176471,
      "em": false,
      "passed": false
    }
  ],
  "errors": [
    {
      "index": 1117,
      "error": "RetryError[<Future at 0x10ba4b6b0 state=finished raised HTTPError>]",
      "error_type": "RetryError",
      "prompt": "<|fim_prefix|>/*\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtai..."
    },
    {
      "index": 1122,
      "error": "RetryError[<Future at 0x10af4d1f0 state=finished raised HTTPError>]",
      "error_type": "RetryError",
      "prompt": "<|fim_prefix|>/*\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtai..."
    },
    {
      "index": 1647,
      "error": "RetryError[<Future at 0x10ae8ee40 state=finished raised HTTPError>]",
      "error_type": "RetryError",
      "prompt": "<|fim_prefix|>package com.ap.spotify.server;\n\nimport com.ap.spotify.shared.Request;\nimport com.ap.spotify.shared.Response;\nimport com.ap.spotify.shared.crudFiles.*;\nimport com.ap.spotify.shared.models..."
    },
    {
      "index": 1648,
      "error": "RetryError[<Future at 0x10a2b37a0 state=finished raised HTTPError>]",
      "error_type": "RetryError",
      "prompt": "<|fim_prefix|>package com.ap.spotify.server;\n\nimport com.ap.spotify.shared.Request;\nimport com.ap.spotify.shared.Response;\nimport com.ap.spotify.shared.crudFiles.*;\nimport com.ap.spotify.shared.models..."
    },
    {
      "index": 1649,
      "error": "RetryError[<Future at 0x10bb33710 state=finished raised HTTPError>]",
      "error_type": "RetryError",
      "prompt": "<|fim_prefix|>package com.ap.spotify.server;\n\nimport com.ap.spotify.shared.Request;\nimport com.ap.spotify.shared.Response;\nimport com.ap.spotify.shared.crudFiles.*;\nimport com.ap.spotify.shared.models..."
    },
    {
      "index": 1650,
      "error": "RetryError[<Future at 0x10af0de50 state=finished raised HTTPError>]",
      "error_type": "RetryError",
      "prompt": "<|fim_prefix|>package com.ap.spotify.server;\n\nimport com.ap.spotify.shared.Request;\nimport com.ap.spotify.shared.Response;\nimport com.ap.spotify.shared.crudFiles.*;\nimport com.ap.spotify.shared.models..."
    },
    {
      "index": 1651,
      "error": "RetryError[<Future at 0x10a197fe0 state=finished raised HTTPError>]",
      "error_type": "RetryError",
      "prompt": "<|fim_prefix|>package com.ap.spotify.server;\n\nimport com.ap.spotify.shared.Request;\nimport com.ap.spotify.shared.Response;\nimport com.ap.spotify.shared.crudFiles.*;\nimport com.ap.spotify.shared.models..."
    },
    {
      "index": 1652,
      "error": "RetryError[<Future at 0x10a7ce480 state=finished raised HTTPError>]",
      "error_type": "RetryError",
      "prompt": "<|fim_prefix|>package com.ap.spotify.server;\n\nimport com.ap.spotify.shared.Request;\nimport com.ap.spotify.shared.Response;\nimport com.ap.spotify.shared.crudFiles.*;\nimport com.ap.spotify.shared.models..."
    }
  ]
}