{
  "metrics": {
    "accuracy": 0.24170172978027116,
    "edit_similarity": 0.6470975549498597,
    "exact_match": 0.24170172978027116,
    "total_samples": 2139,
    "passes": 517,
    "temperature": 0.2,
    "max_tokens": 48,
    "language": "java",
    "dataset": "crosscode_java",
    "post_process": false,
    "total_batches": 22,
    "total_errors": 8,
    "model": "Qwen/Qwen2.5-Coder-3B"
  },
  "results": [
    {
      "index": 0,
      "groundtruth": "int startAngle = ((Arc) object).getStartAngle();",
      "prediction": "int startAngle = ((Arc) object).getStartAngle();",
      "raw_prediction": "int startAngle = ((Arc) object).getStartAngle();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1,
      "groundtruth": "((Line) object).getColor());",
      "prediction": "((Line) object).getColor());",
      "raw_prediction": "((Line) object).getColor());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2,
      "groundtruth": "(Arc) object).getStopAngle();",
      "prediction": "((Arc) object).getStopAngle());",
      "raw_prediction": "((Arc) object).getStopAngle());",
      "es": 0.935483870967742,
      "em": false,
      "passed": false
    },
    {
      "index": 3,
      "groundtruth": "server.blockUntilShutdown();",
      "prediction": "System.out.print",
      "raw_prediction": "\n        System.out.println(\"Server started, listening on \" + server.getPort());\n        server.blockUntilShutdown();\n",
      "es": 0.1785714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 4,
      "groundtruth": "HttpClientUtil.sendGetRequest();",
      "prediction": "logger.info(\"Receive message, message={}\", messageView.getMessag",
      "raw_prediction": "logger.info(\"Receive message, message={}\", messageView.getMessageBody());\n            logger.info(\"Receive message, message={}\", HttpClientUtil.get(\"https://www.baidu.com\"));\n            logger.info(\"Receive message, message={}\", HttpClientUtil.get(\"",
      "es": 0.140625,
      "em": false,
      "passed": false
    },
    {
      "index": 5,
      "groundtruth": "GreetingClient.start();",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 6,
      "groundtruth": "RocketMqClients.CreatePushConsumer(messageView -> {",
      "prediction": "RocketMqClients.consumeMess",
      "raw_prediction": "    RocketMqClients.consumeMessage(\"test-topic\", \"test-group\", (messageView) -> {",
      "es": 0.4901960784313726,
      "em": false,
      "passed": false
    },
    {
      "index": 7,
      "groundtruth": "Producer producer = RocketMqClients.CreateProducer();",
      "prediction": "Producer producer = RocketMqClients.newProducer();",
      "raw_prediction": " Producer producer = RocketMqClients.newProducer();",
      "es": 0.9056603773584906,
      "em": false,
      "passed": false
    },
    {
      "index": 8,
      "groundtruth": "systemMessage.setContent(systemprompt);",
      "prediction": "systemMessage.setCont",
      "raw_prediction": "systemMessage.setContent(systemprompt;\n            messages.add(systemMessage;\n            // List of user messages\n            if(isPrivate(update)) {\n            // If this is a private chat, then we send along a number of previous messages for context\n           ",
      "es": 0.5384615384615384,
      "em": false,
      "passed": false
    },
    {
      "index": 9,
      "groundtruth": "\"Contador de tokens: %d\",gptService.getNumTokens());",
      "prediction": "\"Current usage: %d tokens\", gptService.getUsage());",
      "raw_prediction": "\"Current usage: %d tokens\", gptService.getUsage());\n        sendReply(update, message);\n    }\n\n    /**\n     * Sends a message to the user with information about the number of tokens currently consumed in GPT generation.\n    ",
      "es": 0.5192307692307692,
      "em": false,
      "passed": false
    },
    {
      "index": 10,
      "groundtruth": "chatRequest.setMaxTokens(maxtokens);",
      "prediction": "chatRequest.setMaxTokens(maxtokens);",
      "raw_prediction": "chatRequest.setMaxTokens(maxtokens);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 11,
      "groundtruth": "chatRequest.setModel(model);",
      "prediction": "chatRequest.setM",
      "raw_prediction": "chatRequest.setModel(model;",
      "es": 0.5714285714285714,
      "em": false,
      "passed": false
    },
    {
      "index": 12,
      "groundtruth": "systemMessage.setRole(\"system\");",
      "prediction": "systemMessage.setRole(\"system\");",
      "raw_prediction": "systemMessage.setRole(\"system\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 13,
      "groundtruth": "userMessage.setContent(this.presentation);",
      "prediction": "userMessage.setContent(text;",
      "raw_prediction": "userMessage.setContent(text;\n            messages.add(userMessage);\n            // set messages to the request\n            chatRequest.setMessages(messages)\n            // Send synchronous request to the OpenAI Api\n            response = client.getCompletion(chatRequest);\n            //",
      "es": 0.6428571428571428,
      "em": false,
      "passed": false
    },
    {
      "index": 14,
      "groundtruth": "exampleMessage.setRole(role.toLowerCase());",
      "prediction": "exampleMessage.setRole(role);",
      "raw_prediction": "\n            exampleMessage.setRole(role);\n            exampleMessage.setContent(content);\n            results.add(exampleMessage);\n            } else {\n            log.error(\"Somethingwent wrong with this example: \" + example);\n            }\n        }\n        return results;\n   ",
      "es": 0.6744186046511628,
      "em": false,
      "passed": false
    },
    {
      "index": 15,
      "groundtruth": "AccUtils.printLogMsg(\"\u63d0\u53d6\u5230\u7684\u7b2c\u4e00\u4e2a\u6574\u6570\u662f\uff1a\" + i);",
      "prediction": "AccUtils.printLogMsg(\"\u5728\u5b57\u7b26\u4e32\u4e2d\u627e\u5230\u6574\u6570\uff1a\" + i);",
      "raw_prediction": " AccUtils.printLogMsg(\"\u5728\u5b57\u7b26\u4e32\u4e2d\u627e\u5230\u6574\u6570\uff1a\" + i);",
      "es": 0.8,
      "em": false,
      "passed": false
    },
    {
      "index": 16,
      "groundtruth": "AccUtils.printLogMsg(\"\u70b9\u51fb\u5de5\u4f5c\u53f0\");",
      "prediction": "AccUtils.printLogMsg(\"\u70b9\u51fb\u5de5\u4f5c\u53f0\u6253\u5f00\");",
      "raw_prediction": "    AccUtils.printLogMsg(\"\u70b9\u51fb\u5de5\u4f5c\u53f0\u6253\u5f00\");",
      "es": 0.9375,
      "em": false,
      "passed": false
    },
    {
      "index": 17,
      "groundtruth": "AccUtils.printLogMsg(\"\u70b9\u51fb\u8003\u52e4\u6253\u5f00\");",
      "prediction": "AccUtils.printLogMsg(\"\u70b9\u51fb\u8003\u52e4\u6253\u5361\");",
      "raw_prediction": "    AccUtils.printLogMsg(\"\u70b9\u51fb\u8003\u52e4\u6253\u5361\");",
      "es": 0.967741935483871,
      "em": false,
      "passed": false
    },
    {
      "index": 18,
      "groundtruth": "AccUtils.printLogMsg(\"\u6253\u5f00\u9489\u9489\");",
      "prediction": "AccUtils.printLogMsg(\"\u6253\u5f00\u9489\u9489\");",
      "raw_prediction": "    AccUtils.printLogMsg(\"\u6253\u5f00\u9489\u9489\");\n        AccUtils.startApplication(Variable.context, \"com.alibaba.android.rimet\");\n        AccUtils.timeSleep(7000);\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u5de5\u4f5c\u53f0",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 19,
      "groundtruth": "AccUtils.printLogMsg(\"\u70b9\u51fb\u6253\u5361\");",
      "prediction": "//Rect(425, 1280 - 656, 1362); packageName: com.alibaba.an",
      "raw_prediction": "//Rect(425, 1280 - 656, 1362); packageName: com.alibaba.android.rimet; className: android.view.View; text: \u4e0a\u73ed\u6253\u5361;",
      "es": 0.051724137931034475,
      "em": false,
      "passed": false
    },
    {
      "index": 20,
      "groundtruth": "AccUtils.printLogMsg(\"\u70b9\u51fb\u6682\u65f6\u4e0d\");",
      "prediction": "AccUtils.printLogMsg(\"\u70b9\u51fb\u4e0a\u73ed\u6253\u5361\");",
      "raw_prediction": "    AccUtils.printLogMsg(\"\u70b9\u51fb\u4e0a\u73ed\u6253\u5361\");\n        AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u4e0a\u73ed\u6253\u5361\"));\n        AccUtils.timeSleep(3000);\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u4e0a\u73ed\u6253\u5361",
      "es": 0.8709677419354839,
      "em": false,
      "passed": false
    },
    {
      "index": 21,
      "groundtruth": "AccUtils.printLogMsg(\"\u6807\u9898 => \" + videoDesc);",
      "prediction": "if (videoDesc != null)",
      "raw_prediction": "     if (videoDesc != null) {\n            AccUtils.printLogMsg(\"\u5f53\u524d\u89c6\u9891\u6807\u9898 => \" + videoDesc);\n            }\n",
      "es": 0.16279069767441856,
      "em": false,
      "passed": false
    },
    {
      "index": 22,
      "groundtruth": "AccUtils.printLogMsg(\"\u8fd4\u56de\u5230\u521d\u59cb\u72b6\u6001\");",
      "prediction": "AccUtils.printLogMsg(\"\u70b9\u51fb\u5de5\u4f5c\u53f0\");",
      "raw_prediction": "    AccUtils.printLogMsg(\"\u70b9\u51fb\u5de5\u4f5c\u53f0\");\n        AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u5de5\u4f5c\u53f0\"));\n        AccUtils.timeSleep(3000);\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u8003\u52e4",
      "es": 0.78125,
      "em": false,
      "passed": false
    },
    {
      "index": 23,
      "groundtruth": "AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u5de5\u4f5c\u53f0\"));",
      "prediction": "AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u5de5\u4f5c\u53f0\"));",
      "raw_prediction": "    AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u5de5\u4f5c\u53f0\"));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 24,
      "groundtruth": "AccUtils.printLogMsg(\"\u70b9\u51fb\u597d\u7684\");",
      "prediction": "AccUtils.printLogMsg(\"\u70b9\u51fb\u4e0a\u73ed\u6253\u5361\");",
      "raw_prediction": "    AccUtils.printLogMsg(\"\u70b9\u51fb\u4e0a\u73ed\u6253\u5361\");",
      "es": 0.8709677419354839,
      "em": false,
      "passed": false
    },
    {
      "index": 25,
      "groundtruth": "dyTaskService.main();",
      "prediction": "dyTaskService.main();",
      "raw_prediction": " dyTaskService.main();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 26,
      "groundtruth": "AccUtils.printLogMsg(\"\u5411\u4e0b\u6ed1\u52a8\");",
      "prediction": "AccUtils.printLogMsg(\"swipe to next video\");",
      "raw_prediction": "        AccUtils.printLogMsg(\"swipe to next video\");",
      "es": 0.5681818181818181,
      "em": false,
      "passed": false
    },
    {
      "index": 27,
      "groundtruth": "= AccUtils.findElementListByContainText(\"\u6253\u5361\");",
      "prediction": "= AccUtils.findAccessibilityNodeInfosByText(\"\u4e0a\u73ed\u6253\u5361\");",
      "raw_prediction": "= AccUtils.findAccessibilityNodeInfosByText(\"\u4e0a\u73ed\u6253\u5361\");",
      "es": 0.5769230769230769,
      "em": false,
      "passed": false
    },
    {
      "index": 28,
      "groundtruth": "AccUtils.printLogMsg(\"\u6253\u5361\u5b8c\u6210\uff0c\u8fd4\u56de\u684c\u9762\");",
      "prediction": "AccUtils.back();",
      "raw_prediction": "AccUtils.back();\n        AccUtils.timeSleep(2000);\n        AccUtils.back();\n        AccUtils.timeSleep(2000);\n        AccUtils.back();\n        AccUtils.timeSleep(2000);\n       ",
      "es": 0.3529411764705882,
      "em": false,
      "passed": false
    },
    {
      "index": 29,
      "groundtruth": "TinkerManager.setUpgradeRetryEnable(true);",
      "prediction": "TinkerManager.setUpgradeRetryEnable(true);",
      "raw_prediction": " TinkerManager.setUpgradeRetryEnable(true);\n        TinkerInstaller.install(this);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 30,
      "groundtruth": "AccUtils.findElementByText(\"\u8003\u52e4\u6253\u5361\"));",
      "prediction": "AccUtils.findElementByText(\"\u8003\u52e4\"));",
      "raw_prediction": "AccUtils.findElementByText(\"\u8003\u52e4\"));\n        AccUtils.timeSleep(3000;\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u6253\u5361\");\n        AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u6253\u5361\"));\n        AccUtils.time",
      "es": 0.9444444444444444,
      "em": false,
      "passed": false
    },
    {
      "index": 31,
      "groundtruth": "TinkerManager.installTinker(this);",
      "prediction": "TinkerManager.setTinkerFlags(ShareConstants.TINKER_ENABLE_ALL);",
      "raw_prediction": "    TinkerManager.setTinkerFlags(ShareConstants.TINKER_ENABLE_ALL);\n        // Optional\n        // \u5982\u679c\u60f3\u8981\u5728\u4e3b\u8fdb\u7a0b\u521d\u59cb\u5316Tinker\uff0c\u5fc5\u987b\u5728\u4e0b\u9762\u884c\u4ee3\u7801\u4e0b\u8fb9\u7684\u65b9\u6cd5\u8c03\u7528\u7ed3\u675f\u4e4b\u524d\u8c03\u7528\uff0c\u5426\u5219",
      "es": 0.3492063492063492,
      "em": false,
      "passed": false
    },
    {
      "index": 32,
      "groundtruth": "= AccUtils.findElementByText(\"\u6211\u77e5\u9053\u4e86\");",
      "prediction": "= AccUtils.findElementByText(\"\u4ee5\u540e\u518d\u8bf4\");",
      "raw_prediction": "= AccUtils.findElementByText(\"\u4ee5\u540e\u518d\u8bf4\");",
      "es": 0.8918918918918919,
      "em": false,
      "passed": false
    },
    {
      "index": 33,
      "groundtruth": "element = AccUtils.findElementByText(\"\u4ee5\u540e\u518d\u8bf4\");",
      "prediction": "element = AccUtils.findElementByText(\"\u8df3\u8fc7\");",
      "raw_prediction": "element = AccUtils.findElementByText(\"\u8df3\u8fc7\");",
      "es": 0.9111111111111111,
      "em": false,
      "passed": false
    },
    {
      "index": 34,
      "groundtruth": "AccUtils.printLogMsg(\"open dy App\");",
      "prediction": "AccUtils.timeSleep(waitSixSecond + waitTwoSecond);",
      "raw_prediction": "    AccUtils.timeSleep(waitSixSecond + waitTwoSecond);\n",
      "es": 0.28,
      "em": false,
      "passed": false
    },
    {
      "index": 35,
      "groundtruth": "AccUtils.openApp(\"\u6296\u97f3\");",
      "prediction": "AccUtils.timeSleep(waitTwoSecond);",
      "raw_prediction": " AccUtils.timeSleep(waitTwoSecond);\n        AccUtils.printLogMsg(\"\u6253\u5f00\u6296\u97f3\");\n        AccUtils.clickPoint(Variable.mWidth - 50, 150, 100);\n        AccUtils.timeSleep(wait",
      "es": 0.4117647058823529,
      "em": false,
      "passed": false
    },
    {
      "index": 36,
      "groundtruth": "TinkerManager.setTinkerApplicationLike(this);",
      "prediction": "// \u53ea\u6709\u8c03\u8bd5\u5e76\u4e14\u662f\u6b63\u5f0f\u73af\u5883\u7684\u65f6\u5019\u624d\u5f00\u542f\u70ed\u66f4\u65b0",
      "raw_prediction": "    // \u53ea\u6709\u8c03\u8bd5\u5e76\u4e14\u662f\u6b63\u5f0f\u73af\u5883\u7684\u65f6\u5019\u624d\u5f00\u542f\u70ed\u66f4\u65b0\n        if (BuildConfig.DEBUG && !BuildConfig.TINKER_ENABLE) {\n            return;\n        }\n\n        // \u8fd9\u91cc\u5b9e\u73b0SDK\u521d\u59cb\u5316\uff0c\u5305\u62ec\u521d\u59cb\u5316",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 37,
      "groundtruth": "Utils.isBackground()) {",
      "prediction": "result.isNewP",
      "raw_prediction": "result.isNewPatch) {",
      "es": 0.13043478260869568,
      "em": false,
      "passed": false
    },
    {
      "index": 38,
      "groundtruth": "AccUtils.printLogMsg(\"\u5728\u5b57\u7b26\u4e32\u4e2d\u6ca1\u6709\u627e\u5230\u6574\u6570\uff01\");",
      "prediction": "AccUtils.printLogMsg(\"\u6ca1\u6709\u63d0\u53d6\u5230\u6574\u6570\");",
      "raw_prediction": " AccUtils.printLogMsg(\"\u6ca1\u6709\u63d0\u53d6\u5230\u6574\u6570\");",
      "es": 0.7837837837837838,
      "em": false,
      "passed": false
    },
    {
      "index": 39,
      "groundtruth": "WindowPermissionCheck.checkPermission(this);",
      "prediction": "WindowPermissionCheck.checkPermission(this);",
      "raw_prediction": "WindowPermissionCheck.checkPermission(this);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 40,
      "groundtruth": "AccUtils.timeSleep(3000);",
      "prediction": "AccUtils.timeSleep(2000);",
      "raw_prediction": "    AccUtils.timeSleep(2000);\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u6211\u7684\");\n        AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u6211\u7684\"));\n        AccUtils.timeSleep(2000);\n       ",
      "es": 0.96,
      "em": false,
      "passed": false
    },
    {
      "index": 41,
      "groundtruth": "AccUtils.timeSleep(6000);",
      "prediction": "AccUtils.timeSleep(3000);",
      "raw_prediction": "    AccUtils.timeSleep(3000);\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u6253\u5361\");\n        AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u6253\u5361\"));\n        AccUtils.timeSleep(3000);\n       ",
      "es": 0.96,
      "em": false,
      "passed": false
    },
    {
      "index": 42,
      "groundtruth": "AccUtils.timeSleep(2000);",
      "prediction": "AccUtils.printLogMsg(\"\u8fd4\u56de\u5230\u521d\u59cb\u72b6\u6001\");",
      "raw_prediction": "    AccUtils.printLogMsg(\"\u8fd4\u56de\u5230\u521d\u59cb\u72b6\u6001\");\n        AccUtils.back();\n        AccUtils.timeSleep(2000);\n        AccUtils.printLogMsg(\"\u8fd4\u56de\u5230\u521d\u59cb\u72b6\u6001\");\n        AccUtils.back();\n        AccUtils",
      "es": 0.40625,
      "em": false,
      "passed": false
    },
    {
      "index": 43,
      "groundtruth": "AccUtils.timeSleep(7000);",
      "prediction": "AccUtils.timeSleep(7000);",
      "raw_prediction": "    AccUtils.timeSleep(7000);\n        AccUtils.printLogMsg(\"\u70b9\u51fb\u5de5\u4f5c\u53f0\");\n        AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u5de5\u4f5c\u53f0\"));\n        AccUtils.timeSleep(3000",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 44,
      "groundtruth": "returnCode = Utils.checkForPatchRecover(NEW_PATCH_RESTRICTION_SPACE_SIZE_MIN, maxMemory);",
      "prediction": "// Warning, it is just a samplecase, you don't need to copy all of these",
      "raw_prediction": "// Warning, it is just a samplecase, you don't need to copy all of these\n            // Interception some of the request\n            if (patchFile.length() > NEW_patch_RESTRICTIONspaceSizeMin) {\n               ",
      "es": 0.1123595505617978,
      "em": false,
      "passed": false
    },
    {
      "index": 45,
      "groundtruth": "ntokens = ntokens + response.getUsage().getTotalTokens();",
      "prediction": "ntokens = ntokens + response.getUsage().getTotalTokens();",
      "raw_prediction": "ntokens = ntokens + response.getUsage().getTotalTokens();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 46,
      "groundtruth": ".setContent(response.getChoices().get(0).getMessage().getContent());",
      "prediction": ".setContent(response.getChoices().get(0).getMessage().getContent());",
      "raw_prediction": ".setContent(response.getChoices().get(0).getMessage().getContent());\n               ",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 47,
      "groundtruth": "out.println(filme.getNome()+\" - \"+filme.getDuracao());",
      "prediction": "out.println(\"Filme: \" + filme.getNome() + \" Dura\u00e7\u00e3o: \" + filme.getDuracao());",
      "raw_prediction": "out.println(\"Filme: \" + filme.getNome() + \" Dura\u00e7\u00e3o: \" + filme.getDuracao());",
      "es": 0.6883116883116883,
      "em": false,
      "passed": false
    },
    {
      "index": 48,
      "groundtruth": "itempedido.getPreco();",
      "prediction": "itempedido.getValor();",
      "raw_prediction": "itempedido.getValor();\n       ",
      "es": 0.7727272727272727,
      "em": false,
      "passed": false
    },
    {
      "index": 49,
      "groundtruth": "= meuDVD.removerFilme();",
      "prediction": "= meuDVD.removerFilme();",
      "raw_prediction": "= meuDVD.removerFilme();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 50,
      "groundtruth": "meuDVD.aumentarVolume();",
      "prediction": "meuDVD.diminuirVolume();",
      "raw_prediction": "meuDVD.diminuirVolume();",
      "es": 0.7916666666666666,
      "em": false,
      "passed": false
    },
    {
      "index": 51,
      "groundtruth": "(filme.getNome()+\" - \"+filme.getDuracao());",
      "prediction": "(\"Filme: \"+filme.getNome()+\" Dura\u00e7\u00e3o: \"+filme.getDuracao());",
      "raw_prediction": "(\"Filme: \"+filme.getNome()+\" Dura\u00e7\u00e3o: \"+filme.getDuracao());",
      "es": 0.7,
      "em": false,
      "passed": false
    },
    {
      "index": 52,
      "groundtruth": "meuDVD.diminuirVolume();",
      "prediction": "meuDVD.diminuirVolume();",
      "raw_prediction": "meuDVD.diminuirVolume();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 53,
      "groundtruth": "meuDVD.play();",
      "prediction": "meuDVD.play();",
      "raw_prediction": "meuDVD.play();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 54,
      "groundtruth": "this.ipList.put(Sneaky.stringifyAddress(address), System.currentTimeMillis());",
      "prediction": "String ip = Sneaky.stringifyAddress(address);",
      "raw_prediction": "String ip = Sneaky.stringifyAddress(address);\n        if (!this.ipList.containsKey(ip)) {\n            this.ipList.put(ip, System.currentTimeMillis());\n        }",
      "es": 0.46153846153846156,
      "em": false,
      "passed": false
    },
    {
      "index": 55,
      "groundtruth": "= translator.detectLanguage(questionInput);",
      "prediction": "= question.getLanguage();",
      "raw_prediction": "= question.getLanguage();",
      "es": 0.41860465116279066,
      "em": false,
      "passed": false
    },
    {
      "index": 56,
      "groundtruth": "= translator.translate(translator.middleLanguage(), sourceLang, answerOutput);",
      "prediction": "= translator.translate(translator.middleLanguage(), sourceLang, answerOutput);",
      "raw_prediction": "= translator.translate(translator.middleLanguage(), sourceLang, answerOutput);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 57,
      "groundtruth": "= translator.translate(sourceLang, translator.middleLanguage(), questionInput);",
      "prediction": "= translator.translate(translator.middleLanguage(), sourceLang, questionInput);",
      "raw_prediction": "= translator.translate(translator.middleLanguage(), sourceLang, questionInput);\n                } else {\n                needTranslate = false;",
      "es": 0.6962025316455696,
      "em": false,
      "passed": false
    },
    {
      "index": 58,
      "groundtruth": "fill(WebActions.decrypt(password));",
      "prediction": "fill(WebActions.getProperty(password));",
      "raw_prediction": "fill(WebActions.getProperty(password));",
      "es": 0.8205128205128205,
      "em": false,
      "passed": false
    },
    {
      "index": 59,
      "groundtruth": "= PluginImpl.getInstance().getAccessKeyId();",
      "prediction": "= PluginImpl.getInstance().getAccessKeyId();",
      "raw_prediction": "= PluginImpl.getInstance().getAccessKeyId();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 60,
      "groundtruth": "instance.getOosClient().getAcsResponse(request);",
      "prediction": "instance.getOosClient().getAcsResponse(request);",
      "raw_prediction": "instance.getOosClient().getAcsResponse(request);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 61,
      "groundtruth": "uploadPartResult = instance.getOssClient().uploadPart(uploadPartRequest);",
      "prediction": "uploadPartResult = instance.getOssClient().uploadPart(uploadPartRequest);",
      "raw_prediction": "uploadPartResult = instance.getOssClient().uploadPart(uploadPartRequest);\n            instream.close();\n            logger.println(\"upload part \" + (i + 1) + \" successfully, etag: \" + uploadPartResult.get",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 62,
      "groundtruth": "instance.build(this.region);",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 63,
      "groundtruth": "(instance.getOssClient() != null) {",
      "prediction": "instance.getOssClie",
      "raw_prediction": "instance.getOssClient() != null {",
      "es": 0.5428571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 64,
      "groundtruth": "upresult = instance.getOssClient().initiateMultipartUpload(request);",
      "prediction": "upresult = instance.getOssClient().initiateMultipartUpload(request);",
      "raw_prediction": "upresult = instance.getOssClient().initiateMultipartUpload(request);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 65,
      "groundtruth": "instance.getOosClient().getAcsResponse(executionsRequest).getExecutions().get(0).getStatus();",
      "prediction": "\"",
      "raw_prediction": "\"",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 66,
      "groundtruth": "HazardDiamondAPI.open(this);",
      "prediction": "return ActionResult.PASS;",
      "raw_prediction": "return ActionResult.PASS;\n        }\n        if (HazardDiamondAPI.getHazardData(state) == null) {\n            return ActionResult.PASS;\n        }\n        if (HazardDiamondAPI.getHazardData(state).isHazard",
      "es": 0.1428571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 67,
      "groundtruth": "setScreen(new HazardScreen(holder.getHazardData()));",
      "prediction": "setScreen(new HazardScreen(holder.getHazardData()));",
      "raw_prediction": "setScreen(new HazardScreen(holder.getHazardData()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 68,
      "groundtruth": ".register(Registry.ITEM, HDiamond.id(\"panel_item\"), INSTANCE);",
      "prediction": ".register(Registry.ITEM, HDiamond.id(\"panel\"), INSTANCE);",
      "raw_prediction": ".register(Registry.ITEM, HDiamond.id(\"panel\"), INSTANCE);",
      "es": 0.9193548387096774,
      "em": false,
      "passed": false
    },
    {
      "index": 69,
      "groundtruth": "= holder.getHazardData().getTooltip().stream()\n                .map(Text.Serializer::toJson)\n                .toList();",
      "prediction": "= holder.getHazardData().toWaila();",
      "raw_prediction": "= holder.getHazardData().toWaila();\n        nbt.putString(\"WNumerum\", tooltips.get(0));",
      "es": 0.2773109243697479,
      "em": false,
      "passed": false
    },
    {
      "index": 70,
      "groundtruth": "AliyunPushLog.e(REC_TAG, \"key \" + entry.getKey() + \" value \" + entry.getValue());",
      "prediction": "AliyunPushLog.e(REC_TAG, \"key:\" + entry.getKey() + \" value:\" + entry.getValue());",
      "raw_prediction": "\tAliyunPushLog.e(REC_TAG, \"key:\" + entry.getKey() + \" value:\" + entry.getValue());",
      "es": 0.9753086419753086,
      "em": false,
      "passed": false
    },
    {
      "index": 71,
      "groundtruth": "ResultUtil.error();",
      "prediction": "ResultUtil.",
      "raw_prediction": "ResultUtil.error(ErrorCode.SYSTEM_ERROR, \"\u7cfb\u7edf\u5f02\u5e38\");",
      "es": 0.5789473684210527,
      "em": false,
      "passed": false
    },
    {
      "index": 72,
      "groundtruth": "target = (Annotation) AopUtil.getTarget(annotation);",
      "prediction": "target = annotation.annotati",
      "raw_prediction": "target = annotation.annotationType().getAnnotation(annotation.annotationType());",
      "es": 0.5192307692307692,
      "em": false,
      "passed": false
    },
    {
      "index": 73,
      "groundtruth": ".info(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u5931\u8d25\uff01\u624b\u673a\u53f7\uff1a\u3010{",
      "prediction": ".error(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u5931\u8d25\uff01\u624b\u673a\u53f7\uff1a\u3010{}\u3011 -- \u9a8c\u8bc1\u7801\uff1a\u3010{}\u3011 -- {}\",",
      "raw_prediction": ".error(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u5931\u8d25\uff01\u624b\u673a\u53f7\uff1a\u3010{}\u3011 -- \u9a8c\u8bc1\u7801\uff1a\u3010{}\u3011 -- {}\", phone, param.get(\"code\"), jsonObject.get(\"message\"));\n        log.info(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u5931\u8d25\uff01\u624b\u673a\u53f7\uff1a",
      "es": 0.4347826086956522,
      "em": false,
      "passed": false
    },
    {
      "index": 74,
      "groundtruth": "= UserRoleEnum.getEnumByValue(mustRole);",
      "prediction": "= UserRoleEnum.getEnumByValue(mustRole);",
      "raw_prediction": "= UserRoleEnum.getEnumByValue(mustRole);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 75,
      "groundtruth": "(errorCode.getMsg());",
      "prediction": "(message);",
      "raw_prediction": "(message);",
      "es": 0.23809523809523814,
      "em": false,
      "passed": false
    },
    {
      "index": 76,
      "groundtruth": "(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u6210\u529f\uff01\u624b\u673a\u53f7\uff1a\u3010{",
      "prediction": "(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u6210\u529f\uff01\u624b\u673a\u53f7\uff1a\u3010{",
      "raw_prediction": "(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u6210\u529f\uff01\u624b\u673a\u53f7\uff1a\u3010{",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 77,
      "groundtruth": "username = jwtTokenProvider.getUsername(token);",
      "prediction": "username = jwtTokenProvider.getUsernameFromJWT(token);",
      "raw_prediction": "username = jwtTokenProvider.getUsernameFromJWT(token);",
      "es": 0.8703703703703703,
      "em": false,
      "passed": false
    },
    {
      "index": 78,
      "groundtruth": "(cityService.findCitiesByName(pageNo, pageSize, sortBy, sortDir,name));",
      "prediction": "(cityService.getCitiesByName(name, pageNo, pageSize, sortBy, sortDir));",
      "raw_prediction": "(cityService.getCitiesByName(name, pageNo, pageSize, sortBy, sortDir));\n    }\n\n    @GetMapping(\"/{id}\")\n    @PreAuthorize(\"hasRole('ROLE_USER') or hasRole('ROLE_ADMIN')\")\n    public ResponseEntity<CityDto",
      "es": 0.7887323943661972,
      "em": false,
      "passed": false
    },
    {
      "index": 79,
      "groundtruth": "return JSON_CONVERTOR.parseObject(input, clazz);",
      "prediction": "return JSON_CONVERTOR.parseObject(input, clazz);",
      "raw_prediction": "    return JSON_CONVERTOR.parseObject(input, clazz);\n    }\n\n    /**\n     * \u89e3\u6790/\u53d1\u5e8f\u5217\u5316\u6210\u5bf9\u8c61\n     */\n    public static <T> T parseObject(String input, Class<T> clazz) {\n        return",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 80,
      "groundtruth": ".append(commandNamespace.name());",
      "prediction": ";",
      "raw_prediction": ";\n",
      "es": 0.030303030303030276,
      "em": false,
      "passed": false
    },
    {
      "index": 81,
      "groundtruth": ".namespaceManager.getCommandNamespaces().forEach(namespace -> {",
      "prediction": ".addNamespace(new GroovyScriptCommandNamespace(\"script\", namespaceManager)); // add default na",
      "raw_prediction": ".addNamespace(new GroovyScriptCommandNamespace(\"script\", namespaceManager)); // add default namespace\n        this.namespaceManager.getNamespaces().forEach(namespace -> {",
      "es": 0.4042553191489362,
      "em": false,
      "passed": false
    },
    {
      "index": 82,
      "groundtruth": ".print(namespaceManager.dump());",
      "prediction": ".println(\"help: \" + this.shellProvider.getHelp());",
      "raw_prediction": ".println(\"help: \" + this.shellProvider.getHelp());\n    }\n\n    protected void clear() {\n        RUNTIME.getPrinter().println(\"clear\");\n        RUNTIME.getPrinter().clearScreen();",
      "es": 0.36,
      "em": false,
      "passed": false
    },
    {
      "index": 83,
      "groundtruth": "shell.start();",
      "prediction": "shell.start();",
      "raw_prediction": "shell.start();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 84,
      "groundtruth": "commandNamespace.getCommands().forEach(\n                            (cmdName, cmd) -> {",
      "prediction": "commandNamespace.getCommands().forEach(\n                cmd -> {\n                    String cmdName = cmd.getName();",
      "raw_prediction": "\n            commandNamespace.getCommands().forEach(\n                cmd -> {\n                    String cmdName = cmd.getName();\n",
      "es": 0.6810344827586207,
      "em": false,
      "passed": false
    },
    {
      "index": 85,
      "groundtruth": "String result = shell.execute(command);",
      "prediction": "String result = shell.execute(command);",
      "raw_prediction": "String result = shell.execute(command);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 86,
      "groundtruth": "!grpcClient.checkServerStatus()) {",
      "prediction": "!grpcClient.connect",
      "raw_prediction": "!grpcClient.connect()) {",
      "es": 0.4411764705882353,
      "em": false,
      "passed": false
    },
    {
      "index": 87,
      "groundtruth": "getGrpcClient().shutdown();",
      "prediction": "getGrpcClient().close();",
      "raw_prediction": "getGrpcClient().close();",
      "es": 0.7407407407407407,
      "em": false,
      "passed": false
    },
    {
      "index": 88,
      "groundtruth": "\"                          PLUGIN SERVER CLI \" + Launcher.getVersion()\n        );",
      "prediction": "\"    \\n\" +\n                \"    \\n\" +\n                \"    \\n\" +\n                \"    \\n\" +\n                \"    \\n\" +",
      "raw_prediction": "\"    \\n\" +\n                \"    \\n\" +\n                \"    \\n\" +\n                \"    \\n\" +\n                \"    \\n\" +\n                \"    \\n\" +\n                \"    \\n\" +\n",
      "es": 0.3728813559322034,
      "em": false,
      "passed": false
    },
    {
      "index": 89,
      "groundtruth": ").execute();",
      "prediction": ").run();",
      "raw_prediction": ").run();\n",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 90,
      "groundtruth": "().println(JsonUtil.format(result));",
      "prediction": "().println(result);",
      "raw_prediction": "().println(result);",
      "es": 0.5277777777777778,
      "em": false,
      "passed": false
    },
    {
      "index": 91,
      "groundtruth": "(!buffer.isEmpty() && !namespace.name().startsWith(buffer)) {",
      "prediction": "(!namespace.name().equals(buffer))",
      "raw_prediction": "(!namespace.name().equals(buffer)) {",
      "es": 0.47540983606557374,
      "em": false,
      "passed": false
    },
    {
      "index": 92,
      "groundtruth": "new StringBuilder(namespace.name());",
      "prediction": "new StringBuilder(namespace.name());",
      "raw_prediction": "new StringBuilder(namespace.name());\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 93,
      "groundtruth": "namespace.getCommands().forEach((cmdName, cmd) -> {",
      "prediction": "if (!namespace.getCommands().isEmpty())",
      "raw_prediction": "if (!namespace.getCommands().isEmpty()) {\n                sb.append(\"\\n\\t.\");\n                namespace.getCommands().forEach((cmdName, cmd) -> {",
      "es": 0.43137254901960786,
      "em": false,
      "passed": false
    },
    {
      "index": 94,
      "groundtruth": "!namespace.name().equals(buf[0])) {",
      "prediction": "!namespace.name().e",
      "raw_prediction": "!namespace.name().equals(buf[0])) {\n                    return;\n                }\n                if (!namespace.getCommands().containsKey(buf[1])) {",
      "es": 0.5428571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 95,
      "groundtruth": "Candidate(namespace.name() + \".\", namespace.name(), null, null, null, null, true));",
      "prediction": "Candidate(namespace.name() + \".\" + cmdName, sb.toString(), null, null, null,",
      "raw_prediction": "Candidate(namespace.name() + \".\" + cmdName, sb.toString(), null, null, null,\n            null, true));\n        } else { //\u5df2\u8f93\u5165.\u7b26\u53f7,\u5219\u8865\u5168\u5339\u914d\u547d\u4ee4\n            String[] buf = buffer.split(\"\\\\",
      "es": 0.6385542168674698,
      "em": false,
      "passed": false
    },
    {
      "index": 96,
      "groundtruth": "cmd.addArgs(argName, param.getType().getSimpleName(), constraints);",
      "prediction": "cmd.addArg(new Command.Arg(argName, constraints.toArray(new String[0]));",
      "raw_prediction": " cmd.addArg(new Command.Arg(argName, constraints.toArray(new String[0]));\n\n            } else {\n                cmd.addArg(new Command.Arg(param.getType().getSimpleName(), param.getName());\n            }",
      "es": 0.26388888888888884,
      "em": false,
      "passed": false
    },
    {
      "index": 97,
      "groundtruth": "(namespaceManager.getCommandNamespaces());",
      "prediction": "(namespaceManager.getNamespaces());",
      "raw_prediction": "(namespaceManager.getNamespaces());",
      "es": 0.8333333333333334,
      "em": false,
      "passed": false
    },
    {
      "index": 98,
      "groundtruth": "mThermalUtils.setDefaultThermalProfile();",
      "prediction": "if (intent.getAction().equals(Intent.ACTION_SCREEN_OFF))",
      "raw_prediction": "\n            if (intent.getAction().equals(Intent.ACTION_SCREEN_OFF)) {\n                mThermalUtils.setDefaultThermalProfile();\n            }",
      "es": 0.1428571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 99,
      "groundtruth": "mThermalUtils.setThermalProfile(foregroundApp);",
      "prediction": "mThermalUtils.setThermalProfile(foregroundApp);",
      "raw_prediction": "mThermalUtils.setThermalProfile(foregroundApp);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 100,
      "groundtruth": "mDiracSound.setMusic(enable ? 1 : 0);",
      "prediction": "mDiracSound.setHifiMode(getHifiMode());",
      "raw_prediction": "    mDiracSound.setHifiMode(getHifiMode());\n        mDiracSound.setHeadsetType(getHeadsetType());\n        mDiracSound.setScenario(getScenario());\n    }\n\n    public void setEnabled(boolean enable, boolean refresh",
      "es": 0.4871794871794872,
      "em": false,
      "passed": false
    },
    {
      "index": 101,
      "groundtruth": "FileUtils.writeLine(THERMAL_SCONFIG, THERMAL_STATE_DEFAULT);",
      "prediction": "FileUtils.writeLine(THERMAL_SCONFIG, THERMAL_STATE_DEFAULT);",
      "raw_prediction": "FileUtils.writeLine(THERMAL_SCONFIG, THERMAL_STATE_DEFAULT);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 102,
      "groundtruth": "null && mDiracSound.getMusic() == 1;",
      "prediction": "null && mDiracSound.isEnabled();",
      "raw_prediction": "null && mDiracSound.isEnabled();",
      "es": 0.6111111111111112,
      "em": false,
      "passed": false
    },
    {
      "index": 103,
      "groundtruth": "mDiracSound.setLevel(band, Float.valueOf(level[band]));",
      "prediction": "mDiracSound.setBandLevel(band, Integer.parseInt(level[band]));",
      "raw_prediction": "mDiracSound.setBandLevel(band, Integer.parseInt(level[band]));",
      "es": 0.7258064516129032,
      "em": false,
      "passed": false
    },
    {
      "index": 104,
      "groundtruth": "? mDiracUtils.isDiracEnabled() : false;",
      "prediction": "? mDiracUtils.isEnabled() : false;",
      "raw_prediction": "? mDiracUtils.isEnabled() : false;",
      "es": 0.8717948717948718,
      "em": false,
      "passed": false
    },
    {
      "index": 105,
      "groundtruth": "mDiracSound.setHifiMode(paramInt);",
      "prediction": "}",
      "raw_prediction": "}\n\n    public void setHeadsetType(int paramInt) {\n        mDiracSound.setHeadsetType(paramInt);",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 106,
      "groundtruth": "gptClient.updateSettings(newApiKey, newModelId, newMaxPromptSize, newPrompt);",
      "prediction": "gptClient.updateSettings(newApiKey, newModelId, newMaxPromptSize, newPrompt);",
      "raw_prediction": "gptClient.updateSettings(newApiKey, newModelId, newMaxPromptSize, newPrompt);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 107,
      "groundtruth": "mDiracUtils.setHifiMode((Boolean) newValue ? 1 : 0);",
      "prediction": "mDiracUtils.setHifiMode((Boolean) newValue);",
      "raw_prediction": "mDiracUtils.setHifiMode((Boolean) newValue);",
      "es": 0.8461538461538461,
      "em": false,
      "passed": false
    },
    {
      "index": 108,
      "groundtruth": "mDiracUtils.setHeadsetType(Integer.parseInt(newValue.toString()));",
      "prediction": "mDiracUtils.setHeadsetType((String) newValue);",
      "raw_prediction": "mDiracUtils.setHeadsetType((String) newValue);\n            return true;\n            case PREF_HEADSET:\n            mDiracUtils.setHeadsetType((String) newValue);\n",
      "es": 0.5909090909090908,
      "em": false,
      "passed": false
    },
    {
      "index": 109,
      "groundtruth": ".helpMenu.setHelpColors(config.getMessages().getHelpCmd().getHelpColors());",
      "prediction": ".helpMenu.colorProvider(HelpColors::get);",
      "raw_prediction": ".helpMenu.colorProvider(HelpColors::get);",
      "es": 0.36,
      "em": false,
      "passed": false
    },
    {
      "index": 110,
      "groundtruth": "Menu menu = MyMenu.createMenu(this);",
      "prediction": "logging.logToOutput(\"[+] Passive scan check registered\");",
      "raw_prediction": "    logging.logToOutput(\"[+] Passive scan check registered\");\n\n        Menu menu = new MyMenu(this, montoyaApi, logging);\n        montoyaApi.userinterface().menuBar().registerMenu(menu);\n        logging.logToOutput(\"[+]",
      "es": 0.17543859649122806,
      "em": false,
      "passed": false
    },
    {
      "index": 111,
      "groundtruth": "(sender, key, args) -> config.getMessages().getHelpCmd().getMessage(key));",
      "prediction": "sender -> sender.sendMessage(config.getMessages().getHelpCmd().getHelpMessage()),",
      "raw_prediction": "  sender -> sender.sendMessage(config.getMessages().getHelpCmd().getHelpMessage()),\n          sender -> sender.sendMessage(config.getMessages().getHelpCmd().getHelpMessage()),\n          sender -> sender.sendMessage(config.getMessages().getHelpCmd().get",
      "es": 0.6419753086419753,
      "em": false,
      "passed": false
    },
    {
      "index": 112,
      "groundtruth": "description = HtmlResourceLoader.loadHtmlContent(\"aboutDescription.html\");",
      "prediction": "description = HtmlResourceLoader.loadResource(\"about.html\");",
      "raw_prediction": "description = HtmlResourceLoader.loadResource(\"about.html\");",
      "es": 0.7162162162162162,
      "em": false,
      "passed": false
    },
    {
      "index": 113,
      "groundtruth": "mDiracUtils.setScenario(Integer.parseInt(newValue.toString()));",
      "prediction": "mDiracUtils.setScenario((String) newValue);",
      "raw_prediction": "mDiracUtils.setScenario((String) newValue);",
      "es": 0.5714285714285714,
      "em": false,
      "passed": false
    },
    {
      "index": 114,
      "groundtruth": "mDiracUtils.setLevel((String) newValue);",
      "prediction": "mDiracUtils.setPreset(Integer.parseInt(newValue.toString()));",
      "raw_prediction": "mDiracUtils.setPreset(Integer.parseInt(newValue.toString()));",
      "es": 0.4918032786885246,
      "em": false,
      "passed": false
    },
    {
      "index": 115,
      "groundtruth": "myBurpExtension.updateSettings(newApiKey, newModelId, newMaxPromptSize, newPromptText);",
      "prediction": "myBurpExtension.setApiKey(newApiKey);",
      "raw_prediction": "myBurpExtension.setApiKey(newApiKey);\n        myBurpExtension.setModel(newModelId);\n        myBurpExtension.setMaxPromptSize(newMaxPromptSize);\n        myBurpExtension.setPrompt(newPromptText);",
      "es": 0.367816091954023,
      "em": false,
      "passed": false
    },
    {
      "index": 116,
      "groundtruth": "settingsView.setOnApplyButtonClickListener(() -> {",
      "prediction": "myBurpExtension.getMontoyaApi().userInterface().applyThemeToComponent(this)",
      "raw_prediction": "myBurpExtension.getMontoyaApi().userInterface().applyThemeToComponent(this);\n        JButton applyButton = myBurpExtension.getMontoyaApi().userInterface().swingUtils().createButton(\"Apply\");\n        applyButton.addActionListener(e",
      "es": 0.18666666666666665,
      "em": false,
      "passed": false
    },
    {
      "index": 117,
      "groundtruth": "gptRequest.setPrompt(prompt);",
      "prediction": "Request request = new Request.Builder()",
      "raw_prediction": "Request request = new Request.Builder()\n        .url(\"https://api.openai.com/v1/completions\")\n        .addHeader(\"Content-Type\", \"application/json\")\n        .addHeader(\"Authorization\", \"Bearer \" + apiKey)\n",
      "es": 0.23076923076923073,
      "em": false,
      "passed": false
    },
    {
      "index": 118,
      "groundtruth": "inst.setOption(\"Skill Level\", String.valueOf(level));",
      "prediction": "inst.setLevel(level);",
      "raw_prediction": "inst.setLevel(level);",
      "es": 0.39622641509433965,
      "em": false,
      "passed": false
    },
    {
      "index": 119,
      "groundtruth": "(reader.getRest());",
      "prediction": "(reader.peek());",
      "raw_prediction": "(reader.peek());\n                reader.accept();\n            } else if (p == 0) {",
      "es": 0.736842105263158,
      "em": false,
      "passed": false
    },
    {
      "index": 120,
      "groundtruth": "reader.hint(\"An Integer\");",
      "prediction": "return null;",
      "raw_prediction": "return null;\n        }\n\n        @Override\n        IntegerNode createNode(String parsed) {\n            return new IntegerNode();\n        }\n\n        @Override\n        IntegerNode createNode(String parsed, ParsingContext context) {\n            return new IntegerNode",
      "es": 0.2692307692307693,
      "em": false,
      "passed": false
    },
    {
      "index": 121,
      "groundtruth": "if (!reader.canRead()) {",
      "prediction": "if (reader.canRead() && reader.peek(1) == '\"')",
      "raw_prediction": "if (reader.canRead() && reader.peek(1) == '\"') {\n            reader.accept(); // \"\n            reader.accept(); // \"\n            reader.accept(); // \"\n            reader.accept(); // \"\n            reader.accept(); // \"\n            reader",
      "es": 0.4565217391304348,
      "em": false,
      "passed": false
    },
    {
      "index": 122,
      "groundtruth": "(cfg.getApiKey() != null) {",
      "prediction": "(cfg.getToken() != null)",
      "raw_prediction": "(cfg.getToken() != null) {\n            metadata.put(authorization, \"bearer \" + cfg.getToken());\n        } else if (cfg.getApiKey() != null) {",
      "es": 0.7407407407407407,
      "em": false,
      "passed": false
    },
    {
      "index": 123,
      "groundtruth": "cfg.getTenantId() != null) {",
      "prediction": "cfg.getTenantId()",
      "raw_prediction": "cfg.getTenantId() != null) {",
      "es": 0.6071428571428572,
      "em": false,
      "passed": false
    },
    {
      "index": 124,
      "groundtruth": "cfg.setCaCertPath(caCertPath);",
      "prediction": "cfg.setCaCertPath(caCertPath);",
      "raw_prediction": "  cfg.setCaCertPath(caCertPath);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 125,
      "groundtruth": "), cfg.getPort())\n                .intercept(MetadataUtils.newAttachHeadersInterceptor(metadata));",
      "prediction": "), cfg.getPort())\n        .intercept(MetadataUtils.newAttachHeadersInterceptor(metadata));",
      "raw_prediction": "), cfg.getPort())\n        .intercept(MetadataUtils.newAttachHeadersInterceptor(metadata));",
      "es": 0.9183673469387755,
      "em": true,
      "passed": true
    },
    {
      "index": 126,
      "groundtruth": "(cfg.getHost(), cfg.getPort())\n                .intercept(MetadataUtils.newAttachHeadersInterceptor(metadata));",
      "prediction": "(cfg.getHost(), cfg.getPort())\n        .intercept(MetadataUtils.newAttachHeadersInterceptor(metadata));",
      "raw_prediction": "(cfg.getHost(), cfg.getPort())\n        .intercept(MetadataUtils.newAttachHeadersInterceptor(metadata));",
      "es": 0.9279279279279279,
      "em": true,
      "passed": true
    },
    {
      "index": 127,
      "groundtruth": "reader.peek(1);",
      "prediction": "if (p < reader.length())",
      "raw_prediction": "if (p < reader.length()) {",
      "es": 0.375,
      "em": false,
      "passed": false
    },
    {
      "index": 128,
      "groundtruth": "return new AnalysisTaskWrapper(inst.calculate(), b);",
      "prediction": "return new AnalysisTaskWrapper(inst.calculate(), b);",
      "raw_prediction": "return new AnalysisTaskWrapper(inst.calculate(), b);\n    }\n\n    @LuaWhitelist\n    public CompletableFutureWrapper<Void, Void> setDepth(int depth) {\n        return new CompletableFutureWrapper<>(inst.setDepth(depth), Function.identity(), b);\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 129,
      "groundtruth": "reader.peek(p - reader.getPos()));",
      "prediction": "reader.get(p));",
      "raw_prediction": "reader.get(p));",
      "es": 0.4117647058823529,
      "em": false,
      "passed": false
    },
    {
      "index": 130,
      "groundtruth": "= reader.find(\" \")) == -1) {",
      "prediction": "= reader.peek()) == 0) {",
      "raw_prediction": "= reader.peek()) == 0) {",
      "es": 0.6785714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 131,
      "groundtruth": "mDiracUtils.setEnabled(isChecked);",
      "prediction": "mDiracUtils.setDiracEnabled(isChecked);",
      "raw_prediction": "mDiracUtils.setDiracEnabled(isChecked);\n        mScenes.setEnabled(isChecked);",
      "es": 0.8717948717948718,
      "em": false,
      "passed": false
    },
    {
      "index": 132,
      "groundtruth": "ShadeParser.parseShadeOutput(buildResult.toPath()),\n                        DependencyParser.parseDependencyCopyOutput(buildResult.toPath()));",
      "prediction": "modulesWithBundledDependencies,\nimport modulesWithCopiedDependencies);",
      "raw_prediction": " modulesWithBundledDependencies,\nimport modulesWithCopiedDependencies);\n\n        // parse deployed modules from build output\n        final Set<String> deployedModules =\nimport DeployParser.parseDeployOutput(buildResult);",
      "es": 0.18309859154929575,
      "em": false,
      "passed": false
    },
    {
      "index": 133,
      "groundtruth": "Node.greedyString())\n                                )\n                );",
      "prediction": "Node.string().complete(s -> {\n                                        if (s.startsWith(\"string:\")) {",
      "raw_prediction": "Node.string().complete(s -> {\n                                        if (s.startsWith(\"string:\")) {\n                                        s = s.substring(\"string:\".length());\n                                        }\n else {\n                                        s = null;\n                                        }\n                                        }\n                                        if (s != null) {\n",
      "es": 0.48,
      "em": false,
      "passed": false
    },
    {
      "index": 134,
      "groundtruth": "DependencyParser.parseDependencyCopyOutput(buildResult.toPath()));",
      "prediction": "import DeployParser.parseDeployOutput(buildResult.toPath()));",
      "raw_prediction": "\nimport DeployParser.parseDeployOutput(buildResult.toPath()));\n\n        // parse included dependencies from build output\n        final Map<String, Set<Dependency>> modulesWithCopiedDependencies =\n            combineAndFilterPaimonDependencies(\nimport ShadeParser",
      "es": 0.7121212121212122,
      "em": false,
      "passed": false
    },
    {
      "index": 135,
      "groundtruth": "return ParserUtils.parsePluginOutput(\n                lines,\n                DEPENDENCY_COPY_NEXT_MODULE_PATTERN,\n                DependencyParser::parseCopyDependencyBlock);",
      "prediction": "return ParserUtils.parsePluginOutput(\n                lines,\n                DEPENDENCY_COPY_NEXT_MODULE_PATTERN,\n                DependencyParser::parseCopyDependencyBlock);",
      "raw_prediction": "  return ParserUtils.parsePluginOutput(\n                lines,\n                DEPENDENCY_COPY_NEXT_MODULE_PATTERN,\n                DependencyParser::parseCopyDependencyBlock);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 136,
      "groundtruth": "return dependency.getGroupId().contains(\"org.scala-lang\")\n                || scalaSuffixPattern.matcher(dependency.getArtifactId()).find();",
      "prediction": "final String artifactId = dependency.getArtifactId();",
      "raw_prediction": "final String artifactId = dependency.getArtifactId();\n        final String scope = dependency.getScope().get();\n        final String version = dependency.getVersion().get();\n\n        return artifactId.contains(\"scala\") && !scope.equals(\"test\") && !",
      "es": 0.27338129496402874,
      "em": false,
      "passed": false
    },
    {
      "index": 137,
      "groundtruth": "+ dependency.getVersion()\n                + \":\"\n                + dependency.getClassifier().orElse(\"(no-classifier)\");",
      "prediction": "+ dependency.getVersion();",
      "raw_prediction": " + dependency.getVersion();",
      "es": 0.2184873949579832,
      "em": false,
      "passed": false
    },
    {
      "index": 138,
      "groundtruth": "= !cfg.getCaCertPath().isEmpty();",
      "prediction": "= cfg.getCaCertPath() != null;",
      "raw_prediction": "= cfg.getCaCertPath() != null;",
      "es": 0.6666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 139,
      "groundtruth": "with(Node.literal(\"string\").mustConsumeChild()\n                                        .with(Node.greedyString())\n                                )\n                );",
      "prediction": "with(Node.literal(\"string\").mustConsumeChild()\n                                        .with(Node.string().complete(s -> {\n                                        if (s.startsWith(\"multipv\")) {\n                        multipv.set(s.substring(\"multip",
      "raw_prediction": "with(Node.literal(\"string\").mustConsumeChild()\n                                        .with(Node.string().complete(s -> {\n                                        if (s.startsWith(\"multipv\")) {\n                        multipv.set(s.substring(\"multipv\".length()));\n                }\n            else if",
      "es": 0.606425702811245,
      "em": false,
      "passed": false
    },
    {
      "index": 140,
      "groundtruth": "boolean isTestDependency = dependency.getScope().get().equals(\"test\");",
      "prediction": "boolean isTestDependency =",
      "raw_prediction": "boolean isTestDependency =\n                   ",
      "es": 0.37142857142857144,
      "em": false,
      "passed": false
    },
    {
      "index": 141,
      "groundtruth": "= NoticeFileChecker.run(new File(args[0]), Paths.get(args[1]));",
      "prediction": "= 0;",
      "raw_prediction": "= 0;\n\n        severeIssueCount += JarFileChecker.checkPath(Paths.get(args[0]));\n\n        severeIssueCount += JarFileChecker.checkPath(Paths.get(args[1]));",
      "es": 0.06349206349206349,
      "em": false,
      "passed": false
    },
    {
      "index": 142,
      "groundtruth": "severeIssueCount += JarFileChecker.checkPath(Paths.get(args[2]));",
      "prediction": "if (severeIssueCount > 0) {",
      "raw_prediction": "if (severeIssueCount > 0) {\n\n            LOG.warn(\"Found a total of {} severe license issues\", severeIssueCount );\n\n            System.exit(1);\n\n        }",
      "es": 0.23076923076923073,
      "em": false,
      "passed": false
    },
    {
      "index": 143,
      "groundtruth": "wrapped.start(cmd),\n                SearchResultsWrapper::new,\n                b\n        );",
      "prediction": "wrapped.start(cmd),",
      "raw_prediction": "wrapped.start(cmd),\n\n            CompletableFutureWrapper::new,\n            (e) -> new SearchResultsWrapper(e)\n        )\n        );\n    }\n\n    @LuaWhitelist\n    public CompletableFutureWrapper<SearchResults, SearchResultsWrapper> start()",
      "es": 0.20879120879120883,
      "em": false,
      "passed": false
    },
    {
      "index": 144,
      "groundtruth": "DependencyParser.parseDependencyTreeOutput(path);",
      "prediction": "DependencyParser.parseMavenOutput(path);",
      "raw_prediction": "DependencyParser.parseMavenOutput(path);",
      "es": 0.7551020408163265,
      "em": false,
      "passed": false
    },
    {
      "index": 145,
      "groundtruth": "(!noticeContents.getNoticeModuleName().equals(moduleName)) {",
      "prediction": "!noticeContents.getNoticeModuleN",
      "raw_prediction": "!noticeContents.getNoticeModuleName().equals(moduleName) {",
      "es": 0.5333333333333333,
      "em": false,
      "passed": false
    },
    {
      "index": 146,
      "groundtruth": "+ dependency.getClassifier().orElse(\"(no-classifier)\");",
      "prediction": "+ dependency.getClassifier()",
      "raw_prediction": "+ dependency.getClassifier()\n             + \":\"\n             + dependency.getScope()\n             + \":\"\n             + dependency.getOptional();\n    }",
      "es": 0.509090909090909,
      "em": false,
      "passed": false
    },
    {
      "index": 147,
      "groundtruth": "final Set<String> deployedModules = DeployParser.parseDeployOutput(buildResult);",
      "prediction": "final Set<String> deployedModules =",
      "raw_prediction": " final Set<String> deployedModules =\n        DeployParser.parseDeployOutput(buildResult.toPath())\n            .stream()\n            .map(DeployParser.DeployedModule::getModuleName)\n            .collect(Collectors.toSet());",
      "es": 0.4375,
      "em": false,
      "passed": false
    },
    {
      "index": 148,
      "groundtruth": "= isExcluded(dependency.getArtifactId());",
      "prediction": "= EXCLUDED_MODULES.stream().anyMatch(moduleName::contains);",
      "raw_prediction": "= EXCLUDED_MODULES.stream().anyMatch(moduleName::contains);\n            if (blockPattern.find()) {\n                LOG.trace(\"\\tdependency:{}\", dependency);\n            LOG.trace(\"\\t\\tdepends-on-scala:{}\", dependsOnScala);\n               ",
      "es": 0.1694915254237288,
      "em": false,
      "passed": false
    },
    {
      "index": 149,
      "groundtruth": "wrapped.stop();",
      "prediction": "wrapped.stop();",
      "raw_prediction": "    wrapped.stop();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 150,
      "groundtruth": "declaredDependency : noticeContents.getDeclaredDependencies()) {",
      "prediction": "declaredDependency : noticeContent",
      "raw_prediction": "declaredDependency : noticeContents.getNoticeDependencies()) {",
      "es": 0.53125,
      "em": false,
      "passed": false
    },
    {
      "index": 151,
      "groundtruth": "of(Dependency.create(groupId, artifactId, version, classifier));",
      "prediction": "of(new Dependency(groupId, artifactId, version, classifier));",
      "raw_prediction": "of(new Dependency(groupId, artifactId, version, classifier));",
      "es": 0.828125,
      "em": false,
      "passed": false
    },
    {
      "index": 152,
      "groundtruth": "(dependency.getArtifactId()).find();",
      "prediction": "(dependency.getArtifactId()).find();",
      "raw_prediction": "(dependency.getArtifactId()).find();\n    }\n\n    private static Collection<String>check        final ParseResult parseResult, Path paimonRootPath) throws IOException {\n        return checkScalaSuffixes(parseResult, paimonRootPath",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 153,
      "groundtruth": "NoticeParser.parseNoticeFile(noticeFile);",
      "prediction": "new NoticeContents(",
      "raw_prediction": "new NoticeContents(\n                                            noticeFile,\n                                            noticeFile\n                                                .toFile()\n                                                .readLines()\n                                                .collect(Collectors.toList()));",
      "es": 0.24390243902439024,
      "em": false,
      "passed": false
    },
    {
      "index": 154,
      "groundtruth": ".get(module).flatten().collect(Collectors.toList());",
      "prediction": ".get(module).getDependencies();",
      "raw_prediction": ".get(module).getDependencies();\n           ",
      "es": 0.40384615384615385,
      "em": false,
      "passed": false
    },
    {
      "index": 155,
      "groundtruth": "return ParserUtils.parsePluginOutput(\n                lines.filter(line -> !line.contains(\" Excluding \")),\n                SHADE_NEXT_MODULE_PATTERN,\n                ShadeParser::parseBlock);",
      "prediction": "final Map<String, Set<Dependency>> result = ParserUtils.newHashMap();",
      "raw_prediction": "    final Map<String, Set<Dependency>> result = ParserUtils.newHashMap();\n\n        Iterator<String> lines = lines.iterator();\n        while (lines.hasNext()) {\n            String line = lines.next();\n\n            Matcher nextModuleMatcher = SHADE_NEXT",
      "es": 0.13089005235602091,
      "em": false,
      "passed": false
    },
    {
      "index": 156,
      "groundtruth": "(policyCtx.getName(), policyCtx.getLabel());",
      "prediction": "(policyCtx.getName(), policyCtx.getLabel());",
      "raw_prediction": "(policyCtx.getName(), policyCtx.getLabel());\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 157,
      "groundtruth": "identityContext.getIdentityType());",
      "prediction": "identityContext.getType());",
      "raw_prediction": "identityContext.getType());",
      "es": 0.7714285714285715,
      "em": false,
      "passed": false
    },
    {
      "index": 158,
      "groundtruth": "PolicyInstance policy = buildPolicy(policyContext.getName(), policyContext.getLabel());",
      "prediction": "public Struct query(String query, PolicyCtx policyCtx, Map<String,Value>values)",
      "raw_prediction": "public Struct query(String query, PolicyCtx policyCtx, Map<String,Value>values) {",
      "es": 0.24137931034482762,
      "em": false,
      "passed": false
    },
    {
      "index": 159,
      "groundtruth": "configIntermediary.updateConfigByObject(className, configObjString);",
      "prediction": "ConfigSupport configByObject = configIntermediary.getConfigByObject(className);",
      "raw_prediction": "ConfigSupport configByObject = configIntermediary.getConfigByObject(className);\n        configByObject.updateConfig(configObjString);\n        responseWriter(response, true);\n    }\n\n    public void doPut(HttpServletRequest request, HttpServletResponse response) throws IOException {\n",
      "es": 0.3291139240506329,
      "em": false,
      "passed": false
    },
    {
      "index": 160,
      "groundtruth": "gitClient.listTags();",
      "prediction": "gitClient.getAllTags();",
      "raw_prediction": "gitClient.getAllTags();",
      "es": 0.7391304347826086,
      "em": false,
      "passed": false
    },
    {
      "index": 161,
      "groundtruth": "gitClient.commitChangelogTagAndPush(tagName);",
      "prediction": "gitClient.commitChangelog(tagName);",
      "raw_prediction": "gitClient.commitChangelog(tagName);",
      "es": 0.7777777777777778,
      "em": false,
      "passed": false
    },
    {
      "index": 162,
      "groundtruth": "> issueKeys = gitClient.getAllIssuesSinceLastTag();",
      "prediction": "> issueKeys = gitClient.get",
      "raw_prediction": "> issueKeys = gitClient.getIssuesWithinTag(tags.get(tags.size()-1);",
      "es": 0.5294117647058824,
      "em": false,
      "passed": false
    },
    {
      "index": 163,
      "groundtruth": ".generateChangelogFromExisting(gitClient.getWorkingDir(), tagName, jiraIssues);",
      "prediction": ".generateChangelog(tagName, jiraIssues);",
      "raw_prediction": ".generateChangelog(tagName, jiraIssues);\n  }\n\n  private void generateChangelog(JGit gitClient, JiraClient jiraClient, ChangelogGenerator changelogGenerator, String tagName, List<String> jiraIssueKeys)\n",
      "es": 0.5063291139240507,
      "em": false,
      "passed": false
    },
    {
      "index": 164,
      "groundtruth": "ConfigPlus config = new ConfigPlus(configCategory, configCode, TypeJudgmentUtil.toJsonString(configValue));",
      "prediction": "ConfigPlus config = new ConfigPlus(configCategory, configCode, configValue);",
      "raw_prediction": " ConfigPlus config = new ConfigPlus(configCategory, configCode, configValue);",
      "es": 0.7102803738317758,
      "em": false,
      "passed": false
    },
    {
      "index": 165,
      "groundtruth": "Config(configCategory, configCode, TypeJudgmentUtil.toJsonString(configValue));",
      "prediction": "Config(configCategory, configCode, configValue);",
      "raw_prediction": "Config(configCategory, configCode, configValue);",
      "es": 0.6075949367088608,
      "em": false,
      "passed": false
    },
    {
      "index": 166,
      "groundtruth": "replaceAll(configIntermediary.getRequestMapping() + \"get\", \"\");",
      "prediction": "replaceAll(configIntermediary.getRequestMapping() + \"get\", \"\");",
      "raw_prediction": "replaceAll(configIntermediary.getRequestMapping() + \"get\", \"\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 167,
      "groundtruth": "> issueKeys = gitClient.getIssuesWithinTag(tagName);",
      "prediction": "> issueKeys = gitClient.getIssuesWithinTag(tagName);",
      "raw_prediction": "> issueKeys = gitClient.getIssuesWithinTag(tagName);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 168,
      "groundtruth": "<Issue> jiraIssues = jiraClient.getIssueList(jiraIssueKeys);",
      "prediction": "<Issue> jiraIssues = jiraClient.getIssues(jiraIssueKeys);",
      "raw_prediction": "<Issue> jiraIssues = jiraClient.getIssues(jiraIssueKeys);",
      "es": 0.95,
      "em": false,
      "passed": false
    },
    {
      "index": 169,
      "groundtruth": "withRegion(null != config.getAwsRegionName() ? config.getAwsRegionName() : Constants.DEFAULT_AWS_REGION_NAME)\n                .withClientConfiguration(configuration)\n                .build();",
      "prediction": "withEndpointOverride(config.getEndpoint())\n            .withClientConfiguration(configuration)\n            .build();",
      "raw_prediction": "withEndpointOverride(config.getEndpoint())\n            .withClientConfiguration(configuration)\n            .build();",
      "es": 0.5235602094240838,
      "em": false,
      "passed": false
    },
    {
      "index": 170,
      "groundtruth": "writer.closeQuietly();",
      "prediction": "writer.closeQuietly();",
      "raw_prediction": " writer.closeQuietly();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 171,
      "groundtruth": "(config.getMaxRetries());",
      "prediction": "s(config.getMaxRetries());",
      "raw_prediction": "s(config.getMaxRetries());",
      "es": 0.9615384615384616,
      "em": false,
      "passed": false
    },
    {
      "index": 172,
      "groundtruth": "!= config.getAwsRegionName() ? config.getAwsRegionName() : Constants.DEFAULT_AWS_REGION_NAME)\n                .withClientConfiguration(configuration)\n                .build();",
      "prediction": "+ config.getRegion())\n            .withClientConfiguration(configuration)\n            .build();",
      "raw_prediction": "+ config.getRegion())\n            .withClientConfiguration(configuration)\n            .build();",
      "es": 0.5371428571428571,
      "em": false,
      "passed": false
    },
    {
      "index": 173,
      "groundtruth": "\"chat\", token.chat().id())\n      .fetch()\n      .first()\n      .then();",
      "prediction": "\"chat\", token.chat())\n      .fetch()\n      .rowsUpdated();",
      "raw_prediction": "\"chat\", token.chat())\n      .fetch()\n      .rowsUpdated();\n  }\n\n  @Override\n  public Mono<Void> remove(final Token token) {\n    return this.db.sql(\n        \"DELETE FROM token WHERE token = :token",
      "es": 0.704225352112676,
      "em": false,
      "passed": false
    },
    {
      "index": 174,
      "groundtruth": "methodLog.setStartTime(startTime);",
      "prediction": "methodLog.setStartTime(startTime);",
      "raw_prediction": "methodLog.setStartTime(startTime);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 175,
      "groundtruth": "methodLog.setOperator(\"system\");",
      "prediction": "methodLog.setOperator(request.getRemoteAddr());",
      "raw_prediction": "methodLog.setOperator(request.getRemoteAddr());",
      "es": 0.5957446808510638,
      "em": false,
      "passed": false
    },
    {
      "index": 176,
      "groundtruth": ".bind(\"id\", chat.id())\n      .fetch()\n      .first()\n      .then();",
      "prediction": ".bind(\"id\", chat.id())\n      .fetch()\n      .rowsUpdated();",
      "raw_prediction": "\n      .bind(\"id\", chat.id())\n      .fetch()\n      .rowsUpdated();\n  }\n\n  @Override\n  public Mono<Chat> get(final String id) {\n    return this.db.sql(\n        \"SELECT * FROM",
      "es": 0.7611940298507462,
      "em": false,
      "passed": false
    },
    {
      "index": 177,
      "groundtruth": "methodLog.setMethodName(methodName);",
      "prediction": "methodLog.setEndTime(endTime);",
      "raw_prediction": "methodLog.setEndTime(endTime);\n        methodLog.setExceptionInfo(exceptionInfo);\n        methodLog.setExceptionInfo(exceptionInfo);\n        methodLog.setAllParams(args);\n        methodLog.setResult(returning);\n        methodLog.setIpAddress(ipAddress);\n",
      "es": 0.6388888888888888,
      "em": false,
      "passed": false
    },
    {
      "index": 178,
      "groundtruth": "methodLog.setAllParams(args);",
      "prediction": "methodLog.setArgs(args);",
      "raw_prediction": "methodLog.setArgs(args);\n        methodLog.setReturning(returning);",
      "es": 0.7931034482758621,
      "em": false,
      "passed": false
    },
    {
      "index": 179,
      "groundtruth": "methodLog.setCreateTime(startTime);",
      "prediction": "methodLog.setMethod(methods);",
      "raw_prediction": "methodLog.setMethod(methods);\n        methodLog.setModule(module);\n        if (StringUtils.isNotEmpty(url)) {\n            methodLog.setUrl(url);\n        } else {\n            methodLog.setUrl(request.getRequestURI());\n        }\n        String logOperator",
      "es": 0.5428571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 180,
      "groundtruth": "methodLog.setTimeConsuming(timeConsuming);",
      "prediction": "methodLog.setConsumingTime(intConsuming);",
      "raw_prediction": "methodLog.setConsumingTime(intConsuming);",
      "es": 0.7619047619047619,
      "em": false,
      "passed": false
    },
    {
      "index": 181,
      "groundtruth": "methodLog.setExceptionInfo(exceptionInfo);",
      "prediction": "methodLog.setExceptionInfo(exceptionInfo);",
      "raw_prediction": "methodLog.setExceptionInfo(exceptionInfo);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 182,
      "groundtruth": "methodLog.setIpAddress(ipAddress);",
      "prediction": "methodLog.setExceptionInfo(exceptionInfo);",
      "raw_prediction": "methodLog.setExceptionInfo(exceptionInfo);\n        methodLog.setCreateTime(startTime);\n        methodLog.setMethod(methods);\n        methodLog.setModule(module);\n        if (StringUtils.isNotEmpty(url)) {\n            methodLog.setUrl(url);\n        } else",
      "es": 0.4285714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 183,
      "groundtruth": "methodLog.setResult(returning);",
      "prediction": "methodLog.setReturning(returning);",
      "raw_prediction": "methodLog.setReturning(returning);",
      "es": 0.8235294117647058,
      "em": false,
      "passed": false
    },
    {
      "index": 184,
      "groundtruth": "methodLog.setDesc(finishedDesc);",
      "prediction": "methodLog.setFinishedDesc(finishedDesc);",
      "raw_prediction": "methodLog.setFinishedDesc(finishedDesc);",
      "es": 0.8,
      "em": false,
      "passed": false
    },
    {
      "index": 185,
      "groundtruth": "methodLog.setEndTime(endTime);",
      "prediction": "methodLog.setEndTime(endTime);",
      "raw_prediction": "methodLog.setEndTime(endTime);\n        methodLog.setUrl(url);\n        methodLog.setMethod(methods);\n        methodLog.setModule(module);\n        methodLog.setExceptionInfo(exceptionInfo);\n        methodLog.setCreateTime(startTime);\n        methodLog",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 186,
      "groundtruth": "movimentacaoRepository.findByVeiculoId(id).isEmpty()){",
      "prediction": "movimentacaoRepository.findBy",
      "raw_prediction": "movimentacaoRepository.findByCondutorId(id).isEmpty()){\n            this.movimentacaoRepository.deleteByCondutorId(id);\n        }\n\n        if(condutorBanco.getAtivo()){\n            condutorBanco.setAtivo(false);\n           ",
      "es": 0.537037037037037,
      "em": false,
      "passed": false
    },
    {
      "index": 187,
      "groundtruth": ".marcaRepository.findByNome(nome));",
      "prediction": ".marcaRepository.findByNome(nome));",
      "raw_prediction": ".marcaRepository.findByNome(nome));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 188,
      "groundtruth": "return ResponseEntity.ok(condutorRepository.findAllAtivo());",
      "prediction": "return ResponseEntity.ok(this.condutorRepository.findAllByAtivooTrue());",
      "raw_prediction": "    return ResponseEntity.ok(this.condutorRepository.findAllByAtivooTrue());",
      "es": 0.8333333333333334,
      "em": false,
      "passed": false
    },
    {
      "index": 189,
      "groundtruth": "marcaService.validarDeleteMarca(id);",
      "prediction": "this.marcaRepository.deleteById(id);",
      "raw_prediction": "    this.marcaRepository.deleteById(id);",
      "es": 0.33333333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 190,
      "groundtruth": "<Veiculo> veiculoList = veiculoRepository.findAllAtivo();",
      "prediction": "<Veiculo> veiculoList = this.veiculoRepository.findVeiculosAtivos();",
      "raw_prediction": "<Veiculo> veiculoList = this.veiculoRepository.findVeiculosAtivos();",
      "es": 0.8088235294117647,
      "em": false,
      "passed": false
    },
    {
      "index": 191,
      "groundtruth": "= this.veiculoRepository.findByPlaca(placa);",
      "prediction": "= veiculoRepository.findByPlaca(placa);",
      "raw_prediction": "= veiculoRepository.findByPlaca(placa);",
      "es": 0.8863636363636364,
      "em": false,
      "passed": false
    },
    {
      "index": 192,
      "groundtruth": "!this.movimentacaoRepository.findByVeiculoId(id).isEmpty()) {",
      "prediction": "veiculo.getAtivo()) {",
      "raw_prediction": "veiculo.getAtivo()) {",
      "es": 0.21311475409836067,
      "em": false,
      "passed": false
    },
    {
      "index": 193,
      "groundtruth": "Condutor condutor = this.condutorRepository.findbyCPF(cpf);",
      "prediction": "Condutor condutor = this.condutorRepository.findByCpf(cpf)",
      "raw_prediction": "Condutor condutor = this.condutorRepository.findByCpf(cpf)",
      "es": 0.9322033898305084,
      "em": false,
      "passed": false
    },
    {
      "index": 194,
      "groundtruth": "(!this.modeloRepository.findByMarcaId(id).isEmpty()){",
      "prediction": "(marca.getAtivo()){",
      "raw_prediction": "(marca.getAtivo()){",
      "es": 0.2075471698113207,
      "em": false,
      "passed": false
    },
    {
      "index": 195,
      "groundtruth": "veiculoService.validarDeleteVeiculo(id);",
      "prediction": "this.veiculoRepository.deleteById(id);",
      "raw_prediction": "this.veiculoRepository.deleteById(id);",
      "es": 0.35,
      "em": false,
      "passed": false
    },
    {
      "index": 196,
      "groundtruth": "modeloService.validarDeleteModelo(id);",
      "prediction": "if (veiculoRepository.existsByModeloId(id))",
      "raw_prediction": "if (veiculoRepository.existsByModeloId(id)) {\n                return ResponseEntity.badRequest().body(\"N\u00e3o \u00e9 poss\u00edvel apagar um modelo vinculado a um ve\u00edculo\");\n        }\n        modeloRepository.deleteById(id);",
      "es": 0.32558139534883723,
      "em": false,
      "passed": false
    },
    {
      "index": 197,
      "groundtruth": "condutor = this.condutorRepository.findByNome(nome);",
      "prediction": "condutor = this.condutorRepository.findbyNome(nome)",
      "raw_prediction": "condutor = this.condutorRepository.findbyNome(nome)",
      "es": 0.9615384615384616,
      "em": false,
      "passed": false
    },
    {
      "index": 198,
      "groundtruth": "= movimentacaoRepository.findLastFiveByOrderByEntryDateDesc();",
      "prediction": "= movimentacaoRepository.findLastFiveMovimentacoes();",
      "raw_prediction": "= movimentacaoRepository.findLastFiveMovimentacoes();",
      "es": 0.7419354838709677,
      "em": false,
      "passed": false
    },
    {
      "index": 199,
      "groundtruth": ".ok(movimentacaoRepository.ultimaMovimentacao());",
      "prediction": ".ok(movimentacaoRepository.findLastMovimentacao());",
      "raw_prediction": ".ok(movimentacaoRepository.findLastMovimentacao());",
      "es": 0.8627450980392157,
      "em": false,
      "passed": false
    },
    {
      "index": 200,
      "groundtruth": "ok(marcaRepository.findAllAtivo());",
      "prediction": "ok(this.marcaRepository.findByAtivo(true));",
      "raw_prediction": "ok(this.marcaRepository.findByAtivo(true));\n    }\n\n    /**\n     * Retrieves inactive Marcas.\n     *\n     * @return ResponseEntity with a list of inactive Marcas.\n     */\n    @GetMapping(\"/inativos\")\n    public ResponseEntity",
      "es": 0.7209302325581395,
      "em": false,
      "passed": false
    },
    {
      "index": 201,
      "groundtruth": "<Movimentacao> movimentacoes = movimentacaoRepository.findMovimentacoesAbertasByPlaca(placa);",
      "prediction": "<Movimentacao> movimentacoes = movimentacaoRepository.findByPlaca(placa);",
      "raw_prediction": "<Movimentacao> movimentacoes = movimentacaoRepository.findByPlaca(placa);\n            if (movimentacoes.isEmpty()) {\n                return ResponseEntity.badRequest().body(\"Placa n\u00e3o encontrada\");\n            }",
      "es": 0.7849462365591398,
      "em": false,
      "passed": false
    },
    {
      "index": 202,
      "groundtruth": ".ok(this.modeloRepository.findByNome(nome));",
      "prediction": ".ok(this.modeloService.findByNomeMarca(nome));",
      "raw_prediction": ".ok(this.modeloService.findByNomeMarca(nome));",
      "es": 0.7173913043478262,
      "em": false,
      "passed": false
    },
    {
      "index": 203,
      "groundtruth": "> modeloList = modeloRepository.findAllAtivo();",
      "prediction": "> modeloList = this.modeloRepository.findByAtivo(true);",
      "raw_prediction": "> modeloList = this.modeloRepository.findByAtivo(true);\n        if (modeloList == null || modeloList.isEmpty()) {\n            return ResponseEntity.badRequest().body(\"N\u00e3o h\u00e1 nenhum modelo ativo\");\n        } else {\n            return ResponseEntity",
      "es": 0.7818181818181819,
      "em": false,
      "passed": false
    },
    {
      "index": 204,
      "groundtruth": ".ok(configuracaoRepository.ultimaConfiguracao());",
      "prediction": ".ok(configuracaoRepository.findLast());",
      "raw_prediction": ".ok(configuracaoRepository.findLast());",
      "es": 0.6938775510204082,
      "em": false,
      "passed": false
    },
    {
      "index": 205,
      "groundtruth": "Movimentacao> movimentacoes = movimentacaoRepository.findAllAbertas();",
      "prediction": "Movimentacao> movimentacoes = movimentacaoRepository.findAllAbertas();",
      "raw_prediction": "Movimentacao> movimentacoes = movimentacaoRepository.findAllAbertas();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 206,
      "groundtruth": "if (!this.modeloRepository.findByMarcaId(id).isEmpty()) {",
      "prediction": "if (modelo.getAtivo()) {",
      "raw_prediction": "    if (modelo.getAtivo()) {",
      "es": 0.29824561403508776,
      "em": false,
      "passed": false
    },
    {
      "index": 207,
      "groundtruth": "= marcaRepository.findActiveElement(marcaId);",
      "prediction": "= this.marcaRepository.findByAtivo(true);",
      "raw_prediction": "= this.marcaRepository.findByAtivo(true);\n        Assert.isTrue(!isActive.isEmpty(), \"The brand associated with this model is inactive.\");\n    }\n\n    /**\n     * Validates if the marca associated with the modelo is active.\n     *\n     *",
      "es": 0.5111111111111111,
      "em": false,
      "passed": false
    },
    {
      "index": 208,
      "groundtruth": "movimentacaoService.validarDeleteMovimentacao(id);",
      "prediction": "movimentacaoService.excluirMovimentacao(id);",
      "raw_prediction": "movimentacaoService.excluirMovimentacao(id);",
      "es": 0.76,
      "em": false,
      "passed": false
    },
    {
      "index": 209,
      "groundtruth": "<Boolean>newResult().data(dao.deleteComposition(composerId, title)).build();",
      "prediction": "newResult().data(true).build();",
      "raw_prediction": "newResult().data(true).build();",
      "es": 0.39473684210526316,
      "em": false,
      "passed": false
    },
    {
      "index": 210,
      "groundtruth": "(dao.allComposers()).detect(c -> id == c.id());",
      "prediction": "(dao.findComposerById(id)).first();",
      "raw_prediction": "(dao.findComposerById(id)).first();\n    }\n\n    @QueryMapping\n    public List<Composer> composers()\n    {\n        return Lists.adapt(dao.allComposers());",
      "es": 0.4042553191489362,
      "em": false,
      "passed": false
    },
    {
      "index": 211,
      "groundtruth": "(Lists.adapt(dao.allComposers()));",
      "prediction": "(ListAdapter.adapt(dao.allComposers()));",
      "raw_prediction": "(ListAdapter.adapt(dao.allComposers()));",
      "es": 0.825,
      "em": false,
      "passed": false
    },
    {
      "index": 212,
      "groundtruth": "symbolNum = lsbBitReader.readBit() + 1;",
      "prediction": "symbolNum = (int) (lsbBitReader.readBits(2 + 2 * lsbBitReader.readBits(3);",
      "raw_prediction": "symbolNum = (int) (lsbBitReader.readBits(2 + 2 * lsbBitReader.readBits(3);\n            short symbol1 = (short) lsbBitReader.readBits(8);\n",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 213,
      "groundtruth": "int) (2 + 2 * lsbBitReader.readBits(3));",
      "prediction": "int) (lsbBitReader.readBits(4) + 4);",
      "raw_prediction": "int) (lsbBitReader.readBits(4) + 4);\n",
      "es": 0.675,
      "em": false,
      "passed": false
    },
    {
      "index": 214,
      "groundtruth": "short len = (short) lsbBitReader.readBits(3);",
      "prediction": "short len = (short) lsbBitReader.readBits(3);",
      "raw_prediction": "short len = (short) lsbBitReader.readBits(3);\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 215,
      "groundtruth": "lsbBitReader.readBits(length);",
      "prediction": "lsbBitReader.readBits(length);",
      "raw_prediction": "lsbBitReader.readBits(length);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 216,
      "groundtruth": "int) (lsbBitReader.readBits(4) + 4);",
      "prediction": "int) (lsbBitReader.readBits(5);",
      "raw_prediction": "int) (lsbBitReader.readBits(5);",
      "es": 0.8333333333333334,
      "em": false,
      "passed": false
    },
    {
      "index": 217,
      "groundtruth": "lsbBitReader.readBits(LEVEL1_BITS);",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 218,
      "groundtruth": "short symbol2 = (short) lsbBitReader.readBits(8);",
      "prediction": "short symbol2 = (short) ls",
      "raw_prediction": "short symbol2 = (short) lsbBitReader.readBits(first8Bits ? 8 : 1",
      "es": 0.5306122448979591,
      "em": false,
      "passed": false
    },
    {
      "index": 219,
      "groundtruth": "(int) (lsbBitReader.readBits(extraBits) + repeatOffset);",
      "prediction": "1 << lsbBitReader.readBits(extraBits;",
      "raw_prediction": "1 << lsbBitReader.readBits(extraBits;\n\n            if (repeatOffset > 0) {\n                repeatCount += lsbBitReader.readBits(repeatpeatOffset);\n            }",
      "es": 0.5892857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 220,
      "groundtruth": "simpleLengthCode = lsbBitReader.readBit() == 1;",
      "prediction": "simpleLengthCode = lsbBitReader.readBit() == 0;",
      "raw_prediction": "simpleLengthCode = lsbBitReader.readBit() == 0;",
      "es": 0.9787234042553191,
      "em": false,
      "passed": false
    },
    {
      "index": 221,
      "groundtruth": "level2Index = (int) lsbBitReader.peekBits(length - LEVEL1_BITS);",
      "prediction": "level2Index = lengthAndSymbol & 0xffff;",
      "raw_prediction": "level2Index = lengthAndSymbol & 0xffff;\n\n   ",
      "es": 0.328125,
      "em": false,
      "passed": false
    },
    {
      "index": 222,
      "groundtruth": "short symbol1 = (short) lsbBitReader.readBits(first8Bits ? 8 : 1);",
      "prediction": "if (first8Bits) {",
      "raw_prediction": "if (first8Bits) {\n        short symbol1 = (short) lsbBitReader.readBits(8\n        short symbol2 = (short) lsbBitReader.readBits(8\n        for (int i = ",
      "es": 0.19696969696969702,
      "em": false,
      "passed": false
    },
    {
      "index": 223,
      "groundtruth": ") lsbBitReader.peekBits(LEVEL1_BITS);",
      "prediction": ") lsbBitReader.peekBits(LEVEL1_BITS);",
      "raw_prediction": ") lsbBitReader.peekBits(LEVEL1_BITS);\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 224,
      "groundtruth": "data.getDataElements(x >> bits, y >> bits, rgba);",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 225,
      "groundtruth": "int) (2 + lsbBitReader.readBits(maxSymbolBitLength));",
      "prediction": "int) (2 + 2 * lsbBitReader.readBits(3);",
      "raw_prediction": "int) (2 + 2 * lsbBitReader.readBits(3);",
      "es": 0.5660377358490566,
      "em": false,
      "passed": false
    },
    {
      "index": 226,
      "groundtruth": "ReplayManager.getInstance().despawnPlayerClone(this);",
      "prediction": "ReplayManager.getInstance().removePlayerClone(this);",
      "raw_prediction": " ReplayManager.getInstance().removePlayerClone(this);\n            this.setGamemode(GameMode.values()[this.lastGamemode]);",
      "es": 0.8867924528301887,
      "em": false,
      "passed": false
    },
    {
      "index": 227,
      "groundtruth": "raster.setDataElements(x, 0, rgba);",
      "prediction": "raster.setDataElements(x, 0, rgba);",
      "raw_prediction": "    raster.setDataElements(x, 0, rgba);\n            }",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 228,
      "groundtruth": "Live.getInstance().requestLiveToken(\n                (deviceCode, userCode, verificationUrl, expiresIn, interval) -> {",
      "prediction": "Live.startAuth((verificationUrl, userCode) -> {",
      "raw_prediction": " Live.startAuth((verificationUrl, userCode) -> {",
      "es": 0.3220338983050848,
      "em": false,
      "passed": false
    },
    {
      "index": 229,
      "groundtruth": "String data = FileManager.getFileResourceAsString(\"bedrock-data/required_item_list.json\");",
      "prediction": "String data = FileManager.getFileResourceAsString(\"bedrock-data/item_entries.json\");",
      "raw_prediction": "    String data = FileManager.getFileResourceAsString(\"bedrock-data/item_entries.json\");",
      "es": 0.8555555555555556,
      "em": false,
      "passed": false
    },
    {
      "index": 230,
      "groundtruth": "raster.getDataElements(0, 0, rgba);",
      "prediction": "raster.getDataElements(0, 0, rgba);",
      "raw_prediction": "raster.getDataElements(0, 0, rgba);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 231,
      "groundtruth": "raster.setDataElements(0, 0, rgba);",
      "prediction": "raster.setDataElements(0, 0, rgba);",
      "raw_prediction": "    raster.setDataElements(0, 0, rgba);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 232,
      "groundtruth": "ReplayManager.getInstance().spawnPlayerClone(this);",
      "prediction": "} else {",
      "raw_prediction": "} else {\n            this.setGamemode(GameMode.values()[this.lastGamemode]);\n        }\n    }\n\n    public void spawnPlayerClone() {\n        if (!this.isFreeCamera()) {\n            ReplayManager.getInstance().spawnPlayerClone(this);",
      "es": 0.05882352941176472,
      "em": false,
      "passed": false
    },
    {
      "index": 233,
      "groundtruth": "OutputWindow.print(\"Proxy server Listening on \" + bindAddress);",
      "prediction": "OutputWindow.print(\"Bedrock data loaded!\");",
      "raw_prediction": " OutputWindow.print(\"Bedrock data loaded!\");",
      "es": 0.4444444444444444,
      "em": false,
      "passed": false
    },
    {
      "index": 234,
      "groundtruth": "proxyServer.start();",
      "prediction": "proxyServer.start();",
      "raw_prediction": "  proxyServer.start();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 235,
      "groundtruth": "OutputWindow.print(\"Successfully loaded your account!\");",
      "prediction": "JSONObject json = JSONObject.p",
      "raw_prediction": "    JSONObject json = JSONObject.parseObject(AccountManager.decrypt(FileManager.getFileContents(\".account\")));\n                String accessToken = json.getString(\"access_token\");\n                String refreshToken = json.getString(\"refresh_token\");\n                AccountManager.setAccessToken(accessToken);\n                AccountManager",
      "es": 0.0892857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 236,
      "groundtruth": "OutputWindow.print(\"Done (took \" + (System.currentTimeMillis() / 1000L - startTime) + \"s)!\");",
      "prediction": "OutputWindow.print(\"Successfully started BedrockReplay!\");",
      "raw_prediction": "OutputWindow.print(\"Successfully started BedrockReplay!\");",
      "es": 0.3548387096774194,
      "em": false,
      "passed": false
    },
    {
      "index": 237,
      "groundtruth": "raster.getSample(xC, y, 1);",
      "prediction": "raster.getSample(x, y);",
      "raw_prediction": "raster.getSample(x, y);",
      "es": 0.8518518518518519,
      "em": false,
      "passed": false
    },
    {
      "index": 238,
      "groundtruth": "callback.onComplete(accessToken, refreshToken);",
      "prediction": "callback.onComplete(accessToken, refreshToken);",
      "raw_prediction": "callback.onComplete(accessToken, refreshToken);\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 239,
      "groundtruth": "raster.getDataElements(x, 0, rgba);",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 240,
      "groundtruth": "raster.getDataElements(x - 1, 0, predictor);",
      "prediction": "raster.getDataElements(x - 1, 0, predictor);",
      "raw_prediction": "raster.getDataElements(x - 1, 0, predictor);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 241,
      "groundtruth": "FileManager.getFileContents(connection.getInputStream());",
      "prediction": "FileManager.getFileContents(connection.getInputStream());",
      "raw_prediction": "FileManager.getFileContents(connection.getInputStream());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 242,
      "groundtruth": "OutputWindow.print(\"Failed to load your account, please authenticate with your Microsoft account again.\");",
      "prediction": "}",
      "raw_prediction": "}\n            }",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 243,
      "groundtruth": "Utils.toByteArray(currentTime));",
      "prediction": "Utils.toByteArray(currentTime));",
      "raw_prediction": "Utils.toByteArray(currentTime));\n        byte[] nonce = JoseUtils.generateNonce();\n        byte[] nonceBytes = new byte[nonce.length + 1];\n        nonceBytes[0] = 0;\n        System.arraycopy(nonce, 0",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 244,
      "groundtruth": "OutputWindow.print(\"First time running BedrockReplay, please authenticate with your Microsoft account first.\");",
      "prediction": "OutputWindow.print(\"No account found, please authenticate with your Microsoft account.\");",
      "raw_prediction": " OutputWindow.print(\"No account found, please authenticate with your Microsoft account.\");",
      "es": 0.7027027027027026,
      "em": false,
      "passed": false
    },
    {
      "index": 245,
      "groundtruth": "return FileManager.getFileContents(connection.getInputStream());",
      "prediction": "String response = FileManager.getFileContents(connection.getInputStream());",
      "raw_prediction": "String response = FileManager.getFileContents(connection.getInputStream());\n        JSONObject responseJsonObject = JSONObject.parseObject(response;\n\n        return responseJsonObject.getJSONObject(\"access_token\").toString();",
      "es": 0.8133333333333334,
      "em": false,
      "passed": false
    },
    {
      "index": 246,
      "groundtruth": "callback.onFailure(\"Failed to save replay: \" + e.getMessage());",
      "prediction": "callback.onFailure(\"Failed to save replay: \" + e.getMessage());",
      "raw_prediction": " callback.onFailure(\"Failed to save replay: \" + e.getMessage());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 247,
      "groundtruth": "int transformType = data.getSample(x >> bits, y >> bits, 1);",
      "prediction": "int transformType = getPredictorType(x, y);",
      "raw_prediction": "    int transformType = getPredictorType(x, y);\n",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 248,
      "groundtruth": "= xbox.getDeviceToken((ECPublicKey) this.keyPair.getPublic(), (ECPrivateKey) this.keyPair.getPrivate());",
      "prediction": "= xbox.getDeviceToken();",
      "raw_prediction": "= xbox.getDeviceToken();\n        String deviceName = xbox.getDeviceName();\n        JSONObject skinData = new JSONObject();\n        skinData.put(\"deviceName\", deviceName);\n        skinData.put(\"deviceToken\", deviceToken);\n        login",
      "es": 0.23076923076923073,
      "em": false,
      "passed": false
    },
    {
      "index": 249,
      "groundtruth": "xbox.requestMinecraftChain(xsts, (ECPublicKey) this.keyPair.getPublic());",
      "prediction": "EncryptionUtils.createChainData(this.keyPair, deviceToken, xsts, this.accessToken);",
      "raw_prediction": "EncryptionUtils.createChainData(this.keyPair, deviceToken, xsts, this.accessToken);\n        JSONObject chainDataObject = JSONObject.parseObject(chainData);\n        JSONArray minecraftNetChain = chainDataObject.getJSONArray(\"chain\");\n        String firstChainHeader",
      "es": 0.2168674698795181,
      "em": false,
      "passed": false
    },
    {
      "index": 250,
      "groundtruth": "CODEC_HELPER.setBlockDefinitions(FakeDefinitionRegistry.createBlockRegistry());",
      "prediction": "ReplayViewerServer.instance = this;",
      "raw_prediction": "    ReplayViewerServer.instance = this;",
      "es": 0.17721518987341767,
      "em": false,
      "passed": false
    },
    {
      "index": 251,
      "groundtruth": "xbox.getXBLToken((ECPublicKey) this.keyPair.getPublic(), (ECPrivateKey) this.keyPair.getPrivate(), deviceToken);",
      "prediction": "xbox.getXSTS(deviceToken);",
      "raw_prediction": "xbox.getXSTS(deviceToken);",
      "es": 0.2142857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 252,
      "groundtruth": "raster.getDataElements(trX, trY, predictor2);",
      "prediction": "raster.getDataElements(trX, trY, predictor2);",
      "raw_prediction": "raster.getDataElements(trX, trY, predictor2);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 253,
      "groundtruth": "raster.getDataElements(trX, trY, predictor3);",
      "prediction": "average2(predictor, predictor2",
      "raw_prediction": "average2(predictor, predictor2\n\n                        addPixels(rgba, predictor);\n                        break;\n                    case PREDICTOR_CLAMP_ADD_SUB_FULL:\n                        raster.getDataElements(lX, y, predictor);\n                        raster.getDataElements(x, t",
      "es": 0.4222222222222223,
      "em": false,
      "passed": false
    },
    {
      "index": 254,
      "groundtruth": "raster.getDataElements(lX, y, predictor);",
      "prediction": "aster.getDataElements(lX, y, predictor);",
      "raw_prediction": "aster.getDataElements(lX, y, predictor);\n",
      "es": 0.975609756097561,
      "em": false,
      "passed": false
    },
    {
      "index": 255,
      "groundtruth": "raster.getDataElements(x, tY, predictor2);",
      "prediction": "addPixels(rgba, predictor);",
      "raw_prediction": "addPixels(rgba, predictor);\n\n",
      "es": 0.4285714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 256,
      "groundtruth": "raster.getDataElements(lX, tY, predictor3);",
      "prediction": "raster.getDataElements(lX, tY, predictor3);",
      "raw_prediction": " raster.getDataElements(lX, tY, predictor3);\n                        select(predictor, predictor2, predictor3);\n                        break;\n                    case PREDICTOR_CLAMP_ADD_SUB_FULL:\n public raster.getDataElements(lX, y, predictor);\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 257,
      "groundtruth": "lsbBitInputStream.readBits(14);",
      "prediction": "lsbBitInputStream.readBits(14);",
      "raw_prediction": "lsbBitInputStream.readBits(14);\n        lsbBitInputStream.readBit();\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 258,
      "groundtruth": "colorCacheBits = (int) lsbBitReader.readBits(4);",
      "prediction": "colorCacheBits = (int) lsbBitInputStream.readBits(3) + 2;",
      "raw_prediction": " colorCacheBits = (int) lsbBitInputStream.readBits(3) + 2;",
      "es": 0.736842105263158,
      "em": false,
      "passed": false
    },
    {
      "index": 259,
      "groundtruth": "lsbBitInputStream.readBit();",
      "prediction": "if (lsbBitInputStream.readBit() == 1)",
      "raw_prediction": "if (lsbBitInputStream.readBit() == 1) {\n            throw new IOException(\"Invalid Version.\");\n        }",
      "es": 0.7297297297297297,
      "em": false,
      "passed": false
    },
    {
      "index": 260,
      "groundtruth": "(int) lsbBitInputStream.readBits(3) != 0) {",
      "prediction": "lsbBitInputStream.readB",
      "raw_prediction": "lsbBitInputStream.readBit() == 1) {",
      "es": 0.5348837209302326,
      "em": false,
      "passed": false
    },
    {
      "index": 261,
      "groundtruth": "+ (int) lsbBitReader.readBits(extraBits) + 1;",
      "prediction": "+ lsbBitReader.readBits(extraBits);",
      "raw_prediction": "+ lsbBitReader.readBits(extraBits);\n        }\n    }\n\n    private int lz77decode(int prefixCode) throws IOException {\n        // According to specification\n        if (prefixCode < 4) {\n            return prefixCode",
      "es": 0.7777777777777778,
      "em": false,
      "passed": false
    },
    {
      "index": 262,
      "groundtruth": "int transformType = (int) lsbBitReader.readBits(2);",
      "prediction": "int transformType = lsbBitReader.readBits() << 1 | lsbBitReader.readBit();",
      "raw_prediction": " int transformType = lsbBitReader.readBits() << 1 | lsbBitReader.readBit();\n\n        if (transformType == 0) {\n            return xSize;\n        }",
      "es": 0.6081081081081081,
      "em": false,
      "passed": false
    },
    {
      "index": 263,
      "groundtruth": "decodeRaster = RGBABuffer.createRelativeImage(raster, 0, 0, xSize, height);",
      "prediction": "// We need to create a raster with the correct size and origin",
      "raw_prediction": " // We need to create a raster with the correct size and origin\n            decodeRaster = RGBABuffer.createAbsoluteImage(xSize, height",
      "es": 0.19999999999999996,
      "em": false,
      "passed": false
    },
    {
      "index": 264,
      "groundtruth": "&& lsbBitReader.readBit() == 1) {",
      "prediction": "&& lsbBitReader.re",
      "raw_prediction": "&& lsbBitReader.readBit() == 1) {",
      "es": 0.5454545454545454,
      "em": false,
      "passed": false
    },
    {
      "index": 265,
      "groundtruth": "RGBABuffer outputBuffer = RGBABuffer.createAbsoluteImage(width, height);",
      "prediction": "// Read transforms",
      "raw_prediction": "// Read transforms\n        int xSize = 1 + (int) lsbBitInputStream.readBits();\n        int ySize = 1 + (int) lsbBitInputStream.readBit();\n\n        int transformType = (int)",
      "es": 0.09722222222222221,
      "em": false,
      "passed": false
    },
    {
      "index": 266,
      "groundtruth": "byte) (lsbBitReader.readBits(3) + 2);",
      "prediction": "byte) (xSize > 16 ? 0 :",
      "raw_prediction": "byte) (xSize > 16 ? 0 :\n            xSize > 4 ? 1 :\n                        xSize > 2 ? 2 : 3);",
      "es": 0.29729729729729726,
      "em": false,
      "passed": false
    },
    {
      "index": 267,
      "groundtruth": "colorTableSize = ((int) lsbBitReader.readBits(8)) + 1;",
      "prediction": "colorTableSize = (int) lsbBitReader.readBits(8) +",
      "raw_prediction": "colorTableSize = (int) lsbBitReader.readBits(8) +",
      "es": 0.9074074074074074,
      "em": false,
      "passed": false
    },
    {
      "index": 268,
      "groundtruth": "(int) lsbBitReader.readBits(3) + 2;",
      "prediction": "(int) lsbBitReader.readBits(3);",
      "raw_prediction": "(int) lsbBitReader.readBits(3);\n\n            if (metaCodeBits > 0) {\n            huffmanXSize = subSampleSize(xSize, metaCodeBits);\n",
      "es": 0.8857142857142857,
      "em": false,
      "passed": false
    },
    {
      "index": 269,
      "groundtruth": "configVariables.setClientID(System.getenv(\"BOT_CLIENT_ID\"));",
      "prediction": "configVariables.setClientID(System.getenv(\"BOT_CLIENT_ID\"));",
      "raw_prediction": "configVariables.setClientID(System.getenv(\"BOT_CLIENT_ID\"));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 270,
      "groundtruth": "configVariables.setUser(System.getenv(\"BOT_USER\"));",
      "prediction": "configVariables.setUser(System.getenv(\"BOT_USER\"));",
      "raw_prediction": "configVariables.setUser(System.getenv(\"BOT_USER\"));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 271,
      "groundtruth": "RGBABuffer.createAbsoluteImage(blockWidth, blockHeight);",
      "prediction": "RGBABuffer.createRelativeImage",
      "raw_prediction": " RGBABuffer.createRelativeImage(raster, xSrc, ySrc, blockWidth, blockHeight",
      "es": 0.4107142857142857,
      "em": false,
      "passed": false
    },
    {
      "index": 272,
      "groundtruth": "RGBABuffer colorTableRGBABuffer = RGBABuffer.createAbsoluteImage(colorTableSize, 1);",
      "prediction": "RGBABuffer colorTableRGBABuffer = RGBABuffer",
      "raw_prediction": "RGBABuffer colorTableRGBABuffer = RGBABuffer.createAbsoluteImage(colorTableSize, 1;\n",
      "es": 0.5238095238095238,
      "em": false,
      "passed": false
    },
    {
      "index": 273,
      "groundtruth": "raster.getDataElements(x1, ySrc, rgba);",
      "prediction": "if (ySrc < 0 ySrc < ySize)",
      "raw_prediction": " if (ySrc < 0 ySrc < ySize) {\nif (xSrc < 0 xSrc < xSize) {\nif (xSrc >= 0 && ySrc >= 0) {\nif (xSrc <",
      "es": 0.1282051282051282,
      "em": false,
      "passed": false
    },
    {
      "index": 274,
      "groundtruth": "topLevel && lsbBitReader.readBit() == 1) {",
      "prediction": "lsbBitReader.readBit()",
      "raw_prediction": "lsbBitReader.readBit() == 1) {",
      "es": 0.5238095238095238,
      "em": false,
      "passed": false
    },
    {
      "index": 275,
      "groundtruth": "colorTableRGBABuffer.getDataElements(x, 0, colorTableRGBACopyBuffer);",
      "prediction": "raster.getDataElements(x, 0, colorTableRGBACopyBuffer);",
      "raw_prediction": "\n            raster.getDataElements(x, 0, colorTableRGBACopyBuffer);\n",
      "es": 0.7681159420289855,
      "em": false,
      "passed": false
    },
    {
      "index": 276,
      "groundtruth": "int argb = colorCache.lookup(code - 256 - 24);",
      "prediction": "int argb = colorCache.getSample(x, y);",
      "raw_prediction": " int argb = colorCache.getSample(x, y);\n        if (argb == 0 {\n            throw new IOException(\"Invalid colorCache value: \" + argb);\n        }",
      "es": 0.5652173913043479,
      "em": false,
      "passed": false
    },
    {
      "index": 277,
      "groundtruth": "userID = twitchAPI.getUserID(user).orElse(\"\");",
      "prediction": "isJoined = false;",
      "raw_prediction": "isJoined = false;",
      "es": 0.15217391304347827,
      "em": false,
      "passed": false
    },
    {
      "index": 278,
      "groundtruth": "= botsAPI.getOnlineBots();",
      "prediction": "= botsAPI.getOnlineBots();",
      "raw_prediction": "= botsAPI.getOnlineBots();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 279,
      "groundtruth": "twitchAPI.getUserID(userName.trim());",
      "prediction": "twitchAPI.getUserID(userName.trim());",
      "raw_prediction": "twitchAPI.getUserID(userName.trim());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 280,
      "groundtruth": "broadcasterID = twitchAPI.getUserID(channel.trim());",
      "prediction": "broadcasterid = twitchAPI.getBroadcasterID(channel);",
      "raw_prediction": "broadcasterid = twitchAPI.getBroadcasterID(channel);",
      "es": 0.6730769230769231,
      "em": false,
      "passed": false
    },
    {
      "index": 281,
      "groundtruth": "Generator().generate(schemaVersion, scanPackages, outputDir, skipValidation);",
      "prediction": "TemplateGenerator(project, schemaVersion, outputDir, scanPackages, skipValidation).execute();",
      "raw_prediction": "TemplateGenerator(project, schemaVersion, outputDir, scanPackages, skipValidation).execute();",
      "es": 0.4731182795698925,
      "em": false,
      "passed": false
    },
    {
      "index": 282,
      "groundtruth": "template.setTemplateName(templateName);",
      "prediction": "template.setName(templateName);",
      "raw_prediction": "template.setName(templateName);",
      "es": 0.7948717948717949,
      "em": false,
      "passed": false
    },
    {
      "index": 283,
      "groundtruth": "template.setAppliesTo((String[]) methodParameters.get(APPLIES_TO));",
      "prediction": "String appliesTo = String.valueOf(methodParameters.get(APPLies_to));",
      "raw_prediction": "String appliesTo = String.valueOf(methodParameters.get(APPLies_to));\n    if (!applyTo.isBlank()) {\n      template.setApplyTo(applyTo);\n    }",
      "es": 0.5735294117647058,
      "em": false,
      "passed": false
    },
    {
      "index": 284,
      "groundtruth": "template.setEntriesVisible(((Boolean) (methodParameters.get(ENTRIES_VISIBLE))).booleanValue());",
      "prediction": "String templateName = String.valueOf(methodParameters.get(NAME));",
      "raw_prediction": "String templateName = String.valueOf(methodParameters.get(NAME));\n    if (!templateName.isBlank()) {\n      template.setTemplateName(templateName);\n    }",
      "es": 0.33684210526315794,
      "em": false,
      "passed": false
    },
    {
      "index": 285,
      "groundtruth": "treeMapPane = TreeMapPane.forTreeContent();",
      "prediction": "treeMapPane = new TreeMapPane<>();",
      "raw_prediction": "treeMapPane = new TreeMapPane<>();",
      "es": 0.5581395348837209,
      "em": false,
      "passed": false
    },
    {
      "index": 286,
      "groundtruth": "(exemption != null && exemption.isExemptionActive()) {",
      "prediction": "(exemption != null && exemption.isExempted())",
      "raw_prediction": "(exemption != null && exemption.isExempted()) {",
      "es": 0.7962962962962963,
      "em": false,
      "passed": false
    },
    {
      "index": 287,
      "groundtruth": "final ThreadInfo threadInfo = ThreadInfo.fromThread(thread);",
      "prediction": "final ThreadInfo threadInfo = threadAccessor.getThreadInfo(thread);",
      "raw_prediction": "final ThreadInfo threadInfo = threadAccessor.getThreadInfo(thread);\n                if (threadInfo == null) {\n                return;\n                }",
      "es": 0.7611940298507462,
      "em": false,
      "passed": false
    },
    {
      "index": 288,
      "groundtruth": "(\"  executePrice=\" + DoubleUtils.toDouble(executePrice));",
      "prediction": "(\"  executePrice=\" + DoubleUtils.toDouble(executePrice));",
      "raw_prediction": "(\"  executePrice=\" + DoubleUtils.toDouble(executePrice));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 289,
      "groundtruth": "cancel(ts.nanoEpoch());",
      "prediction": "cancel(ts.nanoEpoch());",
      "raw_prediction": "cancel(ts.nanoEpoch());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 290,
      "groundtruth": "ts = book.getTimestamper();",
      "prediction": "ts = Timestamper.now();",
      "raw_prediction": "ts = Timestamper.now();\n\t\t\t\n\t\t\t\t// Create a bunch of orders:",
      "es": 0.5555555555555556,
      "em": false,
      "passed": false
    },
    {
      "index": 291,
      "groundtruth": "messages = body.getMessages();",
      "prediction": "messages = body.getMessages();",
      "raw_prediction": "messages = body.getMessages();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 292,
      "groundtruth": ".cancel(orderBook.getTimestamper().nanoEpoch());",
      "prediction": "Book.cancel(order, \"USER\");",
      "raw_prediction": "Book.cancel(order, \"USER\");",
      "es": 0.25,
      "em": false,
      "passed": false
    },
    {
      "index": 293,
      "groundtruth": "ts.nanoEpoch(), 100);",
      "prediction": "ts.nanoEpoch(), 100);",
      "raw_prediction": "ts.nanoEpoch(), 100);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 294,
      "groundtruth": "if (!book.isEmpty()) throw new IllegalStateException(\"Book must be empty here!\");",
      "prediction": "if (createGarbage) {",
      "raw_prediction": "if (createGarbage) {\n\t\t\t// create some garbage for the garbage collector\n\t\t\tsb.setLength(0);\n    sb.append(\"someGarbage\"); // appending a CharSequence does not produce garbage\n    for(int x = ",
      "es": 0.14814814814814814,
      "em": false,
      "passed": false
    },
    {
      "index": 295,
      "groundtruth": "(orderBook.getTimestamper().nanoEpoch(), 100);",
      "prediction": "orderBook.createLimit(String.valueOf(++orderId), orderId, Side.BUY, 100, 149.44, TimeInForce",
      "raw_prediction": "\n\t\torderBook.createLimit(String.valueOf(++orderId), orderId, Side.BUY, 100, 149.44, TimeInForce.DAY);",
      "es": 0.25,
      "em": false,
      "passed": false
    },
    {
      "index": 296,
      "groundtruth": "orderBook.showOrders();",
      "prediction": "orderBook.showOrders();",
      "raw_prediction": "orderBook.showOrders();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 297,
      "groundtruth": "(listeners, client.isRetryOnReadTimeout(), (response) -> {",
      "prediction": "(listener, retryOnReadTimeout, onRetry));",
      "raw_prediction": "(listener, retryOnReadTimeout, onRetry));\n  }\n\n  protected CompletionEventSourceListener getEventListener(\n      CompletionEventListener listener,\n      boolean retryOnReadTimeout,\n      Consumer<String> onRetry) {\n    return new CompletionEventSourceListener",
      "es": 0.5689655172413793,
      "em": false,
      "passed": false
    },
    {
      "index": 298,
      "groundtruth": "+= order.getOpenSize();",
      "prediction": "+= order.getOpenSize();",
      "raw_prediction": "+= order.getOpenSize();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 299,
      "groundtruth": "orderBookLogger.off();",
      "prediction": "orderBook.cre",
      "raw_prediction": "\n\t\torderBook.createLimit(String.valueOf(++orderId), orderId, Side.SELL, 100, 153.24, TimeInForce.GTC);\n\t\torderBook.createLimit(String.valueOf(++orderId), orderId,",
      "es": 0.4545454545454546,
      "em": false,
      "passed": false
    },
    {
      "index": 300,
      "groundtruth": "listeners.onComplete(messageBuilder);",
      "prediction": "listeners.onComplete(messageBuilder);",
      "raw_prediction": " listeners.onComplete(messageBuilder);\n        return;\n    }\n\n    if (throwable instanceof IOException) {\n      listeners.onComplete(messageBuilder)\n      return;\n    }\n\n    if (throwable instanceof JsonProcessingException) {\n      listeners.onError(new Error",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 301,
      "groundtruth": "proxyAuthenticator.getUsername(),\n                      proxyAuthenticator.getPassword()))\n                  .build());",
      "prediction": "proxyAuthenticator.getUsername(),\n             proxyAuthenticator.getPassword()\n             )\n           )\n             .build()\n          .build()\n          .build()",
      "raw_prediction": "proxyAuthenticator.getUsername(),\n             proxyAuthenticator.getPassword()\n             )\n           )\n             .build()\n          .build()\n          .build()\n          .build()\n          .build()\n          .build()\n          .build()\n          .build()\n         ",
      "es": 0.592814371257485,
      "em": false,
      "passed": false
    },
    {
      "index": 302,
      "groundtruth": "createFactory(client.getHttpClient())\n        .newEventSource(\n            request,\n            getEventListener(listeners, client.isRetryOnReadTimeout(), (response) -> {",
      "prediction": "create(request, getEventListener(listener, requestBody.isStream(), e -> {",
      "raw_prediction": "create(request, getEventListener(listener, requestBody.isStream(), e -> {",
      "es": 0.3411764705882353,
      "em": false,
      "passed": false
    },
    {
      "index": 303,
      "groundtruth": "!= null && mDiracSound.getMusic() == 1;",
      "prediction": "!= null && mDiracSound.isEnabled();",
      "raw_prediction": "!= null && mDiracSound.isEnabled();",
      "es": 0.641025641025641,
      "em": false,
      "passed": false
    },
    {
      "index": 304,
      "groundtruth": "orderBook.showLevels();",
      "prediction": "orderBook.showLevels();",
      "raw_prediction": "\torderBook.showLevels();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 305,
      "groundtruth": "DoubleUtils.toDouble(price);",
      "prediction": "",
      "raw_prediction": "\n",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 306,
      "groundtruth": "orderBookLogger.on();",
      "prediction": "// now hit the sell side of the book with",
      "raw_prediction": "// now hit the sell side of the book with a LIMIT IOC and notice your price improvement\n\t\t\n\t\torderBook.createLimit(String.valueOf(++orderId), orderId, Side.SELL, 300, 153.24,",
      "es": 0.12195121951219512,
      "em": false,
      "passed": false
    },
    {
      "index": 307,
      "groundtruth": "= client.getHttpClient().newCall(buildRequest(requestBody)).execute()) {",
      "prediction": "= client.getHttpClient().newCall(buildRequest(requestBody))",
      "raw_prediction": "= client.getHttpClient().newCall(buildRequest(requestBody)).execute()) {",
      "es": 0.8194444444444444,
      "em": false,
      "passed": false
    },
    {
      "index": 308,
      "groundtruth": "mDiracUtils != null ? mDiracUtils.isDiracEnabled() : false;",
      "prediction": "mDiracUtils.isEnabled();",
      "raw_prediction": "mDiracUtils.isEnabled();",
      "es": 0.4067796610169492,
      "em": false,
      "passed": false
    },
    {
      "index": 309,
      "groundtruth": "if (StringUtils.equals(s.getFixCode(), sb)) {",
      "prediction": "if (StringUtils.equals(s.getFixCode(), sb))",
      "raw_prediction": "if (StringUtils.equals(s.getFixCode(), sb)) {",
      "es": 0.9555555555555556,
      "em": false,
      "passed": false
    },
    {
      "index": 310,
      "groundtruth": "\"  restPrice=\" + DoubleUtils.toDouble(restPrice));",
      "prediction": "\"  restPrice=\" + restPrice);",
      "raw_prediction": "\"  restPrice=\" + restPrice);",
      "es": 0.56,
      "em": false,
      "passed": false
    },
    {
      "index": 311,
      "groundtruth": "book.getBestBidOrder();",
      "prediction": "book.getBestBidOrder();",
      "raw_prediction": "book.getBestBidOrder();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 312,
      "groundtruth": "VoidAffordance.create(), afford(methodOn(ItemController.class).create(null))));",
      "prediction": "afford(methodOn(ItemController.class).create(null), \"create\", VoidAffordance.class)",
      "raw_prediction": "afford(methodOn(ItemController.class).create(null), \"create\", VoidAffordance.class)\n                .withRel(\"create\")\n            .withMethod(\"POST\")\n            .withType(\"application/json\")\n            .withName(\"create",
      "es": 0.3012048192771084,
      "em": false,
      "passed": false
    },
    {
      "index": 313,
      "groundtruth": "class).findById(item.id())).toUri())\n        .build();",
      "prediction": "class).findById(item.id()))\n                .withSelfRel())\n        .body(item);",
      "raw_prediction": "class).findById(item.id()))\n                .withSelfRel())\n        .body(item);",
      "es": 0.575,
      "em": false,
      "passed": false
    },
    {
      "index": 314,
      "groundtruth": ".withDimension(milvusConfiguration.getDimensions())\n            .build();",
      "prediction": ".build();",
      "raw_prediction": " .build();",
      "es": 0.12328767123287676,
      "em": false,
      "passed": false
    },
    {
      "index": 315,
      "groundtruth": ".withTimeout(milvusConfiguration.getTimeout(), TimeUnit.MILLISECONDS)\n                .createCollection(createCollectionReq);",
      "prediction": ".createCollection(createCollectionReq);",
      "raw_prediction": ".createCollection(createCollectionReq);",
      "es": 0.31200000000000006,
      "em": false,
      "passed": false
    },
    {
      "index": 316,
      "groundtruth": "if(milvusConfiguration.getDeleteOnStartup() && hasCollection) {",
      "prediction": "if(hasCollection) {",
      "raw_prediction": "if(hasCollection) {",
      "es": 0.3015873015873016,
      "em": false,
      "passed": false
    },
    {
      "index": 317,
      "groundtruth": "(milvusConfiguration.getCollection())\n                .build());",
      "prediction": "(milvusConfiguration.getCollection())\n            .build());",
      "raw_prediction": "(milvusConfiguration.getCollection())\n            .build());",
      "es": 0.9375,
      "em": true,
      "passed": true
    },
    {
      "index": 318,
      "groundtruth": "new Entry(entry1.path, entry1.metadata, classMergerCooler.merge(entry1.data, entry2.data));",
      "prediction": "classMergerCooler.merge(entry1.data, entry2.data);",
      "raw_prediction": "classMergerCooler.merge(entry1.data, entry2.data);",
      "es": 0.5494505494505495,
      "em": false,
      "passed": false
    },
    {
      "index": 319,
      "groundtruth": "(MinivanPlugin.filenameSafe(name) + \".jar\");",
      "prediction": "(name + getClassifier() + \".\" + getExtension());",
      "raw_prediction": "(name + getClassifier() + \".\" + getExtension());\n\t\t}\n\t\t\n\t\tpublic String getExtension() {\n\t\t\tif (downloads == null) {\n\t\t\t\treturn \"jar\";\n\t\t\t} else if (downloads.getAsJsonObject(\"artifact\") ==",
      "es": 0.125,
      "em": false,
      "passed": false
    },
    {
      "index": 320,
      "groundtruth": "sendInputMessage(uuid, request.getInput(), InputMessage.TIMEOUT);",
      "prediction": "requests.remove();",
      "raw_prediction": " requests.remove();\n",
      "es": 0.16923076923076918,
      "em": false,
      "passed": false
    },
    {
      "index": 321,
      "groundtruth": ".get(uuid).forEach(request -> request.getFuture().complete(response));",
      "prediction": ".get(uuid).forEach(request -> request.getFuture().complete(response));",
      "raw_prediction": ".get(uuid).forEach(request -> request.getFuture().complete(response));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 322,
      "groundtruth": "request.getInput().getTimeout() * 20L);",
      "prediction": "request.getInput().getTimeout() * 20);",
      "raw_prediction": "request.getInput().getTimeout() * 20);",
      "es": 0.9743589743589743,
      "em": false,
      "passed": false
    },
    {
      "index": 323,
      "groundtruth": "if (request.getInput().getTimeout() < 0) return;",
      "prediction": "Queue<AquaInputRequest> requests = requestQueue.get(uuid);",
      "raw_prediction": "Queue<AquaInputRequest> requests = requestQueue.get(uuid);\n",
      "es": 0.22413793103448276,
      "em": false,
      "passed": false
    },
    {
      "index": 324,
      "groundtruth": ", request.getInput(), InputMessage.PROMPT);",
      "prediction": ", request.getInput(), InputMessage.PROMPT);",
      "raw_prediction": ", request.getInput(), InputMessage.PROMPT);\n\n        /* Initializing the timeout task. */\n        if (request.getInput().getTimeout() < 0) return;\n        plugin.getServer().getScheduler().runTaskLater(plugin, () -> {\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 325,
      "groundtruth": ".element().getInput();",
      "prediction": ".element();",
      "raw_prediction": ".element();",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 326,
      "groundtruth": "requests.element().getFuture().complete(response);",
      "prediction": "if (requests.isEmpty()) return;",
      "raw_prediction": "if (requests.isEmpty()) return;\n",
      "es": 0.28,
      "em": false,
      "passed": false
    },
    {
      "index": 327,
      "groundtruth": "request.getFuture();",
      "prediction": "request.getFuture();",
      "raw_prediction": "request.getFuture();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 328,
      "groundtruth": "d.getOriginalText().split(\"\\\\n\");",
      "prediction": "sb.toString().split(\" \");",
      "raw_prediction": "sb.toString().split(\" \");",
      "es": 0.48484848484848486,
      "em": false,
      "passed": false
    },
    {
      "index": 329,
      "groundtruth": "(description.getName().equals(skillType)) {",
      "prediction": "(description.getName().equals(skillType))",
      "raw_prediction": "(description.getName().equals(skillType)) {",
      "es": 0.9534883720930233,
      "em": false,
      "passed": false
    },
    {
      "index": 330,
      "groundtruth": ").infer(object, recordName));",
      "prediction": ").infer(recordName);",
      "raw_prediction": ").infer(recordName);",
      "es": 0.6896551724137931,
      "em": false,
      "passed": false
    },
    {
      "index": 331,
      "groundtruth": "conversation.formattedFullHistory(), null);",
      "prediction": "conversation);",
      "raw_prediction": "conversation);",
      "es": 0.32558139534883723,
      "em": false,
      "passed": false
    },
    {
      "index": 332,
      "groundtruth": "= currentSkill.describe();",
      "prediction": "= currentSkill.getDescription();",
      "raw_prediction": "= currentSkill.getDescription();",
      "es": 0.71875,
      "em": false,
      "passed": false
    },
    {
      "index": 333,
      "groundtruth": "conversation.getAllMessages().get(0).getRole().equals(ChatMessageRole.SYSTEM.value())) {",
      "prediction": "conversation.getAllMessages().size() > 0) {",
      "raw_prediction": "conversation.getAllMessages().size() > 0) {",
      "es": 0.40909090909090906,
      "em": false,
      "passed": false
    },
    {
      "index": 334,
      "groundtruth": "conversation.getAllMessages())\n                    .maxTokens(agencyConfiguration.getChatRequestMaxTokens())\n                    .build();",
      "prediction": "conversation.getAllMessages())\n         .model(openAiConfiguration.chatModel())\n         .maxTokens(1000)\n         .temperature(0.0)\n         .topP(1.0)\n         .frequencyPenalty(0.",
      "raw_prediction": "conversation.getAllMessages())\n         .model(openAiConfiguration.chatModel())\n         .maxTokens(1000)\n         .temperature(0.0)\n         .topP(1.0)\n         .frequencyPenalty(0.",
      "es": 0.4505494505494505,
      "em": false,
      "passed": false
    },
    {
      "index": 335,
      "groundtruth": "var message : conversation.getAllMessages()) {",
      "prediction": "ChatMessage message : con",
      "raw_prediction": "ChatMessage message : conversation.getAllMessages()) {",
      "es": 0.28260869565217395,
      "em": false,
      "passed": false
    },
    {
      "index": 336,
      "groundtruth": "historyAgentConversation.getAllMessages().get(\n                        historyAgentConversation.getAllMessages().size()-1)));",
      "prediction": "historyAgentConversation.form.formFullHistory()));",
      "raw_prediction": "    historyAgentConversation.form.formFullHistory()));\n",
      "es": 0.29600000000000004,
      "em": false,
      "passed": false
    },
    {
      "index": 337,
      "groundtruth": "return mapper.deleteRegister(challengeSeq, id);",
      "prediction": "// TODO Auto-generated method stub",
      "raw_prediction": "\t// TODO Auto-generated method stub\n\t\tint res = rmRepository.deleteByChallengeSeqAndId(challengeSeq, id);\n\t\tSystem.out.println(\"biz delete res: \" + res);\n\t\treturn res;",
      "es": 0.17021276595744683,
      "em": false,
      "passed": false
    },
    {
      "index": 338,
      "groundtruth": "dto.setOnOffNoty(\"Y\");",
      "prediction": "dto.setUserLoginType(\"K\");",
      "raw_prediction": "\tdto.setUserLoginType(\"K\");\n\t\tif(kakaoLogin.insert(dto) > 0) {\n\t\treturn \"redirect:/login/login\";\n\t\t}else {\n\t\treturn \"redirect:/kakaoAuth/join\";\n\t\t}\n",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 339,
      "groundtruth": "> challenges = challengeBiz.findbyCate(category);",
      "prediction": "> challenges = challengeBiz.findbyCate(category);",
      "raw_prediction": "> challenges = challengeBiz.findbyCate(category);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 340,
      "groundtruth": "historyAgentConversation.getAllMessages().size()-1)));",
      "prediction": "0).getContent())",
      "raw_prediction": "        0).getContent())\n        );",
      "es": 0.2222222222222222,
      "em": false,
      "passed": false
    },
    {
      "index": 341,
      "groundtruth": "conversation.getAllMessages().size()).toArray(new ChatMessage[0]);",
      "prediction": "conversation.getAllMessages().size())",
      "raw_prediction": "conversation.getAllMessages().size())\n            .toArray(new ChatMessage[0]);",
      "es": 0.5606060606060606,
      "em": false,
      "passed": false
    },
    {
      "index": 342,
      "groundtruth": "dto.setUserLoginType(\"K\");",
      "prediction": "loginBiz.insert(dto);",
      "raw_prediction": "\tloginBiz.insert(dto);\n\t\treturn \"redirect:/login/login\";\n\t}\n\n\t}\n\n\t@PostMapping(\"/kakaoJoin\")\n\tpublic String kakaoJoin(UserDto dto) {",
      "es": 0.23076923076923073,
      "em": false,
      "passed": false
    },
    {
      "index": 343,
      "groundtruth": "dto.setUserName(userName);",
      "prediction": "dto.setUserName(userName);",
      "raw_prediction": "dto.setUserName(userName);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 344,
      "groundtruth": ".put(\"userId\", dto.getUserId());",
      "prediction": ".put(\"userId\", dto.getUserId());",
      "raw_prediction": ".put(\"userId\", dto.getUserId());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 345,
      "groundtruth": "dto.setUserPhone(userPhone);",
      "prediction": "dto.setUserPhone(userPhone);",
      "raw_prediction": "\tdto.setUserPhone(userPhone);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 346,
      "groundtruth": "user = loginBiz.findByUserId(userId);",
      "prediction": "user = loginBiz.selectOne(userId);",
      "raw_prediction": "user = loginBiz.selectOne(userId);",
      "es": 0.7027027027027026,
      "em": false,
      "passed": false
    },
    {
      "index": 347,
      "groundtruth": "&& user.getUserPw().equals(userPw)) {",
      "prediction": "&& user.getUserPw().",
      "raw_prediction": "&& user.getUserPw().equals(userPw)) {",
      "es": 0.5405405405405406,
      "em": false,
      "passed": false
    },
    {
      "index": 348,
      "groundtruth": "openAiConfiguration.chatModel(), \n            conversation);",
      "prediction": "agencyConfiguration.getChatRequestModel());",
      "raw_prediction": "    agencyConfiguration.getChatRequestModel());",
      "es": 0.35,
      "em": false,
      "passed": false
    },
    {
      "index": 349,
      "groundtruth": "(conversation.getAllMessages().size() > agencyConfiguration.getChatSummaryRetainedMessageCount()) {",
      "prediction": "(conversation.getAllMessages().size() > agencyConfiguration.getChatSummaryRetainedMessageCount())",
      "raw_prediction": "(conversation.getAllMessages().size() > agencyConfiguration.getChatSummaryRetainedMessageCount()) {",
      "es": 0.9797979797979798,
      "em": false,
      "passed": false
    },
    {
      "index": 350,
      "groundtruth": "ChallengeDto currentChallenge = challengeBiz.selectOneBySeq(challengeSeq);",
      "prediction": "ChallengeDto currentChallenge = challengeBiz.selectOneBySeq(challengeSeq);",
      "raw_prediction": "\tChallengeDto currentChallenge = challengeBiz.selectOneBySeq(challengeSeq);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 351,
      "groundtruth": "challenge = challengeBiz.selectOne(challengeName);",
      "prediction": "challenge = challengeBiz.selectOne(challengeName)",
      "raw_prediction": "challenge = challengeBiz.selectOne(challengeName)",
      "es": 0.98,
      "em": false,
      "passed": false
    },
    {
      "index": 352,
      "groundtruth": "return redisOps.getValue(getApiKeyRedisKey());",
      "prediction": "if (StringUtils.isBlank(openAIApiKeyId))",
      "raw_prediction": "    if (StringUtils.isBlank(openAIApiKeyId)) {\n            openAIApiKeyId = OpenAIConstant.DEFAULT_OPENAI_API_KEY_ID;\n        }\n        if (StringUtils.isBlank(apiKeyRedisKey)) {\n            apiKeyRedisKey = get",
      "es": 0.23913043478260865,
      "em": false,
      "passed": false
    },
    {
      "index": 353,
      "groundtruth": "redisOps.setValue(apiKeyRedisKey, openApiKey);",
      "prediction": "redisOps.setValue(getApiKeyRedisKey(), openApiKey);",
      "raw_prediction": "    redisOps.setValue(getApiKeyRedisKey(), openApiKey);",
      "es": 0.8823529411764706,
      "em": false,
      "passed": false
    },
    {
      "index": 354,
      "groundtruth": "int currentMember = registeredBiz.coutBySeq(challengeSeq);",
      "prediction": "RegisteredMemberDto currentMember = registeredBiz.coutBySeq(challengeSeq);",
      "raw_prediction": "\tRegisteredMemberDto currentMember = registeredBiz.coutBySeq(challengeSeq);\n\t\t// System.out.println(\"\ud544\uc694\ud55c \uc815\ubcf4 \ub85c\ub529 \uc644\ub8cc\\n\" + currentChallenge + \"\\n\" + currentUser + \"\\n\"",
      "es": 0.7702702702702703,
      "em": false,
      "passed": false
    },
    {
      "index": 355,
      "groundtruth": "registeredBiz.coutBySeq(challengeSeq);",
      "prediction": "registeredBiz.coutBySeq(challengeSeq);",
      "raw_prediction": "registeredBiz.coutBySeq(challengeSeq);\n\t\t\t\tSystem.out.println(\"member: \" + member);\n\t\t\t\t",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 356,
      "groundtruth": "registeredBiz.challengeStart(challengeSeq);",
      "prediction": "currentChallenge.setChallengeEnabled(\"N\");",
      "raw_prediction": "currentChallenge.setChallengeEnabled(\"N\");\n\t\t\t\t\tchallengeBiz.update(currentChallenge);\n\t\t\t\t\tSystem.out.println(\"\ucc4c\ub9b0\uc9c0 \uc2dc\uc791\");\n\t\t\t\t}",
      "es": 0.32558139534883723,
      "em": false,
      "passed": false
    },
    {
      "index": 357,
      "groundtruth": "if (currentChallenge.getChallengeEnabled().equals(\"Y\")\n\t\t\t\t\t&& currentMember < currentChallenge.getChallengeMaxMember()) {",
      "prediction": "if (currentChallenge.getChallengeEnabled().equals(\"Y\")) {",
      "raw_prediction": "\tif (currentChallenge.getChallengeEnabled().equals(\"Y\")) {",
      "es": 0.4672131147540983,
      "em": false,
      "passed": false
    },
    {
      "index": 358,
      "groundtruth": "return currentChallenge.getChallengeName() + \"\uc5d0 \ucc38\uc5ec\ud558\uc600\uc2b5\ub2c8\ub2e4. \";",
      "prediction": "res = registeredBiz.update(challengeSeq, currentUser.getId());",
      "raw_prediction": "res = registeredBiz.update(challengeSeq, currentUser.getId());\n\t\t\t\t\t\tSystem.out.println(\"controller update res: \" + res);\n\t\t\t\t\t\tres = registeredBiz.update(challengeSeq, currentUser.getId());\n\t\t\t\t\t\tSystem.out.println(\"controller update res: \"",
      "es": 0.19354838709677424,
      "em": false,
      "passed": false
    },
    {
      "index": 359,
      "groundtruth": "currentChallenge.getChallengeMaxMember()) {",
      "prediction": "currentChallenge.getCha",
      "raw_prediction": "currentChallenge.getChallengeMaxMember()) {",
      "es": 0.5348837209302326,
      "em": false,
      "passed": false
    },
    {
      "index": 360,
      "groundtruth": ".equals(settings.sopsExecutable, settingsComponent.getSopsExecutable()) ||\n\t\t\t!Objects.equals(settings.sopsFilesReadOnly, settingsComponent.getSopsFilesReadOnly());",
      "prediction": ".equals(settings.sopsExecutable, settingsComponent.getSopsExecutable()) ||\n\t\t!Objects.equals(settings.sopsFilesReadOnly, settingsComponent.getSopsFilesReadOnly());",
      "raw_prediction": ".equals(settings.sopsExecutable, settingsComponent.getSopsExecutable()) ||\n\t\t!Objects.equals(settings.sopsFilesReadOnly, settingsComponent.getSopsFilesReadOnly());",
      "es": 0.9939024390243902,
      "em": true,
      "passed": true
    },
    {
      "index": 361,
      "groundtruth": "settingsComponent.getSopsFilesReadOnly());",
      "prediction": "settingsComponent.getSopsFilesReadOnly());",
      "raw_prediction": "settingsComponent.getSopsFilesReadOnly());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 362,
      "groundtruth": "if (currentChallenge.getChallengeEnabled().equals(\"Y\")) {",
      "prediction": "// \ub514\ube44\uc5d0 \uc9c0\uc6b0\uae30",
      "raw_prediction": "\t// \ub514\ube44\uc5d0 \uc9c0\uc6b0\uae30",
      "es": 0.01754385964912286,
      "em": false,
      "passed": false
    },
    {
      "index": 363,
      "groundtruth": "SettingsState.getInstance().sopsEnvironment.split(\"\\\\s(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)\");",
      "prediction": "SettingsState.getInstance().environment;",
      "raw_prediction": "SettingsState.getInstance().environment;",
      "es": 0.4382022471910112,
      "em": false,
      "passed": false
    },
    {
      "index": 364,
      "groundtruth": "currentChallenge.getChallengeMaxMember() <= member) {",
      "prediction": "member == currentChallenge.g",
      "raw_prediction": "member == currentChallenge.getChallengeMaxMember()) {",
      "es": 0.2264150943396226,
      "em": false,
      "passed": false
    },
    {
      "index": 365,
      "groundtruth": "+ \" &3&o\u2192 &r\" + blockItem.getDisplayName());",
      "prediction": "+ \" &f&o(\" + blockItem.getMaterial().name() + \")\");",
      "raw_prediction": "+ \" &f&o(\" + blockItem.getMaterial().name() + \")\");\n        }\n\n        if (sender instanceof Player) {\n            Helpers.sendFormattedMessage(sender,\"&7&o- &f&o/blockentitiesget <block> <amount>",
      "es": 0.5686274509803921,
      "em": false,
      "passed": false
    },
    {
      "index": 366,
      "groundtruth": "world.dropItemNaturally(location, blockItem.getItem(1));",
      "prediction": "world.dropItemNaturally(location, blockItem.getItemStack());",
      "raw_prediction": "world.dropItemNaturally(location, blockItem.getItemStack());\n            } else {\n                player.getInventory().addItem(blockItem.getItemStack());",
      "es": 0.9,
      "em": false,
      "passed": false
    },
    {
      "index": 367,
      "groundtruth": "player.getInventory().addItem(blockItem.getItem(amount));",
      "prediction": "if (blockItem.getLimit() != 0 && blockItem.getAmount() >= blockItem.getLimit())",
      "raw_prediction": "if (blockItem.getLimit() != 0 && blockItem.getAmount() >= blockItem.getLimit()) {\n            Helpers.sendMessage(this.plugin, player, Keys.MESSAGES_BLOCK_LIMIT_REACHED);\n            return false;\n        }\n\n        if (block",
      "es": 0.30379746835443033,
      "em": false,
      "passed": false
    },
    {
      "index": 368,
      "groundtruth": "edgarSectorEnrichService.exportToCSV(writer);",
      "prediction": "writer.println(\"Cik, Ticker, Name, Sector, SIC\");",
      "raw_prediction": "   writer.println(\"Cik, Ticker, Name, Sector, SIC\");\n            stockCikRepository.findAll().forEach(stock -> {\n                writer.println(stock.getCik() + \",\" + stock.getTicker() + \",\" + stock.getName()",
      "es": 0.16326530612244894,
      "em": false,
      "passed": false
    },
    {
      "index": 369,
      "groundtruth": "edgarSectorEnrichService.enrichCik(ticker);",
      "prediction": "stockCikRepository.findByTicker(ticker);",
      "raw_prediction": "stockCikRepository.findByTicker(ticker);",
      "es": 0.3023255813953488,
      "em": false,
      "passed": false
    },
    {
      "index": 370,
      "groundtruth": "fullIndexDownloadService.processFillings(filingTypesList);",
      "prediction": "filingsDownloadService.enrichStocksWithCusipFromFilings(filingingTypesList);",
      "raw_prediction": "filingsDownloadService.enrichStocksWithCusipFromFilings(filingingTypesList);",
      "es": 0.6052631578947368,
      "em": false,
      "passed": false
    },
    {
      "index": 371,
      "groundtruth": "String> formTypes = fullIndexRepository.findDistinctFormTypes();",
      "prediction": "String> formTypes = filingsDownloadService.getDistinctFormTypes();",
      "raw_prediction": "String> formTypes = filingsDownloadService.getDistinctFormTypes();",
      "es": 0.6666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 372,
      "groundtruth": "filingsDownloadService.downloadFullIndex();",
      "prediction": "try {",
      "raw_prediction": "try {\n            filingsDownloadService.downloadFullIndex();\n        } catch (ResponseStatusException e) {\n            return ResponseEntity.status(e.getStatusCode()).body(e.getReason());\n        }",
      "es": 0.023255813953488413,
      "em": false,
      "passed": false
    },
    {
      "index": 373,
      "groundtruth": "<String> allFormTypes = fullIndexRepository.findDistinctFormTypes();",
      "prediction": "<String> allFormTypes = stockCikRepository.findAll().stream()",
      "raw_prediction": "<String> allFormTypes = stockCikRepository.findAll().stream()\n        .map(stock -> stock.getFormType())\n        .collect(Collectors.toSet());\n",
      "es": 0.6323529411764706,
      "em": false,
      "passed": false
    },
    {
      "index": 374,
      "groundtruth": "IAPKAnalyzer.createFor(inputFile);",
      "prediction": "new IAPkAnalyzer(inputFile);",
      "raw_prediction": "new IAPkAnalyzer(inputFile);",
      "es": 0.5588235294117647,
      "em": false,
      "passed": false
    },
    {
      "index": 375,
      "groundtruth": "targetFilings = fullIndexRepository.findByFormType(filingType);",
      "prediction": "targetFilings = fullIndexRepository.findFullIndexByFormType(filingType);",
      "raw_prediction": "targetFilings = fullIndexRepository.findFullIndexByFormType(filingType);\n",
      "es": 0.875,
      "em": false,
      "passed": false
    },
    {
      "index": 376,
      "groundtruth": "nativeLibraryDirectories = ShareReflectUtil.findField(dexPathList, \"nativeLibraryDirectories\");",
      "prediction": "nativeLibraryDirectories = ShareReflectUtil.findField(dexPathList, \"nativeLibraryDirectories\");",
      "raw_prediction": "nativeLibraryDirectories = ShareReflectUtil.findField(dexPathList, \"nativeLibraryDirectories\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 377,
      "groundtruth": "Field systemNativeLibraryDirectories = ShareReflectUtil.findField(dexPathList, \"systemNativeLibraryDirectories\");",
      "prediction": "Field systemNativeLibraryDirectories = ShareReflectUtil.findField(dexPathList, \"systemNativeLibraryDirectories\");",
      "raw_prediction": "Field systemNativeLibraryDirectories = ShareReflectUtil.findField(dexPathList, \"systemNativeLibraryDirectories\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 378,
      "groundtruth": "Field nativeLibDirField = ShareReflectUtil.findField(dexPathList, \"nativeLibraryDirectories\");",
      "prediction": "Field nativeLibDirField = ShareReflectUtil.findField(dexPathList, \"nativeLibraryDirectories\");",
      "raw_prediction": "Field nativeLibDirField = ShareReflectUtil.findField(dexPathList, \"nativeLibraryDirectories\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 379,
      "groundtruth": "= ShareReflectUtil.findField(classLoader, \"libPath\");",
      "prediction": "= ShareReflectUtil.findField(classLoader, \"path\");",
      "raw_prediction": "= ShareReflectUtil.findField(classLoader, \"path\");",
      "es": 0.9245283018867925,
      "em": false,
      "passed": false
    },
    {
      "index": 380,
      "groundtruth": "= parser.readLong(buffer, baseOffset);",
      "prediction": "= parser.readLong(buffer, baseOffset);",
      "raw_prediction": "= parser.readLong(buffer, baseOffset);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 381,
      "groundtruth": "val = parser.readWord(buffer, baseOffset + 0x4);",
      "prediction": "value = parser.readWord(buffer, baseOffset + 4);",
      "raw_prediction": "\n        value = parser.readWord(buffer, baseOffset + 4);",
      "es": 0.9166666666666666,
      "em": false,
      "passed": false
    },
    {
      "index": 382,
      "groundtruth": "= parser.readWord(buffer, 0x1C);",
      "prediction": "= parser.readWord(buffer, 0x14);",
      "raw_prediction": "= parser.readWord(buffer, 0x14);",
      "es": 0.96875,
      "em": false,
      "passed": false
    },
    {
      "index": 383,
      "groundtruth": "final Method makeElements = ShareReflectUtil.findMethod(dexPathList, \"makePathElements\", List.class);",
      "prediction": "final Method makeElements = ShareReflectUtil.findMet",
      "raw_prediction": "final Method makeElements = ShareReflectUtil.findMethod(dexPathList,\n                \"makePathElements\", List.class, File.class, List.class);\n            final ArrayList<IOException> suppressedExceptions = new ArrayList<>();\n\n            final Object[] elements =",
      "es": 0.5148514851485149,
      "em": false,
      "passed": false
    },
    {
      "index": 384,
      "groundtruth": "libraryPathElementsFiled = ShareReflectUtil.findField(classLoader, \"libraryPathElements\");",
      "prediction": "libraryPathElementsFiled = ShareReflectUtil.findField(classLoader, \"libraryPathElements\");",
      "raw_prediction": "libraryPathElementsFiled = ShareReflectUtil.findField(classLoader, \"libraryPathElements\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 385,
      "groundtruth": "ShareTinkerLog.e(TAG, \"installNativeLibraryPath, folder %s is illegal\", folder);",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 386,
      "groundtruth": "parser.readWord(buffer, 0x20);",
      "prediction": "parser.readWord(buffer, 0x20);",
      "raw_prediction": "parser.readWord(buffer, 0x20);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 387,
      "groundtruth": "pathListField = ShareReflectUtil.findField(classLoader, \"pathList\");",
      "prediction": "pathListField = ShareReflectUtil.findField(classLoader, \"pathList\");",
      "raw_prediction": "pathListField = ShareReflectUtil.findField(classLoader, \"pathList\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 388,
      "groundtruth": "makeElements = ShareReflectUtil.findMethod(dexPathList,\n                    \"makePathElements\", List.class, File.class, List.class);",
      "prediction": "makeElements = ShareReflectUtil.findMethod(dexPathList, \"makePathElements\", List.class, List.class, ArrayList.class);",
      "raw_prediction": "makeElements = ShareReflectUtil.findMethod(dexPathList, \"makePathElements\", List.class, List.class, ArrayList.class);\n            final Object[] elements = (Object[]) makeElements.invoke(dexPathList, newLibDirs,",
      "es": 0.7878787878787878,
      "em": false,
      "passed": false
    },
    {
      "index": 389,
      "groundtruth": "= parser.readHalf(buffer, 0x2A);",
      "prediction": "final int shentsize = parser.readHalf(buffer, 0x2E);",
      "raw_prediction": "final int shentsize = parser.readHalf(buffer, 0x2E);",
      "es": 0.5961538461538461,
      "em": false,
      "passed": false
    },
    {
      "index": 390,
      "groundtruth": "= parser.readHalf(buffer, 0x2E);",
      "prediction": "= parser.readHalf(buffer, 0x34);",
      "raw_prediction": "= parser.readHalf(buffer, 0x34);",
      "es": 0.9375,
      "em": false,
      "passed": false
    },
    {
      "index": 391,
      "groundtruth": "parser.readLong(buffer, 0x20);",
      "prediction": "parser.readLong(buffer, 0x18);",
      "raw_prediction": "parser.readLong(buffer, 0x18);",
      "es": 0.9333333333333333,
      "em": false,
      "passed": false
    },
    {
      "index": 392,
      "groundtruth": "parser.readLong(buffer, baseOffset + 0x28);",
      "prediction": "parser.readLong(buffer, baseOffset + 0x18);",
      "raw_prediction": "parser.readLong(buffer, baseOffset + 0x18);",
      "es": 0.9767441860465116,
      "em": false,
      "passed": false
    },
    {
      "index": 393,
      "groundtruth": "= parser.readHalf(buffer, 0x36);",
      "prediction": "final int shentsize = parser.readHalf(buffer, 0x3A);",
      "raw_prediction": "final int shentsize = parser.readHalf(buffer, 0x3A);",
      "es": 0.5961538461538461,
      "em": false,
      "passed": false
    },
    {
      "index": 394,
      "groundtruth": "parser.readWord(buffer, baseOffset + 0x8);",
      "prediction": "parser.readWord(buffer, baseOffset + 0x8);",
      "raw_prediction": "parser.readWord(buffer, baseOffset + 0x8);\n        paddr = parser.readWord(buffer, baseOffset + 0xC);\n        filesz = parser.readWord(buffer, baseOffset + 0x10);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 395,
      "groundtruth": "offset = parser.readLong(buffer, baseOffset + 0x8);",
      "prediction": "offset = parser.readLong(buffer, baseOffset + 0x08);",
      "raw_prediction": "    offset = parser.readLong(buffer, baseOffset + 0x08);",
      "es": 0.9807692307692307,
      "em": false,
      "passed": false
    },
    {
      "index": 396,
      "groundtruth": "= parser.readWord(buffer, baseOffset + 0x14);",
      "prediction": "= parser.readWord(buffer, baseOffset + 0x10);",
      "raw_prediction": "= parser.readWord(buffer, baseOffset + 0x10);",
      "es": 0.9777777777777777,
      "em": false,
      "passed": false
    },
    {
      "index": 397,
      "groundtruth": "offset = parser.readWord(buffer, baseOffset + 0x4);",
      "prediction": "offset = parser.readWord(buffer, baseOffset + 0x4);",
      "raw_prediction": "\n        offset = parser.readWord(buffer, baseOffset + 0x4);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 398,
      "groundtruth": "= StartupMode.fromString(properties.get(\"scan.startup.mode\"));",
      "prediction": "= StartupMode.valueOf(properties.get(\"sink.startup-mode\"));",
      "raw_prediction": "= StartupMode.valueOf(properties.get(\"sink.startup-mode\"));",
      "es": 0.7741935483870968,
      "em": false,
      "passed": false
    },
    {
      "index": 399,
      "groundtruth": "(streamConfig.transactionalIdPrefix())\n            .setKafkaProducerConfig(toProperties(streamConfig.kafkaProperties()))\n            .build();",
      "prediction": "(streamConfig.transactionalIdPrefix())\n            .setProperties(toProperties(streamConfig.properties()))\n            .build();",
      "raw_prediction": "(streamConfig.transactionalIdPrefix())\n            .setProperties(toProperties(streamConfig.properties()))\n            .build();",
      "es": 0.8591549295774648,
      "em": false,
      "passed": false
    },
    {
      "index": 400,
      "groundtruth": ".subscribe(Collections.singleton(testEnvironment.topicFor(name)));",
      "prediction": ".subscribe(Collections.singletonList(testEnvironment.topicFor(name)));",
      "raw_prediction": ".subscribe(Collections.singletonList(testEnvironment.topicFor(name)));",
      "es": 0.9428571428571428,
      "em": false,
      "passed": false
    },
    {
      "index": 401,
      "groundtruth": "setTopics(streamConfig.topic())\n            .setProperties(toProperties(streamConfig.kafkaProperties()))\n            .setValueOnlyDeserializer(deserializationSchema);",
      "prediction": "setTopics(streamConfig.topic())\n            .setGroupId(streamConfig.groupId())\n            .setProperties(toProperties(streamConfig.properties()))\n            .setValueOnlyDeserializer(deserializationSchema);",
      "raw_prediction": "setTopics(streamConfig.topic())\n            .setGroupId(streamConfig.groupId())\n            .setProperties(toProperties(streamConfig.properties()))\n            .setValueOnlyDeserializer(deserializationSchema);",
      "es": 0.7416267942583732,
      "em": false,
      "passed": false
    },
    {
      "index": 402,
      "groundtruth": "((DecodableSourceSplitImpl) obj).getDelegate());",
      "prediction": "obj.getDelegate());",
      "raw_prediction": "obj.getDelegate());",
      "es": 0.39583333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 403,
      "groundtruth": "producerProperties(testEnvironment.bootstrapServers()));",
      "prediction": "producerProperties(testEnvironment.bootstrapServers()));",
      "raw_prediction": "producerProperties(testEnvironment.bootstrapServers()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 404,
      "groundtruth": ".setKafkaProducerConfig(toProperties(streamConfig.kafkaProperties()))\n            .build();",
      "prediction": ".setProperties(toProperties(streamConfig.properties()))\n            .build();",
      "raw_prediction": ".setProperties(toProperties(streamConfig.properties()))\n            .build();",
      "es": 0.7802197802197802,
      "em": false,
      "passed": false
    },
    {
      "index": 405,
      "groundtruth": "(testEnvironment.topicFor(streamName), streamRecord.value()));",
      "prediction": "(",
      "raw_prediction": "(\n                  testEnvironment.topicFor(streamName), streamRecord.key(), streamRecord.value());",
      "es": 0.016129032258064502,
      "em": false,
      "passed": false
    },
    {
      "index": 406,
      "groundtruth": "toProperties(streamConfig.kafkaProperties()))\n            .setValueOnlyDeserializer(deserializationSchema);",
      "prediction": "toProperties(streamConfig.properties()))\n            .setDeserializer(deserializationSchema);",
      "raw_prediction": "toProperties(streamConfig.properties()))\n            .setDeserializer(deserializationSchema);",
      "es": 0.8598130841121495,
      "em": false,
      "passed": false
    },
    {
      "index": 407,
      "groundtruth": "if (streamConfig.startupMode() != null) {",
      "prediction": "if (startupMode != null)",
      "raw_prediction": "  if (startupMode != null) {",
      "es": 0.5853658536585367,
      "em": false,
      "passed": false
    },
    {
      "index": 408,
      "groundtruth": "tbApikeyDAO.useOnece(key);",
      "prediction": "if (tbUserKeyEntity.getApiKey().equals(key))",
      "raw_prediction": "if (tbUserKeyEntity.getApiKey().equals(key)) {\n            key = tbApikeyEntity.getApiKey();\n        }\n",
      "es": 0.2727272727272727,
      "em": false,
      "passed": false
    },
    {
      "index": 409,
      "groundtruth": "Object cnt = jdbcTemplate.queryForMap(dialect.getCountSql(sql), actionInfo.getParameter()).get(\"PG_COUNT\");",
      "prediction": "Object cnt = jdbcTemplate.queryForMap(dialect.getCountSql(sql), methodInfo.getArgs()[actionInfo.getParameterIndex()], actionInfo.getParameterType())",
      "raw_prediction": " Object cnt = jdbcTemplate.queryForMap(dialect.getCountSql(sql), methodInfo.getArgs()[actionInfo.getParameterIndex()], actionInfo.getParameterType()).get(\"PG_COUNT\");",
      "es": 0.6418918918918919,
      "em": false,
      "passed": false
    },
    {
      "index": 410,
      "groundtruth": "() != null && methodInfo.getArgs().length > 0) {",
      "prediction": "() != null) {",
      "raw_prediction": "() != null) {\n                    interceptor.beforePrepare(methodInfo, jdbcTemplate);",
      "es": 0.27083333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 411,
      "groundtruth": "), actionInfo.getParameter(), actionInfo.getParameterType()).get(\"PG_COUNT\");",
      "prediction": "), actionInfo.getParameterType(), actionInfo.getParameterIndex(",
      "raw_prediction": "), actionInfo.getParameterType(), actionInfo.getParameterIndex(), new ResultSetExtractor<Map>() {\n                @Override\n                public Map extractData(ResultSet rs) throws SQLException, DataAccessException {\n                while (rs.next()) {\n                Map<String, Object",
      "es": 0.6623376623376623,
      "em": false,
      "passed": false
    },
    {
      "index": 412,
      "groundtruth": "cnt = jdbcTemplate.queryForMap(dialect.getCountSql(sql), actionInfo.getParameter()).get(\"PG_COUNT\");",
      "prediction": "cnt = jdbcTemplate.queryForMap(dialect.getCountSql(sql), methodInfo.getArgs()[actionInfo.getParameterIndex()], actionInfo.getParameterType())",
      "raw_prediction": "cnt = jdbcTemplate.queryForMap(dialect.getCountSql(sql), methodInfo.getArgs()[actionInfo.getParameterIndex()], actionInfo.getParameterType()).get(\"PG_COUNT\");",
      "es": 0.624113475177305,
      "em": false,
      "passed": false
    },
    {
      "index": 413,
      "groundtruth": ".debug(\"finish sql==>{",
      "prediction": ".debug(\"finish sql==> {",
      "raw_prediction": ".debug(\"finish sql==> {",
      "es": 0.9565217391304348,
      "em": false,
      "passed": false
    },
    {
      "index": 414,
      "groundtruth": "pages = page.getPages();",
      "prediction": "pagesNum = page.getPageNum();",
      "raw_prediction": "pagesNum = page.getPageNum();\n            this.pageSize = page.getPageSize();\n            this.pages = page.getPages();",
      "es": 0.7931034482758621,
      "em": false,
      "passed": false
    },
    {
      "index": 415,
      "groundtruth": "] = this.actionInfo.getParameter();",
      "prediction": "] = this.actionInfo.getSql();",
      "raw_prediction": "] = this.actionInfo.getSql();\n                } else {\n                    this.args[this.actionInfo.getParameterIndex()] = this.actionInfo.getBatchParameter();",
      "es": 0.7428571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 416,
      "groundtruth": "MethodActionInfo actionInfo = methodInfo.getActionInfo();",
      "prediction": "if (localPage.isCount()) {",
      "raw_prediction": "if (localPage.isCount()) {\n                return;\n            }\n",
      "es": 0.14035087719298245,
      "em": false,
      "passed": false
    },
    {
      "index": 417,
      "groundtruth": ".debug(\"method==>name:{",
      "prediction": ".debug(\"method==>{} args: {",
      "raw_prediction": ".debug(\"method==>{} args: {",
      "es": 0.7407407407407407,
      "em": false,
      "passed": false
    },
    {
      "index": 418,
      "groundtruth": "queryForMap(dialect.getCountSql(sql), actionInfo.getParameter(), actionInfo.getParameterType()).get(\"PG_COUNT\");",
      "prediction": "query(dialect.getCountSql(sql), actionInfo.getParameterTypes(), methodInfo.getArgs()[actionInfo.getParameterIndex()], new ResultSetExtractor<Map>() {",
      "raw_prediction": "query(dialect.getCountSql(sql), actionInfo.getParameterTypes(), methodInfo.getArgs()[actionInfo.getParameterIndex()], new ResultSetExtractor<Map>() {\n                @Override\n                public Map extractData(ResultSet rs) throws SQLException, DataAccessException {\n               ",
      "es": 0.5503355704697986,
      "em": false,
      "passed": false
    },
    {
      "index": 419,
      "groundtruth": "String sql = actionInfo.getSql();",
      "prediction": ".getDataSource().getConnection().getMetaData());",
      "raw_prediction": "    .getDataSource().getConnection().getMetaData());",
      "es": 0.25,
      "em": false,
      "passed": false
    },
    {
      "index": 420,
      "groundtruth": "cpuPattern.matcher(location.fileContent());",
      "prediction": "cpuPattern.matcher(location.fileContent());",
      "raw_prediction": "cpuPattern.matcher(location.fileContent());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 421,
      "groundtruth": "() && methodInfo.getActionInfo().isReturnIsList()) {",
      "prediction": "()) {",
      "raw_prediction": "()) {",
      "es": 0.09615384615384615,
      "em": false,
      "passed": false
    },
    {
      "index": 422,
      "groundtruth": "sql), (PreparedStatementSetter) methodInfo.getArgs()[actionInfo.getParameterIndex()], new ResultSetExtractor<Map>() {",
      "prediction": "sql), new PreparedStatementSetter() {",
      "raw_prediction": "sql), new PreparedStatementSetter() {\n",
      "es": 0.2564102564102564,
      "em": false,
      "passed": false
    },
    {
      "index": 423,
      "groundtruth": "(methodInfo.getActionInfo().getBatchParameter()));",
      "prediction": "(methodInfo.getActionInfo().getBatchParameter()));",
      "raw_prediction": "(methodInfo.getActionInfo().getBatchParameter()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 424,
      "groundtruth": "page.getStartRow() + 1;",
      "prediction": "page.getStartRow();",
      "raw_prediction": "page.getStartRow();",
      "es": 0.8260869565217391,
      "em": false,
      "passed": false
    },
    {
      "index": 425,
      "groundtruth": "Repository repository : gitLabRepositoryApi.findRepositories()) {",
      "prediction": "Repository repository : gitLabRepo",
      "raw_prediction": "Repository repository : gitLabRepositoryApi.readRepositories()) {",
      "es": 0.523076923076923,
      "em": false,
      "passed": false
    },
    {
      "index": 426,
      "groundtruth": "if (methodInfo.getArgs() != null && methodInfo.getArgs().length > 0) {",
      "prediction": "interceptor.beforeExecute(methodInfo, jdbcTemplate);",
      "raw_prediction": " interceptor.beforeExecute(methodInfo, jdbcTemplate);\n                    //\u6267\u884cSQL\n                    result = methodInvocation.proceed();\n                    //\u56de\u5199\u7ed3\u679c\n                    methodInvocation.setObject(result);\n                    //\u63d2\u4ef6\u5141\u8bb8\u4fee\u6539\u7ed3\u679c\n                    interceptor.afterExecute(result,",
      "es": 0.27142857142857146,
      "em": false,
      "passed": false
    },
    {
      "index": 427,
      "groundtruth": "toStr(methodInfo.getActionInfo().getBatchSql()));",
      "prediction": "toStr(methodInfo.getActionInfo().getBatchSql()));",
      "raw_prediction": "toStr(methodInfo.getActionInfo().getBatchSql()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 428,
      "groundtruth": "methodInfo.resolveSql(sql);",
      "prediction": "actionInfo.setSql(sql);",
      "raw_prediction": "actionInfo.setSql(sql);\n        } catch (Exception e) {\n            PageHelper.clearPage();\n            throw e;\n        }",
      "es": 0.6296296296296297,
      "em": false,
      "passed": false
    },
    {
      "index": 429,
      "groundtruth": "equalsTo.setRightExpression(this.tenantLineHandler.getTenantId());",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 430,
      "groundtruth": "new EqualsTo(this.getAliasColumn(table), this.tenantLineHandler.getTenantId());",
      "prediction": "this.andExpression(table, where, whereSegment);",
      "raw_prediction": "this.andExpression(table, where, whereSegment);",
      "es": 0.31645569620253167,
      "em": false,
      "passed": false
    },
    {
      "index": 431,
      "groundtruth": "(methodInfo.getActionInfo().isReturnIsList()) {",
      "prediction": "(methodInfo.getActionInfo().isReturnIsList())",
      "raw_prediction": "(methodInfo.getActionInfo().isReturnIsList()) {",
      "es": 0.9574468085106383,
      "em": false,
      "passed": false
    },
    {
      "index": 432,
      "groundtruth": "(new SelectExpressionItem(new Column(this.tenantLineHandler.getTenantIdColumn())));",
      "prediction": "(new AllColumns());",
      "raw_prediction": "(new AllColumns());\n    }\n\n    /**\n     * \u5904\u7406 select\n     *\n     * @param plainSelect PlainSelect\n     * @param whereSegment \u6240\u5c5eMapper\u5bf9\u8c61\u5168\u8def\u5f84\uff08\u5728\u539f\u79df\u6237\u62e6\u622a\u5668\u529f\u80fd\u4e2d",
      "es": 0.20481927710843373,
      "em": false,
      "passed": false
    },
    {
      "index": 433,
      "groundtruth": "String.format(\"%s-- key: %s\\n\", prefix, keyType.getTypeName()));",
      "prediction": "String.format(\"%s-- key: %s\\n\", prefix, keyType.getTypeName()));",
      "raw_prediction": "String.format(\"%s-- key: %s\\n\", prefix, keyType.getTypeName()));\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 434,
      "groundtruth": "DataType.buildFormattedString(elementType, nextPrefix, builder);",
      "prediction": "@Override",
      "raw_prediction": "@Override\n\tpublic String toString() {\n\t\treturn String.format(\"ArrayType(elementType = %s, containsNull = %b)\", elementType, containsNull);",
      "es": 0.09375,
      "em": false,
      "passed": false
    },
    {
      "index": 435,
      "groundtruth": "DataType.buildFormattedString(dataType, nextPrefix, builder);",
      "prediction": "}",
      "raw_prediction": "}\n\n\t@Override\n\tpublic String toString() {\n\t\tStringBuilder builder = new StringBuilder();\n\t\tbuildFormattedString(\"\", builder);\n\t\treturn builder.toString();",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 436,
      "groundtruth": "prefix, valueType.getTypeName(),\n\t\t\t\tvalueContainsNull));",
      "prediction": "nextPrefix,\n\t\tvalueType.getTypeName(), valueContainsNull));",
      "raw_prediction": "nextPrefix,\n\t\tvalueType.getTypeName(), valueContainsNull));\n\t\tDataType.buildFormattedString(valueType, nextPrefix, builder);\n\t}\n\n\t@Override\n\tpublic String getTypeName() {\n\t\treturn \"map\";\n\t}\n\n\t@Override\n",
      "es": 0.7796610169491526,
      "em": false,
      "passed": false
    },
    {
      "index": 437,
      "groundtruth": ".format(\"%s-- element: %s (containsNull = %b)\\n\", prefix, elementType.getTypeName(),\n\t\t\t\tcontainsNull));",
      "prediction": ".format(\"%s%s%s%s%n\", prefix, \"Array\", containsNull ? \" Nullable\" : \"\", elementType));",
      "raw_prediction": ".format(\"%s%s%s%s%n\", prefix, \"Array\", containsNull ? \" Nullable\" : \"\", elementType));\n\t .buildFormattedString(nextPrefix, builder));",
      "es": 0.27884615384615385,
      "em": false,
      "passed": false
    },
    {
      "index": 438,
      "groundtruth": "dataType.getTypeName(), nullable, metadata.toString()));",
      "prediction": "dataType, nullable, metadata));",
      "raw_prediction": "dataType, nullable, metadata));\n\t\t// Add the metadata\n\t\tmetadata.buildFormattedString(nextPrefix, builder);\n\t\t// Add the data type",
      "es": 0.5535714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 439,
      "groundtruth": "DataType.buildFormattedString(keyType, nextPrefix, builder);",
      "prediction": "builder.append(String.format(\"%s-- value: %s\\n\", nextPrefix, valueType.getTypeName()));",
      "raw_prediction": "\n\tbuilder.append(String.format(\"%s-- value: %s\\n\", nextPrefix, valueType.getTypeName()));\n\t}\n\tpublic String getTypeName() {\n\t\treturn \"map\";\n\t}\n\n\t@Override\n\tpublic boolean canEqual(Object obj) {\n\t",
      "es": 0.31034482758620685,
      "em": false,
      "passed": false
    },
    {
      "index": 440,
      "groundtruth": "(!dbHero.getId().equals(heroToUpdate.getId())) {",
      "prediction": "(!dbHero.getId().equals(heroToUpdate.getId()))",
      "raw_prediction": "(!dbHero.getId().equals(heroToUpdate.getId())) {",
      "es": 0.9583333333333334,
      "em": false,
      "passed": false
    },
    {
      "index": 441,
      "groundtruth": "dbHero.getXp() + 2);",
      "prediction": "dbHero.getXp() + 100);",
      "raw_prediction": "dbHero.getXp() + 100);",
      "es": 0.8636363636363636,
      "em": false,
      "passed": false
    },
    {
      "index": 442,
      "groundtruth": ").equals(heroToUpdate.getId())) {",
      "prediction": ").equals(heroToUpd",
      "raw_prediction": ").equals(heroToUpdate.getId())) {",
      "es": 0.5454545454545454,
      "em": false,
      "passed": false
    },
    {
      "index": 443,
      "groundtruth": "Insets insets = UIUtils.getInsets(\"Toast.shadowInsets\", new Insets(0, 0, 6, 6));",
      "prediction": "float shadowSize = FlatUIUtils.getUIFloat(\"Toast.shadowSize\", 2);",
      "raw_prediction": "float shadowSize = FlatUIUtils.getUIFloat(\"Toast.shadowSize\", 2);",
      "es": 0.36250000000000004,
      "em": false,
      "passed": false
    },
    {
      "index": 444,
      "groundtruth": "UIUtils.getString(prefix + \".effectAlignment\", \"left\");",
      "prediction": "FlatUIUtils.getUIString(prefix + \".effectAlignment\", \"center\");",
      "raw_prediction": "FlatUIUtils.getUIString(prefix + \".effectAlignment\", \"center\");\n        }\n}\n    @Override\n    protected void installDefaults(JPanel p) {\n        super.installDefaults(p);\n        String prefix = getPropertyPrefix();",
      "es": 0.8412698412698413,
      "em": false,
      "passed": false
    },
    {
      "index": 445,
      "groundtruth": "notificationHolder.clearHold();",
      "prediction": "clear();",
      "raw_prediction": "clear();\n    }\n\n    public void clear(Location location) {\n clear(location);\n    }\n\n    public void clearHold() {\n        notificationHolder.clearHold();\n    }\n\n    public void clearHold(Location location) {\n        notificationHolder.clearHold(location);\n",
      "es": 0.25806451612903225,
      "em": false,
      "passed": false
    },
    {
      "index": 446,
      "groundtruth": "UIUtils.getInsets(\"Toast.frameInsets\", new Insets(10, 10, 10, 10));",
      "prediction": "UIScale.scale(FlatUIUtils.getInsets(\"Toast.frameInsets\", 10, 10, 10, 10);",
      "raw_prediction": "UIScale.scale(FlatUIUtils.getInsets(\"Toast.frameInsets\", 10, 10, 10, 10);\n            duration = FlatUIUtils.getUIInt(\"Toast.duration\", 2500",
      "es": 0.589041095890411,
      "em": false,
      "passed": false
    },
    {
      "index": 447,
      "groundtruth": "notificationHolder.removeHold(hold);",
      "prediction": "notificationClose(hold);",
      "raw_prediction": " notificationClose(hold);\n             } else {\n             notificationClose(notificationAnimation);\n             }",
      "es": 0.6111111111111112,
      "em": false,
      "passed": false
    },
    {
      "index": 448,
      "groundtruth": "toastNotificationPanel.setDialog(window);",
      "prediction": "window.setLocationRelativeTo(frame);",
      "raw_prediction": " window.setLocationRelativeTo(frame);\n            window.setOpacity(0f);\n            window.setVisible(true);\n            show = true;\n            duration = duration;\n        }\n\n        public Notification NotificationAnimation(Location location, long duration, String message) {\n            installDefault",
      "es": 0.29268292682926833,
      "em": false,
      "passed": false
    },
    {
      "index": 449,
      "groundtruth": "+ \".closeIcon\", UIUtils.createIcon(\"raven/toast/svg/close.svg\", closeIconColor, 0.75f));",
      "prediction": "+ \".closeButtonIcon\", \"Toast.closeButtonIcon\");",
      "raw_prediction": "+ \".closeButtonIcon\", \"Toast.closeButtonIcon\");\n       ",
      "es": 0.3522727272727273,
      "em": false,
      "passed": false
    },
    {
      "index": 450,
      "groundtruth": "hold = notificationHolder.getHold(notificationAnimation.getLocation());",
      "prediction": "hold = notificationHolder.getHold(location);",
      "raw_prediction": "hold = notificationHolder.getHold(location);",
      "es": 0.6056338028169015,
      "em": false,
      "passed": false
    },
    {
      "index": 451,
      "groundtruth": "UIUtils.getInsets(prefix + \".margin\", new Insets(8, 8, 8, 8));",
      "prediction": "UIUtils.getInsets(prefix + \".margin\", new Insets(0, 0, 0, 0);",
      "raw_prediction": "UIUtils.getInsets(prefix + \".margin\", new Insets(0, 0, 0, 0);\n        showCloseButton = FlatUIUtils.getUIBoolean(prefix + \".showCloseButton\", true);",
      "es": 0.9193548387096774,
      "em": false,
      "passed": false
    },
    {
      "index": 452,
      "groundtruth": "notificationHolder.clearHold(location);",
      "prediction": "List<NotificationAnimation> list = lists.get(location);",
      "raw_prediction": " List<NotificationAnimation> list = lists.get(location);\n         if (list != null) {\n             for (int i = 0; i < list.size(); i++) {\n             NotificationAnimation an = list.get(i);\n             if (",
      "es": 0.4545454545454546,
      "em": false,
      "passed": false
    },
    {
      "index": 453,
      "groundtruth": "toastNotificationPanel.set(type, message);",
      "prediction": "toastNotificationPanel.setMessage(message);",
      "raw_prediction": " toastNotificationPanel.setMessage(message);\n",
      "es": 0.813953488372093,
      "em": false,
      "passed": false
    },
    {
      "index": 454,
      "groundtruth": "notificationHolder.hold(notificationAnimation);",
      "prediction": "clear(location);",
      "raw_prediction": " clear(location);\n            return false;\n        }\n    }\n\n    public void showHold(Type type, String message) {\n        showHold(type, Location.TOP_CENTER, public;\n    }\n\n    public void showHold(Type type, Location location, String",
      "es": 0.276595744680851,
      "em": false,
      "passed": false
    },
    {
      "index": 455,
      "groundtruth": "lowerLeft.getY()).transform(new GenericShape(originalPoints)).getPoints();",
      "prediction": "lowerLeft.getY()).apply(originalPoints);",
      "raw_prediction": "lowerLeft.getY()).apply(originalPoints);",
      "es": 0.4864864864864865,
      "em": false,
      "passed": false
    },
    {
      "index": 456,
      "groundtruth": "lowerLeft.getX(), lowerLeft.getY()).transform(new GenericShape(originalPoints)).getPoints();",
      "prediction": "lowerLeft).apply(originalPoints);",
      "raw_prediction": "lowerLeft).apply(originalPoints);",
      "es": 0.3152173913043478,
      "em": false,
      "passed": false
    },
    {
      "index": 457,
      "groundtruth": "y][x].isSet()) {",
      "prediction": "y][x].isSe",
      "raw_prediction": "y][x].isSet()) {",
      "es": 0.625,
      "em": false,
      "passed": false
    },
    {
      "index": 458,
      "groundtruth": "(point.getX(), point.getY());",
      "prediction": "(point.getX(), point.getY());",
      "raw_prediction": "(point.getX(), point.getY());\n        }\n    }\n\n    public void unset(Shape shape) {\n        for (Point point : shape.getPoints()) {\n            unset(point.getX(), point.getY());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 459,
      "groundtruth": "getX() * factor, point.getY() * factor + 50, factor, factor);",
      "prediction": "getX() * factor, point.getY() * factor, factor, factor);",
      "raw_prediction": "getX() * factor, point.getY() * factor, factor, factor);",
      "es": 0.9180327868852459,
      "em": false,
      "passed": false
    },
    {
      "index": 460,
      "groundtruth": ".drawOval(point.getX() * factor, point.getY() * factor + 50, factor, factor);",
      "prediction": ".drawLine(factor * point.getX(), factor * point.getY(), factor * point.getX(), factor * point.getY());",
      "raw_prediction": ".drawLine(factor * point.getX(), factor * point.getY(), factor * point.getX(), factor * point.getY());\n            }",
      "es": 0.5588235294117647,
      "em": false,
      "passed": false
    },
    {
      "index": 461,
      "groundtruth": ", this.parserMulti(methodInfo.getActionInfo().getBatchSql()[i], null));",
      "prediction": ");",
      "raw_prediction": ");\n            )",
      "es": 0.028169014084507005,
      "em": false,
      "passed": false
    },
    {
      "index": 462,
      "groundtruth": "ExceptionUtils.mpe(\"Failed to process multiple-table update, please exclude the tableName or statementId\");",
      "prediction": "ExceptionUtils.unsupportedSql(\"insert into select\", sql);",
      "raw_prediction": "ExceptionUtils.unsupportedSql(\"insert into select\", sql);",
      "es": 0.30841121495327106,
      "em": false,
      "passed": false
    },
    {
      "index": 463,
      "groundtruth": "array.validateShape(String.valueOf(key), expectedShape);",
      "prediction": "if (array == null) {",
      "raw_prediction": "if (array == null) {\n            return null;\n        }\n        array = array.validateShape(key, expectedShape);",
      "es": 0.1071428571428571,
      "em": false,
      "passed": false
    },
    {
      "index": 464,
      "groundtruth": "myJavaInputStream    = in.getInputStream();",
      "prediction": "myJavaInputStream   = in.getInputStream();",
      "raw_prediction": "    myJavaInputStream   = in.getInputStream();",
      "es": 0.9767441860465116,
      "em": true,
      "passed": true
    },
    {
      "index": 465,
      "groundtruth": "myPythonInputStream  = out.getInputStream();",
      "prediction": "myPythonInputStream  = out.getInputStream();",
      "raw_prediction": "myPythonInputStream  = out.getInputStream();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 466,
      "groundtruth": "= StringUtil.stackTraceToString(t);",
      "prediction": "= StringUtil.stackTraceToString(t);",
      "raw_prediction": "= StringUtil.stackTraceToString(t);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 467,
      "groundtruth": "param.put(item.getValue(), hParam);",
      "prediction": "param.put(item.getValue(),hParam);",
      "raw_prediction": "param.put(item.getValue(),hParam);",
      "es": 0.9714285714285714,
      "em": false,
      "passed": false
    },
    {
      "index": 468,
      "groundtruth": "GrayParamHolder.putValues(param);",
      "prediction": "GrayParamHolder.putValue(param);",
      "raw_prediction": "GrayParamHolder.putValue(param);",
      "es": 0.9696969696969697,
      "em": false,
      "passed": false
    },
    {
      "index": 469,
      "groundtruth": "= GrayUtil.isGrayRequest();",
      "prediction": "= GrayUtil.isGrayRequest();",
      "raw_prediction": "= GrayUtil.isGrayRequest();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 470,
      "groundtruth": "if(GrayUtil.isGrayPod()){",
      "prediction": "if(GrayUtil.isGray())",
      "raw_prediction": "if(GrayUtil.isGray()){",
      "es": 0.84,
      "em": false,
      "passed": false
    },
    {
      "index": 471,
      "groundtruth": "info(\"\u5f53\u524d\u5b9e\u4f8b\u76d1\u542cmq\u961f\u5217\u7684\u72b6\u6001:{",
      "prediction": "info(\"\u5f53\u524d\u5b9e\u4f8b\u76d1\u542c\u72b6\u6001\uff1a{",
      "raw_prediction": "info(\"\u5f53\u524d\u5b9e\u4f8b\u76d1\u542c\u72b6\u6001\uff1a{",
      "es": 0.7142857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 472,
      "groundtruth": "=GrayUtil.requestGroup();",
      "prediction": "=GrayUtil.getGrayGroup();",
      "raw_prediction": "=GrayUtil.getGrayGroup();",
      "es": 0.76,
      "em": false,
      "passed": false
    },
    {
      "index": 473,
      "groundtruth": "String> attributes= GrayParamHolder.getGrayMap();",
      "prediction": "String> attributes=GrayParamHolder.getGrayMap();",
      "raw_prediction": "String> attributes=GrayParamHolder.getGrayMap();",
      "es": 0.9795918367346939,
      "em": false,
      "passed": false
    },
    {
      "index": 474,
      "groundtruth": "getName() + \"\u7070\u5ea6\u73af\u5883\u53d8\u66f4:\" + listenerStateEnum.getValue());",
      "prediction": "getName().concat(\"\u6536\u5230\u4e8b\u4ef6:\").concat(listenerStateEnum.name()));",
      "raw_prediction": "getName().concat(\"\u6536\u5230\u4e8b\u4ef6:\").concat(listenerStateEnum.name()));",
      "es": 0.5166666666666666,
      "em": false,
      "passed": false
    },
    {
      "index": 475,
      "groundtruth": "getHeader(item.getValue());",
      "prediction": "getHeader(item.getValue());",
      "raw_prediction": "getHeader(item.getValue());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 476,
      "groundtruth": "(\"\u5f53\u524d\u5b9e\u4f8b\u662f\u5426\u4e3a\u7070\u5ea6\u73af\u5883\uff1a{",
      "prediction": "(\"\u5f53\u524d\u5b9e\u4f8b\u662f\u5426\u662f\u7070\u5ea6\u5b9e\u4f8b:{",
      "raw_prediction": "(\"\u5f53\u524d\u5b9e\u4f8b\u662f\u5426\u662f\u7070\u5ea6\u5b9e\u4f8b:{",
      "es": 0.7333333333333334,
      "em": false,
      "passed": false
    },
    {
      "index": 477,
      "groundtruth": "myByteList.clear();",
      "prediction": "write(Operations.BINFLOAT);",
      "raw_prediction": "write(Operations.BINFLOAT);\n        writeLittleEndianInt(Float.floatToIntBits(o));",
      "es": 0.18518518518518523,
      "em": false,
      "passed": false
    },
    {
      "index": 478,
      "groundtruth": "(myByteList.toArray());",
      "prediction": "(myFourByteBuffer.putFloat(0);",
      "raw_prediction": "(myFourByteBuffer.putFloat(0);\n        write(Operations.TUPLE1:\n",
      "es": 0.4,
      "em": false,
      "passed": false
    },
    {
      "index": 479,
      "groundtruth": "PythonMinion.byValue(foo);",
      "prediction": "\"foo\" + round;",
      "raw_prediction": "\"foo\" + round;\n            start = System.nanoTime();\n            for (int i=0; i < count; i++) {\n                python.invoke(\"len\", Integer.class, foo);\n            }\n            end = System.nanoTime()\n            System",
      "es": 0.15384615384615385,
      "em": false,
      "passed": false
    },
    {
      "index": 480,
      "groundtruth": "python.invoke(\"len\", Integer.class, foo);",
      "prediction": "python.invoke(\"len\", Integer.class, foo);",
      "raw_prediction": "python.invoke(\"len\", Integer.class, foo);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 481,
      "groundtruth": "python.invoke(\"len\", Integer.class, arg);",
      "prediction": "python.invoke(\"len\", Integer.class, arg);",
      "raw_prediction": "python.invoke(\"len\", Integer.class, arg);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 482,
      "groundtruth": "[]     shape   = {",
      "prediction": "}",
      "raw_prediction": "\n    }\n",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 483,
      "groundtruth": "RtcMsg.createContractTransaction(\n                        subject, application, content, to));",
      "prediction": "new RtcMsg(\n                subject,\n            application,\n            content,\n            to);",
      "raw_prediction": "    new RtcMsg(\n                subject,\n            application,\n            content,\n            to);",
      "es": 0.29292929292929293,
      "em": false,
      "passed": false
    },
    {
      "index": 484,
      "groundtruth": "rawTransaction = RawTelegram.createTransaction(nonce, gasPrice, gasLimit, contractAddress, value, data);",
      "prediction": "rawTransaction = RawTelegram.createTransaction(nonce, gasPrice, gasLimit, contractAddress, value, data);",
      "raw_prediction": "rawTransaction = RawTelegram.createTransaction(nonce, gasPrice, gasLimit, contractAddress, value, data);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 485,
      "groundtruth": "o.getNoCheck(i));",
      "prediction": "/**",
      "raw_prediction": " /**\n     * Save a map of arbitrary objects as a dict.\n",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 486,
      "groundtruth": "myByteList.append(Float.toString(o).getBytes());",
      "prediction": "myByteList.add((byte) (o?1:0);",
      "raw_prediction": "myByteList.add((byte) (o?1:0);\n        write(Operations.BINFLOAT:\n       ",
      "es": 0.39583333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 487,
      "groundtruth": "(config.getValueOutputFormat() == BaseTableWriterConfig.OutputFormat.STRING\n        && !(recordValue instanceof String)) {",
      "prediction": "(config.getValueOutputFormat() == BaseTableWriterConfig.OutputFormat.STRING\n        && !(recordValue instanceof String))",
      "raw_prediction": "(config.getValueOutputFormat() == BaseTableWriterConfig.OutputFormat.STRING\n        && !(recordValue instanceof String)) {",
      "es": 0.9836065573770492,
      "em": false,
      "passed": false
    },
    {
      "index": 488,
      "groundtruth": ", SCALAR_ARRAY_SHAPE, rawData.data());",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 489,
      "groundtruth": "Util.parseHumanReadableDuration(value.toString());",
      "prediction": "Duration.parseHumanReadableDuration(value.toString());",
      "raw_prediction": "Duration.parseHumanReadableDuration(value.toString());",
      "es": 0.8888888888888888,
      "em": false,
      "passed": false
    },
    {
      "index": 490,
      "groundtruth": "(config.getKeyOutputFormat() == BaseTableWriterConfig.OutputFormat.STRING\n        && !(recordKey instanceof String)) {",
      "prediction": "(config.getKeyOutputFormat() == BaseTableWriterConfig.OutputFormat.STRING\n        && !(recordKey instanceof String))",
      "raw_prediction": "(config.getKeyOutputFormat() == BaseTableWriterConfig.OutputFormat.STRING\n        && !(recordKey instanceof String)) {",
      "es": 0.9830508474576272,
      "em": false,
      "passed": false
    },
    {
      "index": 491,
      "groundtruth": "return dummyArray.getLong(0);",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 492,
      "groundtruth": "if (usuario.getPassword().equals(Senha)) {",
      "prediction": "if (usuario.getSenha().equals(Senha))",
      "raw_prediction": " if (usuario.getSenha().equals(Senha)) {",
      "es": 0.7619047619047619,
      "em": false,
      "passed": false
    },
    {
      "index": 493,
      "groundtruth": "RA_atual = usuario.getMatricula();",
      "prediction": "usuarioLogado = usuario;",
      "raw_prediction": "usuarioLogado = usuario;\nimport Intent intent = new Intent(Login.this, Anime_feed.class);\nimport startActivity(intent);",
      "es": 0.2647058823529411,
      "em": false,
      "passed": false
    },
    {
      "index": 494,
      "groundtruth": "!twilioService.validatePhoneNumber(from)) {",
      "prediction": "!twilioService.isValidP",
      "raw_prediction": "!twilioService.isValidPhoneNumber(from)) {",
      "es": 0.41860465116279066,
      "em": false,
      "passed": false
    },
    {
      "index": 495,
      "groundtruth": "String response = chatGPTService.askQuestion(message);",
      "prediction": "String response = chatGPTService.sendChatMessage(message);",
      "raw_prediction": "    String response = chatGPTService.sendChatMessage(message);\n",
      "es": 0.7758620689655172,
      "em": false,
      "passed": false
    },
    {
      "index": 496,
      "groundtruth": "chatGPTService.askQuestion(body);",
      "prediction": "chatGPTService.pro",
      "raw_prediction": "chatGPTService.processMessage(body, fromCity, fromState, fromCountry);\n",
      "es": 0.48484848484848486,
      "em": false,
      "passed": false
    },
    {
      "index": 497,
      "groundtruth": "chatGPTConfiguration.setApiKey(ConfigUtils.obfuscateApiKey(chatGPTConfiguration.getApiKey()));",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 498,
      "groundtruth": "(request.getTo());",
      "prediction": "(request.getTo());",
      "raw_prediction": "(request.getTo());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 499,
      "groundtruth": "responseFrame = FrameMapper.mapFromBytesToInstance(currentFrameBytes);",
      "prediction": "responseFrame = FrameMapper.mapFromBytesToInstance(currentFrameBytes);",
      "raw_prediction": "responseFrame = FrameMapper.mapFromBytesToInstance(currentFrameBytes);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 500,
      "groundtruth": "UDPFrame currentFrame = FrameMapper.mapFromBytesToInstance(incomingRequestPacket.getData());",
      "prediction": "UDPFrame currentFrame = FrameMapper.map(incomingRequestPacket);",
      "raw_prediction": "\tUDPFrame currentFrame = FrameMapper.map(incomingRequestPacket);",
      "es": 0.6847826086956521,
      "em": false,
      "passed": false
    },
    {
      "index": 501,
      "groundtruth": ", List<UDPFrame>> completedRequestFrameList : map.findCompletedRequestsFrameLists())\n\t\t\t\t{",
      "prediction": ", List<UDPFrame>> completedRequestFrameList : m",
      "raw_prediction": ", List<UDPFrame>> completedRequestFrameList : map.getCompletedRequestFrames())\n\t\t\t\t{\n\t\t\t\t\tif (completedRequestFrameList.value().size() != NetworkUtils.REQUEST_SIZE)\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t//TODO: Implement",
      "es": 0.5222222222222221,
      "em": false,
      "passed": false
    },
    {
      "index": 502,
      "groundtruth": "sendResponseWithOverhead(responseBytes, response.getTo());",
      "prediction": "sendResponseWithOverhead(responseBytes, response.getTo());",
      "raw_prediction": "sendResponseWithOverhead(responseBytes, response.getTo());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 503,
      "groundtruth": "return execute(api.getModel(modelId));",
      "prediction": "return execute(api.getModel(modelId));",
      "raw_prediction": "   return execute(api.getModel(modelId));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 504,
      "groundtruth": "return execute(api.listModels()).data;",
      "prediction": "return execute(api.listModels()).data;",
      "raw_prediction": " return execute(api.listModels()).data;",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 505,
      "groundtruth": "if (infoFilter.isStudentIdValid(studentId)) {",
      "prediction": "if (!infoFilter.checkStudentId(studentId))",
      "raw_prediction": " if (!infoFilter.checkStudentId(studentId)) {\n",
      "es": 0.7111111111111111,
      "em": false,
      "passed": false
    },
    {
      "index": 506,
      "groundtruth": "infoFilter.isPersonIdValid(id)) {",
      "prediction": "infoFilter.isPerso",
      "raw_prediction": "infoFilter.isPersonIdValid(id)) {",
      "es": 0.5454545454545454,
      "em": false,
      "passed": false
    },
    {
      "index": 507,
      "groundtruth": "if (subject.getKind().compareTo(\n                    comboSubjectType.getItemAt(i).toString()) == 0) {",
      "prediction": "if (comboSubjectType.getItemAt(i).equals(subject.getKind()))",
      "raw_prediction": "if (comboSubjectType.getItemAt(i).equals(subject.getKind())) {",
      "es": 0.27450980392156865,
      "em": false,
      "passed": false
    },
    {
      "index": 508,
      "groundtruth": "txtMajor.setText(student.getMajor());",
      "prediction": "txtMajor.setText(student.getMajor());",
      "raw_prediction": "txtMajor.setText(student.getMajor());\n                ",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 509,
      "groundtruth": "subject.getKind().compareTo(\n                    comboSubjectType.getItemAt(i).toString()) == 0) {",
      "prediction": "comboSubjectType.getItemAt(i).equals(subject.getKind())",
      "raw_prediction": "comboSubjectType.getItemAt(i).equals(subject.getKind())) {",
      "es": 0.24489795918367352,
      "em": false,
      "passed": false
    },
    {
      "index": 510,
      "groundtruth": "ect.getName() + \" tr\u01b0\u1edbc \u0111\u00f3.\";",
      "prediction": "e.getName() + \" tr\u01b0\u1edbc!\";",
      "raw_prediction": "e.getName() + \" tr\u01b0\u1edbc!\";",
      "es": 0.7931034482758621,
      "em": false,
      "passed": false
    },
    {
      "index": 511,
      "groundtruth": "if (infoFilter.isDateOfBirthValid(dob)) {",
      "prediction": "if (infoFilter.isDateOfBirthValid(dob))",
      "raw_prediction": "if (infoFilter.isDateOfBirthValid(dob)) {",
      "es": 0.9512195121951219,
      "em": false,
      "passed": false
    },
    {
      "index": 512,
      "groundtruth": "if (s.getStudentId().compareTo(studentId) == 0) {",
      "prediction": "if (s.getStudentId().equals(studentId))",
      "raw_prediction": " if (s.getStudentId().equals(studentId)) {",
      "es": 0.6938775510204082,
      "em": false,
      "passed": false
    },
    {
      "index": 513,
      "groundtruth": "System.out.println(\"[ \" + raiz.getElement() + \" ]\");",
      "prediction": "System.out.println(\"[ \" + raiz.getElement() + \" ]\");",
      "raw_prediction": "System.out.println(\"[ \" + raiz.getElement() + \" ]\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 514,
      "groundtruth": "nodo.setRightSon(raiz.getRightSon());",
      "prediction": "if (element < previousNode.getElement())",
      "raw_prediction": " if (element < previousNode.getElement()) {\n             previousNode.setLeftSon(nodo);\n public } else {\npublic previousNode.setRightSon(nodo);\npublic }\n} else { Nodo nodo = raiz.getLeftSon(); nodo.setRightSon",
      "es": 0.19999999999999996,
      "em": false,
      "passed": false
    },
    {
      "index": 515,
      "groundtruth": "if (element == raiz.getElement()) {",
      "prediction": "if (element < raiz.getElement())",
      "raw_prediction": "if (element < raiz.getElement()) {\n            deleteNodo(element, raiz.getLeftSon(), raiz);\n            } else if (element > raiz.getElement()) {\n            deleteNodo(element, raiz.getRightSon(), raiz",
      "es": 0.8857142857142857,
      "em": false,
      "passed": false
    },
    {
      "index": 516,
      "groundtruth": "raiz.isLeaf()) {",
      "prediction": "raiz.hasNo",
      "raw_prediction": "raiz.hasNoSon()) {",
      "es": 0.375,
      "em": false,
      "passed": false
    },
    {
      "index": 517,
      "groundtruth": "(element < previousNode.getElement()) {",
      "prediction": "(element < previousNode.getElement())",
      "raw_prediction": "(element < previousNode.getElement()) {",
      "es": 0.9487179487179487,
      "em": false,
      "passed": false
    },
    {
      "index": 518,
      "groundtruth": "else if (raiz.hasOnlyRightSon()) {",
      "prediction": "else if (raiz.hasOnlyRightSon())",
      "raw_prediction": "else if (raiz.hasOnlyRightSon()) {",
      "es": 0.9411764705882353,
      "em": false,
      "passed": false
    },
    {
      "index": 519,
      "groundtruth": "raiz.getRightSon() != null;",
      "prediction": "raiz.getRightSon() != null;",
      "raw_prediction": "raiz.getRightSon() != null;",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 520,
      "groundtruth": "nodo.setLeftSon(raiz.getLeftSon());",
      "prediction": "nodo.setLeftSon(raiz.getLeftSon());",
      "raw_prediction": " nodo.setLeftSon(raiz.getLeftSon());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 521,
      "groundtruth": "Nodo nodo = searchNodoToReplace(raiz.getLeftSon());",
      "prediction": "public Nodo nodo = searchNodoToReplace(raiz.getLeftSon());",
      "raw_prediction": "\npublic Nodo nodo = searchNodoToReplace(raiz.getLeftSon());",
      "es": 0.8793103448275862,
      "em": false,
      "passed": false
    },
    {
      "index": 522,
      "groundtruth": "validateLeftSon(raiz.getLeftSon());",
      "prediction": "raiz.hasOnlyRightSon();",
      "raw_prediction": "raiz.hasOnlyRightSon();\n",
      "es": 0.34285714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 523,
      "groundtruth": ".setRightSon(raiz.getRightSon());",
      "prediction": ".setLeftSon(raiz.getLeftSon());",
      "raw_prediction": ".setLeftSon(raiz.getLeftSon());\npublic nodo.setRightSon(raiz.getRightSon());",
      "es": 0.7575757575757576,
      "em": false,
      "passed": false
    },
    {
      "index": 524,
      "groundtruth": "Nodo nodo = raiz.getLeftSon();",
      "prediction": "Nodo nodo = searchNodoToReplace(raiz.getRightSon());",
      "raw_prediction": " Nodo nodo = searchNodoToReplace(raiz.getRightSon());",
      "es": 0.5192307692307692,
      "em": false,
      "passed": false
    },
    {
      "index": 525,
      "groundtruth": "while(raiz.getRightSon() != null) {",
      "prediction": "while (raiz.getRightSon() != null)",
      "raw_prediction": " while (raiz.getRightSon() != null){",
      "es": 0.9142857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 526,
      "groundtruth": "[] newSons = new Nodo[father.getSons().length + 1];",
      "prediction": "[] newSons = new Nodo[father.getSons().length + 1];",
      "raw_prediction": "[] newSons = new Nodo[father.getSons().length + 1];",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 527,
      "groundtruth": "pointer.getElement() == fatherElement) {",
      "prediction": "pointer == null) {",
      "raw_prediction": "pointer == null) {",
      "es": 0.375,
      "em": false,
      "passed": false
    },
    {
      "index": 528,
      "groundtruth": "if (pointer.getSons()[i].getElement() == fatherElement) {",
      "prediction": "if (pointer.getSons()[i] == null)",
      "raw_prediction": " if (pointer.getSons()[i] == null) {",
      "es": 0.5263157894736843,
      "em": false,
      "passed": false
    },
    {
      "index": 529,
      "groundtruth": "out.println(\"[ \"+raiz.getElement() + \" ]\");",
      "prediction": "out.println(raiz.getElement());",
      "raw_prediction": "out.println(raiz.getElement());\n        for (int i = 0; i < raiz.getSons().length; i++) {\n            printPreOrden(raiz.getSons()[i]);\n        }\n    }\n    public void printInOrden",
      "es": 0.7209302325581395,
      "em": false,
      "passed": false
    },
    {
      "index": 530,
      "groundtruth": "33, bst.getRoot());",
      "prediction": "15, bst.getRoot());",
      "raw_prediction": "15, bst.getRoot());\n        bst.insertNodoRecursive(2, bst.getRoot());\n        bst.insertNodoRecursive(1, bst.getRoot());\n        bst.insertNodoRecursive(22, bst.getRoot());\n        bst.insertNodo",
      "es": 0.8947368421052632,
      "em": false,
      "passed": false
    },
    {
      "index": 531,
      "groundtruth": ".preOrden(bst.getRoot());",
      "prediction": ".preOrden(bst.getRoot());",
      "raw_prediction": ".preOrden(bst.getRoot());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 532,
      "groundtruth": "(25, bst.getRoot());",
      "prediction": "(15, bst.getRoot());",
      "raw_prediction": "(15, bst.getRoot());",
      "es": 0.95,
      "em": false,
      "passed": false
    },
    {
      "index": 533,
      "groundtruth": ".deleteNodo(30, bst.getRoot(), null);",
      "prediction": ".deleteNodoRecursive(20, bst.getRoot());",
      "raw_prediction": ".deleteNodoRecursive(20, bst.getRoot());",
      "es": 0.6,
      "em": false,
      "passed": false
    },
    {
      "index": 534,
      "groundtruth": "(getPeek().getNext());",
      "prediction": "(pointer.getNext());",
      "raw_prediction": "(pointer.getNext());",
      "es": 0.6363636363636364,
      "em": false,
      "passed": false
    },
    {
      "index": 535,
      "groundtruth": "(pointer.getNext() != pointer2) {",
      "prediction": "(pointer.getNext() != getHead())",
      "raw_prediction": "(pointer.getNext() != getHead()) {",
      "es": 0.696969696969697,
      "em": false,
      "passed": false
    },
    {
      "index": 536,
      "groundtruth": ".println(\"[ \"+pointer.getElement()+\" ]\");",
      "prediction": ".println(pointer.getElement());",
      "raw_prediction": ".println(pointer.getElement());",
      "es": 0.7560975609756098,
      "em": false,
      "passed": false
    },
    {
      "index": 537,
      "groundtruth": ").setNext(getHead());",
      "prediction": ").setNext(getHead());",
      "raw_prediction": ").setNext(getHead());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 538,
      "groundtruth": "while (pointer.getNext() != getHead()) {",
      "prediction": "while (((Nodo) pointer.getNext()).getNext() != getHead())",
      "raw_prediction": "\n            while (((Nodo) pointer.getNext()).getNext() != getHead()) {",
      "es": 0.631578947368421,
      "em": false,
      "passed": false
    },
    {
      "index": 539,
      "groundtruth": "pointer.getNext())).getNext() != getHead()) {",
      "prediction": "pointer.getNext())).getNext() != getHead()) {",
      "raw_prediction": "pointer.getNext())).getNext() != getHead()) {",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 540,
      "groundtruth": "pointer.setNext(getHead());",
      "prediction": "pointer.setNext(node);",
      "raw_prediction": "pointer.setNext(node);",
      "es": 0.7037037037037037,
      "em": false,
      "passed": false
    },
    {
      "index": 541,
      "groundtruth": "list.deleteInIndex(3);",
      "prediction": "list.printList();",
      "raw_prediction": "    list.printList();\n        list.insertInIndex(25, 0);\n        System.out.println(\"\");",
      "es": 0.40909090909090906,
      "em": false,
      "passed": false
    },
    {
      "index": 542,
      "groundtruth": "while (pointer.getNext() != pointer2) {",
      "prediction": "pointer2.setNext(null);",
      "raw_prediction": "pointer2.setNext(null);\n            length--;\n            return pointer;\n        }\n        \n        return null;\n    }\n    public Nodo deleteInIndex(int index){\n        if (isEmpty()) {\n            System.out.println(\"List is Empty\");\n        }",
      "es": 0.41025641025641024,
      "em": false,
      "passed": false
    },
    {
      "index": 543,
      "groundtruth": ".getNext())).getNext() != getHead()) {",
      "prediction": ".getNext())).getNext() != pointer) {",
      "raw_prediction": ".getNext())).getNext() != pointer) {\n                pointer = (Nodo) pointer.getNext();\n            }",
      "es": 0.7631578947368421,
      "em": false,
      "passed": false
    },
    {
      "index": 544,
      "groundtruth": "int) pointer1.getElement();",
      "prediction": "int) pointer1.getElement();",
      "raw_prediction": "int) pointer1.getElement();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 545,
      "groundtruth": "pointer1 = lista1.getHead();",
      "prediction": "pointer1 = lista1.getHead();",
      "raw_prediction": "pointer1 = lista1.getHead();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 546,
      "groundtruth": "Nodo pointer3 = lista3.getHead();",
      "prediction": "Nodo pointer3 = lista3.getHead();",
      "raw_prediction": "    Nodo pointer3 = lista3.getHead();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 547,
      "groundtruth": ").setPrevious(node);",
      "prediction": ").setPrevious(node);",
      "raw_prediction": ").setPrevious(node);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 548,
      "groundtruth": "node.setPrevious(pointer);",
      "prediction": "pointer.setNext(node);",
      "raw_prediction": "pointer.setNext(node);\n            node.setPrevious(pointer);",
      "es": 0.34615384615384615,
      "em": false,
      "passed": false
    },
    {
      "index": 549,
      "groundtruth": "= (NodoDoble) pointer.getNext();",
      "prediction": "= (NodoDoble) pointer.getNext();",
      "raw_prediction": "= (NodoDoble) pointer.getNext();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 550,
      "groundtruth": "pointer2 = pointer.getPrevious();",
      "prediction": "pointer2 = pointer.getPrevious();",
      "raw_prediction": "pointer2 = pointer.getPrevious();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 551,
      "groundtruth": "pointer.setPrevious(null);",
      "prediction": "pointer.setNext(null);",
      "raw_prediction": "pointer.setNext(null);",
      "es": 0.7307692307692308,
      "em": false,
      "passed": false
    },
    {
      "index": 552,
      "groundtruth": "pointer2 = pointer.getNext();",
      "prediction": "pointer2 = pointer.getNext();",
      "raw_prediction": "pointer2 = pointer.getNext();\n                    pointer.setNext(pointer2.getNext());\n                    pointer2.getNext().setPrevious(pointer);\n                    pointer2.setNext(null);\n                    pointer2.setPrevious(null);\n                    return pointer2;\n                }\n            } else {\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 553,
      "groundtruth": "pointer2.getNext().setPrevious(pointer);",
      "prediction": "pointer2.getNext().setPrevious(pointer);",
      "raw_prediction": "pointer2.getNext().setPrevious(pointer);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 554,
      "groundtruth": "emoji.getSubgroup() == subgroup).collect(Collectors.toSet());",
      "prediction": "emoji.getSubGroup() == subgroup).collect(Collectors.toSet());",
      "raw_prediction": "emoji.getSubGroup() == subgroup).collect(Collectors.toSet());",
      "es": 0.9836065573770492,
      "em": false,
      "passed": false
    },
    {
      "index": 555,
      "groundtruth": "(emoji -> emoji.getDiscordAliases().contains(aliasWithoutColon) || emoji.getDiscordAliases().contains(aliasWithColon))\n                .findFirst();",
      "prediction": "(emoji -> emoji.getDiscordAliases().contains(aliasWithoutColon) || emoji.getDiscordAliases().contains(aliasWithColon))\n                .findFirst();",
      "raw_prediction": "(emoji -> emoji.getDiscordAliases().contains(aliasWithoutColon) || emoji.getDiscordAliases().contains(aliasWithColon))\n                .findFirst();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 556,
      "groundtruth": "emoji.getAllAliases().contains(aliasWithoutColon) || emoji.getAllAliases().contains(aliasWithColon))\n                .findFirst();",
      "prediction": "emoji.getAliases().contains(aliasWithoutColon) || emoji.getAliases().contains(aliasWithColon))\n                .findFirst();",
      "raw_prediction": "emoji.getAliases().contains(aliasWithoutColon) || emoji.getAliases().contains(aliasWithColon))\n                .findFirst();",
      "es": 0.9538461538461538,
      "em": false,
      "passed": false
    },
    {
      "index": 557,
      "groundtruth": "return EMOJIS_LENGTH_DESCENDING.stream().filter(emoji -> emoji.getGroup() == group).collect(Collectors.toSet());",
      "prediction": "return EMOJIS_LENGTH_DESCENDING.stream().filter(emoji -> emoji.getGroup() == group).collect(Collectors.toSet());",
      "raw_prediction": "return EMOJIS_LENGTH_DESCENDING.stream().filter(emoji -> emoji.getGroup() == group).collect(Collectors.toSet());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 558,
      "groundtruth": ".removeHairStyle(Fitzpatrick.removeFitzpatrick(emoji));",
      "prediction": ".removeHairStyle(Fitzpatrick.removeFitzpatrick(getEmoji()));",
      "raw_prediction": ".removeHairStyle(Fitzpatrick.removeFitzpatrick(getEmoji()));\n        if (baseEmoji.equals(getEmoji())) {\n            return Collections.emptyList();\n        }",
      "es": 0.9166666666666666,
      "em": false,
      "passed": false
    },
    {
      "index": 559,
      "groundtruth": "mListener.onCancelledAuth();",
      "prediction": "mListener.onLoggedOut();",
      "raw_prediction": " mListener.onLoggedOut();",
      "es": 0.6785714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 560,
      "groundtruth": "mListener.onLoggedOut();",
      "prediction": "mListener.onLogOut();",
      "raw_prediction": "mListener.onLogOut();",
      "es": 0.875,
      "em": false,
      "passed": false
    },
    {
      "index": 561,
      "groundtruth": "HuaweiPushPlugin.handleReceiveMessage(messageData);",
      "prediction": "Log.i(TAG, \"messageData is \" + messageData);",
      "raw_prediction": "Log.i(TAG, \"messageData is \" + messageData);\n        try {\n            JSONObject jsonObject = new JSONObject(messageData);\n            String messageTitle = jsonObject.getString(\"title\");\n            String messageContent = jsonObject.getString(\"content\");\n            String message",
      "es": 0.33333333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 562,
      "groundtruth": "mAdStatusListener.onRewarded(rewardName, rewardAmount);",
      "prediction": "mAdStatusListener.onRewarded(rewardAmount, rewardName);",
      "raw_prediction": " mAdStatusListener.onRewarded(rewardAmount, rewardName);",
      "es": 0.7818181818181819,
      "em": false,
      "passed": false
    },
    {
      "index": 563,
      "groundtruth": "CipherUtil.doCheck(inAppPurchaseDataStr, inAppPurchaseDataSignature, mPublicKey)) {",
      "prediction": "CipherUtil.doCheck(inAppPurchaseDataStr, inAppPurchaseDataSignature, mPublicKey)",
      "raw_prediction": "CipherUtil.doCheck(inAppPurchaseDataStr, inAppPurchaseDataSignature, mPublicKey)) {",
      "es": 0.963855421686747,
      "em": false,
      "passed": false
    },
    {
      "index": 564,
      "groundtruth": "iapApiCallback.onFail(e);",
      "prediction": "iapApiCallback.onFail(e);",
      "raw_prediction": " iapApiCallback.onFail(e);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 565,
      "groundtruth": "list.deleteInIndex(6);",
      "prediction": "list.printList();",
      "raw_prediction": "list.printList();",
      "es": 0.40909090909090906,
      "em": false,
      "passed": false
    },
    {
      "index": 566,
      "groundtruth": "list.deleteInIndex(2);",
      "prediction": "list.deleteBegin();",
      "raw_prediction": "list.deleteBegin();",
      "es": 0.6363636363636364,
      "em": false,
      "passed": false
    },
    {
      "index": 567,
      "groundtruth": ").compareTo(cont.getTitular()) < 0) {",
      "prediction": ").compareTo(cont.get",
      "raw_prediction": ").compareTo(cont.getTitular()) < 0) {",
      "es": 0.5405405405405406,
      "em": false,
      "passed": false
    },
    {
      "index": 568,
      "groundtruth": "out.printf(\"Saldo atualizado: R$%.2f%n\", conta.getSaldo());",
      "prediction": "out.println(\"Saldo: \" + this.getSaldo());",
      "raw_prediction": "out.println(\"Saldo: \" + this.getSaldo());",
      "es": 0.5254237288135593,
      "em": false,
      "passed": false
    },
    {
      "index": 569,
      "groundtruth": ".getTitular().compareTo(cont.getTitular()) > 0) {",
      "prediction": ".getTitular().compareTo(cont.getTitular())",
      "raw_prediction": ".getTitular().compareTo(cont.getTitular()) > 0) {",
      "es": 0.8571428571428572,
      "em": false,
      "passed": false
    },
    {
      "index": 570,
      "groundtruth": "conta.sacar(valor, conta);",
      "prediction": "conta.sacar(valor, conta);",
      "raw_prediction": "\tconta.sacar(valor, conta);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 571,
      "groundtruth": "printf(\"Saldo atual: R$ %.2f\", conta.getSaldo());",
      "prediction": "println(\"Dep\u00f3sito realizado com sucesso.\");",
      "raw_prediction": "println(\"Dep\u00f3sito realizado com sucesso.\");\n\t\t\t\t\tmenuCliente(conta, cliente);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 3:\n\tSystem.out.println();\n\t\t\t\t\tSystem.out.println(\"Insira o CPF da conta de destino: \");\n\t\t\t\t\tString cpfDestin",
      "es": 0.30612244897959184,
      "em": false,
      "passed": false
    },
    {
      "index": 572,
      "groundtruth": "pointer2 = (Nodo) pointer2.getNext();",
      "prediction": "pointer2 = (Nodo) pointer2.getNext();",
      "raw_prediction": "    pointer2 = (Nodo) pointer2.getNext();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 573,
      "groundtruth": "System.out.println(\"Valor de tarifa cobrado no dep\u00f3sito: R$ \" + ContaCorrente.getTarifaDeposito());",
      "prediction": "System.out.println(\"Valor de tarifa cobrado no dep\u00f3sito: R$ \" + ContaCorrente.getTarifaDeposito());",
      "raw_prediction": "\tSystem.out.println(\"Valor de tarifa cobrado no dep\u00f3sito: R$ \" + ContaCorrente.getTarifaDeposito());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 574,
      "groundtruth": "(cpfDestinatario.equals(conta.getCpf())) {",
      "prediction": "(cpfDestinatario.equals(cpf)) || conta.getTipoDeConta().equals(ContasEnum.CORRENTE))",
      "raw_prediction": "(cpfDestinatario.equals(cpf)) || conta.getTipoDeConta().equals(ContasEnum.CORRENTE)) {",
      "es": 0.4285714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 575,
      "groundtruth": "conta.transferir(contaDestino, valor, conta);",
      "prediction": "if (contaDestino == null)",
      "raw_prediction": "\tif (contaDestino == null) {\n\t\t\t\t\tSystem.out.println();\n\t\t\t\t\tSystem.out.println(\"Conta n\u00e3o encontrada.\");\n\t\t\t\t\tmenuCliente(conta, cliente);\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\tSystem.out.printf(\"Insira",
      "es": 0.37777777777777777,
      "em": false,
      "passed": false
    },
    {
      "index": 576,
      "groundtruth": "printf(\"NOME: %s\\t| AG\u00caNCIA: %s\\n\", c.getTitular(), c.getAgencia());",
      "prediction": "println(c);",
      "raw_prediction": "println(c);",
      "es": 0.1470588235294118,
      "em": false,
      "passed": false
    },
    {
      "index": 577,
      "groundtruth": "etTitular(), c.getAgencia());",
      "prediction": "etCliente().getNome(), c.getCliente().getAgencia().getNumA",
      "raw_prediction": "etCliente().getNome(), c.getCliente().getAgencia().getNumAgencia());",
      "es": 0.3793103448275862,
      "em": false,
      "passed": false
    },
    {
      "index": 578,
      "groundtruth": "Escritor.registroDeDadosAtualizados();",
      "prediction": "System.out.println();",
      "raw_prediction": "System.out.println();",
      "es": 0.23684210526315785,
      "em": false,
      "passed": false
    },
    {
      "index": 579,
      "groundtruth": "println(\"Total de saques: \" + conta.getTotalSaques());",
      "prediction": "println(\"Total de saques: \" + conta.getTotalSaques());",
      "raw_prediction": "println(\"Total de saques: \" + conta.getTotalSaques());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 580,
      "groundtruth": "capitalBancoSaldo += lista.getSaldo();",
      "prediction": "capitalBancoSaldo += lista.getSaldo();",
      "raw_prediction": "\tcapitalBancoSaldo += lista.getSaldo();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 581,
      "groundtruth": ".out.println(pointer2.getElement());",
      "prediction": ".out.println(\"El elemento en la posicion \"+cont3+\" es: \"+pointer2.getEle",
      "raw_prediction": ".out.println(\"El elemento en la posicion \"+cont3+\" es: \"+pointer2.getElement());",
      "es": 0.2777777777777778,
      "em": false,
      "passed": false
    },
    {
      "index": 582,
      "groundtruth": "(\"Valor de tarifa cobrado na tranfer\u00eancia: R$ \" + ContaCorrente.getTarifaTransferencia());",
      "prediction": "(\"Valor de tarifa cobrado em transfer\u00eancia: R$ \" + ContaCorrente.getTarifaTransferencia());",
      "raw_prediction": "(\"Valor de tarifa cobrado em transfer\u00eancia: R$ \" + ContaCorrente.getTarifaTransferencia());",
      "es": 0.967032967032967,
      "em": false,
      "passed": false
    },
    {
      "index": 583,
      "groundtruth": "conta.imprimeExtrato(conta);",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 584,
      "groundtruth": "= \"Ag\u00eancia: \" + conta.getAgencia();",
      "prediction": "= \"Agencia: \" + conta.getAgencia();",
      "raw_prediction": "= \"Agencia: \" + conta.getAgencia();",
      "es": 0.9714285714285714,
      "em": false,
      "passed": false
    },
    {
      "index": 585,
      "groundtruth": "= valorSimulado * ((ContaPoupanca.getTaxaRendimento() / 30) * dias);",
      "prediction": "= valorSimulado * ContaPoupanca.getTaxaRendimento() * dias / 365;",
      "raw_prediction": "= valorSimulado * ContaPoupanca.getTaxaRendimento() * dias / 365;",
      "es": 0.8088235294117647,
      "em": false,
      "passed": false
    },
    {
      "index": 586,
      "groundtruth": "tarifaTotalSaque = conta.getTotalSaques() * ContaCorrente.getTarifaSaque();",
      "prediction": "tarifaTotalSaque = conta.getTotalSaques() * ContaCorrente.getTarifaSaque();",
      "raw_prediction": "tarifaTotalSaque = conta.getTotalSaques() * ContaCorrente.getTarifaSaque();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 587,
      "groundtruth": "ag.getNumAgencia());",
      "prediction": "ag.getNumAgencia() + \";\" + ag.getNome()",
      "raw_prediction": "ag.getNumAgencia() + \";\" + ag.getNome() + \";\" + ag.getRua() + \";\" + ag.getNumero()\n\t\t\t\t\t+ \";\" + ag.getCidade() + \";\" + ag.getEstado() + \";\" + ag.getCep",
      "es": 0.4871794871794872,
      "em": false,
      "passed": false
    },
    {
      "index": 588,
      "groundtruth": ").getNome() + \"_\" + conta.getTitular().getTipoDeUsuario();",
      "prediction": ").getNome();",
      "raw_prediction": ").getNome();",
      "es": 0.2068965517241379,
      "em": false,
      "passed": false
    },
    {
      "index": 589,
      "groundtruth": "queue.getSize()){",
      "prediction": "queue.getS",
      "raw_prediction": "queue.getSize()) {",
      "es": 0.5882352941176471,
      "em": false,
      "passed": false
    },
    {
      "index": 590,
      "groundtruth": "= (Nodo) queue.getHead().getNext();",
      "prediction": "= (Nodo) queue.getHead();",
      "raw_prediction": "= (Nodo) queue.getHead();\n            cont3++;",
      "es": 0.7142857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 591,
      "groundtruth": "\"Ag\u00eancia : \" + conta.getAgencia();",
      "prediction": "\"Ag\u00eancia: \" + conta.getAgencia();",
      "raw_prediction": "\"Ag\u00eancia: \" + conta.getAgencia();",
      "es": 0.9705882352941176,
      "em": false,
      "passed": false
    },
    {
      "index": 592,
      "groundtruth": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteTransferencia\";",
      "prediction": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteTransferencia\";",
      "raw_prediction": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteTransferencia\";",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 593,
      "groundtruth": "String arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteExtrato\";",
      "prediction": "String arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_extratoConta\";",
      "raw_prediction": "\t\tString arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_extratoConta\";",
      "es": 0.8666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 594,
      "groundtruth": ".getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteExtrato\";",
      "prediction": ".getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_extratoConta\";",
      "raw_prediction": ".getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_extratoConta\";",
      "es": 0.8313253012048193,
      "em": false,
      "passed": false
    },
    {
      "index": 595,
      "groundtruth": "conta.getTipoDeConta();",
      "prediction": "conta.getTipoDeConta();",
      "raw_prediction": "conta.getTipoDeConta();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 596,
      "groundtruth": "\"Titular: \" + conta.getTitular().getNome() + \" | CPF: \" + conta.imprimeCPF(conta.getCpf());",
      "prediction": "\"Agencia: \" + conta.getAgencia().getNumAgencia() + \" | Conta: \" + conta.getNumConta();",
      "raw_prediction": "\"Agencia: \" + conta.getAgencia().getNumAgencia() + \" | Conta: \" + conta.getNumConta();\nl\tbw.append(linha + \"\\n\");\n\nl\tlinha = \"Tipo: \" + conta.get",
      "es": 0.5274725274725275,
      "em": false,
      "passed": false
    },
    {
      "index": 597,
      "groundtruth": "conta.getAgencia().getNumAgencia() + \" | Conta: \" + conta.getNumConta();",
      "prediction": "conta.getAgencia();",
      "raw_prediction": "conta.getAgencia();\n\tl\tbw.append(linha + \"\\n\");\n\n\tl\tlinha = \"Conta: \" + conta.getNumConta();\n\tl\tbw.append(linha + \"\\n\");\n",
      "es": 0.26388888888888884,
      "em": false,
      "passed": false
    },
    {
      "index": 598,
      "groundtruth": "+ conta.imprimeCPF(conta.getCpf());",
      "prediction": "+ conta.getCpf();",
      "raw_prediction": "+ conta.getCpf();",
      "es": 0.48571428571428577,
      "em": false,
      "passed": false
    },
    {
      "index": 599,
      "groundtruth": "+ conta.getAgencia().getNumAgencia() + \" | Conta: \" + conta.getNumConta();",
      "prediction": "+ conta.getAgencia();",
      "raw_prediction": "+ conta.getAgencia();\nl\tbw.append(linha + \"\\n\");\n\nl\tlinha = \"Conta: \" + conta.getNumConta();\nl\tbw.append(linha + \"\\n\");\n\nl\tlinha = \"Saldo: R",
      "es": 0.28378378378378377,
      "em": false,
      "passed": false
    },
    {
      "index": 600,
      "groundtruth": "Extrato listaMovimentacao : conta.getlistaDeMovimentacoes()) {",
      "prediction": "Extrato listaMovMovimentacao : co",
      "raw_prediction": "Extrato listaMovMovimentacao : conta.getListaMovimentacao()) {",
      "es": 0.4354838709677419,
      "em": false,
      "passed": false
    },
    {
      "index": 601,
      "groundtruth": "linha = \"Saldo: R$\" + String.format(\"%.2f\", conta.getSaldo());",
      "prediction": "String date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\"));",
      "raw_prediction": "\tString date = LocalDateTime.now().format(DateTimeFormatter.ofPattern(\"dd/MM/yyyy HH:mm:ss\"));\n\n\t\t\tlinha = \"Opera\u00e7\u00e3o realizada em: \" + date;\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha =",
      "es": 0.23655913978494625,
      "em": false,
      "passed": false
    },
    {
      "index": 602,
      "groundtruth": ") + \"_\" + conta.getTitular().getTipoDeUsuario();",
      "prediction": ") + \"_\" + conta.getTitular().getTipoDeUsuario();",
      "raw_prediction": ") + \"_\" + conta.getTitular().getTipoDeUsuario();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 603,
      "groundtruth": "= \"Agencia: \" + conta.getAgencia();",
      "prediction": "= \"Agencia: \" + conta.getAgencia().getNumAgencia();",
      "raw_prediction": "= \"Agencia: \" + conta.getAgencia().getNumAgencia();",
      "es": 0.6862745098039216,
      "em": false,
      "passed": false
    },
    {
      "index": 604,
      "groundtruth": "linha = \"Tipo: \" + conta.getTipoDeConta();",
      "prediction": "linha = \"Tipo: \" + conta.getTipoDeConta();",
      "raw_prediction": "\tlinha = \"Tipo: \" + conta.getTipoDeConta();\nimport\tbw.append(linha + \"\\n\");\n\nimport\tlinha = \"Titular: \" + conta.getTitular().getNome() + \" | CPF: \"",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 605,
      "groundtruth": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteSaldo\";",
      "prediction": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteSaldo\";",
      "raw_prediction": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteSaldo\";",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 606,
      "groundtruth": "String arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado\n\t\t\t\t+ \"_relatorioRendimentoPoupanca\";",
      "prediction": "String arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_relatorioRendimentoPoupanca\";",
      "raw_prediction": "\tString arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_relatorioRendimentoPoupanca\";\n\n\t\ttry (BufferedWriter bw = new BufferedWriter(\n\tl\tnew FileWriter(CAM",
      "es": 0.9576271186440678,
      "em": true,
      "passed": true
    },
    {
      "index": 607,
      "groundtruth": "\"Saldo: R$\" + String.format(\"%.2f\", (conta.getSaldo()));",
      "prediction": "\"Saldo: R$\" + String.format(\"%.2f\", conta.getSaldo());",
      "raw_prediction": "\"Saldo: R$\" + String.format(\"%.2f\", conta.getSaldo());\nde\tbw.append(linha + \"\\n\");\n\nde\tlinha = \"*****************************************************\";",
      "es": 0.9642857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 608,
      "groundtruth": "= \"Simula\u00e7\u00e3o para CPF: \" + conta.getCpf();",
      "prediction": "= \"CPF: \" + conta.getCpf();",
      "raw_prediction": "= \"CPF: \" + conta.getCpf();\nde\tbw.append(linha + \"\\n\");\n\nde\tlinha = \"Ag\u00eancia: \" + conta.getAgAgencia();\nde\tbw.append(linha + \"\\n\");\n\nde\t",
      "es": 0.6428571428571428,
      "em": false,
      "passed": false
    },
    {
      "index": 609,
      "groundtruth": "\"Ag\u00eancia : \" + conta.getAgencia().getNumAgencia();",
      "prediction": "\"Agencia: \" + conta.getAgencia();",
      "raw_prediction": "\"Agencia: \" + conta.getAgencia();\n l\tbw.append(linha + \"\\n\");\n\n l\t linha = \"Conta: \" + conta.getNumConta();\n l\tbw.append(linha + \"\\n\");\n\n l\t linha =",
      "es": 0.64,
      "em": false,
      "passed": false
    },
    {
      "index": 610,
      "groundtruth": "= \"Total gasto em transa\u00e7\u00f5es = R$\" + conta.getTotalTarifas();",
      "prediction": "= \"Taxa de rendimento = \" + ContaCorrente.getTaxaRendimento();",
      "raw_prediction": "= \"Taxa de rendimento = \" + ContaCorrente.getTaxaRendimento();\n\tl\tbw.append(linha + \"\\n\");\n\n\tl\tlinha = \"Total de rendimentos = \" + conta.getTotalRendimento();\n\tl",
      "es": 0.33870967741935487,
      "em": false,
      "passed": false
    },
    {
      "index": 611,
      "groundtruth": "\"%.2f\", ((ContaCorrente) conta).getTotalTarifas());",
      "prediction": "\"%.2f\", conta.getTotalTarifas());",
      "raw_prediction": "\"%.2f\", conta.getTotalTarifas());\n\t\t\tbw.append(linha + \"\\n\");\n\n\t\t\tlinha = \"Total de saques realizados = \" + conta.getTotalSaques();\n\t\t\tbw.append(linha + \"\\",
      "es": 0.6470588235294117,
      "em": false,
      "passed": false
    },
    {
      "index": 612,
      "groundtruth": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado\n\t\t\t\t+ \"_relatorioRendimentoPoupanca\";",
      "prediction": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_relatorioRendimentoPoupanca\";",
      "raw_prediction": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_relatorioRendimentoPoupanca\";",
      "es": 0.9431818181818182,
      "em": true,
      "passed": true
    },
    {
      "index": 613,
      "groundtruth": "linha = \"Taxa para deposito = \" + ContaCorrente.getTarifaDeposito();",
      "prediction": "linha = \"Taxa para dep\u00f3sito = \" + ContaCorrente.getTarifaDeposito();",
      "raw_prediction": " linha = \"Taxa para dep\u00f3sito = \" + ContaCorrente.getTarifaDeposito();",
      "es": 0.9852941176470589,
      "em": false,
      "passed": false
    },
    {
      "index": 614,
      "groundtruth": "= \"Taxa para saque = \" + ContaCorrente.getTarifaSaque();",
      "prediction": "= \"Taxa de transa\u00e7\u00e3o = \" + ContaCorrente.getTarifaTransacao();",
      "raw_prediction": "= \"Taxa de transa\u00e7\u00e3o = \" + ContaCorrente.getTarifaTransacao();\n\t\tbw.append(linha + \"\\n\");\n\n\t\tlinha = \"Total de transa\u00e7\u00f5es realizadas = \" + conta.getTotalTransacao",
      "es": 0.7419354838709677,
      "em": false,
      "passed": false
    },
    {
      "index": 615,
      "groundtruth": "= \"Taxa para tranfer\u00eancia = \" + ContaCorrente.getTarifaTransferencia();",
      "prediction": "= \"Taxa para transfer\u00eancia = \" + ContaCorrente.getTarifaTransferencia();",
      "raw_prediction": "= \"Taxa para transfer\u00eancia = \" + ContaCorrente.getTarifaTransferencia();\nde\tbw.append(linha + \"\\n\");\n\nde\tlinha = \"Total de transfer\u00eancias realizadas = \" + conta.getTotalTransferencia",
      "es": 0.9861111111111112,
      "em": false,
      "passed": false
    },
    {
      "index": 616,
      "groundtruth": "\"Total de saques realizados = \" + conta.getTotalSaques();",
      "prediction": "\"Total de saques realizados = \" + conta.getTotalSaque();",
      "raw_prediction": "\"Total de saques realizados = \" + conta.getTotalSaque();",
      "es": 0.9824561403508771,
      "em": false,
      "passed": false
    },
    {
      "index": 617,
      "groundtruth": "\"Total de tranfer\u00eancias realizadas = \" + conta.getTotalTransferencias();",
      "prediction": "\"Total de transfer\u00eancias realizadas = \" + conta.getTotalTransferencias();",
      "raw_prediction": "\"Total de transfer\u00eancias realizadas = \" + conta.getTotalTransferencias();\n\t\t\tbw.append(linha + \"\\n\\n\");\n\n l\tlinha = \"Taxa para rendimento = \" + ContaCorrente.getTarifaRendimento",
      "es": 0.9863013698630136,
      "em": false,
      "passed": false
    },
    {
      "index": 618,
      "groundtruth": "main = CheckHostAPI.performGetRequest(\"https://check-host.net/check-result/\" + URLEncoder.encode(id, StandardCharsets.UTF_8));",
      "prediction": "main = CheckHostAPI.performGetRequest(\"https://check-host.net/check-result/\" + URLEncoder.encode(id, StandardCharsets.UTF_8);",
      "raw_prediction": "main = CheckHostAPI.performGetRequest(\"https://check-host.net/check-result/\" + URLEncoder.encode(id, StandardCharsets.UTF_8);",
      "es": 0.9920634920634921,
      "em": false,
      "passed": false
    },
    {
      "index": 619,
      "groundtruth": "cookieStore.appendCookies(builder).build();",
      "prediction": "builder.headers(\"Cookie\", cookieStore.toString()).build();",
      "raw_prediction": "builder.headers(\"Cookie\", cookieStore.toString()).build();\n    }\n\n    public static HttpRequest buildWithCookies(final CookieStore cookieStore, final String url) {\n        return buildWithCookies(cookieStore, HttpRequest.newBuilder(url));\n    }\n\n    public static",
      "es": 0.3448275862068966,
      "em": false,
      "passed": false
    },
    {
      "index": 620,
      "groundtruth": "cookieStore.mergeFromResponse(response);",
      "prediction": "cookieStore.updateCookies(response.headers());",
      "raw_prediction": "    cookieStore.updateCookies(response.headers());",
      "es": 0.5434782608695652,
      "em": false,
      "passed": false
    },
    {
      "index": 621,
      "groundtruth": "new FXMLLoader(DownfallUtil.getInstance().getURLDownfallMainFXML());",
      "prediction": "new FXMLLoader(",
      "raw_prediction": "new FXMLLoader(\n            DownfallUtil.class.getResource(\"main.fxml\"));",
      "es": 0.22058823529411764,
      "em": false,
      "passed": false
    },
    {
      "index": 622,
      "groundtruth": "selectedProperty()  .unbindBidirectional(tag.isFactionalProperty());",
      "prediction": "selectedProperty() .unbindBidirectional(tag.isFactionalProperty());",
      "raw_prediction": "selectedProperty() .unbindBidirectional(tag.isFactionalProperty());",
      "es": 0.9852941176470589,
      "em": true,
      "passed": true
    },
    {
      "index": 623,
      "groundtruth": ", null, null, defConstructionCost, null, defConstructionTime, operatesImmediately, Configurator.getInstance().getDefBuildingGFXPathname());",
      "prediction": ", \"\", defConstructionCost, defConstructionTime, operatesImmediately);",
      "raw_prediction": ", \"\", defConstructionCost, defConstructionTime, operatesImmediately);",
      "es": 0.48201438848920863,
      "em": false,
      "passed": false
    },
    {
      "index": 624,
      "groundtruth": ").setUserRealm(savegame.getUserRealm());",
      "prediction": ").loadAndApplyRules(savegame.getPathToRules());",
      "raw_prediction": ").loadAndApplyRules(savegame.getPathToRules());\n            Configurator.getInstance().setUserRealm(savegame.getUserRealm());",
      "es": 0.44680851063829785,
      "em": false,
      "passed": false
    },
    {
      "index": 625,
      "groundtruth": ").loadAndApplyRules(savegame.getPathToRules());",
      "prediction": ").setLastRulesPathname(savegame.getPathToRules());",
      "raw_prediction": ").setLastRulesPathname(savegame.getPathToRules());",
      "es": 0.62,
      "em": false,
      "passed": false
    },
    {
      "index": 626,
      "groundtruth": "this.pathToGFXProperty.setValue(Configurator.getInstance().getDefBuildingGFXPathname());",
      "prediction": "gfxInitialized = false;",
      "raw_prediction": "gfxInitialized = false;",
      "es": 0.10227272727272729,
      "em": false,
      "passed": false
    },
    {
      "index": 627,
      "groundtruth": "configurator.loadAndApplyRules();",
      "prediction": "configurator.saveConfiguration();",
      "raw_prediction": "    configurator.saveConfiguration();",
      "es": 0.48484848484848486,
      "em": false,
      "passed": false
    },
    {
      "index": 628,
      "groundtruth": "configurator.saveRules();",
      "prediction": "e.consume();",
      "raw_prediction": "    e.consume();",
      "es": 0.28,
      "em": false,
      "passed": false
    },
    {
      "index": 629,
      "groundtruth": ".getLogger(DownfallUtil.DEFAULT_LOGGER).log(Level.SEVERE, \"No Template found for id = \"+material.getTemplateId());",
      "prediction": ".getLogger(DownfallUtil.DEFAULT_LOGGER).log(Level.WARNING, \"No ID found for template with id = \"+material.getTemplateId());",
      "raw_prediction": ".getLogger(DownfallUtil.DEFAULT_LOGGER).log(Level.WARNING, \"No ID found for template with id = \"+material.getTemplateId());",
      "es": 0.7642276422764227,
      "em": false,
      "passed": false
    },
    {
      "index": 630,
      "groundtruth": "= Configurator.getInstance();",
      "prediction": "= new Configurator();",
      "raw_prediction": "= new Configurator();",
      "es": 0.4482758620689655,
      "em": false,
      "passed": false
    },
    {
      "index": 631,
      "groundtruth": ", defImportPrice, isExportable, isEphemeral, Configurator.getInstance().getDefMaterialGFXPathname());",
      "prediction": ", defImportPrice, isExportable, isEphemeral);",
      "raw_prediction": ", defImportPrice, isExportable, isEphemeral);",
      "es": 0.4455445544554455,
      "em": false,
      "passed": false
    },
    {
      "index": 632,
      "groundtruth": "DownfallUtil.getInstance().loadImage(item));",
      "prediction": "DownfallUtil.loadImage(item));",
      "raw_prediction": "DownfallUtil.loadImage(item));",
      "es": 0.6818181818181819,
      "em": false,
      "passed": false
    },
    {
      "index": 633,
      "groundtruth": "()  .bindBidirectional(tag.isFactionalProperty());",
      "prediction": "()  .bindBidirectional(tag.isFactionalProperty());",
      "raw_prediction": "()  .bindBidirectional(tag.isFactionalProperty());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 634,
      "groundtruth": ".unbindBidirectional(tag.tagProperty());",
      "prediction": ".unbindBidirectional(tag.tagProperty());",
      "raw_prediction": ".unbindBidirectional(tag.tagProperty());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 635,
      "groundtruth": "(relativisor.relativize());",
      "prediction": "if(fileChosen != null)",
      "raw_prediction": "\n            if(fileChosen != null) {\n                PathRelativisor relativisor = new PathRelativisor(fileChosen);\n            output.setText(relativisor.getRelativePath());\n            }",
      "es": 0.11111111111111116,
      "em": false,
      "passed": false
    },
    {
      "index": 636,
      "groundtruth": "tag.setTag(\"New Tag\");",
      "prediction": "//if there are no Tags in the current rules",
      "raw_prediction": "//if there are no Tags in the current rules\n        else\n            tag.setId(1);\n        //return the new instance",
      "es": 0.13953488372093026,
      "em": false,
      "passed": false
    },
    {
      "index": 637,
      "groundtruth": "Configurator.getInstance().getUserRealm();",
      "prediction": "Configurator.getInstance().getUserRealm();",
      "raw_prediction": "Configurator.getInstance().getUserRealm();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 638,
      "groundtruth": "tag.setId(1);",
      "prediction": "//otherwise set the new in",
      "raw_prediction": "//otherwise set the new instance's id to be 1\n            tag.setId(1);",
      "es": 0.15384615384615385,
      "em": false,
      "passed": false
    },
    {
      "index": 639,
      "groundtruth": ".setText(userRealm.getDiplomaticReputation().toString());",
      "prediction": ".setText(userRealm.getDiplomaticRep().toString());",
      "raw_prediction": "  .setText(userRealm.getDiplomaticRep().toString());",
      "es": 0.8771929824561404,
      "em": false,
      "passed": false
    },
    {
      "index": 640,
      "groundtruth": "configurator.loadConfiguration();",
      "prediction": "configurator.loadConfiguration();",
      "raw_prediction": "    configurator.loadConfiguration();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 641,
      "groundtruth": ".setValue(template.getId());",
      "prediction": ".setValue(template.getId());",
      "raw_prediction": ".setValue(template.getId());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 642,
      "groundtruth": "= FXCollections.observableList(Configurator.getInstance().getRules().getActorTags());",
      "prediction": "= FXCollections.observableArrayList(Configurator.getTags());",
      "raw_prediction": "= FXCollections.observableArrayList(Configurator.getTags());",
      "es": 0.5882352941176471,
      "em": false,
      "passed": false
    },
    {
      "index": 643,
      "groundtruth": "legitimacyLabel         .setText(userRealm.getLegitimacy().toString());",
      "prediction": "stabilityPerMonthLabel .setText(userRealm.getStabilityPerMonth().toString());",
      "raw_prediction": "stabilityPerMonthLabel .setText(userRealm.getStabilityPerMonth().toString());\n        legitimacyLabel       .setText(userRealm.getLegitimacy().toString());\n        nationalUnrestLabel   .setText(userRealm.getNationalUnrest().toString",
      "es": 0.5324675324675325,
      "em": false,
      "passed": false
    },
    {
      "index": 644,
      "groundtruth": ".pathToGFXProperty.setValue(Configurator.getInstance().getDefMaterialGFXPathname());",
      "prediction": ";",
      "raw_prediction": ";",
      "es": 0.011904761904761862,
      "em": false,
      "passed": false
    },
    {
      "index": 645,
      "groundtruth": "setLegitimacy(realm.getLegitimacy());",
      "prediction": "setGrowth(realm.getGrowth());",
      "raw_prediction": "setGrowth(realm.getGrowth());",
      "es": 0.5135135135135135,
      "em": false,
      "passed": false
    },
    {
      "index": 646,
      "groundtruth": "(s -> s.gameVersion().equals(gameVersion)).toList();",
      "prediction": "(s -> s.version().gameVersion().equals(gameVersion)).toList();",
      "raw_prediction": "(s -> s.version().gameVersion().equals(gameVersion)).toList();",
      "es": 0.8387096774193549,
      "em": false,
      "passed": false
    },
    {
      "index": 647,
      "groundtruth": "BCVersion.fromString(versionIdentifier);",
      "prediction": "BCVersion.fromIdentifier(versionIdentifier);",
      "raw_prediction": "BCVersion.fromIdentifier(versionIdentifier);\n            if (version == null) {\n                continue;\n            }\n",
      "es": 0.8181818181818181,
      "em": false,
      "passed": false
    },
    {
      "index": 648,
      "groundtruth": "joinServerInterface.sendAuthRequest(sha1(server.getBytes()));",
      "prediction": "if (joinServerInterface != null)",
      "raw_prediction": "if (joinServerInterface != null) {\n                joinServerInterface.onConnectingToServer(server);\n            }",
      "es": 0.2786885245901639,
      "em": false,
      "passed": false
    },
    {
      "index": 649,
      "groundtruth": "userRealm.setPowerProjection(realm.getPowerProjection());",
      "prediction": "userRealm.setHappiness(realm.getHappiness());",
      "raw_prediction": "userRealm.setHappiness(realm.getHappiness());",
      "es": 0.5087719298245614,
      "em": false,
      "passed": false
    },
    {
      "index": 650,
      "groundtruth": "loadAndApplyRules(configuration.getLastRulesPathname());",
      "prediction": "loadAndApplyRules(DEFAULT_RULES_PATH);",
      "raw_prediction": "    loadAndApplyRules(DEFAULT_RULES_PATH);",
      "es": 0.3928571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 651,
      "groundtruth": ".setRulerPathToGFX(realm.getRulerPathToGFX());",
      "prediction": ".setRealmPathToGFX(realmalm.getRealmPathToGFX());",
      "raw_prediction": ".setRealmPathToGFX(realmalm.getRealmPathToGFX());\n\n        userRealm.getStockpile().clear();\n        userRealm.getStockpile().addAll(realm.getStockpile());\n\n        userRealm.getOwnedBuildings().clear",
      "es": 0.7755102040816326,
      "em": false,
      "passed": false
    },
    {
      "index": 652,
      "groundtruth": ".textProperty()        .bindBidirectional(realm.diplomaticReputationProperty(),    new NumberStringConverter());",
      "prediction": ".textProperty()     .bindBidirectional(realm.diplomaticReputationProperty(), new NumberStringConverter());",
      "raw_prediction": ".textProperty()     .bindBidirectional(realm.diplomaticReputationProperty(), new NumberStringConverter());",
      "es": 0.9464285714285714,
      "em": true,
      "passed": true
    },
    {
      "index": 653,
      "groundtruth": "textProperty()        .bindBidirectional(realm.prestigeProperty(),                new NumberStringConverter());",
      "prediction": "textProperty()      .bindBidirectional(realm.prestigeProperty(),              new NumberStringConverter());",
      "raw_prediction": "textProperty()      .bindBidirectional(realm.prestigeProperty(),              new NumberStringConverter());",
      "es": 0.963963963963964,
      "em": true,
      "passed": true
    },
    {
      "index": 654,
      "groundtruth": "prompter.findCommand(commandText, commands);",
      "prediction": "prompter.parseCommand(commandText);",
      "raw_prediction": "prompter.parseCommand(commandText);",
      "es": 0.6590909090909092,
      "em": false,
      "passed": false
    },
    {
      "index": 655,
      "groundtruth": ", prompter.getSystemPrompt(commands));",
      "prediction": ", \"You are a helpful assistant.\");",
      "raw_prediction": ", \"You are a helpful assistant.\");\n\t",
      "es": 0.26315789473684215,
      "em": false,
      "passed": false
    },
    {
      "index": 656,
      "groundtruth": "textProperty()       .bindBidirectional(materialTemplate.pathToGFXProperty());",
      "prediction": "textProperty()       .bindBidirectional(materialTemplate.pathToGFXProperty());",
      "raw_prediction": "textProperty()       .bindBidirectional(materialTemplate.pathToGFXProperty());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 657,
      "groundtruth": "return DEFAULT_SYSTEM_PROMPT.replaceAll(PREFIX_TEMPLATE, delimiter.getPrefix())//\n\t\t\t\t.replaceAll(POSTFIX_TEMPLATE, delimiter.getPostfix());",
      "prediction": "return DEFAULT_SYSTEM_PROMPT.replace(PREFIX_TEMPLATE, delimiter.getPrefix()).replace(Postfix_TEMPLATE, delimiter.getPostfix());",
      "raw_prediction": "return DEFAULT_SYSTEM_PROMPT.replace(PREFIX_TEMPLATE, delimiter.getPrefix()).replace(Postfix_TEMPLATE, delimiter.getPostfix());",
      "es": 0.8642857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 658,
      "groundtruth": ".textProperty()        .bindBidirectional(realm.rulerPathToGFXProperty());",
      "prediction": ".textProperty()        .bindBidirectional(realm.rulerPathToGFXProperty());",
      "raw_prediction": ".textProperty()        .bindBidirectional(realm.rulerPathToGFXProperty());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 659,
      "groundtruth": "return commandWrapper.unwrapCommand(commandString);",
      "prediction": "return commandString.replac",
      "raw_prediction": "\treturn commandString.replaceAll(PREFIX_REGEX, \"\").replaceAll(POSTFIX_REGEX, \"\");",
      "es": 0.37254901960784315,
      "em": false,
      "passed": false
    },
    {
      "index": 660,
      "groundtruth": ".textProperty()        .bindBidirectional(realm.realmPathToGFXProperty());",
      "prediction": ".textProperty()        .bindBidirectional(realm.realmPathToGFXProperty());",
      "raw_prediction": ".textProperty()        .bindBidirectional(realm.realmPathToGFXProperty());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 661,
      "groundtruth": "BCServerListRequest.send().whenComplete((bcServerList, throwable) -> {",
      "prediction": "BCServerListRequest.requestServerList",
      "raw_prediction": "    BCServerListRequest.requestServerList(BetaCraftHandler.BETacraftHandler, BetaCraftHandler.BetacraftHandler, BetaCraftHandler.BetacraftHandler, BetaCraftHandler.BetacraftHandler, BetaCraftHandler",
      "es": 0.4714285714285714,
      "em": false,
      "passed": false
    },
    {
      "index": 662,
      "groundtruth": "authenticationData = new CCAuthenticationData(account.username(), account.password(), previousResponse.token, loginCode);",
      "prediction": "authenticationData = new CCAuthenticationData(account, previousResponse, loginCode)",
      "raw_prediction": "authenticationData = new CCAuthenticationData(account, previousResponse, loginCode);            if (authenticationData.username().isEmpty() || authenticationData.password().isEmpty()) {\n                return CCAuthenticationResponse.createError(\"Username or Password is",
      "es": 0.6859504132231404,
      "em": false,
      "passed": false
    },
    {
      "index": 663,
      "groundtruth": "<>(\"login_code\", authenticationData.loginCode())\n            );",
      "prediction": "<>(\"loginCode\", authenticationData.loginCode())\n        );",
      "raw_prediction": "<>(\"loginCode\", authenticationData.loginCode())\n        );",
      "es": 0.9047619047619048,
      "em": false,
      "passed": false
    },
    {
      "index": 664,
      "groundtruth": ", account.password(), previousResponse.token, loginCode);",
      "prediction": ", account.password(), previousResponse.token(), loginCode);",
      "raw_prediction": ", account.password(), previousResponse.token(), loginCode);",
      "es": 0.9661016949152542,
      "em": false,
      "passed": false
    },
    {
      "index": 665,
      "groundtruth": "StatusBarHelper.setStatusBarLightMode(this);",
      "prediction": "titleBar.setTitleBarBackgroundColorWithStatusBar(Color.BLACK);",
      "raw_prediction": "    titleBar.setTitleBarBackgroundColorWithStatusBar(Color.BLACK);\n                titleBar.setTitleGravity(TitleBar.TitleGravity.CENTER);\n                titleBar.setTitleBarBackgroundColorWithStatusBar(Color.BLACK);\n                titleBar.getRightTextView().setVisibility(View.GONE);\n                titleBar.set",
      "es": 0.29032258064516125,
      "em": false,
      "passed": false
    },
    {
      "index": 666,
      "groundtruth": "StatusBarHelper.translucent(this);",
      "prediction": "titleBar.setTitleGravity(TitleBar.TitleGravity.CENTER);",
      "raw_prediction": "titleBar.setTitleGravity(TitleBar.TitleGravity.CENTER);",
      "es": 0.23636363636363633,
      "em": false,
      "passed": false
    },
    {
      "index": 667,
      "groundtruth": "d(\"TitleBar\",\"onCreate-getStatusbarHeight\"+StatusBarHelper.getStatusbarHeight(this));",
      "prediction": "e(\"getLocationOnScreen\",view.getTop()+\"\");",
      "raw_prediction": "e(\"getLocationOnScreen\",view.getTop()+\"\");\n        titleBar = findViewById(R.id.title_bar);\n        titleBar.setBackImageView(R.drawable.ic_back);\n        titleBar.setBackTextView(\"back\");\n        titleBar.setBackImageView(R",
      "es": 0.21176470588235297,
      "em": false,
      "passed": false
    },
    {
      "index": 668,
      "groundtruth": "product0 = productRepository.findById(id);",
      "prediction": "product0 = productRepository.findById(id);",
      "raw_prediction": "product0 = productRepository.findById(id);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 669,
      "groundtruth": "user0 = userRepository.findByIdentifier(identifier);",
      "prediction": "user0 = userRepository.findByIdentifier(identifier);",
      "raw_prediction": "user0 = userRepository.findByIdentifier(identifier);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 670,
      "groundtruth": "== null || !Objects.equals(user0.getPassword(), senha)) {",
      "prediction": "== null) {",
      "raw_prediction": "== null) {\n            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(\"Email ou senha incorretos\");\n        }\n        if (!senha.equals(user0.getPassword())) {\n            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(\"Email ou senha incorret",
      "es": 0.17543859649122806,
      "em": false,
      "passed": false
    },
    {
      "index": 671,
      "groundtruth": "user0 = userRepository.findByEmail(email);",
      "prediction": "user0 = userRepository.findByEmail(email);",
      "raw_prediction": "user0 = userRepository.findByEmail(email);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 672,
      "groundtruth": ".OK).body(userRepository.findByIdentifier(identifier));",
      "prediction": ".OK).body(user0);",
      "raw_prediction": ".OK).body(user0);",
      "es": 0.2909090909090909,
      "em": false,
      "passed": false
    },
    {
      "index": 673,
      "groundtruth": "(plugin.getParticleManager(), lobbyParticles, player);",
      "prediction": "(player, lobbyParticles);",
      "raw_prediction": "(player, lobbyParticles);\n        PlayParticleRunnable publicParticleRunnable = new PlayParticleRunnable(player, lobbyParticles);",
      "es": 0.4444444444444444,
      "em": false,
      "passed": false
    },
    {
      "index": 674,
      "groundtruth": "DiscordVerifier.getInstance().getConfig().getBoolean(\"code-numbers-only\")) {",
      "prediction": "length == 0) {",
      "raw_prediction": "length == 0) {",
      "es": 0.09210526315789469,
      "em": false,
      "passed": false
    },
    {
      "index": 675,
      "groundtruth": "DiscordVerifier.getInstance().getLogger().severe(\"Failed to save player \" + uuid + \" to database\");",
      "prediction": "DiscordVerifier.getInstance().getLogger().severe(\"Failed to save player \" + uuid + \" to database\");",
      "raw_prediction": "    DiscordVerifier.getInstance().getLogger().severe(\"Failed to save player \" + uuid + \" to database\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 676,
      "groundtruth": "if (DiscordVerifier.getDiscordCodes().containsValue(sb.toString())) {",
      "prediction": "if (DiscordVerifier.getDiscordCodes().containsValue(sb.toString()))",
      "raw_prediction": "if (DiscordVerifier.getDiscordCodes().containsValue(sb.toString())) {",
      "es": 0.9710144927536232,
      "em": false,
      "passed": false
    },
    {
      "index": 677,
      "groundtruth": "Connection connection = DiscordVerifier.getDatabaseConnection();",
      "prediction": "Connection connection = DiscordVerifier.getDatabaseConnection();",
      "raw_prediction": "Connection connection = DiscordVerifier.getDatabaseConnection();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 678,
      "groundtruth": "lobbyParticles.getParticle(), playerLocation, lobbyParticles.getCount());",
      "prediction": "particleManager.getParticle(), playerLocation, 1, 0, 0, 0, 0.001);",
      "raw_prediction": "particleManager.getParticle(), playerLocation, 1, 0, 0, 0, 0.001);",
      "es": 0.4931506849315068,
      "em": false,
      "passed": false
    },
    {
      "index": 679,
      "groundtruth": "sendMessage(CustomColor.translate(\"&7Invalid usage.. Try &e/gmp (player)&7.\"));",
      "prediction": "sendMessage(CustomColor.translate(\"&7Usage: /gmp [player]\"));",
      "raw_prediction": "sendMessage(CustomColor.translate(\"&7Usage: /gmp [player]\"));",
      "es": 0.7215189873417722,
      "em": false,
      "passed": false
    },
    {
      "index": 680,
      "groundtruth": "sender.sendMessage(CustomColor.translate(\"&a\" + args[0] + \" &7is &cnot &7online.\"));",
      "prediction": "sender.sendMessage(CustomColor.translate(\"&cThat player isn't online!\"));",
      "raw_prediction": "sender.sendMessage(CustomColor.translate(\"&cThat player isn't online!\"));",
      "es": 0.7142857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 681,
      "groundtruth": "playerLocation, lobbyParticles.getCount());",
      "prediction": "playerLocation, 0, 0, 0, 0, 0.01);",
      "raw_prediction": "playerLocation, 0, 0, 0, 0, 0.01);\n    }\n\n    public void cancel() {\n        this.cancel();",
      "es": 0.4418604651162791,
      "em": false,
      "passed": false
    },
    {
      "index": 682,
      "groundtruth": "UUID, Integer> idsProducts = cartModel.getIdsProducts();",
      "prediction": "UUID, Integer> idsProducts = cartRecordDto.getIdsProducts();",
      "raw_prediction": "UUID, Integer> idsProducts = cartRecordDto.getIdsProducts();",
      "es": 0.8833333333333333,
      "em": false,
      "passed": false
    },
    {
      "index": 683,
      "groundtruth": "= userRepository.findByIdentifier(identifier);",
      "prediction": "= new UserModel();",
      "raw_prediction": "= new UserModel();",
      "es": 0.21739130434782605,
      "em": false,
      "passed": false
    },
    {
      "index": 684,
      "groundtruth": "> list = userRepository.findByType(type);",
      "prediction": "> list = userRepository.findByType(type);",
      "raw_prediction": "> list = userRepository.findByType(type);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 685,
      "groundtruth": "asList(manager.getItemsAsArray()), new ArrayList<>());",
      "prediction": "asList(manager.getItemNames()), new ArrayList<>());",
      "raw_prediction": "asList(manager.getItemNames()), new ArrayList<>());\n        }else if(args.length == 2){\n            return Arrays.asList(\"get\");",
      "es": 0.8518518518518519,
      "em": false,
      "passed": false
    },
    {
      "index": 686,
      "groundtruth": "size = plugin.getParticleManager().getParticlesMapSize()+1;",
      "prediction": "size = 0;",
      "raw_prediction": "size = 0;",
      "es": 0.13559322033898302,
      "em": false,
      "passed": false
    },
    {
      "index": 687,
      "groundtruth": ": mainInstance.getYmlDataFile().getConfigurationSection(\"\").getKeys(false)){",
      "prediction": ": mainInstance.getYmlDataFile().getKeys(false)",
      "raw_prediction": ": mainInstance.getYmlDataFile().getKeys(false)){\n            final ItemStack itemStack = new ItemStack(Material.AIR);",
      "es": 0.6052631578947368,
      "em": false,
      "passed": false
    },
    {
      "index": 688,
      "groundtruth": ".delete(userRepository.findByIdentifier(identifier));",
      "prediction": ".delete(user0);",
      "raw_prediction": ".delete(user0);",
      "es": 0.26415094339622647,
      "em": false,
      "passed": false
    },
    {
      "index": 689,
      "groundtruth": ".get().addProduct(idProduct, 1);",
      "prediction": ".get().setIdsProducts(products);",
      "raw_prediction": ".get().setIdsProducts(products);\n                products.put(idProduct, 1);",
      "es": 0.625,
      "em": false,
      "passed": false
    },
    {
      "index": 690,
      "groundtruth": "DiscordVerifier.getDiscordCodes().get(player.getUniqueId()).getRight();",
      "prediction": "DiscordVerifier.getDiscordCodes().get(player.getUniqueId()).getRight();",
      "raw_prediction": "DiscordVerifier.getDiscordCodes().get(player.getUniqueId()).getRight();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 691,
      "groundtruth": "(DiscordVerifier.getInstance().getConfig().getBoolean(\"should-minecraft-chat-copyable\")) {",
      "prediction": "(time > 0)) {",
      "raw_prediction": "(time > 0)) {",
      "es": 0.09999999999999998,
      "em": false,
      "passed": false
    },
    {
      "index": 692,
      "groundtruth": "mainInstance.getYmlDataFile().save(mainInstance.getDatafile());",
      "prediction": "mainInstance.getYmlDataFile().save(mainInstance.getDataFolder() + \"/customItems.yml\");",
      "raw_prediction": "mainInstance.getYmlDataFile().save(mainInstance.getDataFolder() + \"/customItems.yml\");",
      "es": 0.7093023255813953,
      "em": false,
      "passed": false
    },
    {
      "index": 693,
      "groundtruth": "manager.saveFile();",
      "prediction": "player.getInventory().setItemInMainHan",
      "raw_prediction": "    player.getInventory().setItemInMainHand(Material.AIR);",
      "es": 0.1842105263157895,
      "em": false,
      "passed": false
    },
    {
      "index": 694,
      "groundtruth": ".setDisplayName(Color.translate(name));",
      "prediction": ".setDisplayName(Color.translate(name));",
      "raw_prediction": ".setDisplayName(Color.translate(name));\n        itemStack.setItemMeta(itemMeta);\n        return itemStack;\n    }\n\n    /**\n     * ItemBuilder for custom name and custom lore.\n     * @param material Material\n     * @param name String name",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 695,
      "groundtruth": ".requireNonNull(e.getGuild()).getRoleById(DiscordVerifier.getInstance().getConfig().getString(\"discord.role-given\"));",
      "prediction": ".requireNonNull(e.getGuild().getRoleById(DiscordVerifier.getInstance().getConfig().getString(\"discord.role-added\")));",
      "raw_prediction": ".requireNonNull(e.getGuild().getRoleById(DiscordVerifier.getInstance().getConfig().getString(\"discord.role-added\")));",
      "es": 0.9487179487179487,
      "em": false,
      "passed": false
    },
    {
      "index": 696,
      "groundtruth": ".save(mainInstance.getDatafile());",
      "prediction": ".save(mainInstance.getYmlDataFile());",
      "raw_prediction": ".save(mainInstance.getYmlDataFile());",
      "es": 0.8918918918918919,
      "em": false,
      "passed": false
    },
    {
      "index": 697,
      "groundtruth": "(DiscordVerifier.getInstance().getConfig().getString(\"messages.verification-successful-discord\")).queue();",
      "prediction": "(DiscordVerifier.getInstance().getConfig().getString(\"messages.verification-successful\")).queue();",
      "raw_prediction": "(DiscordVerifier.getInstance().getConfig().getString(\"messages.verification-successful\")).queue();",
      "es": 0.9245283018867925,
      "em": false,
      "passed": false
    },
    {
      "index": 698,
      "groundtruth": ".teleport(main.getWarpManager().getWarp(args[0]));",
      "prediction": ".teleport(new Location(Bukkit.getWorld(warps.getString(args[0] + \".world\"))",
      "raw_prediction": ".teleport(new Location(Bukkit.getWorld(warps.getString(args[0] + \".world\")), warps.getDouble(args[0] + \".x\"), warps.getDouble(args[0] + \".y\"), warps.getDouble(args[0]",
      "es": 0.43999999999999995,
      "em": false,
      "passed": false
    },
    {
      "index": 699,
      "groundtruth": "<= configManager.getTalkRange()) {",
      "prediction": "<= configManager.ge",
      "raw_prediction": "<= configManager.getChatRange()) {",
      "es": 0.5588235294117647,
      "em": false,
      "passed": false
    },
    {
      "index": 700,
      "groundtruth": ".cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.verification-successful-mc\")));",
      "prediction": ".getMessage(DiscordVerifier.getInstance().getConfig().getString(\"messages.verification-successful-minecraft\")));",
      "raw_prediction": ".getMessage(DiscordVerifier.getInstance().getConfig().getString(\"messages.verification-successful-minecraft\")));\n    }\n\n    private void attemptSendMCMessage(@NotNull UUID uuid, @NotNull String message) {\n        final Player player = DiscordVerifier.getInstance().",
      "es": 0.8482142857142857,
      "em": false,
      "passed": false
    },
    {
      "index": 701,
      "groundtruth": "DiscordVerifier.getDiscordCodes().forEach((uuid, data) -> {",
      "prediction": "DiscordVerifier.getDiscordCodes",
      "raw_prediction": "DiscordVerifier.getDiscordCodes().get(code, (data) -> {",
      "es": 0.5254237288135593,
      "em": false,
      "passed": false
    },
    {
      "index": 702,
      "groundtruth": "String code = DiscordVerifier.getDiscordCodes().get(player.getUniqueId()).getLeft();",
      "prediction": "String code = DiscordVerifier.getDiscordCodes().get(player.getUniqueId()).getLeft();",
      "raw_prediction": " String code = DiscordVerifier.getDiscordCodes().get(player.getUniqueId()).getLeft();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 703,
      "groundtruth": "main.getWarpManager().setWarp(args[0], loc);",
      "prediction": "warps.set(args[0] + \".world\", loc.getWorld().getName());",
      "raw_prediction": "    warps.set(args[0] + \".world\", loc.getWorld().getName());\n        warps.set(args[0] + \".x\", loc.getX());\n        warps.set(args[0] + \".y\", loc.getY());\n       ",
      "es": 0.2678571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 704,
      "groundtruth": "cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-generated\"))\n                .replace(\"{",
      "prediction": "getConfig().getString(\"message.code\");",
      "raw_prediction": "getConfig().getString(\"message.code\");\n        rawMsg = rawMsg.replace(\"{",
      "es": 0.3363636363636363,
      "em": false,
      "passed": false
    },
    {
      "index": 705,
      "groundtruth": "if (DiscordVerifier.getInstance().getConfig().getBoolean(\"discord.sync-name\")){",
      "prediction": "if (DiscordVerifier.getInstance().getConfig().getBoolean(\"should-change-nickname\"))",
      "raw_prediction": "if (DiscordVerifier.getInstance().getConfig().getBoolean(\"should-change-nickname\")) {",
      "es": 0.8072289156626506,
      "em": false,
      "passed": false
    },
    {
      "index": 706,
      "groundtruth": "return DiscordVerifier.getDiscordCodes().get(player.getUniqueId()) != null;",
      "prediction": "return DiscordVerifier.getDiscordCodes().containsKey(player.getUniqueId());",
      "raw_prediction": " return DiscordVerifier.getDiscordCodes().containsKey(player.getUniqueId());",
      "es": 0.76,
      "em": false,
      "passed": false
    },
    {
      "index": 707,
      "groundtruth": ", Color.translate(\"&6Particle Menu\"));",
      "prediction": ", \"Particles\");",
      "raw_prediction": ", \"Particles\");",
      "es": 0.368421052631579,
      "em": false,
      "passed": false
    },
    {
      "index": 708,
      "groundtruth": "().editOriginal(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-invalid\")).queue();",
      "prediction": "().editOriginal(\"Invalid code!\").queue();",
      "raw_prediction": "().editOriginal(\"Invalid code!\").queue();\n            return;\n        }\n        if (e.getMember().getRoles().contains(Objects.requireNonNull(e.getGuild()).getRoleById(DiscordVerifier.getInstance().getConfig().getString(\"discord.role",
      "es": 0.3431372549019608,
      "em": false,
      "passed": false
    },
    {
      "index": 709,
      "groundtruth": "DiscordVerifier.getDiscordCodes().remove(uuid);",
      "prediction": "DiscordVerifier.getDiscordCodes().remove(uuid);",
      "raw_prediction": "    DiscordVerifier.getDiscordCodes().remove(uuid);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 710,
      "groundtruth": "List<String> commands = DiscordVerifier.getInstance().getConfig().getStringList(\"Minecraft.Command\");",
      "prediction": "List<String> commands = DiscordVerifier.getInstance().getConfig().getStringList(\"discord.commands\");",
      "raw_prediction": "List<String> commands = DiscordVerifier.getInstance().getConfig().getStringList(\"discord.commands\");",
      "es": 0.9108910891089109,
      "em": false,
      "passed": false
    },
    {
      "index": 711,
      "groundtruth": "DiscordVerifier.getInstance().getConfig().getBoolean(\"should-code-be-case-sensitive\");",
      "prediction": "DiscordVerifier.getInstance().getConfig().getBoolean(\"discord.case-sensitive\");",
      "raw_prediction": "DiscordVerifier.getInstance().getConfig().getBoolean(\"discord.case-sensitive\");\n            if (data.getLeft() == null) return;",
      "es": 0.8488372093023255,
      "em": false,
      "passed": false
    },
    {
      "index": 712,
      "groundtruth": "Bukkit.getScheduler().runTask(DiscordVerifier.getInstance(), () -> {",
      "prediction": "Bukkit.getScheduler().runTaskAsynchr",
      "raw_prediction": "    Bukkit.getScheduler().runTaskAsynchronously(DiscordVerifier.getInstance(), () -> {",
      "es": 0.47058823529411764,
      "em": false,
      "passed": false
    },
    {
      "index": 713,
      "groundtruth": "Player player = DiscordVerifier.getInstance().getServer().getPlayer(uuid);",
      "prediction": "Player player = Bukkit.getPlayer(uuid);",
      "raw_prediction": "Player player = Bukkit.getPlayer(uuid);",
      "es": 0.472972972972973,
      "em": false,
      "passed": false
    },
    {
      "index": 714,
      "groundtruth": "megaphoneMeta.setDisplayName(CustomColor.translate(\"&a&lMegaphone\"));",
      "prediction": "megaphoneMeta.setDisplayName(CustomColor.translate(\"&7Megaphone\"));",
      "raw_prediction": "    megaphoneMeta.setDisplayName(CustomColor.translate(\"&7Megaphone\"));",
      "es": 0.9565217391304348,
      "em": false,
      "passed": false
    },
    {
      "index": 715,
      "groundtruth": "Role removed = e.getGuild().getRoleById(DiscordVerifier.getInstance().getConfig().getString(\"discord.role-removed\"));",
      "prediction": "Role removed = Objects.requireNonNull(e.getGuild()).getRoleById(DiscordVerifier.getInstance().getConfig().getString(\"discord.role-removed\"));",
      "raw_prediction": "Role removed = Objects.requireNonNull(e.getGuild()).getRoleById(DiscordVerifier.getInstance().getConfig().getString(\"discord.role-removed\"));",
      "es": 0.8297872340425532,
      "em": false,
      "passed": false
    },
    {
      "index": 716,
      "groundtruth": "+ getConfigManager().getMegaphoneRange()\n                            + \" &7blocks!\")));",
      "prediction": "e + \"&750 blocks\")));",
      "raw_prediction": "e + \"&750 blocks\")));\n            megaphoneMeta.setCustomModelData(1);",
      "es": 0.1724137931034483,
      "em": false,
      "passed": false
    },
    {
      "index": 717,
      "groundtruth": "if (newCart.get().getIdsProducts().isEmpty()){",
      "prediction": "}",
      "raw_prediction": "}\n            }\n            else {\n                return ResponseEntity.status(HttpStatus.BAD_REQUEST_REQUEST).body(\"A\u00e7\u00e3o inv\u00e1lida\");\n            }\n",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 718,
      "groundtruth": ").getAmount() - value);",
      "prediction": ").getAmount() - value);",
      "raw_prediction": ").getAmount() - value);\n            }\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 719,
      "groundtruth": "Optional<CartModel> cart = cartRepository.findByIdClient(idClient);",
      "prediction": "Optional<CartModel> cart = cartRepository.findByIdClient(idClient);",
      "raw_prediction": "   Optional<CartModel> cart = cartRepository.findByIdClient(idClient);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 720,
      "groundtruth": "saleModel.addProduct(idProduct, quantidade);",
      "prediction": "SaleProductModel saleProductModel = new SaleProductModel();",
      "raw_prediction": "    SaleProductModel saleProductModel = new SaleProductModel();\n            BeanUtils.copyProperties(saleRecordDto, saleProductModel);\n            saleProductModel.setIdProduct(idProduct);\n            saleProductModel.setQuantity(quantidade);\n            sale",
      "es": 0.38983050847457623,
      "em": false,
      "passed": false
    },
    {
      "index": 721,
      "groundtruth": "saleModel.getIdClient());",
      "prediction": "saleRecordDto.getIdClient());",
      "raw_prediction": "saleRecordDto.getIdClient());",
      "es": 0.7586206896551724,
      "em": false,
      "passed": false
    },
    {
      "index": 722,
      "groundtruth": "saleModel.setDate(java.sql.Date.valueOf(date));",
      "prediction": "saleModel.setDate(date);",
      "raw_prediction": " saleModel.setDate(date);\n        saleModel.setTotal(cart.get().getAmount());\n",
      "es": 0.5106382978723405,
      "em": false,
      "passed": false
    },
    {
      "index": 723,
      "groundtruth": "productRepository.findById(idProduct).get().getValue();",
      "prediction": "productRepository.findById(idProduct).get().getValue();",
      "raw_prediction": "productRepository.findById(idProduct).get().getValue();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 724,
      "groundtruth": ": thoughts.getPlan().split(\"\\n\")) {",
      "prediction": ": thoughts.getPlan()",
      "raw_prediction": ": thoughts.getPlan()) {",
      "es": 0.5714285714285714,
      "em": false,
      "passed": false
    },
    {
      "index": 725,
      "groundtruth": "= agent.chat(\"GENERATE NEXT COMMAND JSON\", true);",
      "prediction": "= agent.chat(null, true);",
      "raw_prediction": "= agent.chat(null, true);\n                    } else if (\"n\".equals(yn)) {\n                System.out.print(\"Enter feedback (Why not execute the command?): \");\n                String feedback = scanner.nextLine();\n                resp = agent.chat(feedback",
      "es": 0.4285714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 726,
      "groundtruth": "agent.chat(feedback, false);",
      "prediction": "agent.chat(\"GENERATE NEXT COMMAND JSON\", true);",
      "raw_prediction": "agent.chat(\"GENERATE NEXT COMMAND JSON\", true);",
      "es": 0.3191489361702128,
      "em": false,
      "passed": false
    },
    {
      "index": 727,
      "groundtruth": "+= product.get().getValue() * quantidade;",
      "prediction": "+= product.get().getValue() * quantidade;",
      "raw_prediction": "+= product.get().getValue() * quantidade;\n            }\n            else{\n                return ResponseEntity.status(HttpStatus.NOT_FOUND).body(\"Produto n\u00e3o encontrado\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 728,
      "groundtruth": "saleModel.setIdSeller(idSeller);",
      "prediction": "if (!idSeller.equals(saleModel.getIdSeller()))",
      "raw_prediction": " if (!idSeller.equals(saleModel.getIdSeller())){\n            return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(\"Voc\u00ea n\u00e3o \u00e9 o vendedor deste produto.\");\n        }\n        /**\n        * Verifica se o cliente esta cadastrado no sistema\n       ",
      "es": 0.34782608695652173,
      "em": false,
      "passed": false
    },
    {
      "index": 729,
      "groundtruth": "<String> relevantMemory = memory.get(10);",
      "prediction": "<String> relevantMemory = this.memory.getRelevantMemory(userInput);",
      "raw_prediction": "<String> relevantMemory = this.memory.getRelevantMemory(userInput);",
      "es": 0.582089552238806,
      "em": false,
      "passed": false
    },
    {
      "index": 730,
      "groundtruth": "(HttpStatus.OK).body(saleRepository.findByIdSeller(id));",
      "prediction": "(HttpStatus.OK).body(saleRepository.findByIdSeller(id));",
      "raw_prediction": "(HttpStatus.OK).body(saleRepository.findByIdSeller(id));\n        }",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 731,
      "groundtruth": "(thoughts.hasCriticism()) {",
      "prediction": "(thoughts.hasCriticism())",
      "raw_prediction": "(thoughts.hasCriticism()) {",
      "es": 0.9259259259259259,
      "em": false,
      "passed": false
    },
    {
      "index": 732,
      "groundtruth": "thoughts.hasSpeak()) {",
      "prediction": "thoughts.hasS",
      "raw_prediction": "thoughts.hasSelfImprovement()) {\n                    System.out.println(agent.getName() + \": Self improvement: \" + thoughts.getSelfImprovement());\n                }\n            if (thoughts.hasSpeak()) {",
      "es": 0.5909090909090908,
      "em": false,
      "passed": false
    },
    {
      "index": 733,
      "groundtruth": "out.println(agent.getName() + \": (voice) \" + thoughts.getSpeak());",
      "prediction": "out.println(agent.getName() + \": Speak: \" + thoughts.getSpeak());",
      "raw_prediction": "out.println(agent.getName() + \": Speak: \" + thoughts.getSpeak());\n                }\n            }\n            if (resp.hasText()) {\n                System.out.println(agent.getName() + \": \" + resp.getText());\n            }\n            if (resp.has",
      "es": 0.8939393939393939,
      "em": false,
      "passed": false
    },
    {
      "index": 734,
      "groundtruth": "resp.hasCommand()) {",
      "prediction": "resp.hasComm",
      "raw_prediction": "resp.hasCommand()) {",
      "es": 0.6,
      "em": false,
      "passed": false
    },
    {
      "index": 735,
      "groundtruth": "return openAIModel.chat(prompts);",
      "prediction": "String response = openAIModel.chat(prompts, maxTokens);",
      "raw_prediction": "String response = openAIModel.chat(prompts, maxTokens);\n        return response;",
      "es": 0.5454545454545454,
      "em": false,
      "passed": false
    },
    {
      "index": 736,
      "groundtruth": ".add(PromptUtils.buildPrompts(role, content));",
      "prediction": ".add(Map.of(\"role\", role, \"content\", content));",
      "raw_prediction": ".add(Map.of(\"role\", role, \"content\", content));",
      "es": 0.4042553191489362,
      "em": false,
      "passed": false
    },
    {
      "index": 737,
      "groundtruth": "consumerAccessor.setPickupDelay(Math.max(consumerAccessor.getPickupDelay(), supplierAccessor.getPickupDelay()));",
      "prediction": "var consumerExtraItemCount = getExtraItemCount(consumer);",
      "raw_prediction": "var consumerExtraItemCount = getExtraItemCount(consumer);\n        var supplierExtraItemCount = getExtraItemCount(supplier);\n\n;\n\n        var consumerMaxStackSize = consumer.getItem().getMaxStackSize();\n        var supplierMaxStackSize = supplier.getItem().getMax",
      "es": 0.1875,
      "em": false,
      "passed": false
    },
    {
      "index": 738,
      "groundtruth": "return chat(seedInput.getContent(), false);",
      "prediction": "List<Map<String, String>> fullPrompt = this.getFullPrompt(seedInput.getPrompt());",
      "raw_prediction": "List<Map<String, String>> fullPrompt = this.getFullPrompt(seedInput.getPrompt());\n        int tokenCount = openAIModel.countTokens(fullPrompt);\n        int tokenLimit = openAIModel.getTokenLimit();\n        String resp = openAI",
      "es": 0.2222222222222222,
      "em": false,
      "passed": false
    },
    {
      "index": 739,
      "groundtruth": "var age = accessor.getAge();",
      "prediction": "var age = accessor.getAge();",
      "raw_prediction": "var age = accessor.getAge();\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 740,
      "groundtruth": "|| Staaaaaaaaaaaack.getItemBlackList().contains(itemStack.getItem());",
      "prediction": "|| itemStack.is(Staaaaaaaaaaaack.BLACK_LIST_TAG)",
      "raw_prediction": "|| itemStack.is(Staaaaaaaaaaaack.BLACK_LIST_TAG)\n            || itemStack.is(Staaaaaaaaaaaack.BLACK_LIST_TAG)\n            || itemStack.is(Staaaaaaaaaaaack.BLACK_LIST_TAG);",
      "es": 0.21739130434782605,
      "em": false,
      "passed": false
    },
    {
      "index": 741,
      "groundtruth": "openAIModel.getTokenLimit();",
      "prediction": "openAIModel.getTokenLimit() - tokenCount;",
      "raw_prediction": "openAIModel.getTokenLimit() - tokenCount;",
      "es": 0.6829268292682926,
      "em": false,
      "passed": false
    },
    {
      "index": 742,
      "groundtruth": ".summarizer.summarize(extractedText, question);",
      "prediction": ".summarizer.summarize(extractededText);",
      "raw_prediction": ".summarizer.summarize(extractededText);\n            result.put(\"text\", summary);\n            result.put(\"links\", extractedLinks);\n        } else {",
      "es": 0.7659574468085106,
      "em": false,
      "passed": false
    },
    {
      "index": 743,
      "groundtruth": "min(consumerAccessor.getAge(), supplierAccessor.getAge()));",
      "prediction": "max(consumerAccessor.getAge(), supplierAccessor.getAge()));",
      "raw_prediction": "max(consumerAccessor.getAge(), supplierAccessor.getAge()));",
      "es": 0.9661016949152542,
      "em": false,
      "passed": false
    },
    {
      "index": 744,
      "groundtruth": "(Math.max(consumerAccessor.getPickupDelay(), supplierAccessor.getPickupDelay()));",
      "prediction": "(32767);",
      "raw_prediction": "(32767);\n        supplierAccessor.setPickupDelay(32767);",
      "es": 0.03703703703703709,
      "em": false,
      "passed": false
    },
    {
      "index": 745,
      "groundtruth": "= openAIModel.countTokens(updatedPrompt);",
      "prediction": "= openAIModel.countTokens(updatedPrompt);",
      "raw_prediction": "= openAIModel.countTokens(updatedPrompt);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 746,
      "groundtruth": "= openAIModel.chat(fullPrompt, tokenLimit - tokenCount);",
      "prediction": "= openAIModel.chat(fullPrompt, tokenLimit - tokenCount);",
      "raw_prediction": "= openAIModel.chat(fullPrompt, tokenLimit - tokenCount);\n        System.out.println(\"=========\");\n        System.out.println(\"User Input: \" + message);\n        System.out.println(\"=========\");\n        System.out.println(\"=========\");\n       ",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 747,
      "groundtruth": ".memory.add(humanFeedbackPrompt.getContent());",
      "prediction": ".memory.add(humanFeedbackPrompt.getContent());",
      "raw_prediction": ".memory.add(humanFeedbackPrompt.getContent());\n            this.stagingTool = null;\n            this.stagingResponse = null;\n            } else {",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 748,
      "groundtruth": "int tokenLimit = openAIModel.getTokenLimit() - 1000;",
      "prediction": "// Ensure prompt is not empty",
      "raw_prediction": "// Ensure prompt is not empty\n        if (prompt.isEmpty()) {\n            throw new IllegalArgumentException(\"Prompt cannot be empty\");\n        }\n\n        // Ensure prompt is not too long\n        int tokenLimit = openAIModel.getTokenLimit();",
      "es": 0.17307692307692313,
      "em": false,
      "passed": false
    },
    {
      "index": 749,
      "groundtruth": "return defaultResponsePrompt.getContent();",
      "prediction": "return defaultResponsePrompt.getContent();",
      "raw_prediction": " return defaultResponsePrompt.getContent();\n    }\n\n    public String goalPrompt() {\n        ArrayList<String> prompt = new ArrayList<>();\n        prompt.add(\"GOALS:\");\n        for (int i = 0; i < goals.size(); i++) {\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 750,
      "groundtruth": "(currentTimePrompt.getPrompt());",
      "prediction": "(prompt.size() - 1, currentTimePrompt.getPrompt());",
      "raw_prediction": "(prompt.size() - 1, currentTimePrompt.getPrompt());\n        // Build current date and time prompt\n        Prompt currentDatePrompt = new Prompt.Builder(\"current_date\")\n        .withRole(\"system\")\n        .formattedWithCurrentDate(0",
      "es": 0.6274509803921569,
      "em": false,
      "passed": false
    },
    {
      "index": 751,
      "groundtruth": "Prompt.getDefaultResponse();",
      "prediction": "\"Use the following format:\\n\" +",
      "raw_prediction": "\"Use the following format:\\n\" +\n            \"Thought: Do I even this response correctly?\\n\" +\n        \"Action: What tool should I use to answer this question?\\n\" +\n        \"Action Input: The input to",
      "es": 0.06451612903225812,
      "em": false,
      "passed": false
    },
    {
      "index": 752,
      "groundtruth": "return seeMore.getSchedulerHook().runTaskDelayed(() -> updateDistance(player, 0, attempts, distanceMap, taskMap, distanceConsumer), delay);",
      "prediction": "task = seeMore.getSchedulerHook().runTaskLater(() -> updateDistance(player, 0, attempts + 1, distanceMap, taskMap, distanceConsumer), delay);",
      "raw_prediction": "    task = seeMore.getSchedulerHook().runTaskLater(() -> updateDistance(player, 0, attempts + 1, distanceMap, taskMap, distanceConsumer), delay);\n            } else {\n                task = seeMore.getScheduler",
      "es": 0.8936170212765957,
      "em": false,
      "passed": false
    },
    {
      "index": 753,
      "groundtruth": "viewDistanceController.updateAllPlayers();",
      "prediction": "viewDistanceController.updateTargetViewDistance();",
      "raw_prediction": "viewDistanceController.updateTargetViewDistance();",
      "es": 0.6799999999999999,
      "em": false,
      "passed": false
    },
    {
      "index": 754,
      "groundtruth": "updateTask = seeMore.getSchedulerHook().runEntityTaskAsap(() -> {",
      "prediction": "updateTask = seeMore.getSchedulerH",
      "raw_prediction": "updateTask = seeMore.getSchedulerHook().runTask(() -> {",
      "es": 0.523076923076923,
      "em": false,
      "passed": false
    },
    {
      "index": 755,
      "groundtruth": "seeMore.getSeeMoreConfig().updateDelay.get();",
      "prediction": "Math.max(20, Math.min(100, delay * 2));",
      "raw_prediction": "Math.max(20, Math.min(100, delay * 2));",
      "es": 0.2222222222222222,
      "em": false,
      "passed": false
    },
    {
      "index": 756,
      "groundtruth": "parsedReport.getAverages().get(test.getTestName()));",
      "prediction": "parsedReport.getAverages().get(test.getTestName()))",
      "raw_prediction": "parsedReport.getAverages().get(test.getTestName()))",
      "es": 0.9807692307692307,
      "em": false,
      "passed": false
    },
    {
      "index": 757,
      "groundtruth": ".out.println(\"Successfully completed \" + test.getTestName() + \" in \" + timeElapsed + \" ms!\");",
      "prediction": ".out.println(\"Test: \" + test.getTestName() + \" took \" + isElapsed + \"ms to complete.\");",
      "raw_prediction": ".out.println(\"Test: \" + test.getTestName() + \" took \" + isElapsed + \"ms to complete.\");",
      "es": 0.5806451612903225,
      "em": false,
      "passed": false
    },
    {
      "index": 758,
      "groundtruth": "\"results for \" + test.getTestName() + \"!\");",
      "prediction": "+ \" results. Please try again later.\");",
      "raw_prediction": "     + \" results. Please try again later.\");",
      "es": 0.3023255813953488,
      "em": false,
      "passed": false
    },
    {
      "index": 759,
      "groundtruth": "toJson(report.getResults()).getBytes());",
      "prediction": "toJson(report).getBytes());",
      "raw_prediction": "toJson(report).getBytes());\n        } catch (IOException exc) {\n            exc.printStackTrace();\n        }\n\n        System.out.println(\"Successfully wrote report to \" + outputFile.toAbsolutePath());",
      "es": 0.675,
      "em": false,
      "passed": false
    },
    {
      "index": 760,
      "groundtruth": "executor.awaitTermination(30, TimeUnit.SECONDS);",
      "prediction": "executor.awaitTermination(1, TimeUnit.MINUTES);",
      "raw_prediction": "executor.awaitTermination(1, TimeUnit.MINUTES);",
      "es": 0.8333333333333334,
      "em": false,
      "passed": false
    },
    {
      "index": 761,
      "groundtruth": "executor.shutdown();",
      "prediction": "executor.close();",
      "raw_prediction": "executor.close();",
      "es": 0.65,
      "em": false,
      "passed": false
    },
    {
      "index": 762,
      "groundtruth": ".put(identity.getId(), entry.memberId());",
      "prediction": ".put(identity.getId(), entry.memberId());",
      "raw_prediction": ".put(identity.getId(), entry.memberId());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 763,
      "groundtruth": "properties.getConsumerConfig();",
      "prediction": "new ConsumerConfig(properties);",
      "raw_prediction": "new ConsumerConfig(properties);",
      "es": 0.25806451612903225,
      "em": false,
      "passed": false
    },
    {
      "index": 764,
      "groundtruth": "().getId());",
      "prediction": "());",
      "raw_prediction": "());",
      "es": 0.33333333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 765,
      "groundtruth": "identity.getId() + \"-\" + BD_CLIENT_ID_SEQUENCE.getAndIncrement();",
      "prediction": "BD_CLIENT_ID_sequence.getAndIncrement();",
      "raw_prediction": "BD_CLIENT_ID_sequence.getAndIncrement();\n",
      "es": 0.49230769230769234,
      "em": false,
      "passed": false
    },
    {
      "index": 766,
      "groundtruth": "[j].spawn();",
      "prediction": "[j].spawn();",
      "raw_prediction": "[j].spawn();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 767,
      "groundtruth": "if (!particleSpawnEvent.isCancelled()) {",
      "prediction": "if (!particleSpawnEvent.isCancelled())",
      "raw_prediction": "\n        if (!particleSpawnEvent.isCancelled()) {",
      "es": 0.95,
      "em": false,
      "passed": false
    },
    {
      "index": 768,
      "groundtruth": "[j].clone();",
      "prediction": "[j].clone();",
      "raw_prediction": "[j].clone();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 769,
      "groundtruth": "ToyController.instance().setScalarLevel(intensity);",
      "prediction": "LOGGER.trace(\"Intensity {}\", intensity);",
      "raw_prediction": "\tLOGGER.trace(\"Intensity {}\", intensity);",
      "es": 0.3529411764705882,
      "em": false,
      "passed": false
    },
    {
      "index": 770,
      "groundtruth": "ToyController.instance().setScalarLevel(0);",
      "prediction": "}",
      "raw_prediction": "}",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 771,
      "groundtruth": "masochistPointsCounter.onHurt(amount);",
      "prediction": "}",
      "raw_prediction": "}\n}\n\n\tpublic void onAttack(float amount) {\n\t\tLOGGER.debug(\"On attack. Amount {}\", amount);\n\t\tattackPointsCounter.onAttack(amount);\n\t}\n\n\tpublic void onKill() {\n\t\tLOGGER.debug(\"Player killed\");\n\t\treset();\n\t",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 772,
      "groundtruth": "abstractPointsCounter.getInstantPoints(), instanPoints);",
      "prediction": "abstractPointsCounter.getInstantPoints(), instanPoints);",
      "raw_prediction": "abstractPointsCounter.getInstantPoints(), instanPoints);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 773,
      "groundtruth": "skipDownTick += abstractPointsCounter.getSkipDownTicks();",
      "prediction": "skipDownTick = Math.max(abstractPointsCounter.getSkipDownTicks(), skipDownTick);",
      "raw_prediction": "\tskipDownTick = Math.max(abstractPointsCounter.getSkipDownTicks(), skipDownTick);",
      "es": 0.6875,
      "em": false,
      "passed": false
    },
    {
      "index": 774,
      "groundtruth": "= Math.max(abstractPointsCounter.getPoints(), points);",
      "prediction": "+= abstractPointsCounter.getPoints();",
      "raw_prediction": "+= abstractPointsCounter.getPoints();",
      "es": 0.6481481481481481,
      "em": false,
      "passed": false
    },
    {
      "index": 775,
      "groundtruth": "ToyController.instance().setLinearLevel(intensity);",
      "prediction": "ToyController.instance().setScalarLevel(intensity);",
      "raw_prediction": "\tToyController.instance().setScalarLevel(intensity);\n\t\t} else {\n\t\t\tToyController.instance().setScalarLevel(0);",
      "es": 0.9215686274509804,
      "em": false,
      "passed": false
    },
    {
      "index": 776,
      "groundtruth": "abstractPointsCounter.onTick();",
      "prediction": "abstractPointsCounter.onPlayerTick();",
      "raw_prediction": "\tabstractPointsCounter.onPlayerTick();",
      "es": 0.8378378378378378,
      "em": false,
      "passed": false
    },
    {
      "index": 777,
      "groundtruth": "masochistPointsCounter.onDeath();",
      "prediction": "}",
      "raw_prediction": "}\n}\n\n\tpublic void onAttack(float amount) {\n\t\tLOGGER.debug(\"On attack. Amount {}\", amount);\n\t\tattackPointsCounter.onAttack(amount);\n\t}\n\tpublic void onHurt(float amount) {\n\t\tLOGGER.debug(\"On hurt. Amount",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 778,
      "groundtruth": ", file.genThumbnailPath());",
      "prediction": ", file.genThumbnailPath());",
      "raw_prediction": ", file.genThumbnailPath());\n    tags = new ArrayList<>();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 779,
      "groundtruth": "= LdsUtil.getFileBucketPath(basePath, newFileId);",
      "prediction": "= LdsUtil.getBucketPath(bucketName, newFileId);",
      "raw_prediction": "= LdsUtil.getBucketPath(bucketName, newFileId);\n    String fileId = LdsUtil.generateUuid();",
      "es": 0.7755102040816326,
      "em": false,
      "passed": false
    },
    {
      "index": 780,
      "groundtruth": "(newFile.checkImageFileType()) {",
      "prediction": "(file.getSize() > 0)",
      "raw_prediction": "(file.getSize() > 0) {",
      "es": 0.28125,
      "em": false,
      "passed": false
    },
    {
      "index": 781,
      "groundtruth": "newFile.genThumbnailPath());",
      "prediction": "newFileId);",
      "raw_prediction": "newFileId);\n    }",
      "es": 0.3214285714285714,
      "em": false,
      "passed": false
    },
    {
      "index": 782,
      "groundtruth": ".orderNo = System.currentTimeMillis() + \"-\" + LdsUtil.getPathId(path);",
      "prediction": ".orderNo = LdsUtil.getFileNameOrderNo(name);",
      "raw_prediction": ".orderNo = LdsUtil.getFileNameOrderNo(name);",
      "es": 0.3285714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 783,
      "groundtruth": "storageService.batchDelete(bucketName);",
      "prediction": "storageService.delete(bucketName, LdsUtil.getBucketPath(basePath));",
      "raw_prediction": "storageService.delete(bucketName, LdsUtil.getBucketPath(basePath));",
      "es": 0.4328358208955224,
      "em": false,
      "passed": false
    },
    {
      "index": 784,
      "groundtruth": "resourceBasePath = LdsUtil.getResourceBasePath(basePath);",
      "prediction": "resourceBasePath = basePath + \"/\" + collectionName;",
      "raw_prediction": "resourceBasePath = basePath + \"/\" + collectionName;",
      "es": 0.4385964912280702,
      "em": false,
      "passed": false
    },
    {
      "index": 785,
      "groundtruth": "BaseFile oldFile = fileService.getFileById(fileId);",
      "prediction": "BaseFile oldFile = fileService.getFileById(fileId);",
      "raw_prediction": "BaseFile oldFile = fileService.getFileById(fileId);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 786,
      "groundtruth": "(contextValue.getType(), contextValue.getId());",
      "prediction": "(contextValue);",
      "raw_prediction": "(contextValue);",
      "es": 0.3191489361702128,
      "em": false,
      "passed": false
    },
    {
      "index": 787,
      "groundtruth": "enterContext(contextValue.getType());",
      "prediction": "setContextValue(contextValue.getType(), contextValue.getId());",
      "raw_prediction": "setContextValue(contextValue.getType(), contextValue.getId());",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 788,
      "groundtruth": "contextValue.getId());",
      "prediction": "contextValue.getId());",
      "raw_prediction": "contextValue.getId());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 789,
      "groundtruth": "(libraryIds.getVersion()),\n          new CqlTranslatorOptions(TRANSLATOR_OPTIONS),\n          errors);",
      "prediction": "(libraryIds.getVersion()),\n          (library, errors)",
      "raw_prediction": "(libraryIds.getVersion()),\n          (library, errors) -> {\n            if (errors.isEmpty()) {\n              return library;\n            }\n            throw new RuntimeException(\"Errors encountered while compiling CQL. \" + errors.toString());\n          },\n          CqlTranslator",
      "es": 0.48514851485148514,
      "em": false,
      "passed": false
    },
    {
      "index": 790,
      "groundtruth": "super.resolveType(value);",
      "prediction": "super.resolveType(value.getClass().getName());",
      "raw_prediction": "super.resolveType(value.getClass().getName());",
      "es": 0.5434782608695652,
      "em": false,
      "passed": false
    },
    {
      "index": 791,
      "groundtruth": "withId(libraryIds.getName())\n              .withVersion(libraryIds.getVersion()),\n          new CqlTranslatorOptions(TRANSLATOR_OPTIONS),\n          errors);",
      "prediction": "setIdentifier(libraryIds.getName())\n              .setVersion(libraryIds.getVersion())\n              .setVersionType(org.hl7.elm.r1.VersionType.Latest)\n              .setVersionType(org.hl7.elm.r1.VersionType.Latest)",
      "raw_prediction": "setIdentifier(libraryIds.getName())\n              .setVersion(libraryIds.getVersion())\n              .setVersionType(org.hl7.elm.r1.VersionType.Latest)\n              .setVersionType(org.hl7.elm.r1.VersionType.Latest)\n",
      "es": 0.4814814814814815,
      "em": false,
      "passed": false
    },
    {
      "index": 792,
      "groundtruth": "diceResult.setAmeacas(0);",
      "prediction": "diceResult.setAmeacas(0);",
      "raw_prediction": "    diceResult.setAmeacas(0);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 793,
      "groundtruth": "diceResult.setFracassos(0);",
      "prediction": "diceResult.setFracassos(0);",
      "raw_prediction": "    diceResult.setFracassos(0);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 794,
      "groundtruth": "diceResult.setFracassos(failure - success);",
      "prediction": "diceResult.setFracassos(failure - success);",
      "raw_prediction": "    diceResult.setFracassos(failure - success);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 795,
      "groundtruth": "diceResult.setSucessos(success - failure);",
      "prediction": "diceResult.setSucessos(success - failure);",
      "raw_prediction": "diceResult.setSucessos(success - failure);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 796,
      "groundtruth": "service.rollDisVantage(\"Advantage\", dice);",
      "prediction": "service.rollAdvantage(\"Advantage\", dice);",
      "raw_prediction": "service.rollAdvantage(\"Advantage\", dice);",
      "es": 0.9047619047619048,
      "em": false,
      "passed": false
    },
    {
      "index": 797,
      "groundtruth": "return openTelemetryService.spanScope(this.getClass().getName(), \"healthCheck\", () -> {",
      "prediction": "return openTelemetryService.spanScope(this.getClass().getName(), \"healthCheck\", () -> {",
      "raw_prediction": "return openTelemetryService.spanScope(this.getClass().getName(), \"healthCheck\", () -> {",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 798,
      "groundtruth": "diceResult.setVantagens(advantage - threat);",
      "prediction": "diceResult.setVantant(advantage - threat);",
      "raw_prediction": "diceResult.setVantant(advantage - threat);",
      "es": 0.9318181818181819,
      "em": false,
      "passed": false
    },
    {
      "index": 799,
      "groundtruth": "= HydraulicImpl.instance().mod(modId);",
      "prediction": "= HydraulicImpl.get().getModManager().getMod(modId);",
      "raw_prediction": "= HydraulicImpl.get().getModManager().getMod(modId);\n",
      "es": 0.6346153846153846,
      "em": false,
      "passed": false
    },
    {
      "index": 800,
      "groundtruth": "return HydraulicImpl.instance().dataFolder(Constants.MOD_ID)\n                .resolve(\"storage\")\n                .resolve(mod.id());",
      "prediction": "return HydraulicImpl.getInstance().getStoragePath().resolve(\"mods\").resolve(mod.id());",
      "raw_prediction": "return HydraulicImpl.getInstance().getStoragePath().resolve(\"mods\").resolve(mod.id());",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 801,
      "groundtruth": "diceResult.setDesesperos(0);",
      "prediction": "diceResult.setDesesperos(0);",
      "raw_prediction": "diceResult.setDesesperos(0);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 802,
      "groundtruth": "this.hydraulic.server().registryAccess().registryOrThrow(key);",
      "prediction": "this.hydraulic.registry(key);",
      "raw_prediction": "this.hydraulic.registry(key);",
      "es": 0.467741935483871,
      "em": false,
      "passed": false
    },
    {
      "index": 803,
      "groundtruth": ".packManager.initialize();",
      "prediction": ".bootstrap.onServerStarting(server);",
      "raw_prediction": ".bootstrap.onServerStarting(server);\n    }\n\n    /**\n     * Called when the server is starting.\n     *\n     * @param server the Minecraft server instance\n     */\n    public void onServerStarted(@NotNull MinecraftServer server) {\n        this",
      "es": 0.2777777777777778,
      "em": false,
      "passed": false
    },
    {
      "index": 804,
      "groundtruth": "this.bootstrap.mods();",
      "prediction": "this.bootstrap.mods();",
      "raw_prediction": "this.bootstrap.mods();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 805,
      "groundtruth": "forceResult.setLuz(light);",
      "prediction": "forceResult.setBranco(light);",
      "raw_prediction": "forceResult.setBranco(light);",
      "es": 0.7931034482758621,
      "em": false,
      "passed": false
    },
    {
      "index": 806,
      "groundtruth": "forceResult.setNegro(dark);",
      "prediction": "forceResult.setEscuro(dark);",
      "raw_prediction": "forceResult.setEscuro(dark);\n",
      "es": 0.8571428571428572,
      "em": false,
      "passed": false
    },
    {
      "index": 807,
      "groundtruth": "result = boostDice.roll();",
      "prediction": "result = boostDice.roll();",
      "raw_prediction": "result = boostDice.roll();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 808,
      "groundtruth": "logger.Info(String.format(\"[%s] [%s] websocket is closed\", conversationSignature, question));",
      "prediction": "logger.Info(String.format(\"[%s] [%s] websocket is close\", conversationSignature, question));",
      "raw_prediction": "    logger.Info(String.format(\"[%s] [%s] websocket is close\", conversationSignature, question));",
      "es": 0.989247311827957,
      "em": false,
      "passed": false
    },
    {
      "index": 809,
      "groundtruth": "logger.Debug(String.format(\"[%s] [%s] client send message [%s]\", conversationSignature, question, data));",
      "prediction": "logger.Debug(String.format(\"[%s] [%s] websocket is send new message [%s]\", conversationSignature, question, data));",
      "raw_prediction": "logger.Debug(String.format(\"[%s] [%s] websocket is send new message [%s]\", conversationSignature, question, data));",
      "es": 0.8695652173913043,
      "em": false,
      "passed": false
    },
    {
      "index": 810,
      "groundtruth": "logger.Debug(String.format(\"[%s] [%s] websocket is received new message [%s]\", conversationSignature, question, textSpited));",
      "prediction": "if (textSpplit.isEmpty()) {",
      "raw_prediction": " if (textSpplit.isEmpty()) {\n         return;\n     }",
      "es": 0.09599999999999997,
      "em": false,
      "passed": false
    },
    {
      "index": 811,
      "groundtruth": "(String.format(\"%s   %s\", country.getEmoji(), country.getName()));",
      "prediction": "(country.getName());",
      "raw_prediction": "(country.getName());",
      "es": 0.303030303030303,
      "em": false,
      "passed": false
    },
    {
      "index": 812,
      "groundtruth": "setText(String.format(\"%s   %s\", country.getEmoji(), country.getName()));",
      "prediction": "setText(country.getName());",
      "raw_prediction": "setText(country.getName());",
      "es": 0.36986301369863017,
      "em": false,
      "passed": false
    },
    {
      "index": 813,
      "groundtruth": "(country.getCallingCode());",
      "prediction": "(country.getCallingCode());",
      "raw_prediction": "(country.getCallingCode());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 814,
      "groundtruth": "country.getCode();",
      "prediction": "country.getCallingCode();",
      "raw_prediction": "country.getCallingCode();",
      "es": 0.72,
      "em": false,
      "passed": false
    },
    {
      "index": 815,
      "groundtruth": ", String> available = TraceUtils.listCategories();",
      "prediction": ", String>) TraceUtils.listCategories();",
      "raw_prediction": ", String>) TraceUtils.listCategories();\n     Map<String, String> available = new TreeMap<>(availableTags);\n\n     available.putAll(availableTags);\n    available.remove(\"default\");\n    available.remove(\"default:default\");\n    available.remove(\"",
      "es": 0.76,
      "em": false,
      "passed": false
    },
    {
      "index": 816,
      "groundtruth": "Process perfetto = TraceUtils.exec(cmd, null, false);",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 817,
      "groundtruth": "TraceUtils.traceStop();",
      "prediction": "stopForeground(Service.STOP_FOREGROUND_REMOVE)",
      "raw_prediction": "stopForeground(Service.STOP_FOREGROUND_REMOVE);\n        TraceUtils.cleanupOlderFiles(MIN_KEEP_COUNT, MIN_KEEP_Ar);\n    }\n\n    public static void stopTracingWithoutSaving(final Context context) {\n        stopTracingWithoutSaving",
      "es": 0.10869565217391308,
      "em": false,
      "passed": false
    },
    {
      "index": 818,
      "groundtruth": "false : TraceUtils.isTracingOn();",
      "prediction": "false",
      "raw_prediction": "false\n            : TraceUtils.isTracingOn();",
      "es": 0.1515151515151515,
      "em": false,
      "passed": false
    },
    {
      "index": 819,
      "groundtruth": "(TraceUtils.traceStart(tags, bufferSizeKb, appTracing,\n                longTrace, attachToBugreport, maxLongTraceSizeMb, maxLongTraceDurationMinutes)) {",
      "prediction": "(forceStop) {\n            //",
      "raw_prediction": "(forceStop) {\n            // If the trace was stopped by the user, stop the trace without saving it.\n            stopTracingWithoutSaving(context);\n        } else {\n            // Start the trace.\n            TraceUtils.traceStart(tag, bufferSize",
      "es": 0.13157894736842102,
      "em": false,
      "passed": false
    },
    {
      "index": 820,
      "groundtruth": "Process process = TraceUtils.exec(cmd);",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 821,
      "groundtruth": "(TraceUtils.getOutputFilename(), false, false);",
      "prediction": "();",
      "raw_prediction": "();",
      "es": 0.06382978723404253,
      "em": false,
      "passed": false
    },
    {
      "index": 822,
      "groundtruth": "= TraceUtils.execWithTimeout(cmd, TEMP_DIR, STARTUP_TIMEOUT_MS);",
      "prediction": "= TraceUtils.execWithTimeout(cmd, null, STARTUP_TIMEOUT_MS);",
      "raw_prediction": "= TraceUtils.execWithTimeout(cmd, null, STARTUP_TIMEOUT_MS);\n",
      "es": 0.875,
      "em": false,
      "passed": false
    },
    {
      "index": 823,
      "groundtruth": "ps = TraceUtils.exec(\"ps -AT\", null, false);",
      "prediction": "ps = TraceUtils.exec(\"ps -A\");",
      "raw_prediction": "ps = TraceUtils.exec(\"ps -A\");",
      "es": 0.6818181818181819,
      "em": false,
      "passed": false
    },
    {
      "index": 824,
      "groundtruth": "prefsTracingOn && !TraceUtils.isTracingOn()) {",
      "prediction": "prefsTracingOn) {",
      "raw_prediction": "prefsTracingOn) {",
      "es": 0.3695652173913043,
      "em": false,
      "passed": false
    },
    {
      "index": 825,
      "groundtruth": "TraceUtils.clearSavedTraces();",
      "prediction": "Receiver.clearSavedTraces(getContext());",
      "raw_prediction": " Receiver.clearSavedTraces(getContext());",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 826,
      "groundtruth": "process = TraceUtils.execWithTimeout(cmd, null, STOP_TIMEOUT_MS);",
      "prediction": "package com.android.traceur;",
      "raw_prediction": "\npackage com.android.traceur;\n\n",
      "es": 0.1384615384615384,
      "em": false,
      "passed": false
    },
    {
      "index": 827,
      "groundtruth": ").contains(ConfigManager.getFirstName(p.getProperty(\"nbt.display.Name\")))) {",
      "prediction": ").toList().contains(p.getProperty(\"nbt.display.Name\")",
      "raw_prediction": ").toList().contains(p.getProperty(\"nbt.display.Name\"))) {",
      "es": 0.5657894736842105,
      "em": false,
      "passed": false
    },
    {
      "index": 828,
      "groundtruth": "), accessor.getAddition(), recipe.getOutput().getItem(),\n\t\t\t\tnull, null\n\t\t).toJson();",
      "prediction": "),\n\t\taccessor.getAddition(),\n\t\taccessor.getResult()\n\t).toJson();",
      "raw_prediction": "),\n\t\taccessor.getAddition(),\n\t\taccessor.getResult()\n\t).toJson();",
      "es": 0.5176470588235293,
      "em": false,
      "passed": false
    },
    {
      "index": 829,
      "groundtruth": "innerMsg.free();",
      "prediction": "innerMsg.getRequestHeader().rele",
      "raw_prediction": "innerMsg.getRequestHeader().release();\n            innerMsg.getRequestBody().release();",
      "es": 0.40625,
      "em": false,
      "passed": false
    },
    {
      "index": 830,
      "groundtruth": "System.out.println(\">>> \u8fde\u63a5\u5230\u4e1a\u52a1\u670d\u52a1\u5668\u6210\u529f! \"+conf.getAddress()+\" <<<\");",
      "prediction": "} catch (InterruptedException e) {",
      "raw_prediction": "} catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n    }\n\n    public void close(){\n        if(null == ch){\n            return;\n        }\n        try {\n            ch.closeFuture().sync();",
      "es": 0.109375,
      "em": false,
      "passed": false
    },
    {
      "index": 831,
      "groundtruth": "chIndex = loadBalancePolicy.getClientIndex(groupNameSet.size());",
      "prediction": "chIndex = loadBalancePolicy.getClientIndex(ncSet.size());",
      "raw_prediction": "chIndex = loadBalancePolicy.getClientIndex(ncSet.size());\n            ch = linkedHashSetGetByIndex(ncSet, chIndex);\n        }else {",
      "es": 0.859375,
      "em": false,
      "passed": false
    },
    {
      "index": 832,
      "groundtruth": "(\"\u7cfb\u7edf\u901a\u77e5 - \u6ce8\u610f: \u670d\u52a1\u5668\u8fde\u63a5\u5173\u95ed! >>> \" + conf.getAddress());",
      "prediction": "(\">>> \u8fde\u63a5\u4e22\u5931! <<<\");",
      "raw_prediction": "(\">>> \u8fde\u63a5\u4e22\u5931! <<<\");\n        this.close();\n    }\n\n    private void close(){\n        if(null == ch){\n            return;\n        }\n        ch.close();\n        ch = null;",
      "es": 0.20408163265306123,
      "em": false,
      "passed": false
    },
    {
      "index": 833,
      "groundtruth": "() < lintConf.getClientMaxConnCount()){",
      "prediction": "() < lintConf.getClie",
      "raw_prediction": "() < lintConf.getClientMaxConnCount()){",
      "es": 0.5384615384615384,
      "em": false,
      "passed": false
    },
    {
      "index": 834,
      "groundtruth": "if(null == conf.getAddress()){",
      "prediction": "if(ch != null){",
      "raw_prediction": "if(ch != null){",
      "es": 0.30000000000000004,
      "em": false,
      "passed": false
    },
    {
      "index": 835,
      "groundtruth": ".writeBytes(innerMsg.getRequestHeader().toBytesArray());",
      "prediction": ".writeBytes(innerMsg.getRequestHeader().toBytesArray());",
      "raw_prediction": ".writeBytes(innerMsg.getRequestHeader().toBytesArray());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 836,
      "groundtruth": "requestBody.setRes(res);",
      "prediction": "requestBody.setRes(res);",
      "raw_prediction": "\n            requestBody.setRes(res);\n        }catch (NoSuchMethodException e){\n            e.printStackTrace();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 837,
      "groundtruth": "NettyClient> closeCallback = conf.getCloseCallback();",
      "prediction": "NettyClient> closeCallback = conf.getCloseCallback();",
      "raw_prediction": "NettyClient> closeCallback = conf.getCloseCallback();\n        if(null != closeCallback){\n            closeCallback.accept(this);\n        }\n    }\n\n    /**\n     * \u5f53\u5931\u53bb\u8fde\u63a5\u65f6\n     *\n     * @param f \u9884",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 838,
      "groundtruth": "bs.connect(conf.getAddress()).sync();",
      "prediction": "bs.connect(conf.getAddress());",
      "raw_prediction": "bs.connect(conf.getAddress());",
      "es": 0.8108108108108107,
      "em": false,
      "passed": false
    },
    {
      "index": 839,
      "groundtruth": ".setLength(requestBody.toBytesArray().length);",
      "prediction": ".setLength(requestBody.toByteArray().length)",
      "raw_prediction": ".setLength(requestBody.toByteArray().length)",
      "es": 0.9565217391304348,
      "em": false,
      "passed": false
    },
    {
      "index": 840,
      "groundtruth": "Objects.hash(conf.getAddress().getHostName(), conf.getAddress().getPort());",
      "prediction": "Objects.hash(getConf());",
      "raw_prediction": "Objects.hash(getConf());",
      "es": 0.30666666666666664,
      "em": false,
      "passed": false
    },
    {
      "index": 841,
      "groundtruth": "loadBalancePolicy.getClientIndex(addressSet.size());",
      "prediction": "loadBalancePolicy.getClientIndex(addressSet.size());",
      "raw_prediction": "loadBalancePolicy.getClientIndex(addressSet.size());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 842,
      "groundtruth": "factory = ClientFactory.getInstance();",
      "prediction": "factory = NettyClient.getInstance();",
      "raw_prediction": "factory = NettyClient.getInstance();\n        conf.setServiceName(serviceName);",
      "es": 0.7105263157894737,
      "em": false,
      "passed": false
    },
    {
      "index": 843,
      "groundtruth": "groupIndex = loadBalancePolicy.getClientIndex(groupNameSet.size());",
      "prediction": "groupIndex = loadBalancePolicy.getClientIndex(groupNameSet.size());",
      "raw_prediction": "groupIndex = loadBalancePolicy.getClientIndex(groupNameSet.size());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 844,
      "groundtruth": "msg.getMessage());",
      "prediction": "msg.getMessage());",
      "raw_prediction": "msg.getMessage());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 845,
      "groundtruth": "requestHeader.getLength()){",
      "prediction": "requestHeader.g",
      "raw_prediction": "requestHeader.getLength()){",
      "es": 0.5555555555555556,
      "em": false,
      "passed": false
    },
    {
      "index": 846,
      "groundtruth": "NPCs.search().indexIs(index).first().flatMap(npc ->\n\t\t{",
      "prediction": "NPCs.search().withIndex(index)",
      "raw_prediction": "NPCs.search().withIndex(index).first().flatMap(npc ->\n\t\t{",
      "es": 0.4,
      "em": false,
      "passed": false
    },
    {
      "index": 847,
      "groundtruth": "return Bank.search().indexIs(index).first().flatMap(item ->\n\t\t{",
      "prediction": "return Bank.search().withIndex(index)",
      "raw_prediction": "\treturn Bank.search().withIndex(index).first().flatMap(item ->\n\t\t{",
      "es": 0.46031746031746035,
      "em": false,
      "passed": false
    },
    {
      "index": 848,
      "groundtruth": "Players.search().filter(predicate).first().flatMap(Player ->\n\t\t{",
      "prediction": "Players.search().filter(predicate)",
      "raw_prediction": "Players.search().filter(predicate).first().flatMap(Player ->\n\t{\n\t\tMousePackets.queueClickPacket();\n\t\tPlayerPackets.queuePlayerAction(Player, actions);\n\t\treturn Optional.of(true);\n\t\t}).orElse(false);\n\t}\n\n\tpublic",
      "es": 0.53125,
      "em": false,
      "passed": false
    },
    {
      "index": 849,
      "groundtruth": "BankInventory.search().indexIs(index).first().flatMap(item ->\n\t\t{",
      "prediction": "BankInventory.search().withIndex(index)",
      "raw_prediction": "BankInventory.search().withIndex(index).first().flatMap(item ->\n\t\t{",
      "es": 0.4769230769230769,
      "em": false,
      "passed": false
    },
    {
      "index": 850,
      "groundtruth": "NPCs.search().filter(predicate).first().flatMap(npc ->\n\t\t{",
      "prediction": "NPCs.search().filter(predicate)",
      "raw_prediction": "NPCs.search().filter(predicate).first().flatMap(npc ->\n\t\t{",
      "es": 0.5344827586206897,
      "em": false,
      "passed": false
    },
    {
      "index": 851,
      "groundtruth": "BufferMethods.du(buffer, (Integer) input);",
      "prediction": "BufferMethods.du(buffer, (Integer) input);",
      "raw_prediction": "BufferMethods.du(buffer, (Integer) input);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 852,
      "groundtruth": ".getRequestId(), lintConf.getRequestWaitTimeBySeconds());",
      "prediction": ".getRequestId(),lintConf.getTimeout());",
      "raw_prediction": ".getRequestId(),lintConf.getTimeout());\n            if(null == responseMsg){\n                // \u8bf7\u6c42\u8d85\u65f6\n                throw new RpcException(RpcMsg.EXCEPTION_TIMEOUT);\n            }",
      "es": 0.6491228070175439,
      "em": false,
      "passed": false
    },
    {
      "index": 853,
      "groundtruth": "()) && this.getBody().build()) {",
      "prediction": "())) {",
      "raw_prediction": "())) {",
      "es": 0.1875,
      "em": false,
      "passed": false
    },
    {
      "index": 854,
      "groundtruth": ".getBody().toJson().getBytes());",
      "prediction": ".getBody().build().getBytes());",
      "raw_prediction": ".getBody().build().getBytes());",
      "es": 0.8125,
      "em": false,
      "passed": false
    },
    {
      "index": 855,
      "groundtruth": "Widget bow = HypsApiPlugin.getItem(\"*bow*\");",
      "prediction": "MousePackets.queueClickPacket();",
      "raw_prediction": "MousePackets.queueClickPacket();\n\t\t\t\tWidgetPackets.queueWidgetActionPacket(1, 5046276, -1, 25); //quickPrayer magic\n\t\t}\n\t\telse if (",
      "es": 0.15909090909090906,
      "em": false,
      "passed": false
    },
    {
      "index": 856,
      "groundtruth": "<Widget> ring_of_wealth = Inventory.search().nameContains(\"Ring of wealth (\").first();",
      "prediction": "<Widget> ring_of_wealth = Inventory.search().withId(ItemID.RING_OF_WEALTH_1).first();",
      "raw_prediction": "<Widget> ring_of_wealth = Inventory.search().withId(ItemID.RING_OF_WEALTH_1).first();\n\t\t\tif (royal_seed_pod.isPresent() || ring_of_wealth.isPresent() || (rowEquipment != null &&",
      "es": 0.6511627906976745,
      "em": false,
      "passed": false
    },
    {
      "index": 857,
      "groundtruth": "> royal_seed_pod = Inventory.search().withId(ItemID.ROYAL_SEED_POD).first();",
      "prediction": "> royal_seed_pod = Inventory.search().withId(ItemID.ROYAL_seed_pod).first();",
      "raw_prediction": "> royal_seed_pod = Inventory.search().withId(ItemID.ROYAL_seed_pod).first();",
      "es": 0.9078947368421053,
      "em": false,
      "passed": false
    },
    {
      "index": 858,
      "groundtruth": "> widget = Inventory.search().withId(ItemID.ROYAL_SEED_POD).first();",
      "prediction": "> widget = Inventory.search().nameContains(\"Royal Seed Pod\").first();",
      "raw_prediction": "> widget = Inventory.search().nameContains(\"Royal Seed Pod\").first();",
      "es": 0.6231884057971014,
      "em": false,
      "passed": false
    },
    {
      "index": 859,
      "groundtruth": "Widget> row = Inventory.search().nameContains(\"Ring of wealth (\").first();",
      "prediction": "Widget> row = Inventory.search().withId(ItemID.RING_OF_WEALTH).first();",
      "raw_prediction": "Widget> row = Inventory.search().withId(ItemID.RING_OF_WEALTH).first();\n\t\t\t\tif (row.isPresent() && !teleported)\n \"\"\t\t\t{\n \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\" \"\"",
      "es": 0.5945945945945945,
      "em": false,
      "passed": false
    },
    {
      "index": 860,
      "groundtruth": "(embed.toArray().entrySet())));",
      "prediction": "(embed.toArray()).entrySet()));",
      "raw_prediction": "(embed.toArray()).entrySet()));\n\n        if (this.isForum()) {\n            result.put(\"thread_id\", this.getForumTitle());\n        }",
      "es": 0.935483870967742,
      "em": false,
      "passed": false
    },
    {
      "index": 861,
      "groundtruth": "return repository.findByEmailSent(false);",
      "prediction": "List<ContactForm> contactForms = new ArrayList<>();",
      "raw_prediction": "List<ContactForm> contactForms = new ArrayList<>();\n            for(ContactForm contactForm: repository.findAll()){\n                if(!contactForm.isEmailSent()){\n                 contactForms.add(contactForm);\n                }\n            }\n\n            return contactForms;",
      "es": 0.17647058823529416,
      "em": false,
      "passed": false
    },
    {
      "index": 862,
      "groundtruth": "= pluginLoader.getPluginFactories();",
      "prediction": "= PluginStore.instance.factories;",
      "raw_prediction": "= PluginStore.instance.factories;",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 863,
      "groundtruth": "handler.onCommand(command, arguments);",
      "prediction": "handler.handleCommand(command, arguments);",
      "raw_prediction": "handler.handleCommand(command, arguments);",
      "es": 0.8809523809523809,
      "em": false,
      "passed": false
    },
    {
      "index": 864,
      "groundtruth": "EasyContactFormsApplication.loadPlugins(pluginsPath);",
      "prediction": "//Removes all plugins",
      "raw_prediction": "    //Removes all plugins\n        for (String key : PluginStore.instance.plugins.keySet()) {\n            PluginStore.instance.plugins.get(key).onShutdown();\n        }\n        PluginStore.instance.plugins.clear();\n\n        //Reloads all plugins\n       ",
      "es": 0.2264150943396226,
      "em": false,
      "passed": false
    },
    {
      "index": 865,
      "groundtruth": "<ContactForm> forms = contactFormService.getContactForms(true);",
      "prediction": "<ContactForm> forms = contactFormService.getNotSendMails();",
      "raw_prediction": "<ContactForm> forms = contactFormService.getNotSendMails();",
      "es": 0.7777777777777778,
      "em": false,
      "passed": false
    },
    {
      "index": 866,
      "groundtruth": "lastRange.covers(previous)) {",
      "prediction": "previous.contain",
      "raw_prediction": "previous.contains(lastRange.end())) {",
      "es": 0.13793103448275867,
      "em": false,
      "passed": false
    },
    {
      "index": 867,
      "groundtruth": "lastRange.addRange(previous);",
      "prediction": "lastRange = previous;",
      "raw_prediction": "    lastRange = previous;",
      "es": 0.6206896551724138,
      "em": false,
      "passed": false
    },
    {
      "index": 868,
      "groundtruth": "tokens.add(range.recalculate());",
      "prediction": "tokens.add(range);",
      "raw_prediction": "tokens.add(range);\n        return range;\n    }\n    private TokenRange addToken(final String displayValue) {\n        TokenRange range = addToken(TokenRange.between(lastRange.end(), lastRange.end() + displayValue.length()));\n        lastRange",
      "es": 0.5625,
      "em": false,
      "passed": false
    },
    {
      "index": 869,
      "groundtruth": "StringSearcher.search(search, this);",
      "prediction": "StringSearcher searcher = new StringSearcher(search);",
      "raw_prediction": "    StringSearcher searcher = new StringSearcher(search);\n        while(searcher.hasNext()) {\n            searcher.next();\n            addToken(TokenRange.between(searcher.start(), searcher.end()));\n        }",
      "es": 0.5094339622641509,
      "em": false,
      "passed": false
    },
    {
      "index": 870,
      "groundtruth": "cliRunner.start();",
      "prediction": "LOG.info(\"Trying initializing connec",
      "raw_prediction": "    LOG.info(\"Trying initializing connection with engine from CLI...\");",
      "es": 0.11111111111111116,
      "em": false,
      "passed": false
    },
    {
      "index": 871,
      "groundtruth": "connectParams = cliRunner.getConnectionParams();",
      "prediction": "ConnectParams connectParams = cliRunner.connect();",
      "raw_prediction": "ConnectParams connectParams = cliRunner.connect();",
      "es": 0.45999999999999996,
      "em": false,
      "passed": false
    },
    {
      "index": 872,
      "groundtruth": "(BufferedInputStream in = new BufferedInputStream(fetcher.fetch(checksumMapURL))) {",
      "prediction": "{",
      "raw_prediction": "{\n            try (InputStream in = fetcher.fetch(checksumMapURL)) {",
      "es": 0.012048192771084376,
      "em": false,
      "passed": false
    },
    {
      "index": 873,
      "groundtruth": "basicParameter.getApiUrl() == null) {",
      "prediction": "basicParameter.getUr",
      "raw_prediction": "basicParameter.getUrl() == null || basicParameter.getUrl().equals(\"\")) {",
      "es": 0.5405405405405406,
      "em": false,
      "passed": false
    },
    {
      "index": 874,
      "groundtruth": "cliRunner.shutdown();",
      "prediction": "LOG.error(\"Failed to provision connection",
      "raw_prediction": "LOG.error(\"Failed to provision connection with engine\", ioe);",
      "es": 0.12195121951219512,
      "em": false,
      "passed": false
    },
    {
      "index": 875,
      "groundtruth": "new BufferedInputStream(new DigestInputStream(fetcher.fetch(cliArchiveURL), sha256))) {",
      "prediction": "fetcher.fetch(cliArchiveURL)) {",
      "raw_prediction": "fetcher.fetch(cliArchiveURL)) {\n            try (DigestInputStream digestIn = new DigestInputStream(in, sha256)) {",
      "es": 0.3563218390804598,
      "em": false,
      "passed": false
    },
    {
      "index": 876,
      "groundtruth": "parameter.setInit_images(new String[]{",
      "prediction": "import parameter.setI",
      "raw_prediction": "\nimport parameter.setImage(",
      "es": 0.1842105263157895,
      "em": false,
      "passed": false
    },
    {
      "index": 877,
      "groundtruth": "parameter.setDenoisingStrength(new BigDecimal(\"0.55\"));",
      "prediction": "parameter.setBatchCount(1);",
      "raw_prediction": "\tparameter.setBatchCount(1);\nimport\t//\u91cd\u7ed8\u5e45\u5ea6\nimportimport//\u91cd\u7ed8\u5e45\u5ea6\nimportimport//\u91cd\u7ed8\u5e45\u5ea6\nimportimport//\u91cd\u7ed8\u5e45\u5ea6\nimportimport//\u91cd\u7ed8\u5e45\u5ea6\nimportimport//\u91cd\u7ed8",
      "es": 0.32727272727272727,
      "em": false,
      "passed": false
    },
    {
      "index": 878,
      "groundtruth": "(serviceConnection.isEmpty()) tokens.add(token);",
      "prediction": "serviceConnection.connecti",
      "raw_prediction": "serviceConnection.connections.isEmpty()) {\n            tokens.add(token);\n            }\n        }\n        for (String token : tokens) {\n            map.remove(token);\n            ComponentName name = ComponentName.unflattenFromString(token);\n            DhizukuUserServiceArgs args",
      "es": 0.4375,
      "em": false,
      "passed": false
    },
    {
      "index": 879,
      "groundtruth": "args.build());",
      "prediction": "args.build());",
      "raw_prediction": "args.build());\n    }\n\n    static void bind(@NonNull IDhizuku dhizuku, @NonNull DhizukuUserServiceArgs args) throws RemoteException {\n        dhizuku.bindUserService(iDhizukuUserServiceConnection, args.build());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 880,
      "groundtruth": "== null) dhizuku.bindUserService(iDhizukuUserServiceConnection, args.build());",
      "prediction": "== null) dhizuku.bindUserService(iDhizukuUserServiceConnection, args.build());",
      "raw_prediction": "== null) dhizuku.bindUserService(iDhizukuUserServiceConnection, args.build());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 881,
      "groundtruth": ".update(SharedDataModel.getReservation());",
      "prediction": ".updateReservation(SharedDataModel.getReservation());",
      "raw_prediction": ".updateReservation(SharedDataModel.getReservation());\n        ReservationDAO.updateReservation(SharedDataModel.getReservation());",
      "es": 0.7924528301886793,
      "em": false,
      "passed": false
    },
    {
      "index": 882,
      "groundtruth": "SharedDataModel.getReservation().state = \"paid\";",
      "prediction": "ReservationDAO.update(SharedDataModel.getReservation());",
      "raw_prediction": "    ReservationDAO.update(SharedDataModel.getReservation());\n        Stage currentStage = (Stage) btnCancel.getScene().getWindow();\n        currentStage.close();\n    }\n    @javafx.fxml.FXML\n    public void handlebtnPay(ActionEvent action",
      "es": 0.3392857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 883,
      "groundtruth": "customer = CustomerDAO.getCustomerbyID(kundenID);",
      "prediction": "customer = CustomerDAO.getCustomerbyID(kundenid);",
      "raw_prediction": "customer = CustomerDAO.getCustomerbyID(kundenid);",
      "es": 0.9591836734693877,
      "em": false,
      "passed": false
    },
    {
      "index": 884,
      "groundtruth": "(), connectParams.getSessionToken(), Optional.of(cliRunner));",
      "prediction": "(), connectParam.getToken(), Optional.of(cliRunner));",
      "raw_prediction": "(), connectParam.getToken(), Optional.of(cliRunner));",
      "es": 0.8688524590163934,
      "em": false,
      "passed": false
    },
    {
      "index": 885,
      "groundtruth": "Schema.initialize(in);",
      "prediction": "new Schema(in);",
      "raw_prediction": "new Schema(in);",
      "es": 0.31818181818181823,
      "em": false,
      "passed": false
    },
    {
      "index": 886,
      "groundtruth": "().info(String.format(\"Generating scala %s\", type.getName()));",
      "prediction": "().info(String.format(\"Generating scalar %s\", type.getName()));",
      "raw_prediction": "().info(String.format(\"Generating scalar %s\", type.getName()));",
      "es": 0.9841269841269842,
      "em": false,
      "passed": false
    },
    {
      "index": 887,
      "groundtruth": "= \"```\" + (isForWebhook ? topList.getTopListAsString(true) : topList.getTopListAsString(false)) + \"```\";",
      "prediction": "= PlaceholderAPI.setPlaceholders(null, \"{toplist}\")",
      "raw_prediction": "= PlaceholderAPI.setPlaceholders(null, \"{toplist}\")",
      "es": 0.1826923076923077,
      "em": false,
      "passed": false
    },
    {
      "index": 888,
      "groundtruth": "maxNameLength + 3) + \"s %d%s\\n\", i++, name, intValue, leaderboardConfig.getMetric());",
      "prediction": "maxNameLength + 3) + \"s %d%s\\n\", i++, name, intValue, leaderboardConfig.getMetric());",
      "raw_prediction": "maxNameLength + 3) + \"s %d%s\\n\", i++, name, intValue, leaderboardConfig.getMetric());\n                } else {\n                double roundedScore = roundScore(score);\n\npublic String form(String formattedEntry) {\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 889,
      "groundtruth": "(isForWebhook ? topList.getTopListAsString(true) : topList.getTopListAsString(false)) + \"```\";",
      "prediction": "topList.getTopListAsMap().entrySet().stream()",
      "raw_prediction": "topList.getTopListAsMap().entrySet().stream()\n        .sorted(Map.Entry.comparingByValue(Comparator.reverseOrder()))\n        .limit(10)\n        .map(entry -> entry.getKey() + \" \" + entry.getValue",
      "es": 0.3191489361702128,
      "em": false,
      "passed": false
    },
    {
      "index": 890,
      "groundtruth": ") + \"s %d%s\\\\u000A\", i++, name, intValue, leaderboardConfig.getMetric());",
      "prediction": ") + \"s %d%s\\\\u000A\", i++, name, intValue, leaderboardConfig.getMetric());",
      "raw_prediction": ") + \"s %d%s\\\\u000A\", i++, name, intValue, leaderboardConfig.getMetric());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 891,
      "groundtruth": "if (leaderboard.getConfig().getFloatingpoints() > 0){",
      "prediction": "if (numberOfFloatingPoints > 0)",
      "raw_prediction": "if (numberOfFloatingPoints > 0) {\n                BigDecimal bd = BigDecimal.valueOf(entry.getValue());\n                bd = bd.setScale(numberOfFloatingPoints, RoundingMode.HALF_UP);",
      "es": 0.4716981132075472,
      "em": false,
      "passed": false
    },
    {
      "index": 892,
      "groundtruth": ", Double> playerScores = topList.getTopListAsMap();",
      "prediction": ", Double> playerScores = topList.getPlayerScores();",
      "raw_prediction": ", Double> playerScores = topList.getPlayerScores();\n        if (playerScores.isEmpty()) {\n            description = description.replace(\"{top-1-name}\", \"```\");\n            description = description.replace(\"{top-1-score}\", \"```\");\n       ",
      "es": 0.7647058823529411,
      "em": false,
      "passed": false
    },
    {
      "index": 893,
      "groundtruth": "this.leaderboardversion = mainConfig.getPluginVersion();",
      "prediction": "this.leaderboardversion = mainConfig.getLeaderboardversion();",
      "raw_prediction": "    this.leaderboardversion = mainConfig.getLeaderboardversion();\n    }",
      "es": 0.8032786885245902,
      "em": false,
      "passed": false
    },
    {
      "index": 894,
      "groundtruth": "= customConfig.get();",
      "prediction": "= customConfig.get();",
      "raw_prediction": "= customConfig.get();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 895,
      "groundtruth": "customConfig.setup();",
      "prediction": "save();",
      "raw_prediction": "    save();\n    }\n\n    //save methode\n    public void save() {\n        config.set(\"placeholder\", placeholder);\n        config.set(\"top\", top)\n        config.set(\"delay\", delay);\n        config.set(\"refresh-database",
      "es": 0.23809523809523814,
      "em": false,
      "passed": false
    },
    {
      "index": 896,
      "groundtruth": "if (cache.isDiffernt()){",
      "prediction": "if (cache.isCache())",
      "raw_prediction": "if (cache.isCache()){",
      "es": 0.6666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 897,
      "groundtruth": "(descriptionGenerator.getDescription(false));",
      "prediction": "(descriptionGenerator.getDescription());",
      "raw_prediction": "(descriptionGenerator.getDescription());",
      "es": 0.8888888888888888,
      "em": false,
      "passed": false
    },
    {
      "index": 898,
      "groundtruth": "customConfig.reload();",
      "prediction": "}",
      "raw_prediction": "}",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 899,
      "groundtruth": "discordsrvEmbed.setEmbedImage(image);",
      "prediction": "discordssrvEmbed.setEmbedImage(image);",
      "raw_prediction": "    discordssrvEmbed.setEmbedImage(image);",
      "es": 0.9736842105263158,
      "em": false,
      "passed": false
    },
    {
      "index": 900,
      "groundtruth": "cache.setCache();",
      "prediction": "setLastSent();",
      "raw_prediction": " setLastSent();\n            deleteDataIfNeeded();\n            }",
      "es": 0.2941176470588235,
      "em": false,
      "passed": false
    },
    {
      "index": 901,
      "groundtruth": "content = jsonData.getDataAttributes().get(\"content\");",
      "prediction": "content = jsonData.getDataAttributes().get(\"content\");",
      "raw_prediction": "content = jsonData.getDataAttributes().get(\"content\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 902,
      "groundtruth": "companyProductName = jsonData.getDataAttributes().get(\"companyProductName\");",
      "prediction": "companyProductName = jsonData.getDataAttributes().get(\"companyProductName\");",
      "raw_prediction": "companyProductName = jsonData.getDataAttributes().get(\"companyProductName\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 903,
      "groundtruth": "info = jsonData.getDataAttributes().get(\"info\");",
      "prediction": "info = jsonData.getDataAttributes().get(\"info\");",
      "raw_prediction": "info = jsonData.getDataAttributes().get(\"info\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 904,
      "groundtruth": "sentence = jsonData.getDataAttributes().get(\"sentence\");",
      "prediction": "sentence = jsonData.getDataAttributes().get(\"sentence\");",
      "raw_prediction": "sentence = jsonData.getDataAttributes().get(\"sentence\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 905,
      "groundtruth": "adminPublish.close();",
      "prediction": "adminPublish.close();",
      "raw_prediction": "    adminPublish.close();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 906,
      "groundtruth": "jsonData.getTemplateId()) {",
      "prediction": "jsonData.getDat",
      "raw_prediction": "jsonData.getDataAttributes().get(\"type\")) {",
      "es": 0.5185185185185186,
      "em": false,
      "passed": false
    },
    {
      "index": 907,
      "groundtruth": "String topic = jsonData.getDataAttributes().get(\"topic\");",
      "prediction": "String topic = jsonData.getDataAttributes().get(\"topic\");",
      "raw_prediction": "String topic = jsonData.getDataAttributes().get(\"topic\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 908,
      "groundtruth": "customerAvatar = jsonData.getDataAttributes().get(\"customerAvatar\");",
      "prediction": "customerAvatar = jsonData.getDataAttributes().get(\"customerAvatar\");",
      "raw_prediction": "customerAvatar = jsonData.getDataAttributes().get(\"customerAvatar\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 909,
      "groundtruth": ".addHeader(\"Authorization\", \"Bearer\" + \" \" + config.getOpenAIAPIKey());",
      "prediction": ".addHeader(\"Authorization\", \"Bearer \" + key);",
      "raw_prediction": ".addHeader(\"Authorization\", \"Bearer \" + key);",
      "es": 0.619718309859155,
      "em": false,
      "passed": false
    },
    {
      "index": 910,
      "groundtruth": "customerProblem = jsonData.getDataAttributes().get(\"customerProblem\");",
      "prediction": "customerProblem = jsonData.getDataAttributes().get(\"customerProblem\");",
      "raw_prediction": "customerProblem = jsonData.getDataAttributes().get(\"customerProblem\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 911,
      "groundtruth": "audience = jsonData.getDataAttributes().get(\"audience\");",
      "prediction": "audience = jsonData.getDataAttributes().get(\"audience\");",
      "raw_prediction": "audience = jsonData.getDataAttributes().get(\"audience\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 912,
      "groundtruth": "String tone = jsonData.getDataAttributes().get(\"tone\");",
      "prediction": "String tone = jsonData.getDataAttributes().get(\"tone\");",
      "raw_prediction": "String tone = jsonData.getDataAttributes().get(\"tone\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 913,
      "groundtruth": "String product = jsonData.getDataAttributes().get(\"product\");",
      "prediction": "String product = jsonData.getDataAttributes().get(\"product\");",
      "raw_prediction": "String product = jsonData.getDataAttributes().get(\"product\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 914,
      "groundtruth": "client.getResourceRefs(path);",
      "prediction": "CQAssert.getLinkedResources(client, path);",
      "raw_prediction": "CQAssert.getLinkedResources(client, path);",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 915,
      "groundtruth": "String gradeLevel = jsonData.getDataAttributes().get(\"gradeLevel\");",
      "prediction": "String gradeLevel = jsonData.getDataAttributes().get(\"gradeLevel\");",
      "raw_prediction": "String gradeLevel = jsonData.getDataAttributes().get(\"gradeLevel\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 916,
      "groundtruth": "SqlUtils.setScheduleLastSent(leaderboardname, currenttimestamp);",
      "prediction": "SqlUtils.setScheduleLastSent(leaderboardname, currenttimestamp);",
      "raw_prediction": "SqlUtils.setScheduleLastSent(leaderboardname, currenttimestamp);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 917,
      "groundtruth": "boolean isrefreshonsent = leaderboard.getConfig().isRefreshOnSent();",
      "prediction": "boolean isrefreshonsent = leaderboard.getConfig().isRefreshOnSent();",
      "raw_prediction": "   boolean isrefreshonsent = leaderboard.getConfig().isRefreshOnSent();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 918,
      "groundtruth": "SqlUtils.isScheduleAlredySent(leaderboardname);",
      "prediction": "SqlUtils.isScheduleAlreadySent(leaderboardname);",
      "raw_prediction": "SqlUtils.isScheduleAlreadySent(leaderboardname);",
      "es": 0.9791666666666666,
      "em": false,
      "passed": false
    },
    {
      "index": 919,
      "groundtruth": "SqlUtils.deleteAllValues(tablename, ColumnName);",
      "prediction": "SqlUtils.deleteData(ColumnName, tablename);",
      "raw_prediction": "SqlUtils.deleteData(ColumnName, tablename);\n        }else {\n            SqlUtils.deleteData(ColumnName, leaderboard.getConfig().getPlaceholder(), leaderboard.getConfig().getPlaceholder());",
      "es": 0.5833333333333333,
      "em": false,
      "passed": false
    },
    {
      "index": 920,
      "groundtruth": "(TimeUtils.getTimestampDifference(currentTime, lastsent) >= SECSFORHOUR){",
      "prediction": "(TimeUtils.getTimestampDifference(currentTime, lastsent) >= SECSFORHOUR)",
      "raw_prediction": "(TimeUtils.getTimestampDifference(currentTime, lastsent) >= SECSFORHOUR){",
      "es": 0.9863013698630136,
      "em": false,
      "passed": false
    },
    {
      "index": 921,
      "groundtruth": "webhook.execute();",
      "prediction": "webhook.execute();",
      "raw_prediction": "webhook.execute();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 922,
      "groundtruth": "= mainConfig.getDembedTitle();",
      "prediction": "= mainConfig.getDembedTitle();",
      "raw_prediction": "= mainConfig.getDembedTitle();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 923,
      "groundtruth": "webhook.setAvatarUrl(webhookAvatarUrl);",
      "prediction": "webhook.setAvatarUrl(webhookAvatarUrl);",
      "raw_prediction": "    webhook.setAvatarUrl(webhookAvatarUrl);\n        }\n\n        if (webhookUserName != null && !webhookUserName.equals(\"\") && !webhookUserName.equals(\"-\")){\n            webhook.setUsername(webhookUserName);\n        }\n\n        DiscordWebhook",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 924,
      "groundtruth": "dwebhookAvatarUrl = mainConfig.getDwebhookAvatarUrl();",
      "prediction": "dwebhookAvatarUrl = mainConfig.getDwebhookAvatarUrl();",
      "raw_prediction": "dwebhookAvatarUrl = mainConfig.getDwebhookAvatarUrl();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 925,
      "groundtruth": "dembedImage = mainConfig.getDembedImage();",
      "prediction": "dembedImage = mainConfig.getDembedImage();",
      "raw_prediction": "dembedImage = mainConfig.getDembedImage();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 926,
      "groundtruth": "String description = descriptionGenerator.getDescription(true);",
      "prediction": ")",
      "raw_prediction": ")\n\n        String description = descriptionGenerator.getTopListAsString(false);",
      "es": 0.015873015873015928,
      "em": false,
      "passed": false
    },
    {
      "index": 927,
      "groundtruth": "String delay = leaderboardConfig.getDelay();",
      "prediction": "String webhookurl = leaderboardConfig.getWebhookurl();",
      "raw_prediction": "    String webhookurl = leaderboardConfig.getWebhookurl();\n        String webhookAvatarUrl = leaderboardConfig.getWebhookAvatarUrl();\n        String webhookUserName = leaderboardConfig.getWebhookUserName();\n        String embedTitle = leaderboardConfig.getEmbedTitle",
      "es": 0.6666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 928,
      "groundtruth": "String placeholder = leaderboardConfig.getPlaceholder();",
      "prediction": "return name;",
      "raw_prediction": "    return name;\n    }\n\n    public String getTopListAsString() {",
      "es": 0.1428571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 929,
      "groundtruth": "String dembedFooter = mainConfig.getDembedFooter();",
      "prediction": "String dembedFooter = mainConfig.getDembedFooter();",
      "raw_prediction": " String dembedFooter = mainConfig.getDembedFooter();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 930,
      "groundtruth": "embedTitle = leaderboardConfig.getEmbedTitle();",
      "prediction": "embedTitle = leaderboardConfig.getEmbedTitle();",
      "raw_prediction": "embedTitle = leaderboardConfig.getEmbedTitle();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 931,
      "groundtruth": "database.getConnection().prepareStatement(\n                        \"DELETE FROM \" + tableName + \" WHERE \" + columnName + \" IS NOT NULL\"\n                );",
      "prediction": "database.getConnection().prepareStatement(\n                \"DELETE FROM \" + tableName + \" WHERE \" + columnName + \" IS NOT NULL\"",
      "raw_prediction": "database.getConnection().prepareStatement(\n                \"DELETE FROM \" + tableName + \" WHERE \" + columnName + \" IS NOT NULL\"\n",
      "es": 0.8246753246753247,
      "em": false,
      "passed": false
    },
    {
      "index": 932,
      "groundtruth": "database.getConnection().prepareStatement(\n                        \"REPLACE INTO Schedule (Leaderboard, LastSent) VALUES (?, ?)\"\n                );",
      "prediction": "database.getConnection().prepareStatement(\"INSERT INTO Schedule (Leaderboard, LastSent) VALUES (?, ?) ON DUPLICATE KEY UPDATE LastSent = VALUES(LastSent);\");",
      "raw_prediction": "database.getConnection().prepareStatement(\"INSERT INTO Schedule (Leaderboard, LastSent) VALUES (?, ?) ON DUPLICATE KEY UPDATE LastSent = VALUES(LastSent);\");",
      "es": 0.49044585987261147,
      "em": false,
      "passed": false
    },
    {
      "index": 933,
      "groundtruth": "SqlUtils.addUserDataToDatabase(placeholderColumnName, uuid, username, value);",
      "prediction": "database.addToDatabase(uuid, placeholderColumnName, value);",
      "raw_prediction": " database.addToDatabase(uuid, placeholderColumnName, value);",
      "es": 0.5194805194805194,
      "em": false,
      "passed": false
    },
    {
      "index": 934,
      "groundtruth": "String embedColour = leaderboardConfig.getEmbedColour();",
      "prediction": "String embedColour = leaderboardConfig.getEmbedColour();",
      "raw_prediction": "    String embedColour = leaderboardConfig.getEmbedColour();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 935,
      "groundtruth": "String webhookAvatarUrl = leaderboardConfig.getWebhookAvatarUrl();",
      "prediction": "String webhookAvatarUrl = leaderboardConfig.getWebhookAvatarUrl();",
      "raw_prediction": "  String webhookAvatarUrl = leaderboardConfig.getWebhookAvatarUrl();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 936,
      "groundtruth": "UnsupportedOperationException(\"Unsupported storage type: \" + mainConfig.getStorageType());",
      "prediction": "UnsupportedOperationException(\"Unsupported database type: \" + mainConfig.getStorageType());",
      "raw_prediction": "UnsupportedOperationException(\"Unsupported database type: \" + mainConfig.getStorageType());",
      "es": 0.945054945054945,
      "em": false,
      "passed": false
    },
    {
      "index": 937,
      "groundtruth": "preparedStatement = database.getConnection().prepareStatement(\"SELECT COUNT(*) AS count FROM Schedule WHERE Leaderboard = ?\");",
      "prediction": "preparedStatement = database.getConnection().prepareStatement(\"SELECT count(*) FROM Schedule WHERE Leaderboard = ?\");",
      "raw_prediction": "preparedStatement = database.getConnection().prepareStatement(\"SELECT count(*) FROM Schedule WHERE Leaderboard = ?\");",
      "es": 0.8888888888888888,
      "em": false,
      "passed": false
    },
    {
      "index": 938,
      "groundtruth": "preparedStatement = database.getConnection().prepareStatement(\n                        \"UPDATE \" + tableName + \" SET \" + columnName + \" = NULL\"\n                );",
      "prediction": "preparedStatement = database.getConnection().prepareStatement(\n            \"DELETE FROM \" + tableName + \" WHERE \" + columnName + \" IS NOT NULL\"",
      "raw_prediction": "preparedStatement = database.getConnection().prepareStatement(\n            \"DELETE FROM \" + tableName + \" WHERE \" + columnName + \" IS NOT NULL\"\n",
      "es": 0.7160493827160495,
      "em": false,
      "passed": false
    },
    {
      "index": 939,
      "groundtruth": "database.getConnection().prepareStatement(\"SELECT \" + \"LastSent\" + \" FROM Schedule WHERE Leaderboard = ?\");",
      "prediction": "database.getConnection().prepareStatement(\"SELECT LastSent FROM Schedule WHERE Leaderboard = ?\");",
      "raw_prediction": "database.getConnection().prepareStatement(\"SELECT LastSent FROM Schedule WHERE Leaderboard = ?\");",
      "es": 0.9065420560747663,
      "em": false,
      "passed": false
    },
    {
      "index": 940,
      "groundtruth": ", leaderboard.getConfig().getPlaceholder());",
      "prediction": ", leaderboard.getConfig().getPlaceholder());",
      "raw_prediction": ", leaderboard.getConfig().getPlaceholder());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 941,
      "groundtruth": "database.getConnection().prepareStatement(\"MERGE INTO Schedule s USING (VALUES (?, ?)) data (Leaderboard, LastSent) ON s.Leaderboard = data.Leaderboard WHEN MATCHED THEN UPDATE SET s.LastSent = data.LastSent WHEN NOT MATCHED THEN INSERT (Leaderboard, LastSent) VALUES (data.Leaderboard, data.LastSent);",
      "prediction": "database.getConnection().prepareStatement(\"MERGE INTO Schedule s USING (VALUES (?, ?)) data (Leaderboard, LastSent) ON s.Leaderboard = data.Leaderboard WHEN MATCHED THEN UPDATE SET s.LastSent = data.LastSent",
      "raw_prediction": "database.getConnection().prepareStatement(\"MERGE INTO Schedule s USING (VALUES (?, ?)) data (Leaderboard, LastSent) ON s.Leaderboard = data.Leaderboard WHEN MATCHED THEN UPDATE SET s.LastSent = data.LastSent",
      "es": 0.685430463576159,
      "em": false,
      "passed": false
    },
    {
      "index": 942,
      "groundtruth": "String databaseName = mainConfig.getStorageType();",
      "prediction": "String databaseName = database.getDatabaseName();",
      "raw_prediction": "String databaseName = database.getDatabaseName();",
      "es": 0.6599999999999999,
      "em": false,
      "passed": false
    },
    {
      "index": 943,
      "groundtruth": "userData.addUserDataToDBAllPlayersThisPlaceholder();",
      "prediction": "userData.addUserDataToDBAllPlayersAllPlaceholders();",
      "raw_prediction": "userData.addUserDataToDBAllPlayersAllPlaceholders();",
      "es": 0.9038461538461539,
      "em": false,
      "passed": false
    },
    {
      "index": 944,
      "groundtruth": "outputEGLSurface = outputEglCore.createOffsetScreenSurface(renderWidth, renderHeight);",
      "prediction": "outputEGLSurface = outputEglCore.createWindowSurface(null);",
      "raw_prediction": "outputEGLSurface = outputEglCore.createWindowSurface(null);\n        outputEglCore.makeCurrent(outputEGLSurface);\n    }\n\n    @Override\n    public int onStartCommand(Intent intent, int flags, int startId) {\n",
      "es": 0.5813953488372092,
      "em": false,
      "passed": false
    },
    {
      "index": 945,
      "groundtruth": "quadRenderer.drawTexture(texId, renderWidth, renderHeight);",
      "prediction": "quadRenderer.draw(texId, renderWidth, renderHeight);",
      "raw_prediction": " quadRenderer.draw(texId, renderWidth, renderHeight);",
      "es": 0.8813559322033898,
      "em": false,
      "passed": false
    },
    {
      "index": 946,
      "groundtruth": "ServerCountryFlags.updateAPILanguage(null);",
      "prediction": "ServerCountryFlags.updateAPILanguage(\"en\");",
      "raw_prediction": "ServerCountryFlags.updateAPILanguage(\"en\");",
      "es": 0.9069767441860466,
      "em": false,
      "passed": false
    },
    {
      "index": 947,
      "groundtruth": ".setRequestsLeft(requestsLeft - APITimeoutManager.getRequestsSent());",
      "prediction": ".setRequestsLeft(requestsLeft);",
      "raw_prediction": ".setRequestsLeft(requestsLeft);\n\t\t\t\t\t\t\tAPITimeoutManager.setSecondsLeft(secondsLeft);",
      "es": 0.4492753623188406,
      "em": false,
      "passed": false
    },
    {
      "index": 948,
      "groundtruth": "APITimeoutManager.setSecondsLeftUntilReset(secondsLeft);",
      "prediction": "APITimeoutManager.setSecondsLeft(secondsLeft);",
      "raw_prediction": "\t\t\t\tAPITimeoutManager.setSecondsLeft(secondsLeft);\n\t\t\t\t\t}",
      "es": 0.8214285714285714,
      "em": false,
      "passed": false
    },
    {
      "index": 949,
      "groundtruth": "(APITimeoutManager.isOnCooldown()) {",
      "prediction": "(ip.isEmpty()) {",
      "raw_prediction": "(ip.isEmpty()) {\n\t\t\treturn getAPIResponse(\"\");\n\t\t}\n\n\t\tif (APITimeoutManager.getRequestsSent() >= APITimeoutManager.getRequestsLeft()) {",
      "es": 0.2777777777777778,
      "em": false,
      "passed": false
    },
    {
      "index": 950,
      "groundtruth": "APITimeoutManager.decrementRequestsSent();",
      "prediction": "if (requestsLeft == -1 || secondsLeft == -1)",
      "raw_prediction": "\tif (requestsLeft == -1 || secondsLeft == -1) {\n\t\t\t\t\t\tAPITimeoutManager.setRequestsLeft(0);\n\t\t\t\t\t\tAPITimeoutManager.setSecondsLeftUntilReset(0);\n\t\t\t\t\t}\n\t\t\t\t",
      "es": 0.11363636363636365,
      "em": false,
      "passed": false
    },
    {
      "index": 951,
      "groundtruth": "APITimeoutManager.incrementRequestsSent();",
      "prediction": "if (apiLanguage != null) apiUrlStr += \"&lang=\" + apiLanguage;",
      "raw_prediction": "if (apiLanguage != null) apiUrlStr += \"&lang=\" + apiLanguage;",
      "es": 0.1311475409836066,
      "em": false,
      "passed": false
    },
    {
      "index": 952,
      "groundtruth": "request.setReturnCode(500);",
      "prediction": "request.setReturnCode(500);",
      "raw_prediction": "\t\trequest.setReturnCode(500);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 953,
      "groundtruth": ">= server.getMaximumHeaderParameterCount())\n\t\t\t\t\treturn parameters;",
      "prediction": ">= server.getMaximumHeaderParameterSize())\n\t\t\t\t\tbreak;",
      "raw_prediction": ">= server.getMaximumHeaderParameterSize())\n\t\t\t\t\tbreak;",
      "es": 0.7014925373134329,
      "em": false,
      "passed": false
    },
    {
      "index": 954,
      "groundtruth": "request.getContentType());",
      "prediction": "\"application/octet-stream\");",
      "raw_prediction": "\"application/octet-stream\");\n\t\t\n\t\t//default content-length\n\t\tif(!headers.containsKey(\"Content-Length\"))\n\t\theaders.put(\"Content-Length\", Integer.toString(message.length))",
      "es": 0.2142857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 955,
      "groundtruth": "if(cookies.size() >= server.getMaximumCookieCount())\n\t\t\t\t\t\tbreak;",
      "prediction": "if(cookies.size() >= server.getMaximumCookieCount())\n\t\t\t\t\t\tbreak;",
      "raw_prediction": "if(cookies.size() >= server.getMaximumCookieCount())\n\t\t\t\t\t\tbreak;",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 956,
      "groundtruth": "size() >= server.getMaximumHeaderParameterSize())\n\t\t\t\t\t\tbreak;",
      "prediction": "size() >= server.getMaximumHeaderParameterSize())\n\t\t\t\t\t\tbreak;",
      "raw_prediction": "size() >= server.getMaximumHeaderParameterSize())\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\tvalue.append(c);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 957,
      "groundtruth": "if(value.length() < server.getMaximumHeaderParameterSize())\n\t\t\t\tvalue.append(c);",
      "prediction": "if(c == '\\r' || c == '\\n')\n\t\t\t\t\tcontinue;",
      "raw_prediction": "if(c == '\\r' || c == '\\n')\n\t\t\t\t\tcontinue;\n\t\t\t\telse\n\t\t\t\t\tvalue.append(c);",
      "es": 0.16249999999999998,
      "em": false,
      "passed": false
    },
    {
      "index": 958,
      "groundtruth": "buffer.writeBody(bytes);",
      "prediction": "System.out.pri",
      "raw_prediction": "System.out.println(\"SONG: \" + new String(bytes, StandardCharsets.UTF_8);",
      "es": 0.16666666666666663,
      "em": false,
      "passed": false
    },
    {
      "index": 959,
      "groundtruth": "buffer.writeHeader(bytes);",
      "prediction": "System.out.prin",
      "raw_prediction": "System.out.println(\"SONG: \" + new String(bytes, StandardCharsets.UTF_8);\n\t\t\t\t\t\tbuffer.writeHeader(bytes);",
      "es": 0.15384615384615385,
      "em": false,
      "passed": false
    },
    {
      "index": 960,
      "groundtruth": "= decoder.decodeParameters(new String(buffer.bodyBuffer.toByteArray(), StandardCharsets.UTF_8));",
      "prediction": "= decoder.decodeParameters(buffer.bodyBuffer.toString(StandardCharsets.UTF_8));",
      "raw_prediction": "= decoder.decodeParameters(buffer.bodyBuffer.toString(StandardCharsets.UTF_8));",
      "es": 0.78125,
      "em": false,
      "passed": false
    },
    {
      "index": 961,
      "groundtruth": "client.setOutputBufferCache(requestBuilder.getEncoder().generateResponse(buffer.request, requestListener.request(buffer.request)));",
      "prediction": "//if it's a get request, we will need to process the headers and then send the response",
      "raw_prediction": "//if it's a get request, we will need to process the headers and then send the response\n\t\t\t\t\t\t\t//TODO\n\t\t\t\t\t\t\t//if it's a get request, we will need to process the headers and then send",
      "es": 0.2290076335877863,
      "em": false,
      "passed": false
    },
    {
      "index": 962,
      "groundtruth": "setOutputBufferCache(requestBuilder.getEncoder().generateResponse(buffer.request,\n\t\t\t\t\t\t\t\t\trequestListener.request(buffer.request)));",
      "prediction": "getOutputBuffer().write(requestBuilder.getEncoder().generateResponse(buffer.request, requestListener.request(buffer.request)));",
      "raw_prediction": "getOutputBuffer().write(requestBuilder.getEncoder().generateResponse(buffer.request, requestListener.request(buffer.request)));",
      "es": 0.8646616541353384,
      "em": false,
      "passed": false
    },
    {
      "index": 963,
      "groundtruth": "cookies = decoder.decodeCookies(parameters.get(\"Cookie\"));",
      "prediction": "cookies = decoder.decodeCookies(parameters.get(\"Cookie\"));",
      "raw_prediction": "cookies = decoder.decodeCookies(parameters.get(\"Cookie\"));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 964,
      "groundtruth": "List<String> exps = RegexHelper.find(text, \"\\\\$\\\\{",
      "prediction": "List<String> exps = RegexHe",
      "raw_prediction": " List<String> exps = RegexHelper.getRegex(text, \"\\\\$\\\\{",
      "es": 0.54,
      "em": false,
      "passed": false
    },
    {
      "index": 965,
      "groundtruth": "webAgent.url(url).execute(map);",
      "prediction": "webAgent.execute(url);",
      "raw_prediction": "webAgent.execute(url);",
      "es": 0.6129032258064516,
      "em": false,
      "passed": false
    },
    {
      "index": 966,
      "groundtruth": "data = webAgent.execute(map);",
      "prediction": "data = webAgent.execute(map);",
      "raw_prediction": "data = webAgent.execute(map);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 967,
      "groundtruth": "!result.getStatusCode().equals(200)) {",
      "prediction": "result.getStatusCode()",
      "raw_prediction": "result.getStatusCode() >= 200 && result.getStatusCode() < 300) {\n            log.debug(\"http\u72b6\u6001\u7801\u6b63\u5e38\uff01\");\n        } else {",
      "es": 0.5789473684210527,
      "em": false,
      "passed": false
    },
    {
      "index": 968,
      "groundtruth": "Assert.notNull(timeStamp, \"\u65f6\u95f4\u6233\u4e0d\u80fd\u4e3a\u7a7a\uff01\");",
      "prediction": "Assert.isTrue(timeStamp != null, \"\u65f6\u95f4\u6233\u4e0d\u80fd\u4e3a\u7a7a\");",
      "raw_prediction": "Assert.isTrue(timeStamp != null, \"\u65f6\u95f4\u6233\u4e0d\u80fd\u4e3a\u7a7a\");",
      "es": 0.6590909090909092,
      "em": false,
      "passed": false
    },
    {
      "index": 969,
      "groundtruth": "text = text.replace(el, elMap.get(tag).execute(argsMap));",
      "prediction": "text = text.replace(el, elMap.get(tag).parser(argsMap, map));",
      "raw_prediction": "text = text.replace(el, elMap.get(tag).parser(argsMap, map));\n                } else {",
      "es": 0.8032786885245902,
      "em": false,
      "passed": false
    },
    {
      "index": 970,
      "groundtruth": "return parent.type();",
      "prediction": "return parent.type().toClass().getConstruc",
      "raw_prediction": "   return parent.type().toClass().getConstructor(source.getParameterTypes());",
      "es": 0.47619047619047616,
      "em": false,
      "passed": false
    },
    {
      "index": 971,
      "groundtruth": "UnreflectType.of(source.getGenericReturnType());",
      "prediction": "source.getReturnType();",
      "raw_prediction": "source.getReturnType();",
      "es": 0.47916666666666663,
      "em": false,
      "passed": false
    },
    {
      "index": 972,
      "groundtruth": "if (result.getStatusCode() == 400) {",
      "prediction": "if (result.getStatusCode() == 400)",
      "raw_prediction": "if (result.getStatusCode() == 400) {",
      "es": 0.9444444444444444,
      "em": false,
      "passed": false
    },
    {
      "index": 973,
      "groundtruth": "(T) accessor.invoke(null, args);",
      "prediction": "accessor.invoke(delegate, args);",
      "raw_prediction": "accessor.invoke(delegate, args);",
      "es": 0.65625,
      "em": false,
      "passed": false
    },
    {
      "index": 974,
      "groundtruth": "UnreflectType.of(source);",
      "prediction": "new ReflectionTypeAccess<>(source);",
      "raw_prediction": "new ReflectionTypeAccess<>(source);",
      "es": 0.5428571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 975,
      "groundtruth": "return (T) JdkInternals.allocateInstance(toClass());",
      "prediction": "val instance = JdkInternals.newInstance(toClass());",
      "raw_prediction": "    val instance = JdkInternals.newInstance(toClass());\n        return (T) instance;",
      "es": 0.5961538461538461,
      "em": false,
      "passed": false
    },
    {
      "index": 976,
      "groundtruth": "return new BytecodeFieldAccess((ReflectionFieldAccess) delegate.bind(object), accessor);",
      "prediction": "return delegate.bind(object);",
      "raw_prediction": "    return delegate.bind(object);",
      "es": 0.3295454545454546,
      "em": false,
      "passed": false
    },
    {
      "index": 977,
      "groundtruth": "return UnreflectType.of(source.getGenericType());",
      "prediction": "return UnreflectType.of(source.getType());",
      "raw_prediction": "    return UnreflectType.of(source.getType());",
      "es": 0.8571428571428572,
      "em": false,
      "passed": false
    },
    {
      "index": 978,
      "groundtruth": "webAgent.getConfig().getUrl()).set(pageIndexKey, String.valueOf(i)).getUrl();",
      "prediction": ").append(data.getUrl()).append(\"&\" + pageIndexKey + \"=\" + i).toString();",
      "raw_prediction": ").append(data.getUrl()).append(\"&\" + pageIndexKey + \"=\" + i).toString();\n            log.debug(\"\u5206\u9875url:{}\", url);",
      "es": 0.3246753246753247,
      "em": false,
      "passed": false
    },
    {
      "index": 979,
      "groundtruth": "().toClass().getSimpleName() + Parameters.toString(parameters().toList());",
      "prediction": "().name() + \".\" + source.getName() + Parameters.toString(source.getParameterTypes());",
      "raw_prediction": "().name() + \".\" + source.getName() + Parameters.toString(source.getParameterTypes());",
      "es": 0.49411764705882355,
      "em": false,
      "passed": false
    },
    {
      "index": 980,
      "groundtruth": "int totalRows = json.get(totalKey, Integer.class);",
      "prediction": "int totalRows = json.getInt(totalKey);",
      "raw_prediction": "    int totalRows = json.getInt(totalKey);",
      "es": 0.64,
      "em": false,
      "passed": false
    },
    {
      "index": 981,
      "groundtruth": "(result.getStatusCode() == 401) {",
      "prediction": "(result.getStatusCode() == 401)",
      "raw_prediction": "(result.getStatusCode() == 401) {",
      "es": 0.9393939393939394,
      "em": false,
      "passed": false
    },
    {
      "index": 982,
      "groundtruth": ".warn(\"\u672a\u652f\u6301\u7684\u72b6\u6001\u7801: {",
      "prediction": ".warn(\"\u672a\u77e5\u9519\u8bef\uff01http\u72b6\u6001\u7801\uff1a{",
      "raw_prediction": ".warn(\"\u672a\u77e5\u9519\u8bef\uff01http\u72b6\u6001\u7801\uff1a{",
      "es": 0.5238095238095238,
      "em": false,
      "passed": false
    },
    {
      "index": 983,
      "groundtruth": "Assert.isTrue(data.get(0) instanceof JSONArray, \"\u6570\u636e\u683c\u5f0f\u4e0d\u5339\u914d\uff01\");",
      "prediction": "Assert.notEmpty(columns, \"columns is empty\");",
      "raw_prediction": "Assert.notEmpty(columns, \"columns is empty\");",
      "es": 0.2666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 984,
      "groundtruth": "String type = result.getContentType();",
      "prediction": "String type = result.getContentType();",
      "raw_prediction": "String type = result.getContentType();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 985,
      "groundtruth": "return webAgent.execute(map);",
      "prediction": "return webAgent.execute(map);",
      "raw_prediction": "    return webAgent.execute(map);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 986,
      "groundtruth": "if (result.getStatusCode() >= 500) {",
      "prediction": "if (result.getStatusCode() == 500)",
      "raw_prediction": "if (result.getStatusCode() == 500) {",
      "es": 0.9166666666666666,
      "em": false,
      "passed": false
    },
    {
      "index": 987,
      "groundtruth": "JsonHelper json = data.getJson();",
      "prediction": "if (data == null)",
      "raw_prediction": "if (data == null) {\n            return list;\n        }\n        JsonHelper json = new JsonHelper(data.getContent());",
      "es": 0.18181818181818177,
      "em": false,
      "passed": false
    },
    {
      "index": 988,
      "groundtruth": "isTrue(headHelper.fileContent(), \"\u975e\u6587\u4ef6\u6d41\u8bf7\u6c42\uff0c\u65e0\u6cd5\u8f93\u51fa\u6587\u4ef6\uff01\");",
      "prediction": "isTrue(headHelper.isDownload(), \"\u6587\u4ef6\u4e0b\u8f7d\u5931\u8d25\uff1a{} \u8fd4\u56de\u7801\uff1a{}\", this.config.getUrl(), re",
      "raw_prediction": "isTrue(headHelper.isDownload(), \"\u6587\u4ef6\u4e0b\u8f7d\u5931\u8d25\uff1a{} \u8fd4\u56de\u7801\uff1a{}\", this.config.getUrl(), result.getStatusCode());",
      "es": 0.35526315789473684,
      "em": false,
      "passed": false
    },
    {
      "index": 989,
      "groundtruth": "setBody(transcoding(result.getBodyAsByes(), charset));",
      "prediction": "setCharset(charset);",
      "raw_prediction": "setCharset(charset);",
      "es": 0.33333333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 990,
      "groundtruth": "wa = this.webAgent.execute(data);",
      "prediction": "wa = this.webAgent.execute(data);",
      "raw_prediction": "wa = this.webAgent.execute(data);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 991,
      "groundtruth": "hct.getHue()) >= 90.0 && Math.round(hct.getHue()) <= 111.0;",
      "prediction": "hct.getHue()) > 130.0;",
      "raw_prediction": "hct.getHue()) > 130.0;",
      "es": 0.3389830508474576,
      "em": false,
      "passed": false
    },
    {
      "index": 992,
      "groundtruth": "this.a2 = TonalPalette.fromHueAndChroma(hue, chroma / 3.);",
      "prediction": "this.a2 = TonalPalette.fromHueAndChroma(hue, chroma / 2.);",
      "raw_prediction": "  this.a2 = TonalPalette.fromHueAndChroma(hue, chroma / 2.);",
      "es": 0.9827586206896551,
      "em": false,
      "passed": false
    },
    {
      "index": 993,
      "groundtruth": "ColorUtils.yFromLstar(tone);",
      "prediction": "ColorUtils.yFrom",
      "raw_prediction": "ColorUtils.yFromLstar(tone;",
      "es": 0.5714285714285714,
      "em": false,
      "passed": false
    },
    {
      "index": 994,
      "groundtruth": "ratioOfYs(ColorUtils.yFromLstar(t1), ColorUtils.yFromLstar(t2));",
      "prediction": "ratioOfYs(ColorUtils.yFromLstar(t1), ColorUtils.yFromLstar(t2);",
      "raw_prediction": "ratioOfYs(ColorUtils.yFromLstar(t1), ColorUtils.yFromLstar(t2);\n  }\n\n  /**\n   * Returns T in HCT, L* in L*a*b* >= tone parameter that ensures ratio with",
      "es": 0.984375,
      "em": false,
      "passed": false
    },
    {
      "index": 995,
      "groundtruth": "Math.round(hct.getHue()) >= 90.0 && Math.round(hct.getHue()) <= 111.0;",
      "prediction": "Math.round(hct.getHue()) == 120.0;",
      "raw_prediction": "Math.round(hct.getHue()) == 120.0;",
      "es": 0.4571428571428572,
      "em": false,
      "passed": false
    },
    {
      "index": 996,
      "groundtruth": ".from(hct.getHue(), hct.getChroma(), 70.0);",
      "prediction": ".from(hct.getHue(), hct.getChroma(), hct.getTone() + 10.0);",
      "raw_prediction": ".from(hct.getHue(), hct.getChroma(), hct.getTone() + 10.0);",
      "es": 0.711864406779661,
      "em": false,
      "passed": false
    },
    {
      "index": 997,
      "groundtruth": "round(hct.getChroma()) > 16.0;",
      "prediction": "round(hct.getChroma()) > 40.0;",
      "raw_prediction": "round(hct.getChroma()) > 40.0;",
      "es": 0.9333333333333333,
      "em": false,
      "passed": false
    },
    {
      "index": 998,
      "groundtruth": "hct.getChroma();",
      "prediction": "hct.getChroma();",
      "raw_prediction": "hct.getChroma();\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 999,
      "groundtruth": "a1 = TonalPalette.fromHueAndChroma(hue, chroma);",
      "prediction": "a1 = TonalPalette.fromHueAndChroma(hue, chroma / 2.);",
      "raw_prediction": "a1 = TonalPalette.fromHueAndChroma(hue, chroma / 2.);",
      "es": 0.9056603773584906,
      "em": false,
      "passed": false
    },
    {
      "index": 1000,
      "groundtruth": "hct.getTone()) < 65.0;",
      "prediction": "hct.getTone()) < 50.0;",
      "raw_prediction": "hct.getTone()) < 50.0;",
      "es": 0.9090909090909091,
      "em": false,
      "passed": false
    },
    {
      "index": 1001,
      "groundtruth": ".a3 = TonalPalette.fromHueAndChroma(hue + 60., chroma / 2.);",
      "prediction": ".a3 = TonalPalette.fromHueAndChroma(hue + 60., chroma / 3.);",
      "raw_prediction": ".a3 = TonalPalette.fromHueAndChroma(hue + 60., chroma / 3.);",
      "es": 0.9833333333333333,
      "em": false,
      "passed": false
    },
    {
      "index": 1002,
      "groundtruth": "ColorUtils.lstarFromY(lightY) + LUMINANCE_GAMUT_MAP_TOLERANCE;",
      "prediction": "ColorUtils.lstarFromY(lightY) + LUMINANCE_GAMUT_MAP_TOLERANCE;",
      "raw_prediction": "ColorUtils.lstarFromY(lightY) + LUMINANCE_GAMUT_MAP_TOLERANCE;",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1003,
      "groundtruth": "hue = hct.getHue();",
      "prediction": "hue = hct.getHue();",
      "raw_prediction": "hue = hct.getHue();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1004,
      "groundtruth": "= TonalPalette.fromHueAndChroma(hue, min(chroma / 12., 4.));",
      "prediction": "= TonalPalette.fromHueAndChroma(hue, min(chroma / 2., 16.));",
      "raw_prediction": "= TonalPalette.fromHueAndChroma(hue, min(chroma / 2., 16.));",
      "es": 0.95,
      "em": false,
      "passed": false
    },
    {
      "index": 1005,
      "groundtruth": "a1 = TonalPalette.fromHueAndChroma(hue, max(48., chroma));",
      "prediction": "a1 = TonalPalette.fromHueAndChroma(hue, 12.);",
      "raw_prediction": "a1 = TonalPalette.fromHueAndChroma(hue, 12.);",
      "es": 0.7413793103448276,
      "em": false,
      "passed": false
    },
    {
      "index": 1006,
      "groundtruth": "this.n2 = TonalPalette.fromHueAndChroma(hue, min(chroma / 6., 8.));",
      "prediction": "this.n2 = TonalPalette.fromHueAndChroma(hue, min(chroma / 6., 8.));",
      "raw_prediction": "this.n2 = TonalPalette.fromHueAndChroma(hue, min(chroma / 6., 8.));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1007,
      "groundtruth": "= TonalPalette.fromHueAndChroma(hue, 16.);",
      "prediction": "= TonalPalette.fromHueAndChroma(hue, 24.);",
      "raw_prediction": "= TonalPalette.fromHueAndChroma(hue, 24.);",
      "es": 0.9523809523809523,
      "em": false,
      "passed": false
    },
    {
      "index": 1008,
      "groundtruth": "ColorUtils.blueFromArgb(argb);",
      "prediction": "ColorUtils.blueFromArgb(argb);",
      "raw_prediction": "ColorUtils.blueFromArgb(argb);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1009,
      "groundtruth": "a3 = TonalPalette.fromHueAndChroma(hue + 60., 24.);",
      "prediction": "a3 = TonalPalette.fromHueAndChroma(hue + 60., 16.);",
      "raw_prediction": "a3 = TonalPalette.fromHueAndChroma(hue + 60., 16.);",
      "es": 0.9607843137254902,
      "em": false,
      "passed": false
    },
    {
      "index": 1010,
      "groundtruth": "MathUtils.clampInt(0, 255, (int) Math.round(delinearized * 255.0));",
      "prediction": "(int) (delinearized * 255.0 + 0.5);",
      "raw_prediction": "(int) (delinearized * 255.0 + 0.5);",
      "es": 0.35820895522388063,
      "em": false,
      "passed": false
    },
    {
      "index": 1011,
      "groundtruth": "return new TonalPalette(hct.getHue(), hct.getChroma(), hct);",
      "prediction": "return new TonalPalette(hct.getHue(), hct.getChroma(), hct);",
      "raw_prediction": "  return new TonalPalette(hct.getHue(), hct.getChroma(), hct);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1012,
      "groundtruth": ".n1 = TonalPalette.fromHueAndChroma(hue, 4.);",
      "prediction": ".n1 = TonalPalette.fromHueAndChroma(hue, 16.);",
      "raw_prediction": ".n1 = TonalPalette.fromHueAndChroma(hue, 16.);",
      "es": 0.9565217391304348,
      "em": false,
      "passed": false
    },
    {
      "index": 1013,
      "groundtruth": "return MathUtils.matrixMultiply(new double[] {",
      "prediction": "return new double[] {x, y, z};",
      "raw_prediction": "return new double[] {x, y, z};\n  }\n\n  /** Converts a color from ARgb to Lab. */\n  public static double[] labFromArgb(int argb) {\n    double[] xyz = xyzFromArgb(argb",
      "es": 0.26086956521739135,
      "em": false,
      "passed": false
    },
    {
      "index": 1014,
      "groundtruth": "differenceDegrees(hct.getHue(), chosenHct.getHue()) < differenceDegrees) {",
      "prediction": "degreesBetween(hct.getHue(), chosenHct.getHue())",
      "raw_prediction": "degreesBetween(hct.getHue(), chosenHct.getHue()) <= differenceDegrees) {",
      "es": 0.5405405405405406,
      "em": false,
      "passed": false
    },
    {
      "index": 1015,
      "groundtruth": ") Math.floor(hct.getHue());",
      "prediction": ") Math.round(hct.getHue());",
      "raw_prediction": ") Math.round(hct.getHue());",
      "es": 0.8148148148148149,
      "em": false,
      "passed": false
    },
    {
      "index": 1016,
      "groundtruth": "= Math.abs(smallestDeltaHct.getChroma() - chroma);",
      "prediction": "= Double.MAX_VALUE;",
      "raw_prediction": "= Double.MAX_VALUE;\n    Hct smallestDeltaHct = null;\n",
      "es": 0.14,
      "em": false,
      "passed": false
    },
    {
      "index": 1017,
      "groundtruth": "= MathUtils.sanitizeDegreesInt(i);",
      "prediction": "= MathUtils.sanitizeDegreesInt(i);",
      "raw_prediction": "= MathUtils.sanitizeDegreesInt(i);\n        if (neighborHue == hue) {\n          continue;\n        }",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1018,
      "groundtruth": "if (MathUtils.differenceDegrees(hct.getHue(), chosenHct.getHue()) < differenceDegrees) {",
      "prediction": "if (Math.abs(chosenHct.getHue() - hct.getHue()) < differenceDegrees)",
      "raw_prediction": "\n          if (Math.abs(chosenHct.getHue() - hct.getHue()) < differenceDegrees) {",
      "es": 0.6363636363636364,
      "em": false,
      "passed": false
    },
    {
      "index": 1019,
      "groundtruth": "filter && (hct.getChroma() < CUTOFF_CHROMA || proportion <= CUTOFF_EXCITED_PROPORTION)) {",
      "prediction": "proportion < CUTOFF_EXCITED_PROPORTion) {",
      "raw_prediction": "proportion < CUTOFF_EXCITED_PROPORTion) {",
      "es": 0.4269662921348315,
      "em": false,
      "passed": false
    },
    {
      "index": 1020,
      "groundtruth": "MathUtils.sanitizeDegreesInt((int) Math.round(hct.getHue()));",
      "prediction": "(int) Math.floor(hct.getHue());",
      "raw_prediction": "(int) Math.floor(hct.getHue());",
      "es": 0.42622950819672134,
      "em": false,
      "passed": false
    },
    {
      "index": 1021,
      "groundtruth": "smallestDeltaHct = Hct.from(hue, chroma, startTone);",
      "prediction": "smallestDeltaHct = Hct.from(hue, chroma, startTone);",
      "raw_prediction": "smallestDeltaHct = Hct.from(hue, chroma, startTone);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1022,
      "groundtruth": "= MathUtils.sanitizeDegreesInt((int) Math.round(hct.getHue()));",
      "prediction": "= (int) Math.floor(hct.getHue());",
      "raw_prediction": "= (int) Math.floor(hct.getHue());",
      "es": 0.4444444444444444,
      "em": false,
      "passed": false
    },
    {
      "index": 1023,
      "groundtruth": "= Hct.fromInt(entry.getKey());",
      "prediction": "= Hct.fromInt(entry.getKey());",
      "raw_prediction": "= Hct.fromInt(entry.getKey());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1024,
      "groundtruth": "= TonalPalette.fromHueAndChroma(25, 84.);",
      "prediction": "= TonalPalette.fromHueAndChroma(hue, 24.);",
      "raw_prediction": "= TonalPalette.fromHueAndChroma(hue, 24.);",
      "es": 0.9047619047619048,
      "em": false,
      "passed": false
    },
    {
      "index": 1025,
      "groundtruth": "hct.getChroma() < TARGET_CHROMA ? WEIGHT_CHROMA_BELOW : WEIGHT_CHROMA_ABOVE;",
      "prediction": "hct.getChroma() > TARGETChroma ? WEIGHT_CHroma_ABOVE : WEIGHT_chroma_below;",
      "raw_prediction": "  hct.getChroma() > TARGETChroma ? WEIGHT_CHroma_ABOVE : WEIGHT_chroma_below;",
      "es": 0.6447368421052632,
      "em": false,
      "passed": false
    },
    {
      "index": 1026,
      "groundtruth": "(), hct.getChroma(), hct);",
      "prediction": "(), hct.getChroma(), hct);",
      "raw_prediction": "(), hct.getChroma(), hct);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1027,
      "groundtruth": "ColorUtils.labFromArgb(color.toInt());",
      "prediction": "ColorUtils.hctToLab(input);",
      "raw_prediction": "ColorUtils.hctToLab(input);\n    if (lab[1] == 0. && lab[2] == 0.) {\n      return 0.;\n    }",
      "es": 0.4473684210526315,
      "em": false,
      "passed": false
    },
    {
      "index": 1028,
      "groundtruth": "(hue, input.getChroma(), input.getTone());",
      "prediction": "(input.getChroma(), input.getTone(), hue);",
      "raw_prediction": "(input.getChroma(), input.getTone(), hue);",
      "es": 0.7619047619047619,
      "em": false,
      "passed": false
    },
    {
      "index": 1029,
      "groundtruth": "int red = ColorUtils.redFromArgb(argb);",
      "prediction": "int red = ColorUtils.redFromArgb(argb);",
      "raw_prediction": "  int red = ColorUtils.redFromArgb(argb);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1030,
      "groundtruth": "hctAdd = Hct.from(hue, chroma, startTone + delta);",
      "prediction": "hctAdd = Hct.from(hue, chroma, startTone + delta);",
      "raw_prediction": "hctAdd = Hct.from(hue, chroma, startTone + delta);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1031,
      "groundtruth": "== Math.round(smallestDeltaHct.getChroma())) {",
      "prediction": "== chroma) && smallestDeltaHct.getChroma(",
      "raw_prediction": "== chroma) && smallestDeltaHct.getChroma() == chroma) {",
      "es": 0.6521739130434783,
      "em": false,
      "passed": false
    },
    {
      "index": 1032,
      "groundtruth": "input.getHue(), coldestHue, warmestHue);",
      "prediction": "input.getHue(), coldestHue, warmestHue);",
      "raw_prediction": "input.getHue(), coldestHue, warmestHue);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1033,
      "groundtruth": "coldestHue = getColdest().getHue();",
      "prediction": "coldestHue = getColdest().getHue();",
      "raw_prediction": "coldestHue = getColdest().getHue();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1034,
      "groundtruth": "round(input.getHue()));",
      "prediction": "round(startHue));",
      "raw_prediction": "round(startHue));\n    double smallestError = 1000.;",
      "es": 0.6086956521739131,
      "em": false,
      "passed": false
    },
    {
      "index": 1035,
      "groundtruth": "color = Hct.from(this.hue, this.chroma, tone).toInt();",
      "prediction": "color = Hct.from(this.hue, this.chroma, tone).toInt();",
      "raw_prediction": "  color = Hct.from(this.hue, this.chroma, tone).toInt();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1036,
      "groundtruth": ".getChroma(), ColorUtils.lstarFromY(viewedInVc[1]));",
      "prediction": ".getChroma(), ColorUtils.lstarFromXyz(viewedInVc));",
      "raw_prediction": ".getChroma(), ColorUtils.lstarFromXyz(viewedInVc));\n    // 4. Return HCT.",
      "es": 0.8846153846153846,
      "em": false,
      "passed": false
    },
    {
      "index": 1037,
      "groundtruth": "hue = MathUtils.sanitizeDegreesInt(startHue + i);",
      "prediction": "hue = MathUtils.sanitizeDegreesInt(startHue + hueAddend);",
      "raw_prediction": "hue = MathUtils.sanitizeDegreesInt(startHue + hueAddend);",
      "es": 0.8421052631578947,
      "em": false,
      "passed": false
    },
    {
      "index": 1038,
      "groundtruth": "Cam16.fromInt(toInt());",
      "prediction": "Cam16.fromInt(argb);",
      "raw_prediction": "Cam16.fromInt(argb);\n    ViewingConditions in = vc;",
      "es": 0.6956521739130435,
      "em": false,
      "passed": false
    },
    {
      "index": 1039,
      "groundtruth": "recastInVc.getHue(), recastInVc.getChroma(), ColorUtils.lstarFromY(viewedInVc[1]));",
      "prediction": "recastInVc.getHue(), recastInVc.getChroma()",
      "raw_prediction": "recastInVc.getHue(), recastInVc.getChroma(), ColorUtils.lstarFromXyzInViewingConditions(\n         viewedInVc[0], viewedInVc[1], viewedInVc",
      "es": 0.5180722891566265,
      "em": false,
      "passed": false
    },
    {
      "index": 1040,
      "groundtruth": "= MathUtils.sanitizeDegreesDouble(\n          startHue + directionOfRotation * hueAddend);",
      "prediction": "= startHue + hueAddend;",
      "raw_prediction": "= startHue + hueAddend;",
      "es": 0.2584269662921348,
      "em": false,
      "passed": false
    },
    {
      "index": 1041,
      "groundtruth": "fromCam = Cam16.fromInt(from);",
      "prediction": "fromCam = Cam16.fromInt(from);",
      "raw_prediction": "fromCam = Cam16.fromInt(from);\n    Cam16 toCam = Cam16.fromInt(to);\n    double fromHue = fromCam.getHue();\n    double toHue = toCam.getHue();\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1042,
      "groundtruth": "= Cam16.fromInt(ucs);",
      "prediction": "= Cam16.fromInt(ucs);",
      "raw_prediction": "= Cam16.fromInt(ucs);\n    Hct blended = Hct.from(ucsCam.getHue(), fromCam.getChroma(), fromCam.getTone());\n\n    return blended.toInt();\n  }\n\n  /**\n  * Blend",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1043,
      "groundtruth": ".toRadians(MathUtils.sanitizeDegreesDouble(hue - 50.)));",
      "prediction": ".toRadians(hue));",
      "raw_prediction": ".toRadians(hue));\n  }\n  }\n\n  /** HCTs for all colors with the same chroma/tone as the input. */\n  private List<Hct> getHctsByHue() {\n    if (precomputed",
      "es": 0.3035714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 1044,
      "groundtruth": "tone = ColorUtils.lstarFromArgb(argb);",
      "prediction": "tone = ColorUtils.lstarFromY(cam.xyz[1]);",
      "raw_prediction": "tone = ColorUtils.lstarFromY(cam.xyz[1]);",
      "es": 0.7073170731707317,
      "em": false,
      "passed": false
    },
    {
      "index": 1045,
      "groundtruth": "hue = MathUtils.sanitizeDegreesDouble(Math.toDegrees(Math.atan2(lab[2], lab[1])));",
      "prediction": "lab = ColorUtils.labFromArgb(color.toInt());",
      "raw_prediction": "lab = ColorUtils.labFromArgb(color.toInt());",
      "es": 0.24390243902439024,
      "em": false,
      "passed": false
    },
    {
      "index": 1046,
      "groundtruth": "fromCam.getChroma(), ColorUtils.lstarFromArgb(from));",
      "prediction": "fromCam.getHue(), fromCam.getChroma(), fromCam.getTone());",
      "raw_prediction": "fromCam.getHue(), fromCam.getChroma(), fromCam.getTone());",
      "es": 0.3620689655172413,
      "em": false,
      "passed": false
    },
    {
      "index": 1047,
      "groundtruth": "ucsCam.getHue(), fromCam.getChroma(), ColorUtils.lstarFromArgb(from));",
      "prediction": "from);",
      "raw_prediction": "from);\n    blended.setHue(ucsCam.getHue());",
      "es": 0.08571428571428574,
      "em": false,
      "passed": false
    },
    {
      "index": 1048,
      "groundtruth": "HctSolver.solveToInt(hue, chroma, tone);",
      "prediction": "HctSolver.solveToInt(hue, chroma, tone);",
      "raw_prediction": "HctSolver.solveToInt(hue, chroma, tone);\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1049,
      "groundtruth": "toCam.getAstar();",
      "prediction": "toCam.getAstar();",
      "raw_prediction": "toCam.getAstar();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1050,
      "groundtruth": "hue = cam.getHue();",
      "prediction": "hue = cam.getHue();",
      "raw_prediction": "hue = cam.getHue();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1051,
      "groundtruth": "fromCam.getBstar();",
      "prediction": "fromCam.getBstar();",
      "raw_prediction": "fromCam.getBstar();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1052,
      "groundtruth": "return Cam16.fromUcs(jstar, astar, bstar).toInt();",
      "prediction": "return Cam16.from(jstar, astar, bstar).toInt();",
      "raw_prediction": "return Cam16.from(jstar, astar, bstar).toInt();",
      "es": 0.94,
      "em": false,
      "passed": false
    },
    {
      "index": 1053,
      "groundtruth": "double fromJ = fromCam.getJstar();",
      "prediction": "double fromJ = fromCam.getJstar();",
      "raw_prediction": "double fromJ = fromCam.getJstar();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1054,
      "groundtruth": "toB = toCam.getBstar();",
      "prediction": "toB = toCam.getBstar();",
      "raw_prediction": "toB = toCam.getBstar();\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1055,
      "groundtruth": "Hct.fromInt(designColor);",
      "prediction": "Hct.fromInt(designColor);",
      "raw_prediction": "Hct.fromInt(designColor);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1056,
      "groundtruth": "differenceDegrees = MathUtils.differenceDegrees(fromHct.getHue(), toHct.getHue());",
      "prediction": "differenceDegrees = MathUtils.sanitizeDegreesDouble(toHct.getHue() - fromHct.getHue());",
      "raw_prediction": "differenceDegrees = MathUtils.sanitizeDegreesDouble(toHct.getHue() - fromHct.getHue());",
      "es": 0.735632183908046,
      "em": false,
      "passed": false
    },
    {
      "index": 1057,
      "groundtruth": "(), fromCam.getChroma(), ColorUtils.lstarFromArgb(from));",
      "prediction": "(), fromCam.getChroma(), fromCam.getTone());",
      "raw_prediction": "(), fromCam.getChroma(), fromCam.getTone());",
      "es": 0.5789473684210527,
      "em": false,
      "passed": false
    },
    {
      "index": 1058,
      "groundtruth": "* viewingConditions.getNbb();",
      "prediction": "* Math.sqrt(u * u + p2 * p p) / (p2 + 0.305);",
      "raw_prediction": "* Math.sqrt(u * u + p2 * p p) / (p2 + 0.305);",
      "es": 0.11111111111111116,
      "em": false,
      "passed": false
    },
    {
      "index": 1059,
      "groundtruth": "= MathUtils.differenceDegrees(fromHct.getHue(), toHct.getHue());",
      "prediction": "= MathUtils.sanitizeDegreesDouble(toHct.getHue() - fromHct.getHue());",
      "raw_prediction": "= MathUtils.sanitizeDegreesDouble(toHct.getHue() - fromHct.getHue());",
      "es": 0.6666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 1060,
      "groundtruth": "fromHct.getHue()\n                + rotationDegrees * MathUtils.rotationDirection(fromHct.getHue(), toHct.getHue()));",
      "prediction": "fromHct.getHue() + (toHct.getHue() < fromHct.getHue() ? rotationDegrees : -rotationDegrees));",
      "raw_prediction": "    fromHct.getHue() + (toHct.getHue() < fromHct.getHue() ? rotationDegrees : -rotationDegrees));",
      "es": 0.35344827586206895,
      "em": false,
      "passed": false
    },
    {
      "index": 1061,
      "groundtruth": "viewingConditions.getAw() + 4.0)\n            * viewingConditions.getFlRoot();",
      "prediction": "viewingConditions.getAw() + 4.0);",
      "raw_prediction": "viewingConditions.getAw() + 4.0);\n            * viewingConditions.getFlRoot();",
      "es": 0.4285714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 1062,
      "groundtruth": "ColorUtils.argbFromXyz(xyz[0], xyz[1], xyz[2]);",
      "prediction": "ColorUtils.intFromArgbBit",
      "raw_prediction": "ColorUtils.intFromArgbBits(ColorUtils.linearized(xyz[0] * 255.0, ColorUtils.linearized(xyz[1] * 255.0, ColorUtils.linearized(xyz[2",
      "es": 0.3191489361702128,
      "em": false,
      "passed": false
    },
    {
      "index": 1063,
      "groundtruth": "viewingConditions.getC() * viewingConditions.getZ());",
      "prediction": "viewingConditions.getNbb();",
      "raw_prediction": "\n    viewingConditions.getNbb();\n    double q =",
      "es": 0.4528301886792453,
      "em": false,
      "passed": false
    },
    {
      "index": 1064,
      "groundtruth": "outputHue, fromHct.getChroma(), fromHct.getTone()).toInt();",
      "prediction": "outputHue, fromHct.getChroma(), fromHct.getTone()).toInt();",
      "raw_prediction": "outputHue, fromHct.getChroma(), fromHct.getTone()).toInt();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1065,
      "groundtruth": "from(outputHue, fromHct.getChroma(), fromHct.getTone()).toInt();",
      "prediction": "from(outputHue, fromHct.getChroma(), fromHct.getTone()).toInt();",
      "raw_prediction": "from(outputHue, fromHct.getChroma(), fromHct.getTone()).toInt();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1066,
      "groundtruth": "viewingConditions.getRgbD()[0] * rT;",
      "prediction": "viewingConditions.getRgbD()[0] * rT;",
      "raw_prediction": "viewingConditions.getRgbD()[0] * rT;",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1067,
      "groundtruth": "Math.pow(viewingConditions.getFl() * Math.abs(bD) / 100.0, 0.42);",
      "prediction": "Math.pow(viewingConditions.getFl() * Math.abs(bD) / 100.0, 0.42);",
      "raw_prediction": "Math.pow(viewingConditions.getFl() * Math.abs(bD) / 100.0, 0.42);\n    // Chromatic adaptation",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1068,
      "groundtruth": "* viewingConditions.getZ());",
      "prediction": "* viewingConditions.getNc();",
      "raw_prediction": "* viewingConditions.getNc();\n    double q =\n        4.0\n    / viewingConditions.getC()\n    * Math.sqrt(j / 100.0)\n    * (viewingConditions.getAw() + 4",
      "es": 0.8928571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 1069,
      "groundtruth": "double blueL = ColorUtils.linearized(blue);",
      "prediction": "double blueL = ColorUtils.linearized(blueue);",
      "raw_prediction": " double blueL = ColorUtils.linearized(blueue);\n    // Transform RGB to XYZ",
      "es": 0.9555555555555556,
      "em": false,
      "passed": false
    },
    {
      "index": 1070,
      "groundtruth": "eHue * viewingConditions.getNc() * viewingConditions.getNcb();",
      "prediction": "p2 + 11.0 * p1 * Math.cos(hueueRadians) + 108.0 * p p * Math.sin(hueueRadians);",
      "raw_prediction": "p2 + 11.0 * p1 * Math.cos(hueueRadians) + 108.0 * p p * Math.sin(hueueRadians);",
      "es": 0.16455696202531644,
      "em": false,
      "passed": false
    },
    {
      "index": 1071,
      "groundtruth": "* viewingConditions.getFlRoot();",
      "prediction": "* viewingConditions.getFlRoot();",
      "raw_prediction": "* viewingConditions.getFlRoot();\n    double m = c * viewingConditions.getFlRoot();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1072,
      "groundtruth": "rAF = Math.pow(viewingConditions.getFl() * Math.abs(rD) / 100.0, 0.42);",
      "prediction": "rAF = Math.pow(viewingConditions.getFl() * Math.abs(rD) / 100.0, 0.42",
      "raw_prediction": "rAF = Math.pow(viewingConditions.getFl() * Math.abs(rD) / 100.0, 0.42",
      "es": 0.971830985915493,
      "em": false,
      "passed": false
    },
    {
      "index": 1073,
      "groundtruth": "* Math.sqrt((alpha * viewingConditions.getC()) / (viewingConditions.getAw() + 4.0));",
      "prediction": "* Math.sqrt((alpha * viewingConditions.getC()) / (viewingConditions.getAw() + 4.0);",
      "raw_prediction": "* Math.sqrt((alpha * viewingConditions.getC()) / (viewingConditions.getAw() + 4.0);",
      "es": 0.9880952380952381,
      "em": false,
      "passed": false
    },
    {
      "index": 1074,
      "groundtruth": "double redL = ColorUtils.linearized(red);",
      "prediction": "double redL = ColorUtils.linearized(red);",
      "raw_prediction": " double redL = ColorUtils.linearized(red);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1075,
      "groundtruth": "m = c * viewingConditions.getFlRoot();",
      "prediction": "m = c * viewingConditions.getFlRoot();",
      "raw_prediction": "m = c * viewingConditions.getFlRoot();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1076,
      "groundtruth": "viewingConditions.getAw(),\n                viewingConditions.getC() * viewingConditions.getZ());",
      "prediction": "Math.sqrt(viewingConditions.getNbb()\n    double q =\n        4.0\n     / viewingConditions.getC()\n     * Math.sqrt(j / 100.0)\n    //",
      "raw_prediction": "Math.sqrt(viewingConditions.getNbb()\n    double q =\n        4.0\n     / viewingConditions.getC()\n     * Math.sqrt(j / 100.0)\n    // CAM16 chroma, colorfulness",
      "es": 0.5153846153846153,
      "em": false,
      "passed": false
    },
    {
      "index": 1077,
      "groundtruth": "pow(0.29, viewingConditions.getN()), 0.73) * Math.pow(t, 0.9);",
      "prediction": "pow(0.29, viewingConditions.getN()), 0.73), 1.0 / 009;",
      "raw_prediction": "pow(0.29, viewingConditions.getN()), 0.73), 1.0 / 009;\n    double c = alpha * Math.sqrt(j / 100.0);\n    double m",
      "es": 0.7741935483870968,
      "em": false,
      "passed": false
    },
    {
      "index": 1078,
      "groundtruth": "alpha * viewingConditions.getC()) / (viewingConditions.getAw() + 4.0));",
      "prediction": "alpha * viewingConditions.getC()) / (viewingConditions.getAw() + 4.0);",
      "raw_prediction": "alpha * viewingConditions.getC()) / (viewingConditions.getAw() + 4.0);",
      "es": 0.9859154929577465,
      "em": false,
      "passed": false
    },
    {
      "index": 1079,
      "groundtruth": "viewingConditions.getFlRoot();",
      "prediction": "viewingConditions.getFlRoot();",
      "raw_prediction": "viewingConditions.getFlRoot();\n    double hueRadians = Math.toRadians(h);\n    double huePrime = (hue < 20.14) ? hue + 360 : hue;\n    double eHue =",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1080,
      "groundtruth": "Math.pow(getJ() / 100.0, 1.0 / viewingConditions.getC() / viewingConditions.getZ());",
      "prediction": "Math.sqrt(jstar / 100.0);",
      "raw_prediction": "Math.sqrt(jstar / 100.0);\n    double p2 = (ac / viewingConditions.getNbb());\n    double eHue = 0.25 * (Math.cos(hRad + 2.0",
      "es": 0.19047619047619047,
      "em": false,
      "passed": false
    },
    {
      "index": 1081,
      "groundtruth": ") / 100.0, 1.0 / viewingConditions.getC() / viewingConditions.getZ());",
      "prediction": ") / 100.0, 0.5);",
      "raw_prediction": ") / 100.0, 0.5);\n    double p2 = (ac / viewingConditions.getNbb());\n",
      "es": 0.2142857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 1082,
      "groundtruth": "(100.0 / viewingConditions.getFl()) * Math.pow(gCBase, 1.0 / 0.42);",
      "prediction": "(100.0 / viewingConditions.getFl())",
      "raw_prediction": "(100.0 / viewingConditions.getFl()) * Math.pow(gCBase, 1.0 / 0.42;\n",
      "es": 0.5223880597014925,
      "em": false,
      "passed": false
    },
    {
      "index": 1083,
      "groundtruth": "double c = m2 / viewingConditions.getFlRoot();",
      "prediction": "double c = Math.sqrt(astar * astar + bstar * bstar)",
      "raw_prediction": " double c = Math.sqrt(astar * astar + bstar * bstar)",
      "es": 0.27450980392156865,
      "em": false,
      "passed": false
    },
    {
      "index": 1084,
      "groundtruth": "ac / viewingConditions.getNbb());",
      "prediction": "40.0 * rA + 220.0 * gA + bA) / 20.0;",
      "raw_prediction": "40.0 * rA + 220.0 * gA + bA) / 20.0;\n    double p2 = (40.0 * rA + 220. *",
      "es": 0.08333333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 1085,
      "groundtruth": "return QuantizerWsmeans.quantize(pixels, wuClusters, maxColors);",
      "prediction": "QuantizerWsmeans wsmeans = new QuantizerWsmeans();",
      "raw_prediction": "QuantizerWsmeans wsmeans = new QuantizerWsmeans();\n    return wsmeans.quantize(pixels, maxColors, wuClusters);",
      "es": 0.375,
      "em": false,
      "passed": false
    },
    {
      "index": 1086,
      "groundtruth": "/ viewingConditions.getRgbD()[0];",
      "prediction": "/ viewingConditions.getRgbD()[0];",
      "raw_prediction": "/ viewingConditions.getRgbD()[0];",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1087,
      "groundtruth": "- Math.pow(0.29, viewingConditions.getN()), 0.73), 1.0 / 0.9);",
      "prediction": "* viewingConditions.getN(), 07);",
      "raw_prediction": "* viewingConditions.getN(), 07);\n    double m = Math.expm1(mstar * 00228) / 00228;\n    double c = m / viewingConditions.getFlRoot();",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 1088,
      "groundtruth": "lab = ColorUtils.labFromArgb(argb);",
      "prediction": "lab = ColorUtils.labFromArgb(argb);",
      "raw_prediction": "lab = ColorUtils.labFromArgb(argb);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1089,
      "groundtruth": "errorPalette = TonalPalette.fromHueAndChroma(25.0, 84.0);",
      "prediction": "errorPalette = new TonalPalette(sourceColorHct, 100, 100, 100, 100, 100, 100);",
      "raw_prediction": "errorPalette = new TonalPalette(sourceColorHct, 100, 100, 100, 100, 100, 100);",
      "es": 0.46153846153846156,
      "em": false,
      "passed": false
    },
    {
      "index": 1090,
      "groundtruth": "ColorUtils.whitePointD65(),\n        (200.0 / Math.PI * ColorUtils.yFromLstar(50.0) / 100.f),\n        lstar,\n        2.0,\n        false);",
      "prediction": "Cam16.D65,\n        11.72,\n        lstar,\n        2.0,\n        false);",
      "raw_prediction": "Cam16.D65,\n        11.72,\n        lstar,\n        2.0,\n        false);",
      "es": 0.4558823529411765,
      "em": false,
      "passed": false
    },
    {
      "index": 1091,
      "groundtruth": "MathUtils.sanitizeDegreesDouble(sourceHue + rotations[0]);",
      "prediction": "MathUtils.sanitizeDegreesDouble(sourceHue + rotations[0]);",
      "raw_prediction": "MathUtils.sanitizeDegreesDouble(sourceHue + rotations[0]);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1092,
      "groundtruth": "gC / viewingConditions.getRgbD()[1];",
      "prediction": "gC / viewingConditions.getRgbD()[1];",
      "raw_prediction": "gC / viewingConditions.getRgbD()[1];",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1093,
      "groundtruth": "ColorUtils.argbFromLab(lab[0], lab[1], lab[2]);",
      "prediction": "ColorUtils.argbFromLab(lab[0], lab[1], lab[2]);",
      "raw_prediction": "ColorUtils.argbFromLab(lab[0], lab[1], lab[2]);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1094,
      "groundtruth": "n = (ColorUtils.yFromLstar(backgroundLstar) / whitePoint[1]);",
      "prediction": "n = Math.pow(1.0 / (1.0 / 10.0 + (adaptingLuminance / 100.0)), 0.42);",
      "raw_prediction": "n = Math.pow(1.0 / (1.0 / 10.0 + (adaptingLuminance / 100.0)), 0.42);",
      "es": 0.2028985507246377,
      "em": false,
      "passed": false
    },
    {
      "index": 1095,
      "groundtruth": "100.0 / viewingConditions.getFl()) * Math.pow(rCBase, 1.0 / 0.42);",
      "prediction": "100.0 / viewingConditions.getFl()) * Math.pow(rCBase, 1.0 / 0.42;",
      "raw_prediction": "100.0 / viewingConditions.getFl()) * Math.pow(rCBase, 1.0 / 0.42;",
      "es": 0.9848484848484849,
      "em": false,
      "passed": false
    },
    {
      "index": 1096,
      "groundtruth": "d = MathUtils.clampDouble(0.0, 1.0, d);",
      "prediction": "double n = 1.0 / (1.0 + 0.015 * (adaptingLuminance - 50.0);",
      "raw_prediction": "double n = 1.0 / (1.0 + 0.015 * (adaptingLuminance - 50.0);",
      "es": 0.1694915254237288,
      "em": false,
      "passed": false
    },
    {
      "index": 1097,
      "groundtruth": "sourceColorArgb = sourceColorHct.toInt();",
      "prediction": "sourceColorArgb = sourceColorHct.toArgb();",
      "raw_prediction": "sourceColorArgb = sourceColorHct.toArgb();",
      "es": 0.9047619047619048,
      "em": false,
      "passed": false
    },
    {
      "index": 1098,
      "groundtruth": ": MathUtils.lerp(0.525, 0.59, ((f - 0.8) * 10.0));",
      "prediction": ": MathUtils.lerp(0.59, 0.69, (f - 0.9) * 10.0));",
      "raw_prediction": "    : MathUtils.lerp(0.59, 0.69, (f - 0.9) * 10.0));",
      "es": 0.9,
      "em": false,
      "passed": false
    },
    {
      "index": 1099,
      "groundtruth": "final double sourceHue = sourceColorHct.getHue();",
      "prediction": "final double sourceHue = sourceColorHct.hue;",
      "raw_prediction": "  final double sourceHue = sourceColorHct.hue;\n",
      "es": 0.8775510204081632,
      "em": false,
      "passed": false
    },
    {
      "index": 1100,
      "groundtruth": "MathUtils.lerp(this.low, this.normal, (contrastLevel - -1) / 1);",
      "prediction": "MathUtils.lerp(this.low, this.normal, (contrastLevel + 1) / 1);",
      "raw_prediction": "MathUtils.lerp(this.low, this.normal, (contrastLevel + 1) / 1);\n    } else if (contrastLevel < 0.0) {\n      return this.normal;",
      "es": 0.96875,
      "em": false,
      "passed": false
    },
    {
      "index": 1101,
      "groundtruth": "(CorePalette.of(argb));",
      "prediction": "(CorePalette.of(argb));",
      "raw_prediction": "(CorePalette.of(argb));\n  }\n\n  /** Creates a light theme content-based Scheme from a source color in AR, i.e. a hex code. */\n  public static Scheme lightContent(int argb) {\n    return lightFromCore",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1102,
      "groundtruth": "MathUtils.lerp(this.normal, this.medium, (contrastLevel - 0) / 0.5);",
      "prediction": "MathUtils.lerp(this.normal, this.medium, (contrastLevel - 0.0) / 0.5);",
      "raw_prediction": "MathUtils.lerp(this.normal, this.medium, (contrastLevel - 0.0) / 0.5);",
      "es": 0.9714285714285714,
      "em": false,
      "passed": false
    },
    {
      "index": 1103,
      "groundtruth": "MathUtils.lerp(this.medium, this.high, (contrastLevel - 0.5) / 0.5);",
      "prediction": "MathUtils.lerp(this.medium, this.high, (contrastLevel - 0.5) / 0.5);",
      "raw_prediction": "MathUtils.lerp(this.medium, this.high, (contrastLevel - 0.5) / 0.5);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1104,
      "groundtruth": "lightFromCorePalette(CorePalette.contentOf(argb));",
      "prediction": "lightFromCorePalette(CorePalette.contentOf(argb);",
      "raw_prediction": "lightFromCorePalette(CorePalette.contentOf(argb);\n  }",
      "es": 0.98,
      "em": false,
      "passed": false
    },
    {
      "index": 1105,
      "groundtruth": "ColorUtils.yFromLstar(50.0) / 100.f),\n        lstar,\n        2.0,\n        false);",
      "prediction": "Math.PI),\n        lstar,\n        2.0,\n        false);",
      "raw_prediction": "Math.PI),\n        lstar,\n        2.0,\n        false);",
      "es": 0.5925925925925926,
      "em": false,
      "passed": false
    },
    {
      "index": 1106,
      "groundtruth": "pointProvider.toInt(clusters[i]);",
      "prediction": "0;",
      "raw_prediction": "0;\n      double[] cluster = clusters[i];\n      for (int j = 0; j < clusterCount; j++) {\n        if (indexMatrix[i][j] != j) {\n          continue;\n        }\n\n        double distance",
      "es": 0.030303030303030276,
      "em": false,
      "passed": false
    },
    {
      "index": 1107,
      "groundtruth": "distance = pointProvider.distance(clusters[i], clusters[j]);",
      "prediction": "distance = pointProvider.distanc",
      "raw_prediction": "distance = pointProvider.distance(clusters[i], clusters[j];\n          if (distance < distanceToIndexMatrix[i][j].distance) {",
      "es": 0.5333333333333333,
      "em": false,
      "passed": false
    },
    {
      "index": 1108,
      "groundtruth": "pointProvider.fromInt(inputPixel);",
      "prediction": "pointProvider.fromInt(inputPixel);",
      "raw_prediction": "pointProvider.fromInt(inputPixel);\n        points[pointCount][3] = 1;\n        pointCount++;\n        pixelToCount.put(inputPixel, 1);\n      } else {\n        pixelToCount.put(inputPixel, pixelCount",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1109,
      "groundtruth": "(Contrast.ratioOfTones(49, bgTone) >= desiredRatio) {",
      "prediction": "import com.kyant.m3color.contrast.Contrast;",
      "raw_prediction": "\nimport com.kyant.m3color.contrast.Contrast;\n",
      "es": 0.13207547169811318,
      "em": false,
      "passed": false
    },
    {
      "index": 1110,
      "groundtruth": "if (Contrast.ratioOfTones(upper, answer) >= desiredRatio\n            && Contrast.ratioOfTones(lower, answer) >= desiredRatio) {",
      "prediction": "import java.util.function.Function;",
      "raw_prediction": "\nimport java.util.function.Function;\n",
      "es": 0.1417322834645669,
      "em": false,
      "passed": false
    },
    {
      "index": 1111,
      "groundtruth": "= Contrast.lighter(upper, desiredRatio);",
      "prediction": "",
      "raw_prediction": "\n",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1112,
      "groundtruth": "().quantize(pixels, colorCount);",
      "prediction": "Result();",
      "raw_prediction": "Result();\n",
      "es": 0.15625,
      "em": false,
      "passed": false
    },
    {
      "index": 1113,
      "groundtruth": "pointProvider.distance(point, clusters[j]);",
      "prediction": "pointProvider.distance(point, clusters[j];",
      "raw_prediction": "pointProvider.distance(point, clusters[j];\n",
      "es": 0.9767441860465116,
      "em": false,
      "passed": false
    },
    {
      "index": 1114,
      "groundtruth": "red = ColorUtils.redFromArgb(pixel);",
      "prediction": "red = ColorUtils.redFromArgb(pixel);",
      "raw_prediction": "red = ColorUtils.redFromArgb(pixel);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1115,
      "groundtruth": "previousDistance = pointProvider.distance(point, previousCluster);",
      "prediction": "previousDistance = pointProvider.di",
      "raw_prediction": "previousDistance = pointProvider.distance(point, previousCluster;",
      "es": 0.5303030303030303,
      "em": false,
      "passed": false
    },
    {
      "index": 1116,
      "groundtruth": ") -> palette, (s) -> hct.getTone());",
      "prediction": "cheme;",
      "raw_prediction": "cheme;\n    if (isBackground) {\n      return background.apply(scheme;\n    }\n    return this;",
      "es": 0.11111111111111116,
      "em": false,
      "passed": false
    },
    {
      "index": 1117,
      "error": "RetryError[<Future at 0x10a48a630 state=finished raised HTTPError>]",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1118,
      "groundtruth": "Contrast.ratioOfTones(bgTone, fInitialTone) >= fContrast\n              ? fInitialTone\n              : DynamicColor.foregroundTone(bgTone, fContrast);",
      "prediction": "double fTone = fTone;",
      "raw_prediction": "  double fTone = fTone;",
      "es": 0.12080536912751683,
      "em": false,
      "passed": false
    },
    {
      "index": 1119,
      "groundtruth": "Contrast.ratioOfTones(bgTone, nInitialTone) >= nContrast\n              ? nInitialTone\n              : DynamicColor.foregroundTone(bgTone, nContrast);",
      "prediction": "",
      "raw_prediction": "\n",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1120,
      "groundtruth": "ColorUtils.blueFromArgb(pixel);",
      "prediction": "ColorUtils.blueFromArgb(pixel);",
      "raw_prediction": "ColorUtils.blueFromArgb(pixel);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1121,
      "groundtruth": "Contrast.ratioOfTones(bgTone, answer) >= desiredRatio) {",
      "prediction": "import java.util.ArrayList;",
      "raw_prediction": "\nimport java.util.ArrayList;\n",
      "es": 0.1071428571428571,
      "em": false,
      "passed": false
    },
    {
      "index": 1122,
      "error": "RetryError[<Future at 0x10a4a4800 state=finished raised HTTPError>]",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1123,
      "groundtruth": "alpha = MathUtils.clampInt(0, 255, (int) Math.round(percentage * 255));",
      "prediction": "alpha = (int) (255 * percentage);",
      "raw_prediction": "alpha = (int) (255 * percentage);",
      "es": 0.3943661971830986,
      "em": false,
      "passed": false
    },
    {
      "index": 1124,
      "groundtruth": "fTone = MathUtils.clampDouble(0, 100, nTone + delta * expansionDir);",
      "prediction": "import static java.lang.Math.abs;",
      "raw_prediction": "\nimport static java.lang.Math.abs;",
      "es": 0.16176470588235292,
      "em": false,
      "passed": false
    },
    {
      "index": 1125,
      "groundtruth": "MathUtils.clampDouble(0, 100, fTone - delta * expansionDir);",
      "prediction": "import com.kyant.m3color.palettes.TonalPalette;",
      "raw_prediction": "\nimport com.kyant.m3color.palettes.TonalPalette;\n",
      "es": 0.1333333333333333,
      "em": false,
      "passed": false
    },
    {
      "index": 1126,
      "groundtruth": "TonalPalette.fromInt(argb);",
      "prediction": "Hct.fromInt(argb;",
      "raw_prediction": "Hct.fromInt(argb;",
      "es": 0.5555555555555556,
      "em": false,
      "passed": false
    },
    {
      "index": 1127,
      "groundtruth": "WebhookVerifier(WebhookSigner.hmacSha1(secret), Encoder.HEX);",
      "prediction": "WebhookVerifier(WebhookSigner.hmacSha1(secret), Encoder.HEX);",
      "raw_prediction": "WebhookVerifier(WebhookSigner.hmacSha1(secret), Encoder.HEX);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1128,
      "groundtruth": "ResponseUtil.errorNotFound();",
      "prediction": "ResponseUtil.errorNotFound();",
      "raw_prediction": "ResponseUtil.errorNotFound();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1129,
      "groundtruth": "ResponseUtil.handleDashboardInfo(dashboardInfo);",
      "prediction": "ResponseUtil.handleDashboardInfo(dashboardInfo);",
      "raw_prediction": "ResponseUtil.handleDashboardInfo(dashboardInfo);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1130,
      "groundtruth": "if(TransactionUtil.isValidYear(creationYear)){",
      "prediction": "if(TransactionUtil.isValidYear(creationYear))",
      "raw_prediction": "if(TransactionUtil.isValidYear(creationYear)){",
      "es": 0.9782608695652174,
      "em": false,
      "passed": false
    },
    {
      "index": 1131,
      "groundtruth": "= DateUtil.getUnixTimeFromDate(startDate);",
      "prediction": "= DateUtil.getUnixTimeFromDate(startDate);",
      "raw_prediction": "= DateUtil.getUnixTimeFromDate(startDate);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1132,
      "groundtruth": "DateUtil.isValidDate(startDate) && DateUtil.isValidDate(endDate)) {",
      "prediction": "TransactionUtil.isValidDate(startDate)",
      "raw_prediction": "TransactionUtil.isValidDate(startDate) && TransactionUtil.isValidDate(endDate)) {",
      "es": 0.35820895522388063,
      "em": false,
      "passed": false
    },
    {
      "index": 1133,
      "groundtruth": "(TransactionUtil.idValidAmount(amount)) {",
      "prediction": "(TransactionUtil.idValidAmount(amount))",
      "raw_prediction": "(TransactionUtil.idValidAmount(amount)) {",
      "es": 0.9512195121951219,
      "em": false,
      "passed": false
    },
    {
      "index": 1134,
      "groundtruth": ".isValidDate(startDate) && DateUtil.isValidDate(endDate)) {",
      "prediction": ".isValidDate(startDate) && Date",
      "raw_prediction": ".isValidDate(startDate) && DateUtil.isValidDate(endDate)) {",
      "es": 0.5254237288135593,
      "em": false,
      "passed": false
    },
    {
      "index": 1135,
      "groundtruth": "(!DateUtil.isValidDate(startDate) || !DateUtil.isValidDate(endDate)){",
      "prediction": "(DateUtil.isValidDate(startDate) && DateUtil.isValidDate(endDate))",
      "raw_prediction": " (DateUtil.isValidDate(startDate) && DateUtil.isValidDate(endDate)) {\n            } else {",
      "es": 0.927536231884058,
      "em": false,
      "passed": false
    },
    {
      "index": 1136,
      "groundtruth": "whereGreaterThan(\"creationTimeStamp\", DateUtil.getUnixTimeFromDate(startDate))\n                    .whereLessThan(\"creationTimeStamp\", DateUtil.getUnixTimeFromDate(endDate));",
      "prediction": "whereGreaterThanOrEqualTo(\"creationDate\", startDate)\n                    .whereLessThanOrEqualTo(\"creationDate\", endDate);",
      "raw_prediction": "whereGreaterThanOrEqualTo(\"creationDate\", startDate)\n                    .whereLessThanOrEqualTo(\"creationDate\", endDate);\n        }\n\n        else if(DateUtil.isValidDate(creationDate)) {\n            System.out.println(\"Inside creationDate\");\n            query = query.where",
      "es": 0.5057471264367817,
      "em": false,
      "passed": false
    },
    {
      "index": 1137,
      "groundtruth": "&& TransactionUtil.isValidYear(creationYear)) {",
      "prediction": "&& TransactionUtil.isVali",
      "raw_prediction": "&& TransactionUtil.isValidYear(creationYear)){",
      "es": 0.5319148936170213,
      "em": false,
      "passed": false
    },
    {
      "index": 1138,
      "groundtruth": "ResponseUtil.errorLimitExceeded();",
      "prediction": "ResponseUtil.errorLimitExceeded();",
      "raw_prediction": "ResponseUtil.errorLimitExceeded();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1139,
      "groundtruth": "(TransactionUtil.idValidAmount(transactionAmount)) {",
      "prediction": "(TransactionUtil.idValidAmount(startAmount) && transactionAmount != null && tr",
      "raw_prediction": "(TransactionUtil.idValidAmount(startAmount) && transactionAmount != null && transactionAmount.length()>0) {\n            System.out.println(\"Inside start amount\");\n            query = query.whereGreaterThan(\"transactionAmount\", Double.parseDouble(startAmount))\n public .where",
      "es": 0.6282051282051282,
      "em": false,
      "passed": false
    },
    {
      "index": 1140,
      "groundtruth": "DateUtil.isValidDate(endDate)){",
      "prediction": "DateUtil.isValidD",
      "raw_prediction": "DateUtil.isValidDate(endDate)) {",
      "es": 0.5483870967741935,
      "em": false,
      "passed": false
    },
    {
      "index": 1141,
      "groundtruth": "ResponseUtil.errorParsingEntity(\"Required Date must be passed in query and should be in dd-MM-yyyy format\");",
      "prediction": "new ResponseEntity<>(\"Invalid date range\", HttpStatus.BAD_REQUEST);",
      "raw_prediction": "new ResponseEntity<>(\"Invalid date range\", HttpStatus.BAD_REQUEST);",
      "es": 0.2222222222222222,
      "em": false,
      "passed": false
    },
    {
      "index": 1142,
      "groundtruth": "return ResponseUtil.errorParsingEntity(\"Error! Date format must be in dd-MM-yyyy\");",
      "prediction": "return ResponseUtil.errorParsingEntity(\"Error! Date format must be in dd-MM-yyyy\");",
      "raw_prediction": "return ResponseUtil.errorParsingEntity(\"Error! Date format must be in dd-MM-yyyy\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1143,
      "groundtruth": "(this.isNumber() && other.isNumber()) {",
      "prediction": "(this.isNumber() && other.isNumber())",
      "raw_prediction": "(this.isNumber() && other.isNumber()) {",
      "es": 0.9487179487179487,
      "em": false,
      "passed": false
    },
    {
      "index": 1144,
      "groundtruth": "other.assertNumber();",
      "prediction": "this.assertNumber();",
      "raw_prediction": "this.assertNumber();",
      "es": 0.8571428571428572,
      "em": false,
      "passed": false
    },
    {
      "index": 1145,
      "groundtruth": "ResponseUtil.errorUnauthorized();",
      "prediction": "ResponseUtil.errorUnauthorized();",
      "raw_prediction": "ResponseUtil.errorUnauthorized();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1146,
      "groundtruth": "userDetail.getAuthorities());",
      "prediction": "userDetail.getAuthorities());",
      "raw_prediction": "userDetail.getAuthorities());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1147,
      "groundtruth": "return ResponseUtil.successAddOne();",
      "prediction": "return ResponseUtil.successCreateOne();",
      "raw_prediction": "return ResponseUtil.successCreateOne();",
      "es": 0.8461538461538461,
      "em": false,
      "passed": false
    },
    {
      "index": 1148,
      "groundtruth": "getSourceIndex(), body.getDestinationIndex());",
      "prediction": "getSourcePosition(), body.getTargetPosition());",
      "raw_prediction": "getSourcePosition(), body.getTargetPosition());",
      "es": 0.5319148936170213,
      "em": false,
      "passed": false
    },
    {
      "index": 1149,
      "groundtruth": "body.getSourceIndex(), body.getDestinationIndex());",
      "prediction": "body.getSourceIndex(), body.getDestinationIndex());",
      "raw_prediction": "body.getSourceIndex(), body.getDestinationIndex());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1150,
      "groundtruth": "DeluxeMenuCommand> command = parser.parse(commandArgs);",
      "prediction": "DeluxeMenuCommand> command = parser.parse(commandArgs);",
      "raw_prediction": "DeluxeMenuCommand> command = parser.parse(commandArgs);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1151,
      "groundtruth": "= helixWrapper.fetchChatters(channelId, accessToken);",
      "prediction": "= helixWrapper.fetchChatters(channelId, accessToken);",
      "raw_prediction": "= helixWrapper.fetchChatters(channelId, accessToken);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1152,
      "groundtruth": "channel.isAccessTokenExpired()) {",
      "prediction": "!channel.getAccess",
      "raw_prediction": "!channel.getAccessToken().isPresent()) {",
      "es": 0.36363636363636365,
      "em": false,
      "passed": false
    },
    {
      "index": 1153,
      "groundtruth": "Moderator> vips = helixWrapper.fetchModerators(channelId, accessToken);",
      "prediction": "Moderator> vips = helixWrapper.fetchModerators(channelId, accessToken);",
      "raw_prediction": "Moderator> vips = helixWrapper.fetchModerators(channelId, accessToken);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1154,
      "groundtruth": "channel.getScopeNames());",
      "prediction": "null);",
      "raw_prediction": "    null);",
      "es": 0.16000000000000003,
      "em": false,
      "passed": false
    },
    {
      "index": 1155,
      "groundtruth": "sum += x.getSubTotal();",
      "prediction": "sum += x.getSubTotal();",
      "raw_prediction": "\tsum += x.getSubTotal();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1156,
      "groundtruth": "setDescription(game.getDescription());",
      "prediction": "setDeveloper(game.getDeveloper());",
      "raw_prediction": "setDeveloper(game.getDeveloper());",
      "es": 0.5789473684210527,
      "em": false,
      "passed": false
    },
    {
      "index": 1157,
      "groundtruth": "setId(game.getId());",
      "prediction": "setGameType(game.getGameType());",
      "raw_prediction": "setGameType(game.getGameType());",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 1158,
      "groundtruth": "(game.getId() == id){",
      "prediction": "(game.getId()==id)",
      "raw_prediction": "(game.getId()==id){",
      "es": 0.8571428571428572,
      "em": false,
      "passed": false
    },
    {
      "index": 1159,
      "groundtruth": "game.setCountOwner(game.getCountOwner() + 1);",
      "prediction": "game.setCountOwner(game.getCountOwner()+1);",
      "raw_prediction": "    game.setCountOwner(game.getCountOwner()+1);",
      "es": 0.9555555555555556,
      "em": false,
      "passed": false
    },
    {
      "index": 1160,
      "groundtruth": "(!(customer.getGames().contains(game))){",
      "prediction": "(customer.getGames().contains(game))",
      "raw_prediction": "(customer.getGames().contains(game)){\n            return;\n        }else{",
      "es": 0.9,
      "em": false,
      "passed": false
    },
    {
      "index": 1161,
      "groundtruth": ".equals(customer.getSurName()) &&\n                    customer2.getBirthYear() == customer.getBirthYear()) {",
      "prediction": ".equals(customer.getSurName()) &&\n                    cu",
      "raw_prediction": ".equals(customer.getSurName()) &&\n                    customer2.getBirthYear() == customer.getBirthYear()) {",
      "es": 0.5185185185185186,
      "em": false,
      "passed": false
    },
    {
      "index": 1162,
      "groundtruth": "(game1.getId()==id){",
      "prediction": "(game1.getId() == id)",
      "raw_prediction": "(game1.getId() == id){",
      "es": 0.8571428571428572,
      "em": false,
      "passed": false
    },
    {
      "index": 1163,
      "groundtruth": "customer2.getSurName().equals(customer.getSurName()) &&\n                    customer2.getBirthYear() == customer.getBirthYear()) {",
      "prediction": "customer2.getSurname().equals(customer.getSurname()) &&",
      "raw_prediction": " customer2.getSurname().equals(customer.getSurname()) &&",
      "es": 0.4076923076923077,
      "em": false,
      "passed": false
    },
    {
      "index": 1164,
      "groundtruth": ") == customer.getBirthYear()) {",
      "prediction": ").equals(customer.getBirthYear()) &&",
      "raw_prediction": ").equals(customer.getBirthYear()) &&\n                    customer2.getPhoneNumber().equals(customer.getPhoneNumber())) {",
      "es": 0.7222222222222222,
      "em": false,
      "passed": false
    },
    {
      "index": 1165,
      "groundtruth": "customer2.getBirthYear() == customer.getBirthYear()) {",
      "prediction": "customer2.getBirthYear() == c",
      "raw_prediction": " customer2.getBirthYear() == customer.getBirthYear()) {",
      "es": 0.537037037037037,
      "em": false,
      "passed": false
    },
    {
      "index": 1166,
      "groundtruth": ".getName() + \" sold to \" + customer.getName()+\" cost: \"+game.getCost());",
      "prediction": ".getName() + \" sold to \" + customer.getName());",
      "raw_prediction": ".getName() + \" sold to \" + customer.getName());",
      "es": 0.6527777777777778,
      "em": false,
      "passed": false
    },
    {
      "index": 1167,
      "groundtruth": "p1.getCategories().add(cat2);",
      "prediction": "p1.getCategories().add(cat2)",
      "raw_prediction": "\tp1.getCategories().add(cat2)",
      "es": 0.9655172413793104,
      "em": false,
      "passed": false
    },
    {
      "index": 1168,
      "groundtruth": "setDiscountAmount(campaign.getDiscountAmount());",
      "prediction": "setPrice(campaign.getPrice());",
      "raw_prediction": "setPrice(campaign.getPrice());",
      "es": 0.45833333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 1169,
      "groundtruth": "()+\" cost: \"+game.getCost());",
      "prediction": "());",
      "raw_prediction": "());\n        }\n    }\n\n    public void sell(Customer customer, Game game) {\n        for(Campaign campaign:campaignService.getCampaigns()){\n\n            if(campaign.getGames().contains(game) && !(customer.getGames().contains(game))){\n",
      "es": 0.13793103448275867,
      "em": false,
      "passed": false
    },
    {
      "index": 1170,
      "groundtruth": "(campaign1.getId()==id){",
      "prediction": "(campaign1.getId() == id)",
      "raw_prediction": "(campaign1.getId() == id){",
      "es": 0.88,
      "em": false,
      "passed": false
    },
    {
      "index": 1171,
      "groundtruth": "(campaign.getGames().get(id));",
      "prediction": "(campaign.getGame());",
      "raw_prediction": "(campaign.getGame());",
      "es": 0.7,
      "em": false,
      "passed": false
    },
    {
      "index": 1172,
      "groundtruth": "p2.getCategories().add(cat3);",
      "prediction": "p5.getCategories().add(cat2);",
      "raw_prediction": "\tp5.getCategories().add(cat2);",
      "es": 0.9310344827586207,
      "em": false,
      "passed": false
    },
    {
      "index": 1173,
      "groundtruth": "System.out.println(user2.getName() +\" is updated to \" + customer.getName());",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1174,
      "groundtruth": ".out.println(user2.getName() +\" is updated to \" + customer.getName());",
      "prediction": ".out.println(\"User is found.\");",
      "raw_prediction": ".out.println(\"User is found.\");",
      "es": 0.34285714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 1175,
      "groundtruth": "p3.getCategories().add(cat3);",
      "prediction": "p3.getCategories().add(cat3);",
      "raw_prediction": "\tp3.getCategories().add(cat3);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1176,
      "groundtruth": "p4.getCategories().add(cat3);",
      "prediction": "p4.getCategories().add(cat3);",
      "raw_prediction": "\tp4.getCategories().add(cat3);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1177,
      "groundtruth": ", p1.getPrice());",
      "prediction": ", p1.getPrice());",
      "raw_prediction": ", p1.getPrice());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1178,
      "groundtruth": "setSurName(customer.getSurName());",
      "prediction": "setSurname(customer.getSurname());",
      "raw_prediction": "setSurname(customer.getSurname());",
      "es": 0.9411764705882353,
      "em": false,
      "passed": false
    },
    {
      "index": 1179,
      "groundtruth": "2, p5.getPrice());",
      "prediction": "1, p5.getPrice());",
      "raw_prediction": "1, p5.getPrice());",
      "es": 0.9444444444444444,
      "em": false,
      "passed": false
    },
    {
      "index": 1180,
      "groundtruth": "userToUpdate.setBirthYear(customer.getBirthYear());",
      "prediction": "userToUpdate.setBirthDate(customer.getBirthDate());",
      "raw_prediction": "userToUpdate.setBirthDate(customer.getBirthDate());",
      "es": 0.8431372549019608,
      "em": false,
      "passed": false
    },
    {
      "index": 1181,
      "groundtruth": "setTc(customer.getTc());",
      "prediction": "setBirthDay(customer.getBirthDay());",
      "raw_prediction": "setBirthDay(customer.getBirthDay());\n            userToUpdate.setBirthMonth(customer.getBirthMonth());\n            userToUpdate.setNationalityId(customer.getNationalityId());\n            userToUpdate.setPhoneNumber(customer.getPhoneNumber());\n            userToUpdate.setAddress(customer.getAddress",
      "es": 0.5555555555555556,
      "em": false,
      "passed": false
    },
    {
      "index": 1182,
      "groundtruth": ", p3, 2, p3.getPrice());",
      "prediction": ", p2, 2, p2.getPrice());",
      "raw_prediction": ", p2, 2, p2.getPrice());",
      "es": 0.9166666666666666,
      "em": false,
      "passed": false
    },
    {
      "index": 1183,
      "groundtruth": "p5.getCategories().add(cat2);",
      "prediction": "Product p6 = new",
      "raw_prediction": "\tProduct p6 = new Product(null, \"PlayThe Lord of the Rings\", \"Lorem ipsum dolor sit amet, consectetur.\", 90.5, \"\");\n\t\tProduct p7 = new Product(null, \"Smart TV\", \"",
      "es": 0.03448275862068961,
      "em": false,
      "passed": false
    },
    {
      "index": 1184,
      "groundtruth": "(ClientCommandInternals.executeCommand(command)) {",
      "prediction": "(ClientCommandInternals.executeCommand(command))",
      "raw_prediction": "(ClientCommandInternals.executeCommand(command)) {",
      "es": 0.96,
      "em": false,
      "passed": false
    },
    {
      "index": 1185,
      "groundtruth": "ClientCommandInternals.finalizeInit();",
      "prediction": "ClientCommandInternals.addCommands(dispatcher, commandSource);",
      "raw_prediction": "\n        ClientCommandInternals.addCommands(dispatcher, commandSource);",
      "es": 0.467741935483871,
      "em": false,
      "passed": false
    },
    {
      "index": 1186,
      "groundtruth": "ClientCommandInternals.getActiveDispatcher();",
      "prediction": "ClientCommandInternals.getActiveDispatcher();",
      "raw_prediction": "ClientCommandInternals.getActiveDispatcher();\n    }\n\n    /**\n     * Creates a literal argument builder.\n     *\n     * @param name the literal name\n     * @return the created argument builder\n     */\n    public static LiteralArgumentBuilder<F",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1187,
      "groundtruth": "activeDispatcher.register(ClientCommandManager.literal(API_COMMAND_NAME).then(help));",
      "prediction": "activeDispatcher.getRoot();",
      "raw_prediction": "activeDispatcher.getRoot();\n            mainNode.addChild(help);",
      "es": 0.2941176470588235,
      "em": false,
      "passed": false
    },
    {
      "index": 1188,
      "groundtruth": "register(ClientCommandManager.literal(SHORT_API_COMMAND_NAME).redirect(mainNode));",
      "prediction": "register(mainNode);",
      "raw_prediction": "register(mainNode);\n            } else {\n            activeDispatcher.register(ClientCommandManager.literal(SHORT_API_COMMAND_NAME).executes(ClientCommandInternals::executeRootHelp));",
      "es": 0.23170731707317072,
      "em": false,
      "passed": false
    },
    {
      "index": 1189,
      "groundtruth": "LiteralArgumentBuilder<FabricClientCommandSource> help = ClientCommandManager.literal(\"help\");",
      "prediction": "CommandBuilder help = ClientCommandManager.literal(\"help\");",
      "raw_prediction": "CommandBuilder help = ClientCommandManager.literal(\"help\");",
      "es": 0.574468085106383,
      "em": false,
      "passed": false
    },
    {
      "index": 1190,
      "groundtruth": "HelpCommandAccessor.getFailedException().create();",
      "prediction": "new CommandSyntaxException(HelpCommandAccessor.BUILT_IN_EXCEPTIONS.dispatch",
      "raw_prediction": "new CommandSyntaxException(HelpCommandAccessor.BUILT_IN_EXCEPTIONS.dispatcherUnknownCommand(), \"Unknown command\");",
      "es": 0.28,
      "em": false,
      "passed": false
    },
    {
      "index": 1191,
      "groundtruth": ") + (int) type.getAbilityScoreIncrease(type.getSubRace()).get(\"intelligence\");",
      "prediction": ") + (int) type.getAbilityScoreIncrease(type.getSubRace()).get(\"intelligence\");",
      "raw_prediction": ") + (int) type.getAbilityScoreIncrease(type.getSubRace()).get(\"intelligence\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1192,
      "groundtruth": "type.getSubRace();",
      "prediction": "type.getSubRace();",
      "raw_prediction": "type.getSubRace();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1193,
      "groundtruth": "type.getSubRace()).containsKey(\"strength\")){",
      "prediction": "type.getSubRace()).containsKey(",
      "raw_prediction": "type.getSubRace()).containsKey(\"strength\")){",
      "es": 0.7045454545454546,
      "em": false,
      "passed": false
    },
    {
      "index": 1194,
      "groundtruth": "getModifier(stats.getStrength()) + (int) type.getAbilityScoreIncrease(type.getSubRace()).get(\"strength\");",
      "prediction": "getModifier(stats.getStrength()) + (int) type.getAbilityScoreIncrease(type.getSubRace()).get(\"strength\");",
      "raw_prediction": "getModifier(stats.getStrength()) + (int) type.getAbilityScoreIncrease(type.getSubRace()).get(\"strength\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1195,
      "groundtruth": "type.getSpeed();",
      "prediction": "type.getSpeed();",
      "raw_prediction": "type.getSpeed();\n\t}\n\n\tpublic int getHitPoints(){\n\t\treturn type.getHitPoints();\n\t}\n\n\tpublic int getArmorClass(){\n\t\treturn type.getArmorClass();\n\t}\n\n\tpublic int getHitDice(){\n\t\treturn type.getHitDice",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1196,
      "groundtruth": "stats.getModifier(stats.getCharisma());",
      "prediction": "stats.getModifier(stats.getCharisma());",
      "raw_prediction": "stats.getModifier(stats.getCharisma());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1197,
      "groundtruth": "stats.getModifier(stats.getStrength());",
      "prediction": "stats.getModifier(stats.getStrength());",
      "raw_prediction": "stats.getModifier(stats.getStrength());\n\t\t\tcase \"strength\":\n\t\t\t\tif (type.getAbilityScoreIncrease(type.getSubRace()).containsKey(\"strength\")){\n\t\t\t\t\treturn stats.getModifier(stats.getStrength()) + (int) type.getAbilityScoreIncrease",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1198,
      "groundtruth": "return stats.getSavingThrow(stats.getStrength(), true);",
      "prediction": "return stats.getSavingThrow(stats.getStrength(), false);",
      "raw_prediction": "return stats.getSavingThrow(stats.getStrength(), false);",
      "es": 0.9285714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 1199,
      "groundtruth": "stats.getCharisma(), false);",
      "prediction": "stats.getCharisma(), true);",
      "raw_prediction": "stats.getCharisma(), true);",
      "es": 0.8571428571428572,
      "em": false,
      "passed": false
    },
    {
      "index": 1200,
      "groundtruth": "return stats.getSavingThrow(stats.getDexterity(), false);",
      "prediction": "return stats.getSavingThrow(stats.getDexterity(), true);",
      "raw_prediction": "return stats.getSavingThrow(stats.getDexterity(), true);",
      "es": 0.9298245614035088,
      "em": false,
      "passed": false
    },
    {
      "index": 1201,
      "groundtruth": "(stats.getIntelligence(), true);",
      "prediction": "(stats.getIntelligence(), true);",
      "raw_prediction": "(stats.getIntelligence(), true);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1202,
      "groundtruth": "readResult, \"selectApdu with AID: \" + Utils.bytesToHex(command));",
      "prediction": "readResult, \"selectApdu: \" + Utils.bytesToHex(command));",
      "raw_prediction": "readResult, \"selectApdu: \" + Utils.bytesToHex(command));",
      "es": 0.8615384615384616,
      "em": false,
      "passed": false
    },
    {
      "index": 1203,
      "groundtruth": "writeToUiAppend(readResult, \"select CC: \" + Utils.bytesToHex(command));",
      "prediction": "writeToUiAppend(readResult, \"selectApdu with CC: \" + Utils.bytesToHex(command));",
      "raw_prediction": "writeToUiAppend(readResult, \"selectApdu with CC: \" + Utils.bytesToHex(command));",
      "es": 0.8875,
      "em": false,
      "passed": false
    },
    {
      "index": 1204,
      "groundtruth": "readResult, \"selectApdu response: \" + Utils.bytesToHex(responseSelect));",
      "prediction": "readResult, \"selectApdu with AID response: \" + Utils.bytesToHex(responseSelect));",
      "raw_prediction": "readResult, \"selectApdu with AID response: \" + Utils.bytesToHex(responseSelect));\n            writeToUiAppend(readResult, \"responseSelect length: \" + responseSelect.length + \" data: \" + Utils.bytesToHex",
      "es": 0.8888888888888888,
      "em": false,
      "passed": false
    },
    {
      "index": 1205,
      "groundtruth": "(\"sendBinaryFromCc response: \" + Utils.bytesToHex(responseSendBinaryFromCc));",
      "prediction": "(\"responseSendBinaryFromCc: \" + Utils.bytesToHex(responseSendBinaryFromCc));",
      "raw_prediction": "(\"responseSendBinaryFromCc: \" + Utils.bytesToHex(responseSendBinaryFromCc));",
      "es": 0.7792207792207793,
      "em": false,
      "passed": false
    },
    {
      "index": 1206,
      "groundtruth": "System.out.println(\"capabilityContainerHeader: \" + Utils.bytesToHex(capabilityContainerHeader));",
      "prediction": "System.out.println(\"capabilityContainerHeader: \" + new String(capabilityContainerHeader));",
      "raw_prediction": "System.out.println(\"capabilityContainerHeader: \" + new String(capabilityContainerHeader));\n",
      "es": 0.84375,
      "em": false,
      "passed": false
    },
    {
      "index": 1207,
      "groundtruth": "(\"responseSelect: \" + Utils.bytesToHex(responseSelect));",
      "prediction": "(\"responseSelect: \" + Utils.bytesToHex(responseSelect));",
      "raw_prediction": "(\"responseSelect: \" + Utils.bytesToHex(responseSelect));\n                if (responseSelect.length < 2) {\n        writeToUiAppend(readResult, \"responseSelect length < 2 - aborted\");\n        System.out.println(\"responseSelect",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1208,
      "groundtruth": ",\"ndefLen: \" + Utils.bytesToHex(ndefLen) + \" len (dec): \" + ndefLenInt);",
      "prediction": ", \"ndefLen (dec): \" + ndefLenInt + \" data: \" + Utils.bytesToHex(ndefLen));",
      "raw_prediction": ", \"ndefLen (dec): \" + ndefLenInt + \" data: \" + Utils.bytesToHex(ndefLen));\n        System.out.println(\"ndefLen: \" + ndefLenInt + \" data: \" + Utils",
      "es": 0.32432432432432434,
      "em": false,
      "passed": false
    },
    {
      "index": 1209,
      "groundtruth": "writeToUiAppend(readResult, \"responseSelect length: \" + responseSelectCc.length + \" data: \" + Utils.bytesToHex(responseSelectCc));",
      "prediction": "System.out.println(\"responseSelectCc: \" + Utils.bytesToHex(responseSelectCc));",
      "raw_prediction": "System.out.println(\"responseSelectCc: \" + Utils.bytesToHex(responseSelectCc));\n",
      "es": 0.523076923076923,
      "em": false,
      "passed": false
    },
    {
      "index": 1210,
      "groundtruth": "= \"00b000\" + Utils.bytesToHex(cmdLenNew);",
      "prediction": "= \"00b00000\" + Utils.bytesToHex(ndefLen);",
      "raw_prediction": "= \"00b00000\" + Utils.bytesToHex(ndefLen);\nimport writeToUiAppend(readResult, \"sendBinaryNdefData: \" + Utils.bytesToHex(command));\nimport writeToUiAppend(readResult",
      "es": 0.8048780487804879,
      "em": false,
      "passed": false
    },
    {
      "index": 1211,
      "groundtruth": "] cmdLenNew = Utils.convertIntToByteArray(ndefLenIntRequest, 2);",
      "prediction": "] cmdLenNew = Utils.intToByteArray(ndefLenIntRequest);",
      "raw_prediction": "] cmdLenNew = Utils.intToByteArray(ndefLenIntRequest);",
      "es": 0.828125,
      "em": false,
      "passed": false
    },
    {
      "index": 1212,
      "groundtruth": "writeToUiAppend(readResult,\"ndefLen new (dec): \" + ndefLenIntRequest + \" data: \" + Utils.bytesToHex(cmdLenNew) );",
      "prediction": "//String sendReadBinaryNdefData = \"00b000\" + Utils.bytesToHex(cmdLenNew) + \"0f\";",
      "raw_prediction": "//String sendReadBinaryNdefData = \"00b000\" + Utils.bytesToHex(cmdLenNew) + \"0f\";\npublic String sendReadBinaryNdefData = \"00b000\"",
      "es": 0.3893805309734514,
      "em": false,
      "passed": false
    },
    {
      "index": 1213,
      "groundtruth": "if (!Utils.isSucceed(responseSelect)) {",
      "prediction": "// Sending select with AID",
      "raw_prediction": "// Sending select with AID\n                String selectApdu = \"00a4040007d2760000850101\";\n    command = Utils.hexStringToByteArray(select",
      "es": 0.15384615384615385,
      "em": false,
      "passed": false
    },
    {
      "index": 1214,
      "groundtruth": "Utils.getTimestamp();",
      "prediction": "tvTimestamp.getText().toString();",
      "raw_prediction": "tvTimestamp.getText().toString();\n                    Intent intent = new Intent(view.getContext(), MyHostApduService.class);\n                    intent.putExtra(\"ndefMessage\", messageWithTimestamp);\n                    Toast.makeText(view.getContext(), \"This message is send as NDEF message",
      "es": 0.33333333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 1215,
      "groundtruth": "] cmdLen = Utils.hexStringToByteArray(sendReadBinaryNlen);",
      "prediction": "] ndefLenInt = new BigInteger(ndefLen).toByteArray();",
      "raw_prediction": "] ndefLenInt = new BigInteger(ndefLen).toByteArray();\n",
      "es": 0.24137931034482762,
      "em": false,
      "passed": false
    },
    {
      "index": 1216,
      "groundtruth": "(\"messageType\", identifierBroadcastMessageEntry.getValue().getMessageType().getID().toString());",
      "prediction": "(\"messageType\", identifierBroadcastMessageEntry.getValue().getMessageType().getId());",
      "raw_prediction": "(\"messageType\", identifierBroadcastMessageEntry.getValue().getMessageType().getId());",
      "es": 0.875,
      "em": false,
      "passed": false
    },
    {
      "index": 1217,
      "groundtruth": "resource.canBeOpened() ) {",
      "prediction": "resource.exists",
      "raw_prediction": "resource.exists() ) {",
      "es": 0.3846153846153846,
      "em": false,
      "passed": false
    },
    {
      "index": 1218,
      "groundtruth": "<Path> pathStream = pathParser.streamFilesMatchingAntPath(antPattern)) {",
      "prediction": "<Path> pathStream = pathParser.parse(antPattern)",
      "raw_prediction": "<Path> pathStream = pathParser.parse(antPattern)) {",
      "es": 0.625,
      "em": false,
      "passed": false
    },
    {
      "index": 1219,
      "groundtruth": "circularDefinitionPreventer.throwCircularDefinitionException();",
      "prediction": "throw new IllegalArgumentException(\"Circular definition of property \" + key);",
      "raw_prediction": "    throw new IllegalArgumentException(\"Circular definition of property \" + key);",
      "es": 0.33766233766233766,
      "em": false,
      "passed": false
    },
    {
      "index": 1220,
      "groundtruth": "( InputStream stream = resource.getInputStream() ) {",
      "prediction": "( InputStream stream = resource.openStream() )",
      "raw_prediction": "( InputStream stream = resource.openStream() ) {",
      "es": 0.8269230769230769,
      "em": false,
      "passed": false
    },
    {
      "index": 1221,
      "groundtruth": "newValue = getPropertyValue(newKey, mavenProjectProperties, environment, circularDefinitionPreventer.cloneWithAdditionalKey(key));",
      "prediction": "newValue = getPropertyValue(newKey, mavenProjectProperties, environment, circularDefinitionPreventer);",
      "raw_prediction": "newValue = getPropertyValue(newKey, mavenProjectProperties, environment, circularDefinitionPreventer);\n            circularDefinitionPreventer.markPropertyAsVisited(key);\n",
      "es": 0.7846153846153846,
      "em": false,
      "passed": false
    },
    {
      "index": 1222,
      "groundtruth": "circularDefinitionPreventer.isPropertyAlreadyVisited(key)) {",
      "prediction": "key == null) {",
      "raw_prediction": "key == null) {\n            throw new IllegalArgumentException(\"key cannot be null\");\n        }\n\n        circularDefinitionPreventer.add(key);\n\n        String rawValue = fromPropertiesThenSystemThenEnvironment(key, mavenProjectProperties, environment);\n\n        if",
      "es": 0.09999999999999998,
      "em": false,
      "passed": false
    },
    {
      "index": 1223,
      "groundtruth": "size = queryResult.getValueListSize();",
      "prediction": "size = queryResult.size();",
      "raw_prediction": "size = queryResult.size();",
      "es": 0.6842105263157895,
      "em": false,
      "passed": false
    },
    {
      "index": 1224,
      "groundtruth": "(file.getStatements().size() != 1) {",
      "prediction": "(file.getStatements().size() != 1)",
      "raw_prediction": "(file.getStatements().size() != 1) {",
      "es": 0.9444444444444444,
      "em": false,
      "passed": false
    },
    {
      "index": 1225,
      "groundtruth": ".putAll(queryResult.getStringMappings(j, localMax));",
      "prediction": "s.put(\"row\", queryResult.getValueList(j, 0));",
      "raw_prediction": "s.put(\"row\", queryResult.getValueList(j, 0));\n            for (StatementExec statement : file.getStatements()) {\n              Map<String, Object> localValues = new HashMap<>(values);\n              localValues.put(\"row\", query",
      "es": 0.42307692307692313,
      "em": false,
      "passed": false
    },
    {
      "index": 1226,
      "groundtruth": "statement.getId(),\n                Status.FAILURE,\n                e.getMessage() + \";",
      "prediction": "statement.getId(),\n                Status.FAILURE,",
      "raw_prediction": "    statement.getId(),\n                Status.FAILURE,\n               ",
      "es": 0.5813953488372092,
      "em": false,
      "passed": false
    },
    {
      "index": 1227,
      "groundtruth": "statement.getId(), StringUtils.format(statement.getStatement(), parameterValues));",
      "prediction": "statement.getId(),",
      "raw_prediction": "    statement.getId(),\n        statement.getStatement().replaceAll(\"\\\\$\\\\{([^\\\\}]+)\\\\}\", \"$1\")\n            .replaceAll(\"\\\\$\\\\{([^\\\\}]+)\\\\}\", \"$1\"));\n  }\n\n  public static FileExec",
      "es": 0.2195121951219512,
      "em": false,
      "passed": false
    },
    {
      "index": 1228,
      "groundtruth": "if (queryResult == null || queryResult.containsEmptyResultColumnOnly()) {",
      "prediction": "if (queryResult.getValueListSize() == 0)",
      "raw_prediction": " if (queryResult.getValueListSize() == 0) {",
      "es": 0.31506849315068497,
      "em": false,
      "passed": false
    },
    {
      "index": 1229,
      "groundtruth": "+ statement.getId());",
      "prediction": "+ statement.getId());",
      "raw_prediction": "+ statement.getId());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1230,
      "groundtruth": "file.getId(),\n            Status.FAILURE,\n            /* payload= */ e.getMessage() + \";",
      "prediction": "file.getId(),\n                Status.FAILURE,\n                \"Exception executing file: \" + file.getId() + \" Exception:",
      "raw_prediction": "    file.getId(),\n                Status.FAILURE,\n                \"Exception executing file: \" + file.getId() + \" Exception:",
      "es": 0.5583333333333333,
      "em": false,
      "passed": false
    },
    {
      "index": 1231,
      "groundtruth": "readValue(StringUtils.replaceEnvVars(new File(filePath)), objectType);",
      "prediction": "readValue(",
      "raw_prediction": "readValue(\n        replaceEnvironmentVariables(filePath),\n        objectType);\n  }\n\n  /**\n   * Reads the YAML file and replaces all environment variables (if present). Creates and returns\n   * an object of `objectType` class.\n   */\n",
      "es": 0.1428571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 1232,
      "groundtruth": "getId(), StringUtils.format(statement.getStatement(), parameterValues));",
      "prediction": "getId(),",
      "raw_prediction": "getId(),\n        statement.getStatement().replaceAll(\"\\\\$\\\\{([^}]+)\\\\}\", (m) -> {\n          Object value = parameterValue.get(m.group(1));\n          if (value == null) {\n            return \"\";\n          }\n",
      "es": 0.11111111111111116,
      "em": false,
      "passed": false
    },
    {
      "index": 1233,
      "groundtruth": "(prompt.getOption()) {",
      "prediction": "(prompt.getOption(), prompt.getIndex())",
      "raw_prediction": "(prompt.getOption(), prompt.getIndex()) {",
      "es": 0.5128205128205128,
      "em": false,
      "passed": false
    },
    {
      "index": 1234,
      "groundtruth": "().anyMatch(prompt -> prompt.getOption().equals(o.getOption()))) {",
      "prediction": "().anyMatch(prompt -> prompt.getOption().equals(o.getOption()) || Objects.equals(prompt.getIndex(),",
      "raw_prediction": "().anyMatch(prompt -> prompt.getOption().equals(o.getOption()) || Objects.equals(prompt.getIndex(),o.getIndex()))) {",
      "es": 0.6363636363636364,
      "em": false,
      "passed": false
    },
    {
      "index": 1235,
      "groundtruth": "(rowIndex).setSnippet(str);",
      "prediction": "(rowIndex).setSnippet(str);",
      "raw_prediction": "(rowIndex).setSnippet(str);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1236,
      "groundtruth": "stringStringHashMap.put(prompt.getOption(), prompt.getSnippet());",
      "prediction": "stringStringHashMap.put(prompt.getOption(), prompt.getTo());",
      "raw_prediction": "    stringStringHashMap.put(prompt.getOption(), prompt.getTo());",
      "es": 0.8923076923076922,
      "em": false,
      "passed": false
    },
    {
      "index": 1237,
      "groundtruth": ".put(prompt.getOption(), prompt.getSnippet());",
      "prediction": ".put(prompt.getOption(), prompt.getTo());",
      "raw_prediction": ".put(prompt.getOption(), prompt.getTo());",
      "es": 0.8478260869565217,
      "em": false,
      "passed": false
    },
    {
      "index": 1238,
      "groundtruth": "stream().anyMatch(prompt -> prompt.getOption().equals(o.getOption()))) {",
      "prediction": "stream().anyMatch(prompt -> prompt.getOption().equals(o.getOption()) || Objects.equals(prompt.getIndex(), o.",
      "raw_prediction": "stream().anyMatch(prompt -> prompt.getOption().equals(o.getOption()) || Objects.equals(prompt.getIndex(), o.getIndex()))) {",
      "es": 0.6481481481481481,
      "em": false,
      "passed": false
    },
    {
      "index": 1239,
      "groundtruth": "prompts.get(rowIndex).setOption(str);",
      "prediction": "prompt.get(rowIndex).setOption(str);",
      "raw_prediction": "prompt.get(rowIndex).setOption(str);",
      "es": 0.972972972972973,
      "em": false,
      "passed": false
    },
    {
      "index": 1240,
      "groundtruth": "actionManager.unregisterAction(idPrefix + prompt.getOption());",
      "prediction": "actionManager.unregisterAction(idPrefix + prompt.getOption());",
      "raw_prediction": "actionManager.unregisterAction(idPrefix + prompt.getOption());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1241,
      "groundtruth": "appSettingsStorage.unregisterActions();",
      "prediction": "if (form == null) {",
      "raw_prediction": "   if (form == null) {\n            return;\n        }",
      "es": 0.10256410256410253,
      "em": false,
      "passed": false
    },
    {
      "index": 1242,
      "groundtruth": "(idPrefix + prompt.getOption());",
      "prediction": "(idPrefix + prompt.getOption());",
      "raw_prediction": "(idPrefix + prompt.getOption());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1243,
      "groundtruth": "ddlFileStatements = SQLParser.getStatements(ddlFile).getStatements();",
      "prediction": "ddlFileStatements =",
      "raw_prediction": "ddlFileStatements =\n          SQLParser.getStatements(ddlFile).getStatements().stream()\n              .map(s -> StringUtils.replaceParameters(s, parameterValues))\n              .collect(Collectors.toUnmodifiableList());\n",
      "es": 0.2753623188405797,
      "em": false,
      "passed": false
    },
    {
      "index": 1244,
      "groundtruth": "connection.execute(currentQuery);",
      "prediction": "for (StatementExec query : ddlFileStatements)",
      "raw_prediction": "  for (StatementExec query : ddlFileStatements) {\n        String currentQuery = StringUtils.replaceParameters(query, parameterValues).getStatement();\n        connection.execute(currentQuery);",
      "es": 0.2222222222222222,
      "em": false,
      "passed": false
    },
    {
      "index": 1245,
      "groundtruth": "task.getTimeTravelPhaseId() != null) {",
      "prediction": "task.getTimeTravelPha",
      "raw_prediction": "task.getTimeTravelPhaseId() != null) {",
      "es": 0.5526315789473684,
      "em": false,
      "passed": false
    },
    {
      "index": 1246,
      "groundtruth": ".forName(task.getCustomTaskExecutor())\n                .getDeclaredConstructor(\n                    SQLTelemetryRegistry.class, String.class, CustomTaskExecutorArguments.class);",
      "prediction": ".forName(task.getCustomTaskExecutor()).getConstructor(\n                SQLTelemetryRegistry.class,\n                String.class,\n                CustomTaskExecutorArgument.class);",
      "raw_prediction": ".forName(task.getCustomTaskExecutor()).getConstructor(\n                SQLTelemetryRegistry.class,\n                String.class,\n                CustomTaskExecutorArgument.class);",
      "es": 0.6536312849162011,
      "em": false,
      "passed": false
    },
    {
      "index": 1247,
      "groundtruth": "+ task.getId());",
      "prediction": "+ task.getId());",
      "raw_prediction": "+ task.getId());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1248,
      "groundtruth": "\"Unable to load custom task class: \" + task.getCustomTaskExecutor(), e);",
      "prediction": "\"Failed to create custom task executor: \" + task.getCustomTaskExecutor(), e);",
      "raw_prediction": "    \"Failed to create custom task executor: \" + task.getCustomTaskExecutor(), e);",
      "es": 0.7922077922077921,
      "em": false,
      "passed": false
    },
    {
      "index": 1249,
      "groundtruth": "form.getSettings().clone();",
      "prediction": "appSettingsStorage.getState();",
      "raw_prediction": "appSettingsStorage.getState();",
      "es": 0.2666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 1250,
      "groundtruth": ", eventInfo.getEndTime()));",
      "prediction": ", Instant.now()));",
      "raw_prediction": ", Instant.now()));\n          // Log end of phase execution.",
      "es": 0.40740740740740744,
      "em": false,
      "passed": false
    },
    {
      "index": 1251,
      "groundtruth": "if (phase.getSessions().size() > maxConcurrentSessions) {",
      "prediction": "if (phase.getSessions().size() > maxConcurrentSessions)",
      "raw_prediction": "  if (phase.getSessions().size() > maxConcurrentSessions) {",
      "es": 0.9649122807017544,
      "em": false,
      "passed": false
    },
    {
      "index": 1252,
      "groundtruth": "writeTaskEvent(taskStartTime, task.getId(), Status.FAILURE);",
      "prediction": "writeTaskEvent(taskStartTime, task.getId(), Status.FAILURE);",
      "raw_prediction": "writeTaskEvent(taskStartTime, task.getId(), Status.FAILURE);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1253,
      "groundtruth": ".info(\"Running \" + phase.getId() + \" phase...\");",
      "prediction": ".info(\"Starting phase: {}\", phase.getId());",
      "raw_prediction": ".info(\"Starting phase: {}\", phase.getId());",
      "es": 0.4375,
      "em": false,
      "passed": false
    },
    {
      "index": 1254,
      "groundtruth": "return instance.getState();",
      "prediction": "return instance.get();",
      "raw_prediction": "  return instance.get();",
      "es": 0.8148148148148149,
      "em": false,
      "passed": false
    },
    {
      "index": 1255,
      "groundtruth": "phase.getId(),\n              ChronoUnit.SECONDS.between(phaseStartTime, eventInfo.getEndTime()));",
      "prediction": "phase.getId(),\n              ChronoUnit.SECONDS.between(phaseStartTime, Instant.now());",
      "raw_prediction": "  phase.getId(),\n              ChronoUnit.SECONDS.between(phaseStartTime, Instant.now());",
      "es": 0.8247422680412371,
      "em": false,
      "passed": false
    },
    {
      "index": 1256,
      "groundtruth": ", session.getId(), Status.FAILURE);",
      "prediction": ", session.getId(), Status.FAILURE);",
      "raw_prediction": ", session.getId(), Status.FAILURE);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1257,
      "groundtruth": "String reportFileName = contributionFilesService.getFileName(start, finish);",
      "prediction": "String reportFileName = contributionFilesService.generateReportFileName(start, finish);",
      "raw_prediction": "    String reportFileName = contributionFilesService.generateReportFileName(start, finish);\n",
      "es": 0.8735632183908046,
      "em": false,
      "passed": false
    },
    {
      "index": 1258,
      "groundtruth": "experiment.execute();",
      "prediction": "experiment.run();",
      "raw_prediction": "experiment.run();\n    telemetryHook.interrupt();",
      "es": 0.7142857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 1259,
      "groundtruth": "settings = AppSettingsStorage.getInstance().getState();",
      "prediction": "settings = AppSettingsStorage.getInstance(project).getSettings();",
      "raw_prediction": "settings = AppSettingsStorage.getInstance(project).getSettings();",
      "es": 0.8,
      "em": false,
      "passed": false
    },
    {
      "index": 1260,
      "groundtruth": "fdcFileMapper.processRequest(files.toArray(new String[0]), getFileName(start, finish));",
      "prediction": "fdcFileMapper.mapToXml(files, start, finish);",
      "raw_prediction": "fdcFileMapper.mapToXml(files, start, finish);",
      "es": 0.4252873563218391,
      "em": false,
      "passed": false
    },
    {
      "index": 1261,
      "groundtruth": "(next.getOption()));",
      "prediction": "(next.getName()));",
      "raw_prediction": "(next.getName()));\n        _prompts.addAll(_prompts);\n    }\n\n    public static void resetDefaultPrompts(Prompts prompts) {\n        Map<String, String> stringStringMap = prompt.asMap();\n        List<Prompt> _",
      "es": 0.7,
      "em": false,
      "passed": false
    },
    {
      "index": 1262,
      "groundtruth": ", phase.getId(), Status.SUCCESS);",
      "prediction": ", phase.getId(), Status.SUCCESS);",
      "raw_prediction": ", phase.getId(), Status.SUCCESS);\n            } catch (InterruptedException e) {\n              LOGGER.error(\"Exception executing phase: \" + phase.getId());\n              writePhaseEvent(phaseStartTime, phase.getId(), Status.FAILURE);\n              throw e;",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1263,
      "groundtruth": "<String> contributionFiles = contributionFilesService.getFiles(start, finish);",
      "prediction": "<File> contributionFiles = contributionFilesService.getContributionFiles(start, finish);",
      "raw_prediction": "<File> contributionFiles = contributionFilesService.getContributionFiles(start, finish);",
      "es": 0.8068181818181819,
      "em": false,
      "passed": false
    },
    {
      "index": 1264,
      "groundtruth": "(task.getCustomTaskExecutor() == null) {",
      "prediction": "(task.getCustomTaskExecutor() == null)",
      "raw_prediction": "(task.getCustomTaskExecutor() == null) {",
      "es": 0.95,
      "em": false,
      "passed": false
    },
    {
      "index": 1265,
      "groundtruth": "contributionFilesService.processFiles(contributionFiles, start, finish, reportFileName);",
      "prediction": "contributionFilesService.generateReport(contributionFiles, reportFileName);",
      "raw_prediction": "contributionFilesService.generateReport(contributionFiles, reportFileName);",
      "es": 0.6818181818181819,
      "em": false,
      "passed": false
    },
    {
      "index": 1266,
      "groundtruth": "(Prompt.of(\"\u6b65\u9aa4\u6ce8\u91ca\", \"\u5e2e\u6211\u7ed9\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\u7684\u5173\u952e\u6b65\u9aa4\u6dfb\u52a0\u6ce8\u91ca\uff0c\u8fd4\u56de\u4f18\u5316\u540e\u7684\u5b8c\u6574\u4ee3\u7801\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{",
      "prediction": "(Prompt.of(\"Explain\", \"\u5e2e\u6211\u589e\u5f3a\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u5427\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{query}\"));",
      "raw_prediction": "(Prompt.of(\"Explain\", \"\u5e2e\u6211\u589e\u5f3a\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u5427\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{query}\"));\n        prompt.add(Prompt.of(\"Explain\",",
      "es": 0.5128205128205128,
      "em": false,
      "passed": false
    },
    {
      "index": 1267,
      "groundtruth": "( getFdcValue(DateUtils.convertXmlGregorianToString(o),true));",
      "prediction": "String.format( (insertComma?FDC_FORMAT_COMMA:FDC_FORMAT),(Objects.nonNull(o)?o:EMPTY_CHARACTE",
      "raw_prediction": "String.format( (insertComma?FDC_FORMAT_COMMA:FDC_FORMAT),(Objects.nonNull(o)?o:EMPTY_CHARACTER)",
      "es": 0.10752688172043012,
      "em": false,
      "passed": false
    },
    {
      "index": 1268,
      "groundtruth": "return fdcFilesService.processFiles(contributionFiles, start, end);",
      "prediction": "return fdcFilesService.processFiles",
      "raw_prediction": "\n        return fdcFilesService.processFiles(\n            contributionFiles,\n            start,\n            end,\n            fdcFilesService.getFileName(start, end)\n        );",
      "es": 0.5223880597014925,
      "em": false,
      "passed": false
    },
    {
      "index": 1269,
      "groundtruth": "Prompt.of(\"emptyForYou\", \"balabala{",
      "prediction": "Prompt.of(\"Explain\", \"\u5e2e\u6211\u589e\u5f3a\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u5427\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{quer",
      "raw_prediction": "Prompt.of(\"Explain\", \"\u5e2e\u6211\u589e\u5f3a\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u5427\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{query}\"));\n        prompts.add(Prompt.of(\"Explain\", \"",
      "es": 0.18571428571428572,
      "em": false,
      "passed": false
    },
    {
      "index": 1270,
      "groundtruth": "form.getGptKey();",
      "prediction": "form.getPr",
      "raw_prediction": "form.getPreferredFocusedComponent();",
      "es": 0.47058823529411764,
      "em": false,
      "passed": false
    },
    {
      "index": 1271,
      "groundtruth": "add(Prompt.of(\"Readable\", \"help me enhance the readability of the following code snippet, without adding any additional information except for the optimized code. Here is the code snippet:{",
      "prediction": "add(Prompt.of(\"Explain\", \"\u5e2e\u6211\u589e\u5f3a\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u5427\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{query}\"));",
      "raw_prediction": "add(Prompt.of(\"Explain\", \"\u5e2e\u6211\u589e\u5f3a\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u5427\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{query}\"));\n        prompts.add(Prompt.of(\"Step Comment",
      "es": 0.12169312169312174,
      "em": false,
      "passed": false
    },
    {
      "index": 1272,
      "groundtruth": ".add(Prompt.of(\"List Steps\", \"help me add comments to the key steps of the following code snippet and return the optimized code with comments. without adding any additional information except for the optimized code. Here is the code snippet:{",
      "prediction": "s.add(Prompt.of(\"Optimize\", \"\u5e2e\u6211\u4f18\u5316\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\uff0c\u8fd4\u56de\u4f18\u5316\u540e\u7684\u5b8c\u6574\u4ee3\u7801\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{",
      "raw_prediction": "s.add(Prompt.of(\"Optimize\", \"\u5e2e\u6211\u4f18\u5316\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\uff0c\u8fd4\u56de\u4f18\u5316\u540e\u7684\u5b8c\u6574\u4ee3\u7801\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{",
      "es": 0.09917355371900827,
      "em": false,
      "passed": false
    },
    {
      "index": 1273,
      "groundtruth": ".add(Prompt.of(\"Explain\", \"\u5e2e\u6211\u589e\u5f3a\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u5427\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{",
      "prediction": ".add(Prompt.of(\"emptyForYou\", \"balabala{query}\"));",
      "raw_prediction": ".add(Prompt.of(\"emptyForYou\", \"balabala{query}\"));\n        prompt.add(Prompt.of(\"Readable\", \"\u5e2e\u6211\u4f18\u5316\u4e0b\u9762\u8fd9\u6bb5\u4ee3\u7801\uff0c\u53ea\u4f18\u5316\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{",
      "es": 0.23943661971830987,
      "em": false,
      "passed": false
    },
    {
      "index": 1274,
      "groundtruth": "(AppSettings.getProject(), \"Test connection failed!\", NotificationType.ERROR);",
      "prediction": "(AppSettings.getProject(), \"Test connection failed!ChatGPT answer:\" + GPTClient.toString(choices), NotificationType.E",
      "raw_prediction": "(AppSettings.getProject(), \"Test connection failed!ChatGPT answer:\" + GPTClient.toString(choices), NotificationType.ERROR);",
      "es": 0.5641025641025641,
      "em": false,
      "passed": false
    },
    {
      "index": 1275,
      "groundtruth": "String, String> stringStringMap = prompts.asMap();",
      "prediction": "String, String> stringStringMap = cloner.deepClone(_prompts).stream().colle",
      "raw_prediction": "String, String> stringStringMap = cloner.deepClone(_prompts).stream().collect(java.util.stream.Collectors.toMap(Prompt::getOption, Prompt::getPrompt));",
      "es": 0.6,
      "em": false,
      "passed": false
    },
    {
      "index": 1276,
      "groundtruth": "gptKeyLink = ActionLinkUtils.newActionLink(\"https://platform.openai.com/account/api-keys\");",
      "prediction": "gptKeyLink = ActionLinkUtils.newActionLink(\"https://platform.openai.com/account/api-keys\");",
      "raw_prediction": "    gptKeyLink = ActionLinkUtils.newActionLink(\"https://platform.openai.com/account/api-keys\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1277,
      "groundtruth": "notifyMessage(AppSettings.getProject(), \"Test connection successfully!ChatGPT answer:\" + GPTClient.toString(choices), NotificationType.INFORMATION);",
      "prediction": "notifyMessage(AppSettings.getProject(), \"Test connection success!\", NotificationType.INFORMATION);",
      "raw_prediction": "notifyMessage(AppSettings.getProject(), \"Test connection success!\", NotificationType.INFORMATION);",
      "es": 0.6621621621621622,
      "em": false,
      "passed": false
    },
    {
      "index": 1278,
      "groundtruth": "= original.clone();",
      "prediction": "= original.clone();",
      "raw_prediction": "= original.clone();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1279,
      "groundtruth": "campaign.getGames().get(id));",
      "prediction": "campaign.getGame());",
      "raw_prediction": "campaign.getGame());",
      "es": 0.6896551724137931,
      "em": false,
      "passed": false
    },
    {
      "index": 1280,
      "groundtruth": "append(\"\\n    <string name=\\\"\" + singleStrings.getId() + \"\\\">\" + singleStrings.getValue() + \"</string>\");",
      "prediction": "append(\"\\n    <string name=\\\"\" + singleStrings.getId() + \"\\\">\" + singleStrings.getValue() + \"</string>\");",
      "raw_prediction": "append(\"\\n    <string name=\\\"\" + singleStrings.getId() + \"\\\">\" + singleStrings.getValue() + \"</string>\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1281,
      "groundtruth": "setBirthYear(customer.getBirthYear());",
      "prediction": "setDateOfBirth(customer.getDateOfBirth());",
      "raw_prediction": "setDateOfBirth(customer.getDateOfBirth());\n                userToUpdate.setPhone(customer.getPhone());",
      "es": 0.5238095238095238,
      "em": false,
      "passed": false
    },
    {
      "index": 1282,
      "groundtruth": "println(user2.getName() +\" is updated to \" + customer.getName());",
      "prediction": "println(\"User is updated.\");",
      "raw_prediction": "println(\"User is updated.\");",
      "es": 0.36923076923076925,
      "em": false,
      "passed": false
    },
    {
      "index": 1283,
      "groundtruth": "if(campaign1.getId()==id){",
      "prediction": "if(campaign1.getId() == id)",
      "raw_prediction": "if(campaign1.getId() == id){",
      "es": 0.8888888888888888,
      "em": false,
      "passed": false
    },
    {
      "index": 1284,
      "groundtruth": "\"\\\"=\\\"\" + string.getValue() + \"\\\";",
      "prediction": "\"\\\" = \\\"\" + string.getId() + \"\\\";\\n\");",
      "raw_prediction": "\"\\\" = \\\"\" + string.getId() + \"\\\";\\n\");\n                }\n               } else {\n            sb.append(\"\\n\\\"\"+fileName + \"_\" + (index++) + \"\\\" = \\\"\" + fileName + \"_\" + (index++) + \"\\\";\\",
      "es": 0.6842105263157895,
      "em": false,
      "passed": false
    },
    {
      "index": 1285,
      "groundtruth": "(campaign.getId() == id){",
      "prediction": "(campaign.getId()==id)",
      "raw_prediction": "(campaign.getId()==id){",
      "es": 0.88,
      "em": false,
      "passed": false
    },
    {
      "index": 1286,
      "groundtruth": "!(customer.getGames().contains(game))){",
      "prediction": "!campaignService.getC",
      "raw_prediction": "!campaignService.getCampaigns().contains(game)){",
      "es": 0.20512820512820518,
      "em": false,
      "passed": false
    },
    {
      "index": 1287,
      "groundtruth": "while (iterator.temProximo()) {",
      "prediction": "while (iterator.hasNext())",
      "raw_prediction": "\twhile (iterator.hasNext()) {",
      "es": 0.6451612903225806,
      "em": false,
      "passed": false
    },
    {
      "index": 1288,
      "groundtruth": ".println(playlist1.execute());",
      "prediction": ".println(playlist1);",
      "raw_prediction": ".println(playlist1);\n\t\tSystem.out.println(playlist2);\n\t\tSystem.out.println(playlist1.getPlaylistItem(1).getPlaylist());",
      "es": 0.6666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 1289,
      "groundtruth": "listener.onChangeMode();",
      "prediction": "listener.notificar();",
      "raw_prediction": "\tlistener.notificar();",
      "es": 0.5416666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 1290,
      "groundtruth": "= playlistItem.execute();",
      "prediction": "= playlistItem.getContent();",
      "raw_prediction": "= playlistItem.getContent();\n\t\tif (content != null) {\n\t\tSystem.out.println(content);\n\t\t} else {\n\t\tSystem.out.println(\"Musica: \" + playlistItem.getMusica().getNome());\n\t\t}",
      "es": 0.75,
      "em": false,
      "passed": false
    },
    {
      "index": 1291,
      "groundtruth": "playlist1.insert(playlist2);",
      "prediction": "playlist1.insert(playlist2);",
      "raw_prediction": "\tplaylist1.insert(playlist2);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1292,
      "groundtruth": "iterator = player.createIterator();",
      "prediction": "iterator = player.createIterator();",
      "raw_prediction": "\t\titerator = player.createIterator();\n\t\t\t\t}else if (numero % 3 == 0){\n\t\t\t\tplayer.setMode(PlayerMode.RepeatOne);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1293,
      "groundtruth": "playlistItem = iterator.proximo();",
      "prediction": "playlistItem = iterator.proximo();",
      "raw_prediction": "playlistItem = iterator.proximo();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1294,
      "groundtruth": "(\"\\n::::::::::::\\nModo: %s, est\u00e1 ativado!\\n\", player.getMode());",
      "prediction": "(\"O modo do player foi alterado para %s%n\", player.getMode());",
      "raw_prediction": "(\"O modo do player foi alterado para %s%n\", player.getMode());\n\t}\n\n",
      "es": 0.4375,
      "em": false,
      "passed": false
    },
    {
      "index": 1295,
      "groundtruth": "player.createIterator();",
      "prediction": "player.createIterator();",
      "raw_prediction": "player.createIterator();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1296,
      "groundtruth": "MessageUtils.showNotify(\"\u8bf7\u9009\u62e9\u5e03\u5c40\u6587\u4ef6\");",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1297,
      "groundtruth": "tokens.addAll(Lexer.tokenize(s));",
      "prediction": "tokens.add(Lexer.tokenize(s));",
      "raw_prediction": " tokens.add(Lexer.tokenize(s));",
      "es": 0.9090909090909091,
      "em": false,
      "passed": false
    },
    {
      "index": 1298,
      "groundtruth": "+ \": \"+ selectedEngineer.getFullNameWithDiscipline() + \": \" + comment + \"#@\";",
      "prediction": "+ \": \" + selectedEngineer.getFullNameWithDiscipline() + \": \" + comment + \"#@\";",
      "raw_prediction": "+ \": \" + selectedEngineer.getFullNameWithDiscipline() + \": \" + comment + \"#@\";",
      "es": 0.9871794871794872,
      "em": false,
      "passed": false
    },
    {
      "index": 1299,
      "groundtruth": "> foundCollision = collisionsRepository.findByIdFetchEngineer(id);",
      "prediction": "> foundCollision = collisionDAO.findByIdAndEngineer(id);",
      "raw_prediction": "> foundCollision = collisionDAO.findByIdAndEngineer(id);",
      "es": 0.7575757575757576,
      "em": false,
      "passed": false
    },
    {
      "index": 1300,
      "groundtruth": "originalEngineer = engineersService.findOne(id);",
      "prediction": "originalEngineer = engineersService.findOne(id);",
      "raw_prediction": "originalEngineer = engineersService.findOne(id);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1301,
      "groundtruth": "\"engineers\", engineersService.findAll());",
      "prediction": "\"engineers\", engineersService.findAll());",
      "raw_prediction": "\"engineers\", engineersService.findAll());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1302,
      "groundtruth": ".findByIdFetchCollisions(engineerDetails.getEngineer().getId());",
      "prediction": ".getEngineerByLogin(engineerDetails.getEngineer().getLogin());",
      "raw_prediction": "    .getEngineerByLogin(engineerDetails.getEngineer().getLogin());",
      "es": 0.625,
      "em": false,
      "passed": false
    },
    {
      "index": 1303,
      "groundtruth": "Optional<Collision> optionalCollision = collisionsRepository.findByIdFetchEngineer(id);",
      "prediction": "Optional<Collision> optionalCollision = collisionsRepository.findByIdFetchEngineer(id);",
      "raw_prediction": "Optional<Collision> optionalCollision = collisionsRepository.findByIdFetchEngineer(id);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1304,
      "groundtruth": "= engineersService.findByIdFetchCollisions(id);",
      "prediction": "= engineersService.findOne(id);",
      "raw_prediction": "= engineersService.findOne(id);",
      "es": 0.6170212765957447,
      "em": false,
      "passed": false
    },
    {
      "index": 1305,
      "groundtruth": "\"engineer\", engineersService.findOne(id));",
      "prediction": "\"engineer\", engineersService.findOne(id));",
      "raw_prediction": "\"engineer\", engineersService.findOne(id));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1306,
      "groundtruth": "collisionsRepository.findByIdFetchEngineer(id).ifPresent(\n                collision -> {",
      "prediction": "collisionsRepository.findByIdFetchEngineer(id)",
      "raw_prediction": " collisionsRepository.findByIdFetchEngineer(id).ifPresent(\n             collision -> {\n            collision.setEngineer(null);\n            collision.setComment(null);\n            collision.setFake(false);",
      "es": 0.5227272727272727,
      "em": false,
      "passed": false
    },
    {
      "index": 1307,
      "groundtruth": "(engineerDAO.index());",
      "prediction": "(engineersRepository.findAll());",
      "raw_prediction": "(engineersRepository.findAll());",
      "es": 0.53125,
      "em": false,
      "passed": false
    },
    {
      "index": 1308,
      "groundtruth": "model.addAttribute(\"comments\", collision.getComments());",
      "prediction": "model.addAttribute(\"project\", projectService.findOne(project_id));",
      "raw_prediction": "model.addAttribute(\"project\", projectService.findOne(project_id));",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 1309,
      "groundtruth": "= collisionsService.findOneAndEngineer(id);",
      "prediction": "= collisionsService.findOne(id);",
      "raw_prediction": "= collisionsService.findOne(id);",
      "es": 0.7441860465116279,
      "em": false,
      "passed": false
    },
    {
      "index": 1310,
      "groundtruth": "(id, engineerDetails.getEngineer(), comment);",
      "prediction": "(id, comment, engineerDetail.getEngineer());",
      "raw_prediction": "(id, comment, engineerDetail.getEngineer());\n        return \"redirect:/projects/\" + project_id + \"/collisions/\" + id;\n    }\n\n    @PostMapping(\"/upload\")\n    public String uploadCollisionsReport(@RequestParam(\"file\")",
      "es": 0.5777777777777777,
      "em": false,
      "passed": false
    },
    {
      "index": 1311,
      "groundtruth": "Engineer> foundEngineer = engineersRepository.findByIdFetchCollisions(id);",
      "prediction": "Engineer> foundEngineer = engineersRepository.findById(id);",
      "raw_prediction": "Engineer> foundEngineer = engineersRepository.findById(id);",
      "es": 0.7972972972972973,
      "em": false,
      "passed": false
    },
    {
      "index": 1312,
      "groundtruth": "handle = getHandle(mapper.getLayout(target.getClass()));",
      "prediction": "handle = getHandle(mapper.getLayout(model.type()));",
      "raw_prediction": "    handle = getHandle(mapper.getLayout(model.type()));\n            }\n            field.set(target, handle);\n        }else if(fieldType.equals(MemorySegment.class)){\n            field.set(target, segmentForField(mapper, target, segment);\n",
      "es": 0.7857142857142857,
      "em": false,
      "passed": false
    },
    {
      "index": 1313,
      "groundtruth": "mapper.getLayout(target.getClass()).byteOffset(MemoryLayout.PathElement.groupElement(model.name()));",
      "prediction": "mapper.getOffset(target.getClass(), model.name());",
      "raw_prediction": "mapper.getOffset(target.getClass(), model.name());",
      "es": 0.43000000000000005,
      "em": false,
      "passed": false
    },
    {
      "index": 1314,
      "groundtruth": "var structDef = mapper.getOrDefineStruct(fieldType);",
      "prediction": "var structDef = mapper.getStructDef(fieldType);",
      "raw_prediction": "var structDef = mapper.getStructDef(fieldType);",
      "es": 0.7884615384615384,
      "em": false,
      "passed": false
    },
    {
      "index": 1315,
      "groundtruth": "instance.getCore().debug(\"Plugin is not setup / ProxyProtocol is off / Player is on DirectConnectWhitelist (return)\");",
      "prediction": "channel.close();",
      "raw_prediction": "channel.close();\n                    instance.getCore().debug(\"Player connected over IP (\" + channel.remoteAddress() + \") doesn't match to Neo-IPs (warning)\");",
      "es": 0.10169491525423724,
      "em": false,
      "passed": false
    },
    {
      "index": 1316,
      "groundtruth": "instance.getCore().debug(\"Adding Handler...\");",
      "prediction": "instance.getCore().debug(\"Injecting the handler to the server channel (\" + channel.remoteAdd",
      "raw_prediction": "instance.getCore().debug(\"Injecting the handler to the server channel (\" + channel.remoteAddress() + \")\");",
      "es": 0.40217391304347827,
      "em": false,
      "passed": false
    },
    {
      "index": 1317,
      "groundtruth": ".getEventManager(), neoProtectVelocity.getLogger()));",
      "prediction": "));",
      "raw_prediction": "));\n    }\n\n    private void removePlayer(Player player) {\n        ConnectedPlayer p = (ConnectedPlayer) player;\n        Channel channel = p.getConnection().getChannel();\n        channel.eventLoop().submit(() -> channel.pipeline().remove(\"packetevents",
      "es": 0.05660377358490565,
      "em": false,
      "passed": false
    },
    {
      "index": 1318,
      "groundtruth": "core.severe(exception.getMessage(), exception);",
      "prediction": "core.severe(request + \" failed cause (\" + exception + \")\");",
      "raw_prediction": "core.severe(request + \" failed cause (\" + exception + \")\");",
      "es": 0.5254237288135593,
      "em": false,
      "passed": false
    },
    {
      "index": 1319,
      "groundtruth": "instance.getCore().debug(\"Player connected over IP (\" + channel.remoteAddress() + \") doesn't match to Neo-IPs (warning)\");",
      "prediction": "} else if (instance.getCore().isSetup() && instance.getCore().getRestAPI().getNeoServerIPs().toList().stream().noneMatch(ipRange -> isIPInRange((String) ipRange, ((InetSocketAddress)",
      "raw_prediction": "} else if (instance.getCore().isSetup() && instance.getCore().getRestAPI().getNeoServerIPs().toList().stream().noneMatch(ipRange -> isIPInRange((String) ipRange, ((InetSocketAddress)",
      "es": 0.27472527472527475,
      "em": false,
      "passed": false
    },
    {
      "index": 1320,
      "groundtruth": "core.severe(\"Failed to load API-Key. Key is null or not valid\");",
      "prediction": "if (APIKey.length() != 64) {",
      "raw_prediction": "if (APIKey.length() != 64) {\n            core.severe(\"Failed to load API-key. Key is invalid\");",
      "es": 0.203125,
      "em": false,
      "passed": false
    },
    {
      "index": 1321,
      "groundtruth": "instance.getCore().severe(\"Cannot inject incoming channel \" + channel, ex);",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1322,
      "groundtruth": "core.info(\"BackendID loaded successful '\" + backendID + \"'\");",
      "prediction": "core.info(\"BackendID loaded successful '\" + backendID + \"'\");",
      "raw_prediction": "core.info(\"BackendID loaded successful '\" + backendID + \"'\");\n        core.info(\"GeyserBackendID loaded successful '\" + geyserBackendID + \"'\");\n        core.info(\"UpdateIP loaded successful '\" + updateIP + \"'\");\n       ",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1323,
      "groundtruth": "core.severe(\"Failed to load GameshieldID. ID is null\");",
      "prediction": "core.severe(\"Failed to load GameshieldID. ID is null\");",
      "raw_prediction": "core.severe(\"Failed to load GameshieldID. ID is null\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1324,
      "groundtruth": "core.info(\"API-Key loaded successful '\" + \"******************************\" + APIKey.substring(32) + \"'\");",
      "prediction": "core.info(\"API-Key loaded successful '\" + APIKey + \"'\");",
      "raw_prediction": "core.info(\"API-Key loaded successful '\" + APIKey + \"'\");",
      "es": 0.5333333333333333,
      "em": false,
      "passed": false
    },
    {
      "index": 1325,
      "groundtruth": "core.info(\"GameshieldID loaded successful '\" + gameShieldID + \"'\");",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1326,
      "groundtruth": ".equals(core.getRestAPI().getStatsServer())) {",
      "prediction": ".contains(\"https://api.neoprotect.net/v2\")",
      "raw_prediction": ".contains(\"https://api.neoprotect.net/v2\")) {",
      "es": 0.17391304347826086,
      "em": false,
      "passed": false
    },
    {
      "index": 1327,
      "groundtruth": "(Config.getAPIKey());",
      "prediction": "();",
      "raw_prediction": "();",
      "es": 0.1428571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 1328,
      "groundtruth": "instance.getCore().severe(\"Error: The server was unable to set the IP address from the 'HAProxyMessage'. Therefore we closed the channel.\", exception);",
      "prediction": "instance.getCore().severe(\"Cannot inject incoming channel \" + channel, exception);",
      "raw_prediction": "instance.getCore().severe(\"Cannot inject incoming channel \" + channel, exception);",
      "es": 0.41721854304635764,
      "em": false,
      "passed": false
    },
    {
      "index": 1329,
      "groundtruth": "instance.getCore().info(\"Proceeding with the server channel injection...\");",
      "prediction": "instance.getCore().debug(\"Injecting server channel...\");",
      "raw_prediction": "   instance.getCore().debug(\"Injecting server channel...\");",
      "es": 0.6,
      "em": false,
      "passed": false
    },
    {
      "index": 1330,
      "groundtruth": "instance.getCore().info(\"Late bind injection successful.\");",
      "prediction": "instance.getCore().info(\"Server channel injection successfully!\");",
      "raw_prediction": "instance.getCore().info(\"Server channel injection successfully!\");",
      "es": 0.7878787878787878,
      "em": false,
      "passed": false
    },
    {
      "index": 1331,
      "groundtruth": "Reflection.getField(serverConnection.getClass(), List.class, i).get(serverConnection);",
      "prediction": "networkManagers.get(i);",
      "raw_prediction": "networkManagers.get(i);",
      "es": 0.18604651162790697,
      "em": false,
      "passed": false
    },
    {
      "index": 1332,
      "groundtruth": "instance.getCore().info(\"Delaying server channel injection due to late bind.\");",
      "prediction": "instance.getCore().info(\"Late bind detected, attempting to inject server channel...\");",
      "raw_prediction": "    instance.getCore().info(\"Late bind detected, attempting to inject server channel...\");",
      "es": 0.4883720930232558,
      "em": false,
      "passed": false
    },
    {
      "index": 1333,
      "groundtruth": "this.instance.getCore().info(\"Found the server channel and added the handler. Injection successfully!\");",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1334,
      "groundtruth": "if (instance.getCore().isPlayerMaintainer(player.getUniqueId(), instance.getServer().getOnlineMode())) {",
      "prediction": "if (instance.getCore().isSetup() && instance.getCore().getRestAPI().getPlan().equals(\"FREE\"))",
      "raw_prediction": "if (instance.getCore().isSetup() && instance.getCore().getRestAPI().getPlan().equals(\"FREE\")) {",
      "es": 0.4326923076923077,
      "em": false,
      "passed": false
    },
    {
      "index": 1335,
      "groundtruth": "instance.getCore().isPlayerMaintainer(player.getUniqueId(), instance.getProxy().getConfiguration().isOnlineMode())) {",
      "prediction": "instance.getCore().isSetup() && instance.getCore().getPlayer",
      "raw_prediction": "instance.getCore().isSetup() && instance.getCore().getPlayerInSetup().contains(player.getUniqueId())) {\n                instance.sendMessage(player, localization.get(locale, \"setup.in-progress\"));\n            instance.sendMessage(player, localization.get(locale, \"setup.in",
      "es": 0.3931623931623932,
      "em": false,
      "passed": false
    },
    {
      "index": 1336,
      "groundtruth": ".forLanguageTag(Config.getLanguage()), new File(\"plugins/NeoProtect/languages/\"));",
      "prediction": ".ENGLISH);",
      "raw_prediction": ".ENGLISH);\n        localization.addLanguage(\"language_en.properties\", languageEN);\n        localization.addLanguage(\"language_de.properties\", languageDE);\n        localization.addLanguage(\"language_ru.properties\", languageRU);\n        localization.addLanguage(\"language_ua.properties",
      "es": 0.04878048780487809,
      "em": false,
      "passed": false
    },
    {
      "index": 1337,
      "groundtruth": ").isPlayerMaintainer(player.getUniqueId(), instance.getProxy().getConfiguration().isOnlineMode())) {",
      "prediction": ").isSetup() && instance.getCore().getPlayerInSetup().contains(",
      "raw_prediction": ").isSetup() && instance.getCore().getPlayerInSetup().contains(player.getUniqueId())) {\n             instance.sendMessage(player, localization.get(locale, \"setup.in-progress\"));\n            instance.sendMessage(player, localization.get(locale, \"setup.in-progress.second\"));\n",
      "es": 0.32999999999999996,
      "em": false,
      "passed": false
    },
    {
      "index": 1338,
      "groundtruth": "\"NeoProtect\", \"NeoPlugin\", \"v\" + plugin.getPluginVersion(), VersionUtils.UpdateSetting.DISABLED).message();",
      "prediction": "plugin.getDescription().getVersion());",
      "raw_prediction": "plugin.getDescription().getVersion());",
      "es": 0.2149532710280374,
      "em": false,
      "passed": false
    },
    {
      "index": 1339,
      "groundtruth": "return restAPIRequests.isSetup();",
      "prediction": "return Config.isSetup();",
      "raw_prediction": "    return Config.isSetup();",
      "es": 0.5454545454545454,
      "em": false,
      "passed": false
    },
    {
      "index": 1340,
      "groundtruth": "(Config.isDebugMode()) ((Logger) LogManager.getLogger().logger).log(Level.SEVERE, output);",
      "prediction": "(isDebugRunning) {",
      "raw_prediction": "(isDebugRunning) {\n            LogManager.getLogger().info(output);\n        }",
      "es": 0.1333333333333333,
      "em": false,
      "passed": false
    },
    {
      "index": 1341,
      "groundtruth": "instance.getCore().getDebugPingResponses().put(player.getName(), new ArrayList<>());",
      "prediction": "map.put(player.getName(), new ArrayList<DebugPingResponse>());",
      "raw_prediction": " map.put(player.getName(), new ArrayList<DebugPingResponse>());\n            }",
      "es": 0.3214285714285714,
      "em": false,
      "passed": false
    },
    {
      "index": 1342,
      "groundtruth": "instance.getCore().getPingMap().remove(keepAliveResponseKey);",
      "prediction": "pingMap.remove(keepAliveResponseKey);",
      "raw_prediction": "\n                pingMap.remove(keepAliveResponseKey);\n                }",
      "es": 0.5901639344262295,
      "em": false,
      "passed": false
    },
    {
      "index": 1343,
      "groundtruth": ".request(RequestType.GET_GAMESHIELD_BANDWIDTH, null, Config.getGameShieldID()).getResponseBodyObject();",
      "prediction": "get",
      "raw_prediction": " get",
      "es": 0.029126213592232997,
      "em": false,
      "passed": false
    },
    {
      "index": 1344,
      "groundtruth": "POST_GAMESHIELD_BACKEND_UPDATE, requestBody, Config.getGameShieldID(),backendID).checkCode(200);",
      "prediction": "POSTBackend, requestBody, Config.getBackendID()).checkCode(200);",
      "raw_prediction": "POSTBackend, requestBody, Config.getBackendID()).checkCode(200);",
      "es": 0.5625,
      "em": false,
      "passed": false
    },
    {
      "index": 1345,
      "groundtruth": "(isAPIInvalid(Config.getAPIKey())) {",
      "prediction": "isAPIInvalid(Config.getAPIKey())",
      "raw_prediction": " isAPIInvalid(Config.getAPIKey())) {",
      "es": 0.8888888888888888,
      "em": false,
      "passed": false
    },
    {
      "index": 1346,
      "groundtruth": ".request(RequestType.GET_GAMESHIELD_ISUNDERATTACK, null, Config.getGameShieldID()).getResponseBody().equals(\"true\");",
      "prediction": "e",
      "raw_prediction": "e",
      "es": 0.008620689655172376,
      "em": false,
      "passed": false
    },
    {
      "index": 1347,
      "groundtruth": "Config.getGameShieldID());",
      "prediction": "Config.getGameShieldID()).checkCode(200);",
      "raw_prediction": "Config.getGameShieldID()).checkCode(200);",
      "es": 0.6341463414634146,
      "em": false,
      "passed": false
    },
    {
      "index": 1348,
      "groundtruth": "if (Config.isUpdateIP()) {",
      "prediction": "public void tes",
      "raw_prediction": "\n    public void testCredentials() {",
      "es": 0.15384615384615385,
      "em": false,
      "passed": false
    },
    {
      "index": 1349,
      "groundtruth": "setProxyProtocol(Config.isProxyProtocol());",
      "prediction": "core.info(\"API is valid!\");",
      "raw_prediction": " core.info(\"API is valid!\");",
      "es": 0.16279069767441856,
      "em": false,
      "passed": false
    },
    {
      "index": 1350,
      "groundtruth": "Config.addAutoUpdater(getPlan().equalsIgnoreCase(\"Basic\"));",
      "prediction": "core.info(\"API is valid\");",
      "raw_prediction": "core.info(\"API is valid\");",
      "es": 0.2033898305084746,
      "em": false,
      "passed": false
    },
    {
      "index": 1351,
      "groundtruth": "Config.getGameShieldID()).getCode();",
      "prediction": "Config Config.getGameShieldID()).getCode();",
      "raw_prediction": " Config Config.getGameShieldID()).getCode();",
      "es": 0.8372093023255813,
      "em": false,
      "passed": false
    },
    {
      "index": 1352,
      "groundtruth": "core.severe(\"Gameshield is not valid! Please run /neoprotect setgameshield to set the gameshield\");",
      "prediction": "core.severe(\"GameShield is not valid! Please run /neoprotect setgameshield to set the game shield\");",
      "raw_prediction": " core.severe(\"GameShield is not valid! Please run /neoprotect setgameshield to set the game shield\");",
      "es": 0.98,
      "em": false,
      "passed": false
    },
    {
      "index": 1353,
      "groundtruth": "core.severe(\"API is not valid! Please run /neoprotect setup to set the API Key\");",
      "prediction": "core.severe(\"API is not valid! Please run /neoprotect setapikey to set the api key\");",
      "raw_prediction": "core.severe(\"API is not valid! Please run /neoprotect setapikey to set the api key\");",
      "es": 0.8941176470588236,
      "em": false,
      "passed": false
    },
    {
      "index": 1354,
      "groundtruth": "null, Config.getGameShieldID()).getResponseBodyArray();",
      "prediction": "null, Config.getGameShieldID()).getResponseBodyArray();",
      "raw_prediction": "null, Config.getGameShieldID()).getResponseBodyArray();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1355,
      "groundtruth": "Config.setGeyserBackendID(args[1]);",
      "prediction": "private void debugT",
      "raw_prediction": "\n    private void debugTool(String[] args) {\n        if (instance.getPluginType() == NeoProtectPlugin.PluginType.SPIGOT) {\n        instance.sendMessage(sender, localization.get(locale, \"debug.spigot\"));\n        return",
      "es": 0.1428571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 1356,
      "groundtruth": "Config.setBackendID(args[1]);",
      "prediction": "Config.setJavaBackendID(args[1]);",
      "raw_prediction": "Config.setJavaBackendID(args[1]);",
      "es": 0.8787878787878788,
      "em": false,
      "passed": false
    },
    {
      "index": 1357,
      "groundtruth": "int response = instance.getCore().getRestAPI().toggle(args[1]);",
      "prediction": "int response = instance.getCore().getRestAPI().toggle(args[1]);",
      "raw_prediction": "    int response = instance.getCore().getRestAPI().toggle(args[1]);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1358,
      "groundtruth": "getBackends().stream().noneMatch(e -> e.compareById(backendID));",
      "prediction": "return false;",
      "raw_prediction": "\n        return false;",
      "es": 0.125,
      "em": false,
      "passed": false
    },
    {
      "index": 1359,
      "groundtruth": "= instance.getCore().getRestAPI().getTraffic();",
      "prediction": "= analytics.getJSONObject(\"traffic\");",
      "raw_prediction": "= analytics.getJSONObject(\"traffic\");",
      "es": 0.4042553191489362,
      "em": false,
      "passed": false
    },
    {
      "index": 1360,
      "groundtruth": "Config.setGameShieldID(args[1]);",
      "prediction": "Config.setGameShieldID(args[1]);",
      "raw_prediction": "Config.setGameShieldID(args[1]);\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1361,
      "groundtruth": "instance.sendMessage(sender, \"\u00a77\u00a7l----- \u00a7bFirewall (\" + args[0].toUpperCase() + \")\u00a77\u00a7l -----\");",
      "prediction": "instance.sendMessage(sender, localization.get(locale, \"usage.firewall\"));",
      "raw_prediction": "instance.sendMessage(sender, localization.get(locale, \"usage.firewall\"));",
      "es": 0.43157894736842106,
      "em": false,
      "passed": false
    },
    {
      "index": 1362,
      "groundtruth": "Config.setAPIKey(msg);",
      "prediction": "if (instance.getCore().getRestAPI().isAPIInv",
      "raw_prediction": " if (instance.getCore().getRestAPI().isAPIInvalid(msg)) {\n            instance.sendMessage(sender, localization.get(locale, \"apikey.invalid\"));\n            return;\n        }",
      "es": 0.18181818181818177,
      "em": false,
      "passed": false
    },
    {
      "index": 1363,
      "groundtruth": "(instance.getPluginType() == NeoProtectPlugin.PluginType.SPIGOT) {",
      "prediction": "args.length == 1) {",
      "raw_prediction": "args.length == 1) {",
      "es": 0.16666666666666663,
      "em": false,
      "passed": false
    },
    {
      "index": 1364,
      "groundtruth": "instance.getCore().severe(ex.getMessage(), ex);",
      "prediction": "instance.sendMessage(sender, localization.get(locale, \"err.debug\"), \"OPEN_URL\", \"https://githu",
      "raw_prediction": " instance.sendMessage(sender, localization.get(locale, \"err.debug\"), \"OPEN_URL\", \"https://github.com/CubeAttack/NeoProtect/issues\", null, null);",
      "es": 0.24468085106382975,
      "em": false,
      "passed": false
    },
    {
      "index": 1365,
      "groundtruth": "response = instance.getCore().getRestAPI().updateFirewall(ip, action, mode);",
      "prediction": "response = instance.getCore().getRestAPI().toggle(args[1], args[2], action);",
      "raw_prediction": "response = instance.getCore().getRestAPI().toggle(args[1], args[2], action);",
      "es": 0.6578947368421053,
      "em": false,
      "passed": false
    },
    {
      "index": 1366,
      "groundtruth": "instance.getCore().getDirectConnectWhitelist().add(args[1]);",
      "prediction": "instance.getCore().getRestAPI().",
      "raw_prediction": " instance.getCore().getRestAPI().updateDirectConnectWhitelist(args[1], args[0].equalsIgnoreCase(\"add\") ? 1 : 0);",
      "es": 0.44999999999999996,
      "em": false,
      "passed": false
    },
    {
      "index": 1367,
      "groundtruth": "(\"general.ProxyPlugins\", instance.getPlugins());",
      "prediction": "(\"general.ProxyIP\", stat.getProxyIp());",
      "raw_prediction": "(\"general.ProxyIP\", stat.getProxyIp());\n            configuration.set(\"general.ProxyPort\", stat.getProxyPort());\n            configuration.set(\"general.ProxyUUID\", stat.getProxyUuid());\n            configuration.set(\"general.ProxyVersion\", stat.getProxyVersion",
      "es": 0.625,
      "em": false,
      "passed": false
    },
    {
      "index": 1368,
      "groundtruth": "if (instance.getCore().getRestAPI().isAPIInvalid(msg)) {",
      "prediction": "if (msg == null) {",
      "raw_prediction": " if (msg == null) {\n            instance.sendMessage(sender, localization.get(locale, \"apikey.required\"));\n            return;\n        }\n\n        if (msg.length() != 32) {",
      "es": 0.1964285714285714,
      "em": false,
      "passed": false
    },
    {
      "index": 1369,
      "groundtruth": "instance.getCore().setDebugRunning(false);",
      "prediction": "instance.sendMessage(sender, localization.get(locale, \"debug.cancelled\"));",
      "raw_prediction": "instance.sendMessage(sender, localization.get(locale, \"debug.cancelled\"));\n                return;\n            }\n\n            if (args[1].equals(\"cancel\")) {",
      "es": 0.29729729729729726,
      "em": false,
      "passed": false
    },
    {
      "index": 1370,
      "groundtruth": "instance.getCore().isDebugRunning()) {",
      "prediction": "instance.getCore().is",
      "raw_prediction": "instance.getCore().isDebugRunning()) {",
      "es": 0.5526315789473684,
      "em": false,
      "passed": false
    },
    {
      "index": 1371,
      "groundtruth": "instance.getCore().getPlayerInSetup().add(sender);",
      "prediction": "if (instance.getCore().isSetup())",
      "raw_prediction": "if (instance.getCore().isSetup()) {\n            instance.sendMessage(sender, localization.get(locale, \"setup.already\"));\n            return;\n        }\n\n        instance.getCore().setSetup(true);\n        instance.sendMessage(sender, localization.get(locale, \"",
      "es": 0.45999999999999996,
      "em": false,
      "passed": false
    },
    {
      "index": 1372,
      "groundtruth": ", instance.getCore().getRestAPI().togglePanicMode() ? \"utils.activated\" : \"utils.deactivated\")));",
      "prediction": ", \"utils.click\"), \"RUN_COMMAND\", \"/np ipanic\", \"SHOW_TEXT\", localization.get(locale, \"hover.ipanic\"));",
      "raw_prediction": ", \"utils.click\"), \"RUN_COMMAND\", \"/np ipanic\", \"SHOW_TEXT\", localization.get(locale, \"hover.ipanic\"));\n        }",
      "es": 0.16666666666666663,
      "em": false,
      "passed": false
    },
    {
      "index": 1373,
      "groundtruth": "instance.sendMessage(sender, \"\u00a77\u00a7l--------- \u00a7bAnalytics \u00a77\u00a7l---------\");",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1374,
      "groundtruth": "instance.getCore().getDebugPingResponses().clear();",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1375,
      "groundtruth": "instance.sendMessage(sender, \"\u00a7cCan not found setting '\" + args[1] + \"'\");",
      "prediction": "instance.sendMessage(sender, localization.get(locale, \"err.unknown\"));",
      "raw_prediction": " instance.sendMessage(sender, localization.get(locale, \"err.unknown\"));",
      "es": 0.5405405405405406,
      "em": false,
      "passed": false
    },
    {
      "index": 1376,
      "groundtruth": "instance.getCore().setDebugRunning(true);",
      "prediction": "",
      "raw_prediction": "\n",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1377,
      "groundtruth": "instance.sendMessage(sender, \" - /np analytics\");",
      "prediction": "instance.sendMessage(sender, \" - /np analytics\");",
      "raw_prediction": "instance.sendMessage(sender, \" - /np analytics\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1378,
      "groundtruth": "List<Gameshield> gameshieldList = instance.getCore().getRestAPI().getGameshields();",
      "prediction": "List<Gameshield> gameshieldList = instance.getCore().getRestAPI().getGameshield();",
      "raw_prediction": "List<Gameshield> gameshieldList = instance.getCore().getRestAPI().getGameshield();",
      "es": 0.9879518072289156,
      "em": false,
      "passed": false
    },
    {
      "index": 1379,
      "groundtruth": "instance.getCore().getDebugPingResponses().keySet().forEach((playerName -> {",
      "prediction": "configuration.set(\"general.ProxyIP\", stat.getProxyIp());",
      "raw_prediction": " configuration.set(\"general.ProxyIP\", stat.getProxyIp());\n                configuration.set(\"general.ProxyPort\", stat.getProxyPort());\npublic configuration.set(\"general.ProxyVersion\", stat.getProxyVersion());\npublic configuration.set(\"general.ProxyPlugins\", stat.get",
      "es": 0.1578947368421053,
      "em": false,
      "passed": false
    },
    {
      "index": 1380,
      "groundtruth": "instance.getCore().getRestAPI().isGameshieldInvalid(args[1])) {",
      "prediction": "instance.getCore().getRestAPI().i",
      "raw_prediction": "instance.getCore().getRestAPI().isGameShieldInvalid(args[1])) {",
      "es": 0.5238095238095238,
      "em": false,
      "passed": false
    },
    {
      "index": 1381,
      "groundtruth": "List<DebugPingResponse> list = instance.getCore().getDebugPingResponses().get(playerName);",
      "prediction": "List<DebugPingResponse> list = instance.getCore().getDebugPingResponses().get(playerName);",
      "raw_prediction": " List<DebugPingResponse> list = instance.getCore().getDebugPingResponses().get(playerName);\n                            if (list.isEmpty()) {\n                                return;\n                            }",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1382,
      "groundtruth": "instance.getCore().getRestAPI().getAnalytics().keySet().forEach(ak -> {",
      "prediction": "analytics.keySet().forEach(ak -> {",
      "raw_prediction": "analytics.keySet().forEach(ak -> {",
      "es": 0.47887323943661975,
      "em": false,
      "passed": false
    },
    {
      "index": 1383,
      "groundtruth": "instance.sendMessage(sender, \" - /np toggle (option)\");",
      "prediction": "instance.sendMessage(sender, \" - /np toggle (setting)\");",
      "raw_prediction": "instance.sendMessage(sender, \" - /np toggle (setting)\");\n        instance.sendMessage(sender, \" - /np setgameshield [id]\");\n        instance.sendMessage(sender, \" - /np setbackend [id]\");\n        instance.sendMessage(sender, \"",
      "es": 0.9107142857142857,
      "em": false,
      "passed": false
    },
    {
      "index": 1384,
      "groundtruth": "backendList = instance.getCore().getRestAPI().getBackends();",
      "prediction": "backendList = instance.getCore().getRestAPI().getBackends();",
      "raw_prediction": "backendList = instance.getCore().getRestAPI().getBackends();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1385,
      "groundtruth": "instance.sendMessage(sender, \" - /np debugTool (cancel / amount)\");",
      "prediction": "instance.sendMessage(sender, \" - /np debugtool [amount]\");",
      "raw_prediction": "instance.sendMessage(sender, \" - /np debugtool [amount]\");",
      "es": 0.8208955223880597,
      "em": false,
      "passed": false
    },
    {
      "index": 1386,
      "groundtruth": "instance.sendMessage(sender, \" - /np setup\");",
      "prediction": "instance.sendMessage(sender, \" - /np setup\");",
      "raw_prediction": "instance.sendMessage(sender, \" - /np setup\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1387,
      "groundtruth": "instance.getCore().getPlayerInSetup().remove(sender)) {",
      "prediction": "instance.getCore().getRestAPI",
      "raw_prediction": "instance.getCore().getRestAPI().testCredentials()) {",
      "es": 0.4363636363636364,
      "em": false,
      "passed": false
    },
    {
      "index": 1388,
      "groundtruth": "instance.getCore().getRestAPI().testCredentials();",
      "prediction": "if (instance.getCore().getPlayerInSetup().remove(sender))",
      "raw_prediction": " if (instance.getCore().getPlayerInSetup().remove(sender)) {\n        instance.sendMessage(sender, localization.get(locale, \"setup.finished\"));\n        }\n\n    }\n\n    private void bedrockBackendSelector() {\n        instance.sendMessage(sender, localization.get(locale",
      "es": 0.49122807017543857,
      "em": false,
      "passed": false
    },
    {
      "index": 1389,
      "groundtruth": "instance.sendMessage(sender, \" - /np whitelist (add/remove) (ip)\");",
      "prediction": "import de.cubeattack.api.language.Localization;",
      "raw_prediction": "\nimport de.cubeattack.api.language.Localization;\n",
      "es": 0.14925373134328357,
      "em": false,
      "passed": false
    },
    {
      "index": 1390,
      "groundtruth": "instance.sendMessage(sender, \" - /np directConnectWhitelist (ip)\");",
      "prediction": "instance.sendMessage(sender, \" - /np directconnectwhitelist (add) (ip)\");",
      "raw_prediction": "instance.sendMessage(sender, \" - /np directconnectwhitelist (add) (ip)\");",
      "es": 0.8904109589041096,
      "em": false,
      "passed": false
    },
    {
      "index": 1391,
      "groundtruth": "instance.sendMessage(sender, \" - /np setgameshield [id]\");",
      "prediction": "instance.sendMessage(sender, \" - /np setgameshield [id]\");",
      "raw_prediction": "instance.sendMessage(sender, \" - /np setgameshield [id]\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1392,
      "groundtruth": "if(backend.isGeyser())continue;",
      "prediction": "instance.sendMess",
      "raw_prediction": " instance.sendMessage(sender, \"\u00a75\" + backend.getIp() + \":\" + backend.getPort() + localization.get(locale, \"utils.click\"),\npublic \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \" \"",
      "es": 0.22580645161290325,
      "em": false,
      "passed": false
    },
    {
      "index": 1393,
      "groundtruth": ".get(locale, \"hover.backend\", backend.getIp(), backend.getPort(), backend.getId()));",
      "prediction": ".get(locale, \"hover.backend\", backend.getIp(), backend.getPort(), backend.getId()));",
      "raw_prediction": ".get(locale, \"hover.backend\", backend.getIp(), backend.getPort(), backend.getId()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1394,
      "groundtruth": "gameshield.getName(), gameshield.getId()));",
      "prediction": "gamehield.getName(), gamehield.getId()));",
      "raw_prediction": "gamehield.getName(), gamehield.getId()));",
      "es": 0.9534883720930233,
      "em": false,
      "passed": false
    },
    {
      "index": 1395,
      "groundtruth": "Component.text(core.getPrefix() + text);",
      "prediction": "Component.text(text);",
      "raw_prediction": "Component.text(text);",
      "es": 0.525,
      "em": false,
      "passed": false
    },
    {
      "index": 1396,
      "groundtruth": "set(\"general.pluginVersion\", stats.getPluginVersion());",
      "prediction": "set(\"general.ProxyName\", stat.getServerName());",
      "raw_prediction": "set(\"general.ProxyName\", stat.getServerName());\n            configuration.set(\"general.ProxyVersion\", stat.getServerVersion());\n \" configuration.set(\"general.ProxyPlugins\", instance.getPlugins());\n\n            instance.getCore().getDebugPingResponses().keySet().forEach",
      "es": 0.5454545454545454,
      "em": false,
      "passed": false
    },
    {
      "index": 1397,
      "groundtruth": "\"general.ProxyVersion\", stats.getServerVersion());",
      "prediction": "\"general.ProxyVersion\", stat.getProxyVersion());",
      "raw_prediction": "\"general.ProxyVersion\", stat.getProxyVersion());\n            configuration.set(\"general.ProxyPlugins\", stat.getProxyPlugins());\n",
      "es": 0.88,
      "em": false,
      "passed": false
    },
    {
      "index": 1398,
      "groundtruth": ", stats.getServerName());",
      "prediction": ", stats.getServerName());",
      "raw_prediction": ", stats.getServerName());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1399,
      "groundtruth": "), gameshield.getId()));",
      "prediction": "), gamehield.getId()));",
      "raw_prediction": "), gamehield.getId()));",
      "es": 0.9583333333333334,
      "em": false,
      "passed": false
    },
    {
      "index": 1400,
      "groundtruth": "product.setDescription(\"\u042d\u0442\u043e \u0432\u0430\u0448\u0435 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435!\");",
      "prediction": "product.setDescription(\"\u042d\u0442\u043e \u0432\u0430\u0448\u0435 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435!\");",
      "raw_prediction": "product.setDescription(\"\u042d\u0442\u043e \u0432\u0430\u0448\u0435 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435!\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1401,
      "groundtruth": "setEmail(user.getEmail());",
      "prediction": "setPassword(user.getPassword());",
      "raw_prediction": "setPassword(user.getPassword());",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 1402,
      "groundtruth": "existUser.setRole(user.getRole());",
      "prediction": "existUser.setRole(user.getRole());",
      "raw_prediction": "existUser.setRole(user.getRole());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1403,
      "groundtruth": "(user.getRole().equals(\"ADMIN\")) {",
      "prediction": "(user.getRole().equals(\"admin\"))",
      "raw_prediction": "(user.getRole().equals(\"admin\")) {",
      "es": 0.7941176470588236,
      "em": false,
      "passed": false
    },
    {
      "index": 1404,
      "groundtruth": "if (product.getCreatedBy().getId().equals(currentUserId)) {",
      "prediction": "if (product.getCreatedBy().getId().equals(currentUserId))",
      "raw_prediction": " if (product.getCreatedBy().getId().equals(currentUserId)) {",
      "es": 0.9661016949152542,
      "em": false,
      "passed": false
    },
    {
      "index": 1405,
      "groundtruth": "user.setStatus(\"\u0410\u043a\u0442\u0438\u0432\u043d\u044b\u0439\");",
      "prediction": "model.addAttribute(\"user\", user);",
      "raw_prediction": "model.addAttribute(\"user\", user);",
      "es": 0.24242424242424243,
      "em": false,
      "passed": false
    },
    {
      "index": 1406,
      "groundtruth": "(!currentUser.getId().equals(id)) {",
      "prediction": "(!currentUser.getId().equals(id))",
      "raw_prediction": "(!currentUser.getId().equals(id)) {",
      "es": 0.9428571428571428,
      "em": false,
      "passed": false
    },
    {
      "index": 1407,
      "groundtruth": "product.setArtist(updatedProduct.getArtist());",
      "prediction": "product.setCategory(updatedProduct.getCategory());",
      "raw_prediction": "    product.setCategory(updatedProduct.getCategory());",
      "es": 0.72,
      "em": false,
      "passed": false
    },
    {
      "index": 1408,
      "groundtruth": "user.setCreationDate(LocalDateTime.now());",
      "prediction": "user.setCreated_at(LocalDateTime.now());",
      "raw_prediction": "user.setCreated_at(LocalDateTime.now());",
      "es": 0.8809523809523809,
      "em": false,
      "passed": false
    },
    {
      "index": 1409,
      "groundtruth": "\"productId\", product.get().getId());",
      "prediction": "\"error\", \"\");",
      "raw_prediction": "\"error\", \"\");\n            return \"billing\";",
      "es": 0.19444444444444442,
      "em": false,
      "passed": false
    },
    {
      "index": 1410,
      "groundtruth": "setImageUrl(updatedProduct.getImageUrl());",
      "prediction": "setCategory(updatedProduct.getCategory());",
      "raw_prediction": "setCategory(updatedProduct.getCategory());",
      "es": 0.7142857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 1411,
      "groundtruth": "List<Comment> comments = commentRepository.findByProductId(id);",
      "prediction": "List<Comment> comment = commentRepository.findByProductId(id);",
      "raw_prediction": "    List<Comment> comment = commentRepository.findByProductId(id);",
      "es": 0.9841269841269842,
      "em": false,
      "passed": false
    },
    {
      "index": 1412,
      "groundtruth": "product.setCreationDate(LocalDateTime.now());",
      "prediction": "product.setCreatedDate(LocalDateTime.now());",
      "raw_prediction": "    product.setCreatedDate(LocalDateTime.now());",
      "es": 0.9333333333333333,
      "em": false,
      "passed": false
    },
    {
      "index": 1413,
      "groundtruth": "user.setRole(\"USER\");",
      "prediction": "user.setConfirmPassword(confirm_password);",
      "raw_prediction": "user.setConfirmPassword(confirm_password);",
      "es": 0.2857142857142857,
      "em": false,
      "passed": false
    },
    {
      "index": 1414,
      "groundtruth": "product.get().getPrice().doubleValue());",
      "prediction": "product.get().getPrice().doubleValue());",
      "raw_prediction": "product.get().getPrice().doubleValue());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1415,
      "groundtruth": "System.out.println(transaction.getBuyerId());",
      "prediction": "System.out.println(transaction.getBuyerId());",
      "raw_prediction": "System.out.println(transaction.getBuyerId());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1416,
      "groundtruth": "instance.getCore().getDebugPingResponses().put(player.getUsername(), new ArrayList<>());",
      "prediction": "map.put(player.getUsername(), new ArrayList<>());",
      "raw_prediction": " map.put(player.getUsername(), new ArrayList<>());\n",
      "es": 0.5454545454545454,
      "em": false,
      "passed": false
    },
    {
      "index": 1417,
      "groundtruth": "<OrderItem> orderItems = productService.findOrderItemsByProduct(id);",
      "prediction": "<OrderItem> orderItems = orderItemService.getOrderItemsByProductId(id);",
      "raw_prediction": "<OrderItem> orderItems = orderItemService.getOrderItemsByProductId(id);",
      "es": 0.8169014084507042,
      "em": false,
      "passed": false
    },
    {
      "index": 1418,
      "groundtruth": "Optional<User> userOptional = userService.validateUser(username, password);",
      "prediction": "Optional<User> userOptional = userRepository.findByLogin(username);",
      "raw_prediction": "    Optional<User> userOptional = userRepository.findByLogin(username);",
      "es": 0.6266666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 1419,
      "groundtruth": "return orderItemRepository.findAllByProduct_Id(productId);",
      "prediction": "return orderItemRepository.findByProduct_Id(productId);",
      "raw_prediction": "return orderItemRepository.findByProduct_Id(productId);",
      "es": 0.9482758620689655,
      "em": false,
      "passed": false
    },
    {
      "index": 1420,
      "groundtruth": "TypeUtils.isPrimitiveOrSimpleType(typeCanonicalText)) {",
      "prediction": "TypeUtils.isPrimitiveOrSimple",
      "raw_prediction": "TypeUtils.isPrimitiveOrSimpleType(typeCanonicalText)) {",
      "es": 0.5272727272727273,
      "em": false,
      "passed": false
    },
    {
      "index": 1421,
      "groundtruth": "(TypeUtils.isMap(typeCanonicalText)) {",
      "prediction": "TypeUtils.isMap(typeCanonicalText)",
      "raw_prediction": "TypeUtils.isMap(typeCanonicalText)) {",
      "es": 0.8947368421052632,
      "em": false,
      "passed": false
    },
    {
      "index": 1422,
      "groundtruth": "= TypeUtils.primitiveToBox(typeCanonicalText);",
      "prediction": "= TypeUtils.getWrapperType(typeCanonicalText);",
      "raw_prediction": "= TypeUtils.getWrapperType(typeCanonicalText);",
      "es": 0.7173913043478262,
      "em": false,
      "passed": false
    },
    {
      "index": 1423,
      "groundtruth": "if (TypeUtils.isPrimitiveOrSimpleType(fieldType.replaceAll(\"\\\\[]\", \"\"))) {",
      "prediction": "if (PsiClassHelper.findPsiClass(fieldType, project) != null)",
      "raw_prediction": " if (PsiClassHelper.findPsiClass(fieldType, project) != null) {",
      "es": 0.29729729729729726,
      "em": false,
      "passed": false
    },
    {
      "index": 1424,
      "groundtruth": "TypeUtils.getExampleValue(typeCanonicalText, false);",
      "prediction": "TypeUtils.getExampleValue(typeCanonicalText, false);",
      "raw_prediction": "TypeUtils.getExampleValue(typeCanonicalText, false);\n        }\n\n        // \u6cdb\u578b\n        if (containsGeneric) {\n            return Collections.singletonList(assemblePsiClass(typeCanonicalText.substring(typeCanonicalText.indexOf(\"<\") + 1,",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1425,
      "groundtruth": ".equals(date) && booking.getTime().equals(time)) {",
      "prediction": ".equals(date) && booking.ge",
      "raw_prediction": ".equals(date) && booking.getTime().equals(time)) {",
      "es": 0.54,
      "em": false,
      "passed": false
    },
    {
      "index": 1426,
      "groundtruth": ".getId() == tableId && booking.getDate().equals(date) && booking.getTime().equals(time)) {",
      "prediction": ".getId() == tableId && booking.getDate().equals",
      "raw_prediction": ".getId() == tableId && booking.getDate().equals(date) && booking.getTime().equals(time)) {",
      "es": 0.5222222222222221,
      "em": false,
      "passed": false
    },
    {
      "index": 1427,
      "groundtruth": "staffRepository.findByLogin(login) != null;",
      "prediction": "staffRepository.existsByLogin(login);",
      "raw_prediction": "staffRepository.existsByLogin(login);",
      "es": 0.6976744186046512,
      "em": false,
      "passed": false
    },
    {
      "index": 1428,
      "groundtruth": "staff.setApparatusEmployed(new java.sql.Date(currentDate.getTime()));",
      "prediction": "staff.setRegistrationDate(currentDate);",
      "raw_prediction": "    staff.setRegistrationDate(currentDate);\n        staff.setLogin(staff.getLogin())",
      "es": 0.4347826086956522,
      "em": false,
      "passed": false
    },
    {
      "index": 1429,
      "groundtruth": "dishService.editDishDetails(id, name, description, recipe);",
      "prediction": "dishService.editDishDetails(id, name, description, recipe);",
      "raw_prediction": "dishService.editDishDetails(id, name, description, recipe);\n//        dishService.editDishImage(id, image.getOriginalFilename(), image.getContentType(),\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1430,
      "groundtruth": "DishType dishType = dishTypeRepository.findByName(typeName);",
      "prediction": "DishType dishType = dishTypeRepository.findByName(typeName);",
      "raw_prediction": " DishType dishType = dishTypeRepository.findByName(typeName);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1431,
      "groundtruth": "(dishService.checkIfDishIsOrdered(id)) {",
      "prediction": "(dishService.checkIfDishIsOrdered(id))",
      "raw_prediction": "(dishService.checkIfDishIsOrdered(id)) {",
      "es": 0.95,
      "em": false,
      "passed": false
    },
    {
      "index": 1432,
      "groundtruth": "orderedDish.setStatus(status);",
      "prediction": "orderedDish.setStatus(status);",
      "raw_prediction": " orderedDish.setStatus(status);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1433,
      "groundtruth": "<OrderedDish> dishesInOrder = orderedDishRepository.findAllByOrder(orderedDish.getOrder());",
      "prediction": "<OrderedDish> dishesInOrder = orderedDish.getOrder().getOrderedDishes();",
      "raw_prediction": "<OrderedDish> dishesInOrder = orderedDish.getOrder().getOrderedDishes();",
      "es": 0.6483516483516483,
      "em": false,
      "passed": false
    },
    {
      "index": 1434,
      "groundtruth": "if (dishService.checkIfDishIsOrdered(id)) {",
      "prediction": "if (dishService.checkIfDishIsOrdered(id))",
      "raw_prediction": "   if (dishService.checkIfDishIsOrdered(id)) {",
      "es": 0.9534883720930233,
      "em": false,
      "passed": false
    },
    {
      "index": 1435,
      "groundtruth": "model.addAttribute(\"staff\", staffService.getAllStaff());",
      "prediction": "model.addAttribute(\"newStaff\", staff);",
      "raw_prediction": " model.addAttribute(\"newStaff\", staff);\n            return \"redirect:/staff\";\n        }\n        if (staffService.emailExists(staff.getEmail())) {\n            model.addAttribute(\"error\", \"Email \u0443\u0436\u0435 \u0441\u0443\u0449\u0435\u0441\u0442\u0432\u0443\u0435\u0442!\");",
      "es": 0.5535714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 1436,
      "groundtruth": "<Tables> allTables = tableBookingService.getAllTables();",
      "prediction": "<Tables> allTables = tableBookingService.getAllTables();",
      "raw_prediction": "<Tables> allTables = tableBookingService.getAllTables();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1437,
      "groundtruth": "= orderedDish.getOrder();",
      "prediction": "= orderedDish.getOrder();",
      "raw_prediction": "= orderedDish.getOrder();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1438,
      "groundtruth": "loginExists(staff.getLogin())) {",
      "prediction": "getStaffByLogin(staff.getLogin())",
      "raw_prediction": "getStaffByLogin(staff.getLogin()) != null) {",
      "es": 0.4545454545454546,
      "em": false,
      "passed": false
    },
    {
      "index": 1439,
      "groundtruth": "!config.getMajorRules().isEmpty() || !config.getMinorRules().isEmpty()) {",
      "prediction": "config.getMajorRules() != null && !con",
      "raw_prediction": "config.getMajorRules() != null && !config.getMajorRules().isEmpty()) {",
      "es": 0.3835616438356164,
      "em": false,
      "passed": false
    },
    {
      "index": 1440,
      "groundtruth": ").isEmpty() || !config.getMinorRules().isEmpty()) {",
      "prediction": ").isEmpty()) {",
      "raw_prediction": ").isEmpty()) {",
      "es": 0.27450980392156865,
      "em": false,
      "passed": false
    },
    {
      "index": 1441,
      "groundtruth": "semverConfigVersionTag = config.getVersionTag();",
      "prediction": "semverConfigVersionTag = config.getVersionTag();",
      "raw_prediction": "semverConfigVersionTag = config.getVersionTag();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1442,
      "groundtruth": "commitHistory.getChanges()) {",
      "prediction": "commitHistory.ge",
      "raw_prediction": "commitHistory.getChanges()) {",
      "es": 0.5517241379310345,
      "em": false,
      "passed": false
    },
    {
      "index": 1443,
      "groundtruth": "= versionRules.getTagPattern().matcher(tag);",
      "prediction": "= tagPattern.matcher(tag);",
      "raw_prediction": "= tagPattern.matcher(tag);",
      "es": 0.5909090909090908,
      "em": false,
      "passed": false
    },
    {
      "index": 1444,
      "groundtruth": "= commitHistory.getLastVersionTag();",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1445,
      "groundtruth": "userRepository.getUserByUserId(userId);",
      "prediction": "null;",
      "raw_prediction": "null;",
      "es": 0.05128205128205132,
      "em": false,
      "passed": false
    },
    {
      "index": 1446,
      "groundtruth": "List<Reservation> reservations = reservationRepository.getAllReservations().stream()\n                .filter(res -> {",
      "prediction": "List<Reservation> reservations = reservationRepository.getAl",
      "raw_prediction": "    List<Reservation> reservations = reservationRepository.getAllReservations().stream()\n            .filter(res -> {",
      "es": 0.5128205128205128,
      "em": false,
      "passed": false
    },
    {
      "index": 1447,
      "groundtruth": "User existingUser = userRepository.getUserByUserId(userId);",
      "prediction": "User existingUser = userRepository.getUserByUserId(userId);",
      "raw_prediction": "    User existingUser = userRepository.getUserByUserId(userId);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1448,
      "groundtruth": "ArrayList<>(userRepository.getAllUsers());",
      "prediction": "ArrayList<User>(Arrays.asList(user1, user2));",
      "raw_prediction": "ArrayList<User>(Arrays.asList(user1, user2));",
      "es": 0.4222222222222223,
      "em": false,
      "passed": false
    },
    {
      "index": 1449,
      "groundtruth": "= deepCopy(object.getApplication());",
      "prediction": "= new HashMap<>(this.box.get(object.getName()));",
      "raw_prediction": "= new HashMap<>(this.box.get(object.getName()));",
      "es": 0.3125,
      "em": false,
      "passed": false
    },
    {
      "index": 1450,
      "groundtruth": "locator = ((Locator) binding.getValue()).getPath();",
      "prediction": "locator = ((Locator) binding.getValue()).get();",
      "raw_prediction": "locator = ((Locator) binding.getValue()).get();",
      "es": 0.9215686274509804,
      "em": false,
      "passed": false
    },
    {
      "index": 1451,
      "groundtruth": "orgGroupSendHeaders.setXAcsDingtalkAccessToken(accessTokenService.getAccessToken());",
      "prediction": "orgGroupSendHeaders.setAccessToken(accessTokenService.getAccessToken());",
      "raw_prediction": "    orgGroupSendHeaders.setAccessToken(accessTokenService.getAccessToken());",
      "es": 0.8571428571428572,
      "em": false,
      "passed": false
    },
    {
      "index": 1452,
      "groundtruth": "box.get(object.getName()));",
      "prediction": "box.get(object.getName()));",
      "raw_prediction": "box.get(object.getName()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1453,
      "groundtruth": "tokenizer.getToken();",
      "prediction": "tokenizer.getToken();",
      "raw_prediction": "tokenizer.getToken();\n        if (token instanceof BracketToken) {\n            return this.nested();\n        }",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1454,
      "groundtruth": ").getName();",
      "prediction": ").getName();",
      "raw_prediction": ").getName();\n            } else {",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1455,
      "groundtruth": "((FlatObject) binding.getValue()).getLocator())\n                    );",
      "prediction": "((FlatObject) binding.getValue()).getRef()\n                    );",
      "raw_prediction": "((FlatObject) binding.getValue()).getRef()\n                    );",
      "es": 0.8857142857142857,
      "em": false,
      "passed": false
    },
    {
      "index": 1456,
      "groundtruth": "robotGroupMessagesService.send(openConversationId, \"hello\");",
      "prediction": "robotGroupMessagesService.sendGroupMessage(openConversationId, msg);",
      "raw_prediction": "robotGroupMessagesService.sendGroupMessage(openConversationId, msg);",
      "es": 0.7205882352941176,
      "em": false,
      "passed": false
    },
    {
      "index": 1457,
      "groundtruth": "this.tokenizer.next();",
      "prediction": "this.tokenizer.next();",
      "raw_prediction": "this.tokenizer.next();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1458,
      "groundtruth": "(storage.getName());",
      "prediction": "(Text.of(\"\u00a7b\" + profile.getName()));",
      "raw_prediction": "(Text.of(\"\u00a7b\" + profile.getName()));",
      "es": 0.4722222222222222,
      "em": false,
      "passed": false
    },
    {
      "index": 1459,
      "groundtruth": ".add(BlockRegistry.get(member.brokenRaft()), beautifyName(member.brokenRaft()));",
      "prediction": ".add(BlockRegistry.get(member.brokenRaft()), \"\u635f\u574f\u7684\" + member.raft());",
      "raw_prediction": ".add(BlockRegistry.get(member.brokenRaft()), \"\u635f\u574f\u7684\" + member.raft());",
      "es": 0.75,
      "em": false,
      "passed": false
    },
    {
      "index": 1460,
      "groundtruth": ".add(BlockRegistry.get(member.raft()), member.chinese + \"\u7b4f\");",
      "prediction": ".add(BlockRegistry.get(member.raft()), member.chinese + \"\u7b4f\");",
      "raw_prediction": ".add(BlockRegistry.get(member.raft()), member.chinese + \"\u7b4f\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1461,
      "groundtruth": ".add(BlockRegistry.get(member.fence()), beautifyName(member.fence()));",
      "prediction": ".add(BlockRegistry.get(member.fence()), beautifyName(member.fence()));",
      "raw_prediction": ".add(BlockRegistry.get(member.fence()), beautifyName(member.fence()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1462,
      "groundtruth": "(BlockRegistry.get(member.rack()), beautifyName(member.rack()));",
      "prediction": "(BlockRegistry.get(member.rack()), beautifyName(member.rack()));",
      "raw_prediction": "(BlockRegistry.get(member.rack()), beautifyName(member.rack()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1463,
      "groundtruth": "beautifyName(member.raft()));",
      "prediction": "beautifyName(member.raft()));",
      "raw_prediction": "beautifyName(member.raft()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1464,
      "groundtruth": "fence()), beautifyName(member.fence()));",
      "prediction": "fence()), beautifyName(member.fence()));",
      "raw_prediction": "fence()), beautifyName(member.fence()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1465,
      "groundtruth": "member.rack()), beautifyName(member.rack()));",
      "prediction": "member.rack()), beautifyName(member.rack()));",
      "raw_prediction": "member.rack()), beautifyName(member.rack()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1466,
      "groundtruth": ".get(member.crossedFence()), beautifyName(member.crossedFence()));",
      "prediction": ".get(member.crossedFence()), beautifyName(member.crossedFence()));",
      "raw_prediction": ".get(member.crossedFence()), beautifyName(member.crossedFence()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1467,
      "groundtruth": ", beautifyName(member.brokenRaft()));",
      "prediction": ", beautifyName(member.brokenRaft()));",
      "raw_prediction": ", beautifyName(member.brokenRaft()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1468,
      "groundtruth": "Logger.writeError(\"Invalid server response\");",
      "prediction": "Logger.writeInfo(\"Server is full\");",
      "raw_prediction": "\tLogger.writeInfo(\"Server is full\");",
      "es": 0.5555555555555556,
      "em": false,
      "passed": false
    },
    {
      "index": 1469,
      "groundtruth": "(\"position fen \"+b.getFEN());",
      "prediction": "(\"position fen \"+b.getFen());",
      "raw_prediction": "(\"position fen \"+b.getFen());",
      "es": 0.9310344827586207,
      "em": false,
      "passed": false
    },
    {
      "index": 1470,
      "groundtruth": "username = jwtUtil.verifyToken(token);",
      "prediction": "username = jwtUtil.getUsername(token);",
      "raw_prediction": "username = jwtUtil.getUsername(token);\n\t\t\tif (username == null) {\n\t\t\t\t\tthrow new RefreshTokenServiceUnavailableException();\n\t\t\t}",
      "es": 0.736842105263158,
      "em": false,
      "passed": false
    },
    {
      "index": 1471,
      "groundtruth": "getIncrementTime(), b.getIncrementTime()));",
      "prediction": "getInc(Color.WHITE), b.getInc(Color.BLACK)));",
      "raw_prediction": "getInc(Color.WHITE), b.getInc(Color.BLACK)));\n\t\tString output = getOutput(50).split(\"bestmove \")[1].split(\" \")[0];\n\t\tif (output.trim().equals(\"(none)\")) return null;\n\t",
      "es": 0.4666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 1472,
      "groundtruth": "Color.WHITE), b.getTime(Color.BLACK), b.getIncrementTime(), b.getIncrementTime()));",
      "prediction": "), b.getTime(), b.getInc(), b.getInc()));",
      "raw_prediction": "), b.getTime(), b.getInc(), b.getInc()));",
      "es": 0.49397590361445787,
      "em": false,
      "passed": false
    },
    {
      "index": 1473,
      "groundtruth": "cm.reply();",
      "prediction": "cm.start();",
      "raw_prediction": "cm.start();",
      "es": 0.5454545454545454,
      "em": false,
      "passed": false
    },
    {
      "index": 1474,
      "groundtruth": "user = userDetailsService.loadUserByUsername((String)auth.getPrincipal());",
      "prediction": "user = userDetailsService.loadUserByUsername(auth.getName());",
      "raw_prediction": "user = userDetailsService.loadUserByUsername(auth.getName());",
      "es": 0.7702702702702703,
      "em": false,
      "passed": false
    },
    {
      "index": 1475,
      "groundtruth": "auth.eraseCredentials();",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1476,
      "groundtruth": "ecoproveedor.calcularPuntosTotales();",
      "prediction": "ecoproveedor.getPuntos() + producto.getPuntos();",
      "raw_prediction": "ecoproveedor.getPuntos() + producto.getPuntos();",
      "es": 0.47916666666666663,
      "em": false,
      "passed": false
    },
    {
      "index": 1477,
      "groundtruth": "builder.add(BlockRegistry.get(member.brokenRaft()), \"\u635f\u574f\u7684\" + member.chinese + \"\u7b4f\");",
      "prediction": "builder.add(BlockRegistry.get(member.brokenRaft()), member.chinese + \"\u7b4f\");",
      "raw_prediction": "builder.add(BlockRegistry.get(member.brokenRaft()), member.chinese + \"\u7b4f\");\n                builder.add(BlockRegistry.get(member.fence()), \"\u7b80\u6613\" + member.chinese + \"\u6805\u680f\");\n            builder.add(BlockRegistry.get(member.cross",
      "es": 0.9024390243902439,
      "em": false,
      "passed": false
    },
    {
      "index": 1478,
      "groundtruth": ".stream().filter(piece -> piece.getType().getName() == Piece.PIECE_PAWN).count();",
      "prediction": ".stream().filter(piece -> piece.getType().getName() == Piece.PIECE_PAWN).count();",
      "raw_prediction": ".stream().filter(piece -> piece.getType().getName() == Piece.PIECE_PAWN).count();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1479,
      "groundtruth": "Flotage.id(id), block);",
      "prediction": "Flotage.id(id), block);",
      "raw_prediction": "Flotage.id(id), block);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1480,
      "groundtruth": "().getNamespace(), \"block/\" + member.log().getPath());",
      "prediction": "().getNamespace(), \"block/\" + member.log().getPath());",
      "raw_prediction": "().getNamespace(), \"block/\" + member.log().getPath());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1481,
      "groundtruth": "() && p.getColor() == piece.getColor()){",
      "prediction": "){",
      "raw_prediction": "){\n\t\t\t\t\t\tidentical.add(p;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t",
      "es": 0.050000000000000044,
      "em": false,
      "passed": false
    },
    {
      "index": 1482,
      "groundtruth": ").filter(piece -> piece.getType().getName() == Piece.PIECE_KNIGHT).count();",
      "prediction": ").filter(piece -> piece.getType().getName() == Piece.PIECE_KNIGHT).count();",
      "raw_prediction": ").filter(piece -> piece.getType().getName() == Piece.PIECE_KNIGHT).count();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1483,
      "groundtruth": "if (piece == null || piece.getColor() != this.player) return false;",
      "prediction": "if (piece == null) || piece.getColor() != this.player) return false;",
      "raw_prediction": "\tif (piece == null) || piece.getColor() != this.player) return false;\n\t\tif (piece.getType().getName() == Piece.PIECE_Pawn && (piece.getX() == 0 || piece.getX() == 7)){\n",
      "es": 0.9852941176470589,
      "em": false,
      "passed": false
    },
    {
      "index": 1484,
      "groundtruth": "> pieces = getPiecesOnBoard().stream().filter(piece -> piece.getColor() == color).toList();",
      "prediction": "> pieces = color == Color.WHITE ? this.whiteCaptured : this.blackCaptured;",
      "raw_prediction": "> pieces = color == Color.WHITE ? this.whiteCaptured : this.blackCaptured;",
      "es": 0.25274725274725274,
      "em": false,
      "passed": false
    },
    {
      "index": 1485,
      "groundtruth": "p.getColor() == piece.getColor()){",
      "prediction": "!identical.contains",
      "raw_prediction": "!identical.contains(piece)){",
      "es": 0.11764705882352944,
      "em": false,
      "passed": false
    },
    {
      "index": 1486,
      "groundtruth": ".WHITE && newLegalMoves.contains(convertPosition(this.blackKing.getX(), this.blackKing.getY()))){",
      "prediction": ".WHITE && newLegalMoves.contains(convertPosition(this.blackKing.getX(), this.blackKing.getY()))",
      "raw_prediction": ".WHITE && newLegalMoves.contains(convertPosition(this.blackKing.getX(), this.blackKing.getY()))){",
      "es": 0.979381443298969,
      "em": false,
      "passed": false
    },
    {
      "index": 1487,
      "groundtruth": "pos) == recipe.getMode()) {",
      "prediction": "tile.itemDirect",
      "raw_prediction": "tile.itemDirection)) {",
      "es": 0.14814814814814814,
      "em": false,
      "passed": false
    },
    {
      "index": 1488,
      "groundtruth": ".filter(piece -> piece.getType().getName() == Piece.PIECE_ROOK).count();",
      "prediction": ".filter(piece -> piece.getType().getName() == Piece.PIECE_ROOK).).count();",
      "raw_prediction": ".filter(piece -> piece.getType().getName() == Piece.PIECE_ROOK).).count();",
      "es": 0.972972972972973,
      "em": false,
      "passed": false
    },
    {
      "index": 1489,
      "groundtruth": "if (MapUtils.isNotEmpty(this.properties.getConfig())) {",
      "prediction": "if (args.length == FEIGN_ARGS_LEN)",
      "raw_prediction": "    if (args.length == FEIGN_ARGS_LEN) {",
      "es": 0.18181818181818177,
      "em": false,
      "passed": false
    },
    {
      "index": 1490,
      "groundtruth": ".wrapperTimeoutOptions(this.properties.getHostConfig(uri.getHost()), uri);",
      "prediction": ".wrapperTimeoutOptions(this.properties.getConfig().get(uri.getHost()), request);",
      "raw_prediction": ".wrapperTimeoutOptions(this.properties.getConfig().get(uri.getHost()), request);\n            } else if (args.length == 3) {\n                Request request = (Request) args[FEIGN_REQUEST_ARGS_INDEX];\n                URI uri = URI.create(request.url",
      "es": 0.8,
      "em": false,
      "passed": false
    },
    {
      "index": 1491,
      "groundtruth": "[capture.getX()][capture.getY()] = null;",
      "prediction": "[piece.getX()][piece.getY()] = null;",
      "raw_prediction": "[piece.getX()][piece.getY()] = null;\n\t\t\t\tthis.board[p2[0]][p2[1]] = null;\n\t\t\t\tif (this.enPassant != null && pos.equals(this.enPassant)){\n\t\t\t\t\tthis.board[piece",
      "es": 0.75,
      "em": false,
      "passed": false
    },
    {
      "index": 1492,
      "groundtruth": "add(BlockRegistry.get(member.crossedFence()), member.chinese + \"\u5341\u5b57\u6805\u680f\");",
      "prediction": "builder.add(BlockRegistry.get(member.crossedFence()), \"\u7b80\u6613\" + member.chinese + \"\u6805\u680f\");",
      "raw_prediction": "builder.add(BlockRegistry.get(member.crossedFence()), \"\u7b80\u6613\" + member.chinese + \"\u6805\u680f\");",
      "es": 0.7976190476190477,
      "em": false,
      "passed": false
    },
    {
      "index": 1493,
      "groundtruth": "display.getMode().toString()));",
      "prediction": "display.getMode())).disableBackground();",
      "raw_prediction": "display.getMode())).disableBackground();\n        widgets.add(Widgets.withTooltip(arrow, Text.translatable(\"tip.flotage.rack.mode\", display.getMode()), text));\n\n        widgets.add(Widgets.createSlot(new Point(bgBounds.x +",
      "es": 0.525,
      "em": false,
      "passed": false
    },
    {
      "index": 1494,
      "groundtruth": "add(BlockRegistry.get(member.rack()), member.chinese + \"\u7f6e\u7269\u67b6\");",
      "prediction": "builder.add(BlockRegistry.get(member.rack()), \"\u7f6e\u7269\u67b6\");",
      "raw_prediction": "builder.add(BlockRegistry.get(member.rack()), \"\u7f6e\u7269\u67b6\");",
      "es": 0.5967741935483871,
      "em": false,
      "passed": false
    },
    {
      "index": 1495,
      "groundtruth": "member.fence()), \"\u7b80\u6613\" + member.chinese + \"\u6805\u680f\");",
      "prediction": "member.fence()), member.chinese + \"\u6805\u680f\");",
      "raw_prediction": "member.fence()), member.chinese + \"\u6805\u680f\");",
      "es": 0.851063829787234,
      "em": false,
      "passed": false
    },
    {
      "index": 1496,
      "groundtruth": "inventory.getStack(0).getNbt();",
      "prediction": "inventory.getStack(0).getNbt();",
      "raw_prediction": "inventory.getStack(0).getNbt();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1497,
      "groundtruth": "add(Widgets.withTooltip(arrow, Text.translatable(\"tip.flotage.rack.processtime\", display.getProcesstime() / 20), text));",
      "prediction": "add(Widgets.createLabel(new Point(bgBounds.x + 10, bgBounds.y + 10), text).color(0x404040).noShadow());",
      "raw_prediction": "add(Widgets.createLabel(new Point(bgBounds.x + 10, bgBounds.y + 10), text).color(0x404040).noShadow());",
      "es": 0.22499999999999998,
      "em": false,
      "passed": false
    },
    {
      "index": 1498,
      "groundtruth": "add(BlockRegistry.get(member.crossedFence()));",
      "prediction": "add(BlockRegistry.get(member.rack()));",
      "raw_prediction": "add(BlockRegistry.get(member.rack()));",
      "es": 0.782608695652174,
      "em": false,
      "passed": false
    },
    {
      "index": 1499,
      "groundtruth": ".board.getPlayer() != this.viewPoint && (this.engineMove || !this.overTheBoard)){",
      "prediction": ".board.getPlayer() != this.viewPoint){",
      "raw_prediction": ".board.getPlayer() != this.viewPoint){\n\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (this.board.getBoard()[x][y] == null && !getPremoves().contains(not)){",
      "es": 0.4691358024691358,
      "em": false,
      "passed": false
    },
    {
      "index": 1500,
      "groundtruth": "this.client.getColor();",
      "prediction": "this.client.getPlayer();",
      "raw_prediction": "this.client.getPlayer();\n\t\t\t\t\t\t\tthis.board.playerA = this.client.getPlayer();\n\t\t\t\t\t\t\tthis.board.playerB = this.client.getPlayer();\n\t\t\t\t\t\t\tthis.board.playerA = this.client.getPlayer();\n\t\t\t\t\t\t\tthis.board.playerB = this.client.getPlayer();\n\t\t\t\t\t\t\tthis.board.player",
      "es": 0.7916666666666666,
      "em": false,
      "passed": false
    },
    {
      "index": 1501,
      "groundtruth": "this.client.getMessage();",
      "prediction": "this.client.getMessage();",
      "raw_prediction": "this.client.getMessage();\n\t\t\t\t\t\t\t",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1502,
      "groundtruth": "(this.board.getFEN()+\"\\n\\n\"+this.board.getPGN());",
      "prediction": "();",
      "raw_prediction": "();\n\t\t\t\t\tdata.setText(this.board.getFEN());\n\t\t\t\t\tdata.setPrefRowCount(10);\n\t\t\t\t\tdata.setPrefColumnCount(10);\n\t\t\t\t\tdata.setWrapText(true);\n\t\t\t\t\tdata.setPrefWidth(WIDTH*0.7);\n",
      "es": 0.061224489795918324,
      "em": false,
      "passed": false
    },
    {
      "index": 1503,
      "groundtruth": "if (this.board.getBoard()[x][y].getColor() == this.viewPoint){",
      "prediction": "{",
      "raw_prediction": "{\n\t\t\t\t\t\t\t\tthis.premoves.clear();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tboolean isProm = isPromotion(this.currentSelection, not);\n\t\t\t\t\t\t\tString prom = isProm ? \"Q\" : null;\n\t\t\t\t\t\t\tthis.premoves",
      "es": 0.016129032258064502,
      "em": false,
      "passed": false
    },
    {
      "index": 1504,
      "groundtruth": "out.println(this.board.getFEN());",
      "prediction": "out.println(this.board.getPGN());",
      "raw_prediction": "out.println(this.board.getPGN());\n\t\t\t\t\t} else if (this.board.getPlayer() != this.viewPoint && !this.overTheBoard){\n\t\t\t\t\tSystem.out.println(this.board.getPGN());\n\t\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println",
      "es": 0.9393939393939394,
      "em": false,
      "passed": false
    },
    {
      "index": 1505,
      "groundtruth": "(this.board.getBoard()[x][y] == null && !getPremoves().contains(not)){",
      "prediction": "this.board.getBoard()[x][y] == null){",
      "raw_prediction": "this.board.getBoard()[x][y] == null){\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t} else if (this.board.getBoard()[x][y].getColor() == this.viewPoint){",
      "es": 0.5285714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 1506,
      "groundtruth": "this.board.getBoard()[x][y] != null){",
      "prediction": "this.board.getBoard()",
      "raw_prediction": "this.board.getBoard()[x][y] == null){\n\t\t\t\t\t\t\tthis.currentSelection = null;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tthis.currentSelection = not;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {",
      "es": 0.5675675675675675,
      "em": false,
      "passed": false
    },
    {
      "index": 1507,
      "groundtruth": "this.gameFinished = this.board.isGameFinished();",
      "prediction": "this.currentSelection = null;",
      "raw_prediction": "\t\t\t\tthis.currentSelection = null;\n\t\t\t\t\t\t\t\t\t\t\tthis.currentMoves = null;\n\t\t\t\t\t\t\t\t\t\t\tthis.hold.clear();\n\t\t\t\t\t\t\t\t\t\t\tthis.animation = null;\n\t\t\t\t\t\t\t\t\t\t\tthis.gameFinished = this.board.isGameFinished();\n\t\t\t\t\t\t\t\t\t\t\tif (ok && this.engineMove) makeEngine",
      "es": 0.25,
      "em": false,
      "passed": false
    },
    {
      "index": 1508,
      "groundtruth": ")+\"\\n\\n\"+this.board.getPGN());",
      "prediction": "));",
      "raw_prediction": "));\n\t\t\t\t\tdata.setEditable(false);\n\t\t\t\t\tdata.setWrapText(true);\n\t\t\t\t\tdata.setPrefRowCount(10);\n\t\t\t\t\tdata.setPrefColumnCount(10);\n\t\t\t\t\tdata.setPrefWidth(WIDTH*0.7);\n\t\t\t\t\tdata.setPref",
      "es": 0.09999999999999998,
      "em": false,
      "passed": false
    },
    {
      "index": 1509,
      "groundtruth": "= Piece.getType(prom);",
      "prediction": "= prom.toUpperCase().equals(\"Q\") ? Piece.Pie",
      "raw_prediction": "= prom.toUpperCase().equals(\"Q\") ? Piece.Pieces.QUEEN : prom.toUpperCase().equals(\"R\") ? Piece.Pieces.ROOK : prom.toUpperCase().equals(\"B\") ? Piece.Pieces.BISHOP : prom.toUpperCase",
      "es": 0.13636363636363635,
      "em": false,
      "passed": false
    },
    {
      "index": 1510,
      "groundtruth": "= this.board.getValidMoves(this.board.getBoard()[x][y]);",
      "prediction": "= this.board.getValidMoves(this.board.getBoard()[x][y]);",
      "raw_prediction": "= this.board.getValidMoves(this.board.getBoard()[x][y]);\n\t\t\t\t\t\t\t} else if (this.board.getBoard()[x][y] != null && this.board.getBoard()[x][y].getColor() == this.viewPoint",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1511,
      "groundtruth": "!this.client.isConnected()){",
      "prediction": "this.client.getC",
      "raw_prediction": "this.client.getColor() == Color.WHITE){\n\t\t\t\t\t\t\t\tthis.client.sendMessage(\"WHITE\");\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.client.sendMessage(\"BLACK\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} catch (IOException ex){\n\t\t\t\t\t\t\tLogger.writeError(ex.getMessage());\n\t\t\t\t\t\t\t}",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 1512,
      "groundtruth": "println(this.board.getPGN());",
      "prediction": "println(this.board.getPGN());",
      "raw_prediction": "println(this.board.getPGN());\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthis.board = new Board(this.board.getFEN(), this.board.getTime(this.viewPoint), this.board.getIncrementTime());\n\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1513,
      "groundtruth": "this.board.getGameTime(), this.board.getIncrementTime());",
      "prediction": "time, inc);",
      "raw_prediction": "time, inc);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tthis.board = new Board(text, time, inc);\n\t\t\t\t\t\t\t\tthis.gameFinished = false;\n\t\t\t\t\t\t\t\tthis.moveStart = null;\n\t\t\t\t\t\t\t\tthis.moveEnd = null;\n\t\t\t\t\t\t\t\tthis.hold.clear();\n",
      "es": 0.19298245614035092,
      "em": false,
      "passed": false
    },
    {
      "index": 1514,
      "groundtruth": "getAttackers(piece.getColor() == Color.WHITE ? this.whiteKing : this.blackKing) != null){",
      "prediction": "this.player == Color.WHITE){",
      "raw_prediction": "this.player == Color.WHITE){\n\t\t\t\t\tthis.whiteTime += this.increment*1000;\n\t\t\t\t\t} else {\n\t\t\t\t\tthis.blackTime += this.increment*1000;\n\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tthis\tthis.movesN++;\n\t\t\t\t",
      "es": 0.2471910112359551,
      "em": false,
      "passed": false
    },
    {
      "index": 1515,
      "groundtruth": "return jdbcProcessors.path(driver, generatedHost, generatedDatabase);",
      "prediction": "return jdbcProcessProcessor.process(driver, generatedHost, generatedDatabase, generatedUser);",
      "raw_prediction": "return jdbcProcessProcessor.process(driver, generatedHost, generatedDatabase, generatedUser);\n    }\n\n    public OddrnPath parse(final String url, final String user, final String database) {\n        if (url == null || !url.startsWith(J",
      "es": 0.6989247311827957,
      "em": false,
      "passed": false
    },
    {
      "index": 1516,
      "groundtruth": "if (booking.isApproved()) {",
      "prediction": "if (booking.isApproved())",
      "raw_prediction": "    if (booking.isApproved()) {",
      "es": 0.9259259259259259,
      "em": false,
      "passed": false
    },
    {
      "index": 1517,
      "groundtruth": "bookingRepository.deleteByTimeFinalBefore(LocalDateTime.now());",
      "prediction": "bookingRepository.verify();",
      "raw_prediction": " bookingRepository.verify();",
      "es": 0.38095238095238093,
      "em": false,
      "passed": false
    },
    {
      "index": 1518,
      "groundtruth": "booking.setTimeRequest(LocalDateTime.now());",
      "prediction": "booking.setApproved(false);",
      "raw_prediction": "booking.setApproved(false);",
      "es": 0.40909090909090906,
      "em": false,
      "passed": false
    },
    {
      "index": 1519,
      "groundtruth": "b.getId());",
      "prediction": "b);",
      "raw_prediction": "b);\n        });\n    }\n\n    public void rejectBooking(Optional<Booking> booking) {\n        booking.ifPresent(b -> {            logService.rejected(b);\n            bookingRepository.rejectBooking(b);",
      "es": 0.2727272727272727,
      "em": false,
      "passed": false
    },
    {
      "index": 1520,
      "groundtruth": "protectionRune = CustomItems.createProtectionRune();",
      "prediction": "protectionRune = CustomItems.createProtectionRune();",
      "raw_prediction": "protectionRune = CustomItems.createProtectionRune();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1521,
      "groundtruth": "ItemStack protectionRune = CustomItems.createProtectionRune();",
      "prediction": "ItemStack protectionRune = CustomItems.createProtectionRune();",
      "raw_prediction": " ItemStack protectionRune = CustomItems.createProtectionRune();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1522,
      "groundtruth": "bookingService.save(login, subject, lab, date, timeInit, timeFinal);",
      "prediction": "bookingService.saveBooking(login, lab, subject, date, timeInit, timeFinal);",
      "raw_prediction": "    bookingService.saveBooking(login, lab, subject, date, timeInit, timeFinal);",
      "es": 0.7733333333333333,
      "em": false,
      "passed": false
    },
    {
      "index": 1523,
      "groundtruth": "(professorService.getProfessorByLogin(login));",
      "prediction": "(professorService.getProfessor(login));",
      "raw_prediction": "(professorService.getProfessor(login));",
      "es": 0.8478260869565217,
      "em": false,
      "passed": false
    },
    {
      "index": 1524,
      "groundtruth": "int count = bookingRepository.isBusy(b.getLab().getId(), b.getTimeInit(), b.getTimeFinal());",
      "prediction": "int count = bookingRepository.countByTimeInitAfterAndTimeFinalBefore(b.getTimeInit(), b.getTimeFinal());",
      "raw_prediction": "    int count = bookingRepository.countByTimeInitAfterAndTimeFinalBefore(b.getTimeInit(), b.getTimeFinal());",
      "es": 0.6538461538461539,
      "em": false,
      "passed": false
    },
    {
      "index": 1525,
      "groundtruth": ".BOLD + \"\" + Utils.getEnhancementInfo(enhancementLevel).getEnhanceName());",
      "prediction": ".BOLD + \"+\" + Utils.getEnhancementInfo(enhancementLevel).getEnhanceName());",
      "raw_prediction": ".BOLD + \"+\" + Utils.getEnhancementInfo(enhancementLevel).getEnhanceName());",
      "es": 0.9866666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 1526,
      "groundtruth": "booking.setTimeInit(initialTime);",
      "prediction": "booking.setTimeInit(initialTime);",
      "raw_prediction": "    booking.setTimeInit(initialTime);\n        booking.setTimeFinal(finalTime);\n        logService.insertedPending(booking);\n        bookingRepository.save(booking);\n    }\n\n    public void save(String login, String subject, String lab, String date,",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1527,
      "groundtruth": "), b.getTimeInit(), b.getTimeFinal());",
      "prediction": "), b.getTimeInit(), b.getTimeFinal());",
      "raw_prediction": "), b.getTimeInit(), b.getTimeFinal());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1528,
      "groundtruth": ", b.getTimeInit(), b.getTimeFinal());",
      "prediction": ", b.getTimeInit(), b.getTimeFinal());",
      "raw_prediction": ", b.getTimeInit(), b.getTimeFinal());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1529,
      "groundtruth": "(Environment.getProgram(), taintFunction);",
      "prediction": "(Environment.getProgram(), startFunc);",
      "raw_prediction": "(Environment.getProgram(), startFunc);",
      "es": 0.8333333333333334,
      "em": false,
      "passed": false
    },
    {
      "index": 1530,
      "groundtruth": "analyzer.startAnalyzing();",
      "prediction": "analyzer.analyze();",
      "raw_prediction": "    analyzer.analyze();\n            //FileUtil.writeToFile(Environment.OUTPUT_DIR + \"/result.txt\", analyzer.getResult());",
      "es": 0.6923076923076923,
      "em": false,
      "passed": false
    },
    {
      "index": 1531,
      "groundtruth": "setSubject(subjectService.getSubject(subject));",
      "prediction": "setSubject(subjectService.getSubject(subject));",
      "raw_prediction": "setSubject(subjectService.getSubject(subject));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1532,
      "groundtruth": "func = FunctionUtil.getFunctionWith(Environment.getProgram(), connAdd);",
      "prediction": "func = FunctionUtil.getFunctionWith(program, startAdd);",
      "raw_prediction": "func = FunctionUtil.getFunctionWith(program, startAdd);\n        String funcSig = FunctionUtil.getFunctionSignature(func;\n        if (funcSig.contains(\"connectImpl\")) {",
      "es": 0.676056338028169,
      "em": false,
      "passed": false
    },
    {
      "index": 1533,
      "groundtruth": ".decompileFuncNormalize(Environment.getProgram(), FunctionUtil.getFunctionWith(Environment.getProgram(), startAdd));",
      "prediction": ".decompileFunc(program, connectFunc);",
      "raw_prediction": ".decompileFunc(program, connectFunc);",
      "es": 0.2844827586206896,
      "em": false,
      "passed": false
    },
    {
      "index": 1534,
      "groundtruth": "decompileFuncNormalize(Environment.getProgram(), FunctionUtil.getFunctionWith(Environment.getProgram(), startAdd));",
      "prediction": "decompileFuncNormalize(program, connectFunc);",
      "raw_prediction": "decompileFuncNormalize(program, connectFunc);\n        if (decompileResult == null)\n        return;\n",
      "es": 0.35652173913043483,
      "em": false,
      "passed": false
    },
    {
      "index": 1535,
      "groundtruth": "= FileUtil.readFromFile(configPath);",
      "prediction": "= FileUtil.readTextFile(configPath);",
      "raw_prediction": "= FileUtil.readTextFile(configPath);",
      "es": 0.8888888888888888,
      "em": false,
      "passed": false
    },
    {
      "index": 1536,
      "groundtruth": "jo.getProperty(name).cast(JSFunction.class);",
      "prediction": "jo.getJSFunction(method);",
      "raw_prediction": "jo.getJSFunction(method);",
      "es": 0.38636363636363635,
      "em": false,
      "passed": false
    },
    {
      "index": 1537,
      "groundtruth": "DecompileResults decompileResults = Decompiler.decompileFuncRegister(Environment.getProgram(), currentFunc);",
      "prediction": "DecompileResults decompileResults = Decompiler.decompileFunc(Environment.getProgram(), currentFunc);",
      "raw_prediction": "    DecompileResults decompileResults = Decompiler.decompileFunc(Environment.getProgram(), currentFunc);",
      "es": 0.9259259259259259,
      "em": false,
      "passed": false
    },
    {
      "index": 1538,
      "groundtruth": "getFunctionWith(Environment.getProgram(), inputs[0].getAddress());",
      "prediction": "getFunctionWith(program, op.getOutput().toString());",
      "raw_prediction": "getFunctionWith(program, op.getOutput().toString());",
      "es": 0.4696969696969697,
      "em": false,
      "passed": false
    },
    {
      "index": 1539,
      "groundtruth": "jo.getJavaObject();",
      "prediction": "rawType.cast(value);",
      "raw_prediction": "rawType.cast(value);\n\n    // If the object is already an instance of the interface then return it.",
      "es": 0.15000000000000002,
      "em": false,
      "passed": false
    },
    {
      "index": 1540,
      "groundtruth": "enhancementLevel).getEnhanceColor() + \"+\" + Utils.getEnhancementInfo(enhancementLevel).getEnhanceName());",
      "prediction": "enhancementLevel).getEnhanceColor() + \"\" + ChatColor.BOLD + \"\" + Utils.getEnhancementInfo(enhancementLevel).getEnhanceName());",
      "raw_prediction": "enhancementLevel).getEnhanceColor() + \"\" + ChatColor.BOLD + \"\" + Utils.getEnhancementInfo(enhancementLevel).getEnhanceName());\n        }",
      "es": 0.8333333333333334,
      "em": false,
      "passed": false
    },
    {
      "index": 1541,
      "groundtruth": "CustomItems.createBlackStoneWeapon();",
      "prediction": "CustomItems.createBlackStoneWeapon();",
      "raw_prediction": "CustomItems.createBlackStoneWeapon();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1542,
      "groundtruth": "protectionStone = random.nextBoolean() ? CustomItems.createProtectionRune() : CustomItems.createProtectionRune();",
      "prediction": "protectionStone = random.nextBoolean() ? CustomItems.createProtectionStoneWeapon() : CustomItems.createProtectionStoneArmor();",
      "raw_prediction": "protectionStone = random.nextBoolean() ? CustomItems.createProtectionStoneWeapon() : CustomItems.createProtectionStoneArmor();",
      "es": 0.8650793650793651,
      "em": false,
      "passed": false
    },
    {
      "index": 1543,
      "groundtruth": "CustomItems.createConcentratedMagicalBlackStoneWeapon();",
      "prediction": "CustomItems.createConcentratedMagicalBlackStoneWeapon();",
      "raw_prediction": "CustomItems.createConcentratedMagicalBlackStoneWeapon();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1544,
      "groundtruth": "itemToGive = CustomItems.createProtectionRune();",
      "prediction": "itemToGive = CustomItems.createPStone();",
      "raw_prediction": "itemToGive = CustomItems.createPStone();",
      "es": 0.8125,
      "em": false,
      "passed": false
    },
    {
      "index": 1545,
      "groundtruth": "? CustomItems.createConcentratedMagicalBlackStoneWeapon() : CustomItems.createConcentratedMagicalBlackStoneArmor();",
      "prediction": "? CustomItems.createConcentratedBlackStoneWeapon() : CustomItems.createConcentratedBlackStoneArmor();",
      "raw_prediction": "? CustomItems.createConcentratedBlackStoneWeapon() : CustomItems.createConcentratedBlackStoneArmor();",
      "es": 0.8782608695652174,
      "em": false,
      "passed": false
    },
    {
      "index": 1546,
      "groundtruth": "25, enhanceGUI.createEnhanceButton());",
      "prediction": "25, null);",
      "raw_prediction": "25, null);\n        }, 3 * 20L);\n",
      "es": 0.21052631578947367,
      "em": false,
      "passed": false
    },
    {
      "index": 1547,
      "groundtruth": ".nextBoolean() ? CustomItems.createProtectionRune() : CustomItems.createProtectionRune();",
      "prediction": ".nextBoolean() ? CustomItems.createProtectionStoneWeapon() : CustomItems.createProtectionStoneArmor();",
      "raw_prediction": ".nextBoolean() ? CustomItems.createProtectionStoneWeapon() : CustomItems.createProtectionStoneArmor();",
      "es": 0.8333333333333334,
      "em": false,
      "passed": false
    },
    {
      "index": 1548,
      "groundtruth": "nextBoolean() ? CustomItems.createConcentratedMagicalBlackStoneWeapon() : CustomItems.createConcentratedMagicalBlackStoneArmor();",
      "prediction": "nextBoolean() ? CustomItems.createConcentratedBlackStoneWeapon() : CustomItems.createConcentratedBlackStoneArmor();",
      "raw_prediction": "nextBoolean() ? CustomItems.createConcentratedBlackStoneWeapon() : CustomItems.createConcentratedBlackStoneArmor();",
      "es": 0.8914728682170543,
      "em": false,
      "passed": false
    },
    {
      "index": 1549,
      "groundtruth": "add(inputBox1.getVBox());",
      "prediction": "add(inputBox1.getVBox());",
      "raw_prediction": "add(inputBox1.getVBox());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1550,
      "groundtruth": "inputBox1.setInitialConversion(false);",
      "prediction": "inputBox2.setInitialConversion(true);",
      "raw_prediction": "    inputBox2.setInitialConversion(true);\n        inputBox2.startConversion();",
      "es": 0.868421052631579,
      "em": false,
      "passed": false
    },
    {
      "index": 1551,
      "groundtruth": "inputBox1.startConversion();",
      "prediction": "inputBox1.setInitialConversion(false);",
      "raw_prediction": "    inputBox1.setInitialConversion(false);\n            InputBox.setBaseIndex(0);\n\n        }\n\n        @FXML\n        protected void addButton() {\n        InputBox newComponent = new InputBox();\n        counter++;\n        newComponent.setId(counter",
      "es": 0.6842105263157895,
      "em": false,
      "passed": false
    },
    {
      "index": 1552,
      "groundtruth": "inputBox1.setInitialConversion(true);",
      "prediction": "InputBox inputBox1 = inputBoxes.get(0);",
      "raw_prediction": "   InputBox inputBox1 = inputBoxes.get(0);",
      "es": 0.28205128205128205,
      "em": false,
      "passed": false
    },
    {
      "index": 1553,
      "groundtruth": "professorService.deleteById(id);",
      "prediction": "professorService.delete(id);",
      "raw_prediction": "    professorService.delete(id);",
      "es": 0.875,
      "em": false,
      "passed": false
    },
    {
      "index": 1554,
      "groundtruth": "List<Booking> bookings = bookingRepository.findByProfessor(id);",
      "prediction": "List<Booking> bookings = bookingRepository.findByProfessor(id);",
      "raw_prediction": "    List<Booking> bookings = bookingRepository.findByProfessor(id);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1555,
      "groundtruth": "bookingRepository.approve(id);",
      "prediction": "if (b.isApproved())",
      "raw_prediction": "if (b.isApproved()) {\n            return ResponseEntity.status(HttpStatus.CONFLICT).body(\"This booking is already approved.\");\n        }\n",
      "es": 0.30000000000000004,
      "em": false,
      "passed": false
    },
    {
      "index": 1556,
      "groundtruth": "InputBox.setBaseIndex(1);",
      "prediction": "inputBox2.setInitialConversion(true);",
      "raw_prediction": "    inputBox2.setInitialConversion(true);\n        inputBox2.startConversion();\n        inputBox2.setInitialConversion(false);",
      "es": 0.45945945945945943,
      "em": false,
      "passed": false
    },
    {
      "index": 1557,
      "groundtruth": "newComponent.getVBox().setId(String.valueOf(counter));",
      "prediction": "newComponent.getComboBox().setValue(\"USD\");",
      "raw_prediction": "    newComponent.getComboBox().setValue(\"USD\");\n        newComponent.getTextField().setText(\"1\");",
      "es": 0.5185185185185186,
      "em": false,
      "passed": false
    },
    {
      "index": 1558,
      "groundtruth": "String exchangeRate = conversion.getExchangeRate();",
      "prediction": "String exchangeRate = result.split(\" \")[1];",
      "raw_prediction": "String exchangeRate = result.split(\" \")[1];",
      "es": 0.5098039215686274,
      "em": false,
      "passed": false
    },
    {
      "index": 1559,
      "groundtruth": "Errors.noConexion();",
      "prediction": "return \"offline\";",
      "raw_prediction": "    return \"offline\";\n        } catch (Exception e) {\n            System.out.println(\"no hay internet\");",
      "es": 0.30000000000000004,
      "em": false,
      "passed": false
    },
    {
      "index": 1560,
      "groundtruth": "inputBox.getComboBox().getValue());",
      "prediction": "inputBox.getComboBox().getValue());",
      "raw_prediction": "inputBox.getComboBox().getValue());\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1561,
      "groundtruth": "String resultOffline = conversion.convertOffline(exchangeRateOffline, baseTextField);",
      "prediction": "inputbox.setTextField(resultOffline);",
      "raw_prediction": "inputbox.setTextField(resultOffline);\n            inputbox.getLabel2().setTextFill(Color.RED);\n            inputbox.setLabel2(\" | Tipo de cambio: \" + exchangeRateOffline + \" (\" + date + \" ) \u26a0\");\n           ",
      "es": 0.23529411764705888,
      "em": false,
      "passed": false
    },
    {
      "index": 1562,
      "groundtruth": "inputBox.setTextField(resultOffline);",
      "prediction": "inputBox.setTextField(resultOffline);",
      "raw_prediction": "inputBox.setTextField(resultOffline);\n            inputBox.setLabel2(\" | Tipo de cambio: \" + baseComboBox + \" -> \" + inputBox.getComboBox().getValue() + \" : \" + exchangeRateOffline + \" (\" + date",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1563,
      "groundtruth": "startsWith(baseComboBox) && key.toString().endsWith(inputBox.getComboBox().getValue())) {",
      "prediction": "equals(baseComboBox + \"->\" + inputBox.getComboBox().getValue())",
      "raw_prediction": "equals(baseComboBox + \"->\" + inputBox.getComboBox().getValue())) {",
      "es": 0.5617977528089888,
      "em": false,
      "passed": false
    },
    {
      "index": 1564,
      "groundtruth": "inputBox.getComboBox().getValue() + \" : \" + exchangeRate);",
      "prediction": "inputBox.getComboBox().getValue() + \" = \" + exchangeRate);",
      "raw_prediction": "inputBox.getComboBox().getValue() + \" = \" + exchangeRate);\n            inputbox.getLabel2().setTextFill(Color.GREEN);",
      "es": 0.9827586206896551,
      "em": false,
      "passed": false
    },
    {
      "index": 1565,
      "groundtruth": "inputBox.getLabel2().setTextFill(Color.RED);",
      "prediction": "inputBox.getLabel2().setTextFill(Color.RED);",
      "raw_prediction": "inputBox.getLabel2().setTextFill(Color.RED);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1566,
      "groundtruth": "inputBox.setTextField(result);",
      "prediction": "inputbox.setTextField(result);",
      "raw_prediction": " inputbox.setTextField(result);",
      "es": 0.9666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 1567,
      "groundtruth": "inputBox.setLabel2(\" | Tipo de cambio: \" + exchangeRateOffline + \" (\" + date + \" ) \u26a0\");",
      "prediction": "inputbox.getLabel2().setText(\" | Tipo de cambio: \" + baseComboBox + \" -> \" + inputBox.getComboBox().getValue() + \" : \" + exchangeR",
      "raw_prediction": "inputbox.getLabel2().setText(\" | Tipo de cambio: \" + baseComboBox + \" -> \" + inputBox.getComboBox().getValue() + \" : \" + exchangeRateOffline + \" | Fecha: \" + date);\n            } else",
      "es": 0.41538461538461535,
      "em": false,
      "passed": false
    },
    {
      "index": 1568,
      "groundtruth": "inputBox.setLabel2(\" | No hay datos guardados \u26a0\");",
      "prediction": "inputbox.getLabel2().setTex",
      "raw_prediction": "inputbox.getLabel2().setText(\" | Tipo de cambio: \" + baseComboBox + \" -> \" + inputBox.getComboBox().getValue() + \" : offline\");\n            }",
      "es": 0.36,
      "em": false,
      "passed": false
    },
    {
      "index": 1569,
      "groundtruth": "Node node : MainController.getVBox().getChildren()) {",
      "prediction": "Node node : MainController.g",
      "raw_prediction": "Node node : MainController.getVBox().getChildren()) {",
      "es": 0.5283018867924528,
      "em": false,
      "passed": false
    },
    {
      "index": 1570,
      "groundtruth": "= Utils.addCurrencies();",
      "prediction": "= Utils.getCurrencies();",
      "raw_prediction": "= Utils.getCurrencies();\n        comboBox.getItems().addAll(currencies);",
      "es": 0.875,
      "em": false,
      "passed": false
    },
    {
      "index": 1571,
      "groundtruth": "modified |= mySettingsComponent.isAutoPopup() != settings.autoPopup;",
      "prediction": "modified |= !mySettingsComponent.get_OPENAI_API_KEY().equals(settings.OPENAI_API_KEY);",
      "raw_prediction": "    modified |= !mySettingsComponent.get_OPENAI_API_KEY().equals(settings.OPENAI_API_KEY);\n        if (settings.OPENAI_API_KEY == null)\n            settings.OPENAI_API_KEY = ApiKeys.OPENAI_API_KEY;",
      "es": 0.5465116279069768,
      "em": false,
      "passed": false
    },
    {
      "index": 1572,
      "groundtruth": "|= mySettingsComponent.isAutoSaveToNewFile() != settings.autoSaveToNewFile;",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1573,
      "groundtruth": "Utils.obtenerCodigoPais(item);",
      "prediction": "Utils.obtenerCodigoPais(item);",
      "raw_prediction": "Utils.obtenerCodigoPais(item);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1574,
      "groundtruth": "modified |= mySettingsComponent.isAutoAddComments() != settings.autoAddComments;",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1575,
      "groundtruth": "modified = !mySettingsComponent.get_OPENAI_API_KEY().equals(settings.OPENAI_API_KEY);",
      "prediction": "modified = false;",
      "raw_prediction": "modified = false;\n        modified |= !mySettingsComponent.get_OPENAI_API_KEY().equals(settings.OPENAI_API_KEY);",
      "es": 0.18823529411764706,
      "em": false,
      "passed": false
    },
    {
      "index": 1576,
      "groundtruth": "!mySettingsComponent.getCustomRefactor().equals(settings.customRefactor);",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1577,
      "groundtruth": "mySettingsComponent.isAutoReplaceCode() != settings.autoReplaceCode;",
      "prediction": "mySettingsComponent.isAutoReplaceCode() != settings.autoReplaceCode;",
      "raw_prediction": "mySettingsComponent.isAutoReplaceCode() != settings.autoReplaceCode;",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1578,
      "groundtruth": ".setText(Utils.addSymbol(baseComboBox) + \"0\");",
      "prediction": ".setPadding(new Insets(0.0, 0.0, 0.0, 0.0));",
      "raw_prediction": ".setPadding(new Insets(0.0, 0.0, 0.0, 0.0));\n        label1.setPrefWidth(150.0);\n        label1.setPrefHeight(50.0",
      "es": 0.17391304347826086,
      "em": false,
      "passed": false
    },
    {
      "index": 1579,
      "groundtruth": "label1.setText(Utils.addSymbol(baseComboBox) + formattedNumber);",
      "prediction": "textField.setText(formattededNumber);",
      "raw_prediction": " textField.setText(formattededNumber);\n        });",
      "es": 0.375,
      "em": false,
      "passed": false
    },
    {
      "index": 1580,
      "groundtruth": "ok(this.orderService.getCustomerOrders(id));",
      "prediction": "ok(this.orderService.getOrdersByCustomer(id));",
      "raw_prediction": "ok(this.orderService.getOrdersByCustomer(id));",
      "es": 0.6956521739130435,
      "em": false,
      "passed": false
    },
    {
      "index": 1581,
      "groundtruth": "ok(this.pizzaService.getCheapest(price));",
      "prediction": "ok(this.pizzaService.getCheapestPizzas(price));",
      "raw_prediction": "ok(this.pizzaService.getCheapestPizzas(price));",
      "es": 0.8723404255319149,
      "em": false,
      "passed": false
    },
    {
      "index": 1582,
      "groundtruth": "orderRepository.findAllByMethodIn(methods);",
      "prediction": "orderRepository.findAllByMethodIn(methods);",
      "raw_prediction": "orderRepository.findAllByMethodIn(methods);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1583,
      "groundtruth": "orderRepository.findCustomerOrders(idCustomer);",
      "prediction": "orderRepository.findAllByCustomerId(idCustomer);",
      "raw_prediction": "orderRepository.findAllByCustomerId(idCustomer);",
      "es": 0.7916666666666666,
      "em": false,
      "passed": false
    },
    {
      "index": 1584,
      "groundtruth": "this.pizzaRepository.findAllByAvailableTrueAndDescriptionContainingIgnoreCase(ingredient);",
      "prediction": "this.pizzaRepository.findAllByAvailableTrueAndDescriptionContainingIgnoreCase(ingredient);",
      "raw_prediction": "this.pizzaRepository.findAllByAvailableTrueAndDescriptionContainingIgnoreCase(ingredient);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1585,
      "groundtruth": "orderRepository.findSummary(orderId);",
      "prediction": "orderRepository.getSummary(orderId);",
      "raw_prediction": "orderRepository.getSummary(orderId);",
      "es": 0.8918918918918919,
      "em": false,
      "passed": false
    },
    {
      "index": 1586,
      "groundtruth": "return this.pizzaRepository.findFirstByAvailableTrueAndNameIgnoreCase(name).orElseThrow(() -> new RuntimeException(\"La pizza no existe\"));",
      "prediction": "return this.pizzaRepository.findByName(name);",
      "raw_prediction": "    return this.pizzaRepository.findByName(name);",
      "es": 0.32608695652173914,
      "em": false,
      "passed": false
    },
    {
      "index": 1587,
      "groundtruth": "return mergePluginManagement != null ? mergePluginManagement : mixins.isMergePluginManagement();",
      "prediction": "return mergePluginManagement != null ? mergePluginManagement : mixins.isMergePluginManagement();",
      "raw_prediction": "    return mergePluginManagement != null ? mergePluginManagement : mixins.isMergePluginManagement();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1588,
      "groundtruth": ".pizzaRepository.findTop3ByAvailableTrueAndPriceLessThanEqualOrderByPriceAsc(price);",
      "prediction": ".pizzaRepository.findAllByAvailableTrueAndPriceLessThanEqual(price);",
      "raw_prediction": ".pizzaRepository.findAllByAvailableTrueAndPriceLessThanEqual(price);",
      "es": 0.7738095238095238,
      "em": false,
      "passed": false
    },
    {
      "index": 1589,
      "groundtruth": "null ? mergePlugins : mixins.isMergePlugins();",
      "prediction": "null ? mergePlugins : mixins.isMergePlugins();",
      "raw_prediction": "null ? mergePlugins : mixins.isMergePlugins();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1590,
      "groundtruth": "null ? mergeDistributionManagement : mixins.isMergeDistributionManagement();",
      "prediction": "null ? mergeDistributionManagement : mixins.isMergeDistributionManagement();",
      "raw_prediction": "null ? mergeDistributionManagement : mixins.isMergeDistributionManagement();\n    }\n\n    public void setMergeDistributionManagement(Boolean mergeDistributionManagement) {\n        this.mergeDistributionManagement = mergeDistributionManagement;",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1591,
      "groundtruth": "!= null ? activateProfiles : mixins.isActivateProfiles();",
      "prediction": "!= null ? activateProfiles : mixins.isActivateProfiles();",
      "raw_prediction": "!= null ? activateProfiles : mixins.isActivateProfiles();\n    }\n\n    public void setActivateProfiles(Boolean activateProfiles) {\n        this.activateProfiles = activateProfiles;",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1592,
      "groundtruth": "mixins.getDefaultMixinType();",
      "prediction": "\"pom\";",
      "raw_prediction": "\"pom\";",
      "es": 0.06896551724137934,
      "em": false,
      "passed": false
    },
    {
      "index": 1593,
      "groundtruth": "recurse != null ? recurse : mixins.isRecurse();",
      "prediction": "recurse != null ? recurse : mixins.isRecurse();",
      "raw_prediction": "recurse != null ? recurse : mixins.isRecurse();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1594,
      "groundtruth": "!= null ? mergeRepositories : mixins.isMergeRepositories();",
      "prediction": "!= null ? mergeRepositories : mixins.isMergeRepositories();",
      "raw_prediction": "!= null ? mergeRepositories : mixins.isMergeRepositories();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1595,
      "groundtruth": "ok(eventService.getUserEvents(userId));",
      "prediction": "badRequest().build();",
      "raw_prediction": "badRequest().build();",
      "es": 0.17948717948717952,
      "em": false,
      "passed": false
    },
    {
      "index": 1596,
      "groundtruth": "attendanceRepository.findByUserIdAndRole(userId, role).forEach(\n                attendance -> events.add(attendance.getEvent())\n        );",
      "prediction": "if (user.get().getRole().equals(role)) {\n            attendanceRepository.findByUserId(userId).forEach(\n            attendance -> events.add(attendance.getEvent())\n        );",
      "raw_prediction": "if (user.get().getRole().equals(role)) {\n            attendanceRepository.findByUserId(userId).forEach(\n            attendance -> events.add(attendance.getEvent())\n        );\n        }",
      "es": 0.5977011494252873,
      "em": false,
      "passed": false
    },
    {
      "index": 1597,
      "groundtruth": "eventService.getSingleEvent(eventId);",
      "prediction": "eventService.getEvent(eventId);",
      "raw_prediction": "eventService.getEvent(eventId);",
      "es": 0.8378378378378378,
      "em": false,
      "passed": false
    },
    {
      "index": 1598,
      "groundtruth": "String username = jwtService.extractUsername(jwtToken);",
      "prediction": "String username = jwtService.extractUsername(jwtToken);",
      "raw_prediction": "    String username = jwtService.extractUsername(jwtToken);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1599,
      "groundtruth": "attendanceRepository.findByUserId(userId).forEach(\n                attendance -> events.add(attendance.getEvent())\n        );",
      "prediction": "if (user.isEmpty()) {\n            throw new AcmException(ErrorConstants.USER_NOT_FOUND, HttpStatus.NOT_FOUND);",
      "raw_prediction": " if (user.isEmpty()) {\n            throw new AcmException(ErrorConstants.USER_NOT_FOUND, HttpStatus.NOT_FOUND);\n        };\n        attendanceRepository.findByUserId(userId).forEach(\n            attendance -> events.add(attendance.getEvent())\n        );",
      "es": 0.136,
      "em": false,
      "passed": false
    },
    {
      "index": 1600,
      "groundtruth": "return this.pizzaRepository.findAllByAvailableTrueAndDescriptionContainingIgnoreCase(ingredient);",
      "prediction": "return this.pizzaRepository.findAllByAvailableTrueAndDescriptionContainingIgnoreCase(ingredient);",
      "raw_prediction": "    return this.pizzaRepository.findAllByAvailableTrueAndDescriptionContainingIgnoreCase(ingredient);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1601,
      "groundtruth": ".orderRepository.findCustomerOrders(idCustomer);",
      "prediction": ".orderRepository.findAllByCustomer_Id(idCustomer);",
      "raw_prediction": ".orderRepository.findAllByCustomer_Id(idCustomer);",
      "es": 0.8,
      "em": false,
      "passed": false
    },
    {
      "index": 1602,
      "groundtruth": "this.pizzaRepository.findTop3ByAvailableTrueAndPriceLessThanEqualOrderByPriceAsc(price);",
      "prediction": "this.pizzaRepository.findAllByAvailableTrueAndPriceLessThan(price);",
      "raw_prediction": "this.pizzaRepository.findAllByAvailableTrueAndPriceLessThan(price);",
      "es": 0.7272727272727273,
      "em": false,
      "passed": false
    },
    {
      "index": 1603,
      "groundtruth": "this.orderService.getCustomerOrders(id));",
      "prediction": "this.orderService.getOutsideOrders(id));",
      "raw_prediction": "this.orderService.getOutsideOrders(id));",
      "es": 0.8536585365853658,
      "em": false,
      "passed": false
    },
    {
      "index": 1604,
      "groundtruth": "!= null && !encryptor.isEncrypted(propValue)) {",
      "prediction": "== null) {",
      "raw_prediction": "== null) {\n\t\t\tpropValue = \"\";\n\t\t\t} else if (encryptor.isEncrypted(propValue)) {\n\t\t\tpropValue = encryptor.decrypt(propValue).toString();\n\t\t\t} else {",
      "es": 0.19148936170212771,
      "em": false,
      "passed": false
    },
    {
      "index": 1605,
      "groundtruth": "return customerRepository.findCustomerByName(name);",
      "prediction": "return customerRepository.findCustomerByName(name);",
      "raw_prediction": "return customerRepository.findCustomerByName(name);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1606,
      "groundtruth": "encryptor.decrypt(encryptedValue).toString();",
      "prediction": "encryptor.decrypt(encryptedValue);",
      "raw_prediction": "encryptor.decrypt(encryptedValue);",
      "es": 0.7555555555555555,
      "em": false,
      "passed": false
    },
    {
      "index": 1607,
      "groundtruth": "= encryptor.decrypt(value).toString();",
      "prediction": "= decrypt(value);",
      "raw_prediction": "= decrypt(value);",
      "es": 0.4473684210526315,
      "em": false,
      "passed": false
    },
    {
      "index": 1608,
      "groundtruth": "if (encryptor.isEncrypted(value)) {",
      "prediction": "if (value != null)",
      "raw_prediction": "\tif (value != null) {",
      "es": 0.19999999999999996,
      "em": false,
      "passed": false
    },
    {
      "index": 1609,
      "groundtruth": "loader.mergeMixins();",
      "prediction": "loader.loadMixins();",
      "raw_prediction": "\n            loader.loadMixins();",
      "es": 0.7619047619047619,
      "em": false,
      "passed": false
    },
    {
      "index": 1610,
      "groundtruth": "mDiracSound.getMusic() == 1;",
      "prediction": "mDiracSound.isEnabled();",
      "raw_prediction": "mDiracSound.isEnabled();",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 1611,
      "groundtruth": "String name = wrapper.getName();",
      "prediction": "String name = wrapper.getName();",
      "raw_prediction": " String name = wrapper.getName();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1612,
      "groundtruth": "return getFriendlyString().compareTo(o.getFriendlyString());",
      "prediction": "if (o instanceof StringVersion)",
      "raw_prediction": " if (o instanceof StringVersion) {\n            return version.compareTo(((StringVersion) o).version);\n        } else {\n            return 0;\n        }",
      "es": 0.23333333333333328,
      "em": false,
      "passed": false
    },
    {
      "index": 1613,
      "groundtruth": "mod.getMetadata().getId() + \"->\" + value;",
      "prediction": "mod.getMetadata().getId() + \"->(0.2.x)\" + value;",
      "raw_prediction": "mod.getMetadata().getId() + \"->(0.2.x)\" + value;",
      "es": 0.8541666666666666,
      "em": false,
      "passed": false
    },
    {
      "index": 1614,
      "groundtruth": "return VersionParser.parseSemantic(s);",
      "prediction": "return VersionParser.parseSemantic(s);",
      "raw_prediction": "    return VersionParser.parseSemantic(s);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1615,
      "groundtruth": "return o.hasWildcard() ? 0 : -1;",
      "prediction": "return -1;",
      "raw_prediction": "return -1;",
      "es": 0.3125,
      "em": false,
      "passed": false
    },
    {
      "index": 1616,
      "groundtruth": "return VersionParser.parse(string, false);",
      "prediction": "return VersionParser.parse(string);",
      "raw_prediction": "    return VersionParser.parse(string);",
      "es": 0.8333333333333334,
      "em": false,
      "passed": false
    },
    {
      "index": 1617,
      "groundtruth": "().getMetadata().getId(), ex);",
      "prediction": "(), ex);",
      "raw_prediction": "(), ex);",
      "es": 0.2666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 1618,
      "groundtruth": "exception = new EntrypointException(key, entry.getModContainer().getMetadata().getId(), t);",
      "prediction": "exception = new EntrypointException(key, entry.getModContainer().getMetadata().getId(), t);",
      "raw_prediction": "exception = new EntrypointException(key, entry.getModContainer().getMetadata().getId(), t);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1619,
      "groundtruth": "(ForgePatch.getGameDir());",
      "prediction": "(new File(\"\").getAbsoluteFile().toPath());",
      "raw_prediction": "(new File(\"\").getAbsoluteFile().toPath());\n    }\n\n    public void addMod(ModContainer mod) {\n        modMap.put(mod.getMetadata().getId(), mod);\n        mods.add(mod);",
      "es": 0.26190476190476186,
      "em": false,
      "passed": false
    },
    {
      "index": 1620,
      "groundtruth": "parent.getVersionComponentCount();",
      "prediction": "parent.getVersionComponentCount();",
      "raw_prediction": "parent.getVersionComponentCount();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1621,
      "groundtruth": "userDAO.getById(id);",
      "prediction": "userDAO.getById(id);",
      "raw_prediction": "userDAO.getById(id);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1622,
      "groundtruth": "parent = SemanticVersion.parse(version);",
      "prediction": "parent = new SemanticVersionImpl(version, storeX);",
      "raw_prediction": "    parent = new SemanticVersionImpl(version, storeX);",
      "es": 0.64,
      "em": false,
      "passed": false
    },
    {
      "index": 1623,
      "groundtruth": "userDAO.getCount();",
      "prediction": "userDAO.getUserCount();",
      "raw_prediction": "userDAO.getUserCount();",
      "es": 0.8260869565217391,
      "em": false,
      "passed": false
    },
    {
      "index": 1624,
      "groundtruth": "userDAO.getByName(name);",
      "prediction": "userDAO.findByName(name);",
      "raw_prediction": "userDAO.findByName(name);",
      "es": 0.84,
      "em": false,
      "passed": false
    },
    {
      "index": 1625,
      "groundtruth": "documentDAO.getCount();",
      "prediction": "documentDAO.getCountDocument();",
      "raw_prediction": "documentDAO.getCountDocument();",
      "es": 0.7419354838709677,
      "em": false,
      "passed": false
    },
    {
      "index": 1626,
      "groundtruth": "return mod.getMetadata().getId() + \"->(0.3.x)\" + value;",
      "prediction": "return mod.getMetadata().getId() + \"->\" + value;",
      "raw_prediction": "return mod.getMetadata().getId() + \"->\" + value;",
      "es": 0.8727272727272728,
      "em": false,
      "passed": false
    },
    {
      "index": 1627,
      "groundtruth": "controllerInfo.getMethod();",
      "prediction": "psiClass.findMe",
      "raw_prediction": "psiClass.findMethodsByName(controllerInfo.getMethod().getName(), false)[0];",
      "es": 0.14814814814814814,
      "em": false,
      "passed": false
    },
    {
      "index": 1628,
      "groundtruth": "if(controllerInfo.getRequestMethod().toLowerCase().contains(lowerCase)){",
      "prediction": "if(controllerInfo.getMethod().getName().toLowerCase().contains(lowerCase))",
      "raw_prediction": "if(controllerInfo.getMethod().getName().toLowerCase().contains(lowerCase)){",
      "es": 0.8108108108108107,
      "em": false,
      "passed": false
    },
    {
      "index": 1629,
      "groundtruth": "if(controllerInfo.getPath().toLowerCase().contains(lowerCase)){",
      "prediction": "if(controllerInfo.getControllerName().toLowerCase().contains(lowerCase))",
      "raw_prediction": "if(controllerInfo.getControllerName().toLowerCase().contains(lowerCase)){\n            return true;\n        }\n if(controllerInfo.getControllerPath().toLowerCase().contains(lowerCase)){",
      "es": 0.8055555555555556,
      "em": false,
      "passed": false
    },
    {
      "index": 1630,
      "groundtruth": "getSwaggerInfo() != null && controllerInfo.getSwaggerInfo().toLowerCase().contains(lowerCase)){",
      "prediction": "getSwaggerOperationId() != null && controllerInfo",
      "raw_prediction": "getSwaggerOperationId() != null && controllerInfo.getSwaggerOperationId().toLowerCase().contains(lowerCase)){",
      "es": 0.33684210526315794,
      "em": false,
      "passed": false
    },
    {
      "index": 1631,
      "groundtruth": "() != null && controllerInfo.getSwaggerNotes().toLowerCase().contains(lowerCase)){",
      "prediction": "() != null && controllerInfo.getSwaggerNote",
      "raw_prediction": "() != null && controllerInfo.getSwaggerNotes().toLowerCase().contains(lowerCase)){",
      "es": 0.524390243902439,
      "em": false,
      "passed": false
    },
    {
      "index": 1632,
      "groundtruth": "controllerInfo.getSwaggerNotes() != null && controllerInfo.getSwaggerNotes().toLowerCase().contains(lowerCase)){",
      "prediction": "controllerInfo.getMethod().getName().toLowerCase().contain",
      "raw_prediction": "controllerInfo.getMethod().getName().toLowerCase().contains(lowerCase)){",
      "es": 0.4642857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 1633,
      "groundtruth": "= controllerInfo.getMethod().getContainingFile();",
      "prediction": "= controllerInfo.getFile();",
      "raw_prediction": "= controllerInfo.getFile();",
      "es": 0.5510204081632653,
      "em": false,
      "passed": false
    },
    {
      "index": 1634,
      "groundtruth": "(feignInfo.getMethod());",
      "prediction": "(feignInfo.getFeignClass());",
      "raw_prediction": "(feignInfo.getFeignClass());",
      "es": 0.6785714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 1635,
      "groundtruth": "if(controllerInfo.getSwaggerInfo() != null && controllerInfo.getSwaggerInfo().toLowerCase().contains(lowerCase)){",
      "prediction": "if(controllerInfo.getControllerName().toLowerCase().contains(lowerCase))",
      "raw_prediction": "if(controllerInfo.getControllerName().toLowerCase().contains(lowerCase)){",
      "es": 0.6106194690265487,
      "em": false,
      "passed": false
    },
    {
      "index": 1636,
      "groundtruth": "database.getConnection().close();",
      "prediction": "database.disconnect();",
      "raw_prediction": " database.disconnect();",
      "es": 0.5454545454545454,
      "em": false,
      "passed": false
    },
    {
      "index": 1637,
      "groundtruth": "genre.setTitle(resultSet.getString(\"title\"));",
      "prediction": "genre.setTitle(resultSet.getString(\"title\"));",
      "raw_prediction": "genre.setTitle(resultSet.getString(\"title\"));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1638,
      "groundtruth": "genre.setId(resultSet.getInt(\"id\"));",
      "prediction": "genre.setId(resultSet.getInt(\"id\"));",
      "raw_prediction": "genre.setId(resultSet.getInt(\"id\"));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1639,
      "groundtruth": "comment.setText(res.getString(\"text\"));",
      "prediction": "comment.setText(res.getString(\"text\"));",
      "raw_prediction": "    comment.setText(res.getString(\"text\"));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1640,
      "groundtruth": "relocation.getPattern(),\n                        relocation.getRelocatedPattern(),\n                        relocation.getIncludes(),\n                        relocation.getExcludes()\n                ));",
      "prediction": "relocation.getFrom(),\nrelocation.getTo(),\nrelocation.getExcludes(),\nrelocation.getIncludes()\n));",
      "raw_prediction": "\nrelocation.getFrom(),\nrelocation.getTo(),\nrelocation.getExcludes(),\nrelocation.getIncludes()\n));",
      "es": 0.4328358208955224,
      "em": false,
      "passed": false
    },
    {
      "index": 1641,
      "groundtruth": "relocation.getIncludes(),\n                        relocation.getExcludes()\n                ));",
      "prediction": "relocation.getExclusions(),\npublic relocation.getExclusions()\n));",
      "raw_prediction": " relocation.getExclusions(),\npublic relocation.getExclusions()\n));",
      "es": 0.4787234042553191,
      "em": false,
      "passed": false
    },
    {
      "index": 1642,
      "groundtruth": "relocation.getRelocatedPattern(),\n                        relocation.getIncludes(),\n                        relocation.getExcludes()\n                ));",
      "prediction": "relocation.getReplacement(),\npublic relocation.getExclusions(),\npublic relocation.getIncludes()\n));",
      "raw_prediction": " relocation.getReplacement(),\npublic relocation.getExclusions(),\npublic relocation.getIncludes()\n));",
      "es": 0.4671052631578947,
      "em": false,
      "passed": false
    },
    {
      "index": 1643,
      "groundtruth": "comment.setId(res.getInt(\"id\"));",
      "prediction": "comment.setId(res.getInt(\"id\"));",
      "raw_prediction": "comment.setId(res.getInt(\"id\"));\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1644,
      "groundtruth": "playlist.setUser(res.getInt(\"user\"));",
      "prediction": "tist.setUser(res.getInt(\"user\"));",
      "raw_prediction": "tist.setUser(res.getInt(\"user\"));",
      "es": 0.8648648648648649,
      "em": false,
      "passed": false
    },
    {
      "index": 1645,
      "groundtruth": "playlist.setPublic(res.getBoolean(\"is_public\"));",
      "prediction": "playlist.setPublic(res.getBoolean(\"is_public\"));",
      "raw_prediction": "playlist.setPublic(res.getBoolean(\"is_public\"));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1646,
      "groundtruth": ".setArtistObj(crudArtist.getArtistById(music.getArtist()));",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1647,
      "error": "RetryError[<Future at 0x10ac4d430 state=finished raised HTTPError>]",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1648,
      "error": "RetryError[<Future at 0x10a4f8560 state=finished raised HTTPError>]",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1649,
      "error": "RetryError[<Future at 0x10abb0860 state=finished raised HTTPError>]",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1650,
      "error": "RetryError[<Future at 0x10abdb560 state=finished raised HTTPError>]",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1651,
      "error": "RetryError[<Future at 0x10b77f920 state=finished raised HTTPError>]",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1652,
      "error": "RetryError[<Future at 0x10a34eab0 state=finished raised HTTPError>]",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1653,
      "groundtruth": "(response.getStatusCode() == 200) {",
      "prediction": "(response.getStatus() == 200)",
      "raw_prediction": "(response.getStatus() == 200) {",
      "es": 0.8285714285714285,
      "em": false,
      "passed": false
    },
    {
      "index": 1654,
      "groundtruth": "album.setReleaseDate(new java.sql.Date(new java.util.Date().getTime()));",
      "prediction": "album.setCoverPicPath(pathLbl.getText());",
      "raw_prediction": "    album.setCoverPicPath(pathLbl.getText());",
      "es": 0.33333333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 1655,
      "groundtruth": ".setText(String.valueOf(album.getArtist()));",
      "prediction": ".setText(album.getArtist());",
      "raw_prediction": ".setText(album.getArtist());\n        genreCombo.getItems().clear();",
      "es": 0.6363636363636364,
      "em": false,
      "passed": false
    },
    {
      "index": 1656,
      "groundtruth": "genre.getId() == albumId){",
      "prediction": "genre.getId() =",
      "raw_prediction": "genre.getId() == album.getGenre()){",
      "es": 0.5769230769230769,
      "em": false,
      "passed": false
    },
    {
      "index": 1657,
      "groundtruth": "(buffer.asInputStream())\n                .build()\n            );",
      "prediction": "(buffer)\n                .headers(headers)\n            .build()\n        );",
      "raw_prediction": "(buffer)\n                .headers(headers)\n            .build()\n        );\n        }",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 1658,
      "groundtruth": "a.getVariable());",
      "prediction": "a.getVariable());",
      "raw_prediction": "a.getVariable());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1659,
      "groundtruth": "a.isString() && b.isString()) {",
      "prediction": "a.isString() && b",
      "raw_prediction": "a.isString() && b.isString()) {",
      "es": 0.5483870967741935,
      "em": false,
      "passed": false
    },
    {
      "index": 1660,
      "groundtruth": "(a.isString() && b.isString()) {",
      "prediction": "(a.isString() && b.isString())",
      "raw_prediction": "(a.isString() && b.isString()) {",
      "es": 0.9375,
      "em": false,
      "passed": false
    },
    {
      "index": 1661,
      "groundtruth": "[i] = new Token(tokenMethod.getMethod().process(a));",
      "prediction": "[i + 1] = new Token(method.process(a, b));",
      "raw_prediction": "[i + 1] = new Token(method.process(a, b));\n                } else {",
      "es": 0.5192307692307692,
      "em": false,
      "passed": false
    },
    {
      "index": 1662,
      "groundtruth": "((TokenMethod) token).getMethod());",
      "prediction": "((TokenMethod) token).getMethod());",
      "raw_prediction": "((TokenMethod) token).getMethod());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1663,
      "groundtruth": ".setAttribute(\"user_reg\", teacher.getName());",
      "prediction": ".setAttribute(\"loggedIn\", true);",
      "raw_prediction": ".setAttribute(\"loggedIn\", true);",
      "es": 0.5111111111111111,
      "em": false,
      "passed": false
    },
    {
      "index": 1664,
      "groundtruth": "genre.getId() == music.getGenre()){",
      "prediction": "genre.getId() == mu",
      "raw_prediction": "genre.getId() == music.getGenre()){",
      "es": 0.5428571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 1665,
      "groundtruth": "u.setName(rs.getString(3));",
      "prediction": "u.setTid(rs.getInt(3));",
      "raw_prediction": "u.setTid(rs.getInt(3));\n\t\t\t\t\tu.setTname(rs.getString(4));\n\t\t\t\t\tu.setTdept(rs.getString(5));\n\t\t\t\t\tu.setTcontact(rs.getString(6));\n\t\t\t\t\tu.setTaddress(rs.getString(7",
      "es": 0.6666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 1666,
      "groundtruth": "u.setPassword(rs.getString(4));",
      "prediction": "u.setPassword(rs.getString(4));",
      "raw_prediction": "u.setPassword(rs.getString(4));\n\t\t\t\t}\n\t\t\t\t\t",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1667,
      "groundtruth": "u.setMail(rs.getString(1));",
      "prediction": "u.setId(rs.getInt(1));",
      "raw_prediction": "u.setId(rs.getInt(1));",
      "es": 0.6666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 1668,
      "groundtruth": "u.setPass(rs.getString(2));",
      "prediction": "u.setPassword(rs.getString(2));",
      "raw_prediction": "u.setPassword(rs.getString(2));\n\t\t\t\t",
      "es": 0.8709677419354839,
      "em": false,
      "passed": false
    },
    {
      "index": 1669,
      "groundtruth": "u.setReg(rs.getString(3));",
      "prediction": "u.setReg(rs.getString(2));",
      "raw_prediction": "u.setReg(rs.getString(2));\n\t\t\t\tu.setPassword(rs.getString(3));",
      "es": 0.9615384615384616,
      "em": false,
      "passed": false
    },
    {
      "index": 1670,
      "groundtruth": "return reduce.get(0).getVariable();",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1671,
      "groundtruth": "u.setFullname(rs.getString(1));",
      "prediction": "u.setFullname(rs.getString(2));",
      "raw_prediction": "u.setFullname(rs.getString(2));",
      "es": 0.967741935483871,
      "em": false,
      "passed": false
    },
    {
      "index": 1672,
      "groundtruth": "album.getId() == music.getArtist()){",
      "prediction": "album.getId() == mus",
      "raw_prediction": "album.getId() == music.getAlbum()){",
      "es": 0.5555555555555556,
      "em": false,
      "passed": false
    },
    {
      "index": 1673,
      "groundtruth": "(album.getId() == music.getArtist()){",
      "prediction": "(album.getId() == music.getAlbum())",
      "raw_prediction": "(album.getId() == music.getAlbum()){",
      "es": 0.8378378378378378,
      "em": false,
      "passed": false
    },
    {
      "index": 1674,
      "groundtruth": "playlistName.setText(playlist.getTitle());",
      "prediction": "playlistName.setText(playlist.getName());",
      "raw_prediction": " playlistName.setText(playlist.getName());",
      "es": 0.9047619047619048,
      "em": false,
      "passed": false
    },
    {
      "index": 1675,
      "groundtruth": "(genre.getId() == music.getGenre()){",
      "prediction": "(genre.getId() == music.getGenre())",
      "raw_prediction": "(genre.getId() == music.getGenre()){",
      "es": 0.9722222222222222,
      "em": false,
      "passed": false
    },
    {
      "index": 1676,
      "groundtruth": "Operator operator = tokenOperator.getOperation();",
      "prediction": "Operator operator = tokenOperator.getOperation();",
      "raw_prediction": "Operator operator = tokenOperator.getOperation();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1677,
      "groundtruth": "Token(operator.getName() + resultTokens[i + 1].getVariable());",
      "prediction": "Token(operator.getName() + resultTokens[i + 1].getVariable());",
      "raw_prediction": "Token(operator.getName() + resultTokens[i + 1].getVariable());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1678,
      "groundtruth": "= new Token(operator.getName() + resultTokens[i + 1].getVariable());",
      "prediction": "= new Token(operator.getName() + resultTokens[i + 1].getVariable());",
      "raw_prediction": "= new Token(operator.getName() + resultTokens[i + 1].getVariable());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1679,
      "groundtruth": "response.getJson(), Music.class);",
      "prediction": "response.getJson(), Music.class);",
      "raw_prediction": "response.getJson(), Music.class);\n        } catch (IOException | ClassNotFoundException e) {\n            throw new RuntimeException(e);\n        }\n        musics = new ArrayList<>();\n        try {\n            Request request = new Request(\"getMusicNames\");\n            request",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1680,
      "groundtruth": "System.out.println(\"test\" + response.getMessage());",
      "prediction": "System.out.println(response.getMessage());",
      "raw_prediction": "System.out.println(response.getMessage());",
      "es": 0.8235294117647058,
      "em": false,
      "passed": false
    },
    {
      "index": 1681,
      "groundtruth": "setHeaderText(response1.getMessage());",
      "prediction": "setTitleText(\"Added to playlist!\");",
      "raw_prediction": "setTitleText(\"Added to playlist!\");\n                alert.setContentText(\"Music added to playlist!\");\n",
      "es": 0.3157894736842105,
      "em": false,
      "passed": false
    },
    {
      "index": 1682,
      "groundtruth": "a.getVariable().toString().isEmpty()) {",
      "prediction": "operator.getPriority()",
      "raw_prediction": "operator.getPriority() == 0) {\n                setSafeToken(resultTokens, i, null);\n                setSafeToken(resultTokens, i - 1, null);\n                resultTokens[i + 1] = new Token(operator.getName()",
      "es": 0.28205128205128205,
      "em": false,
      "passed": false
    },
    {
      "index": 1683,
      "groundtruth": "(album.getCoverPicPath() != null) {",
      "prediction": "(album.getCoverPicPath() != null)",
      "raw_prediction": "(album.getCoverPicPath() != null) {",
      "es": 0.9428571428571428,
      "em": false,
      "passed": false
    },
    {
      "index": 1684,
      "groundtruth": "final GptTurboModel model = GptTurboDto.convertToGptTurboModel(dto);",
      "prediction": "GptTurboModel model = JSON.parseObject(dto.getMessages(), GptTurboModel.class);",
      "raw_prediction": "    GptTurboModel model = JSON.parseObject(dto.getMessages(), GptTurboModel.class);",
      "es": 0.4683544303797469,
      "em": false,
      "passed": false
    },
    {
      "index": 1685,
      "groundtruth": "() + \"_\" + getIdentityResolver().getIdentityKey(), getConfiguration());",
      "prediction": "entityResolver(), configuration);",
      "raw_prediction": "entityResolver(), configuration);\n    }\n\n    public Bucket getBucket() {\n        return getBucket(null);",
      "es": 0.45070422535211263,
      "em": false,
      "passed": false
    },
    {
      "index": 1686,
      "groundtruth": "dslParser.parse(arrangement);",
      "prediction": "dslParser.parse(arrangement);",
      "raw_prediction": "     dslParser.parse(arrangement);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1687,
      "groundtruth": "el.getTypename();",
      "prediction": "el.getType();",
      "raw_prediction": "el.getType();",
      "es": 0.7647058823529411,
      "em": false,
      "passed": false
    },
    {
      "index": 1688,
      "groundtruth": "body.getVariables().getRepresentations();",
      "prediction": "body.getQuery().getRepresentationsations();",
      "raw_prediction": "body.getQuery().getRepresentationsations();",
      "es": 0.6511627906976745,
      "em": false,
      "passed": false
    },
    {
      "index": 1689,
      "groundtruth": "query = body.getQuery().replaceFirst(\".+?\\\\)\", \"\");",
      "prediction": "query = body.getQuery();",
      "raw_prediction": "query = body.getQuery();",
      "es": 0.47058823529411764,
      "em": false,
      "passed": false
    },
    {
      "index": 1690,
      "groundtruth": "int status = ProcessUtils.runAndWait(cmd, tempDir);",
      "prediction": "String cmd = installer.getE",
      "raw_prediction": "\n            String cmd = installer.getExecute().replace(\"{version}\", version).replace(\"{java}\", options.java);\n            File tempDir = installerFile.getParentFile();\n            File archiveFile = new File(tempDir, installer.getArchive());\n\n            int",
      "es": 0.1568627450980392,
      "em": false,
      "passed": false
    },
    {
      "index": 1691,
      "groundtruth": "FileUtils.writeFile(new File(cwd, \"eula.txt\"), \"eula=true\");",
      "prediction": "String eula = options.cwd + \"/eula.txt\";",
      "raw_prediction": "String eula = options.cwd + \"/eula.txt\";\n            FileUtils.writeFile(eula, \"eula=true\");\n            cmd += \" -eula=\" + eula;",
      "es": 0.2666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 1692,
      "groundtruth": "Logger.info(\"Process exited with code: \" + exitCode);",
      "prediction": "if (exitCode != 0) {",
      "raw_prediction": "        if (exitCode != 0) {\n                Logger.crit(\"Server exited with code \" + exitCode);\n            }",
      "es": 0.2264150943396226,
      "em": false,
      "passed": false
    },
    {
      "index": 1693,
      "groundtruth": "setNumero(endereco.getNumero());",
      "prediction": "setLogradouro(endereco.getLogradouro());",
      "raw_prediction": "setLogradouro(endereco.getLogradouro());\n        enderecoSalvo.setBairro(endereco.getBairro());\n        enderecoSalvo.setCidade(endereco.getCidade());\n        enderecoSalvo.setEstado(endereco.getEstado());\n        enderecoSalvo.set",
      "es": 0.6,
      "em": false,
      "passed": false
    },
    {
      "index": 1694,
      "groundtruth": "endereco = modelMapper.getMapper().map(enderecoForm, Endereco.class);",
      "prediction": "endereco = modelMapper.getMapper().map(enderecoForm, Endereco.class);;",
      "raw_prediction": "endereco = modelMapper.getMapper().map(enderecoForm, Endereco.class);;",
      "es": 0.9857142857142858,
      "em": false,
      "passed": false
    },
    {
      "index": 1695,
      "groundtruth": "setComplemento(endereco.getComplemento());",
      "prediction": "setComplemento(endereco.getComplemento());",
      "raw_prediction": "setComplemento(endereco.getComplemento());\n        enderecoSalvo.setBairro(endereco.getBairro());\n        enderecoSalvo.setCidade(endereco.getCidade());\n        enderecoSalvo.setEstado(endereco.getEstado());\n        endereco",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1696,
      "groundtruth": "DownloadUtils.download(this.url, finalFile, ignoreExist);",
      "prediction": "if (!ignoreExist && finalFile.exists())",
      "raw_prediction": "if (!ignoreExist && finalFile.exists()) {\n            return;\n        }\n\n        File tempFile = DownloadUtils.downloadTemp(this.url);\n        FileUtils.moveAll(tempFile, directory);\n    }\n\n    public void install(File directory) throws IOException {\n",
      "es": 0.33333333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 1697,
      "groundtruth": "FileUtils.deleteRecursive(tempDir);",
      "prediction": "FileUtils.delete(tempDir);",
      "raw_prediction": "FileUtils.delete(tempDir);",
      "es": 0.7428571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 1698,
      "groundtruth": "installerFile = DownloadUtils.downloadTemp(this.url);",
      "prediction": "installerFile = new File(options.cwd, this.getJARName());",
      "raw_prediction": "installerFile = new File(options.cwd, this.getJARName());",
      "es": 0.4385964912280702,
      "em": false,
      "passed": false
    },
    {
      "index": 1699,
      "groundtruth": "DebugChannel channel = Preconditions.checkNonNull(getChannel(key));",
      "prediction": "DebugChannel channel = Precondition",
      "raw_prediction": "DebugChannel channel = Preconditions.checkNonNull(getChannel(key);\n        assert channel != null; // Should never happen, but added for safety.\n",
      "es": 0.5223880597014925,
      "em": false,
      "passed": false
    },
    {
      "index": 1700,
      "groundtruth": "FileUtils.writeFile(new File(options.cwd, \".mcdeploy\"), this.getJARName());",
      "prediction": "FileUtils.deleteRecursive(installerFile);",
      "raw_prediction": "    FileUtils.deleteRecursive(installerFile);",
      "es": 0.30666666666666664,
      "em": false,
      "passed": false
    },
    {
      "index": 1701,
      "groundtruth": "FileUtils.readFile(dotMCDFile);",
      "prediction": "dotMCDFile.exists() ? FileUtils.read(dotMCDFile) : \"server.jar",
      "raw_prediction": "dotMCDFile.exists() ? FileUtils.read(dotMCDFile) : \"server.jar\";",
      "es": 0.3548387096774194,
      "em": false,
      "passed": false
    },
    {
      "index": 1702,
      "groundtruth": "modelMapper.getMapper().map(enderecoForm, Endereco.class);",
      "prediction": "modelMapper.getMapper().map(enderecoForm, Endereco.class);",
      "raw_prediction": "modelMapper.getMapper().map(enderecoForm, Endereco.class);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1703,
      "groundtruth": "List<Endereco> enderecoPelosCEP = enderecoRepository.getEnderecosPeloCEP(cep);",
      "prediction": "Endereco enderecoPelosCEP = enderecoRepository.getEnderecoPorCEP(cep);",
      "raw_prediction": " Endereco enderecoPelosCEP = enderecoRepository.getEnderecoPorCEP(cep);",
      "es": 0.8717948717948718,
      "em": false,
      "passed": false
    },
    {
      "index": 1704,
      "groundtruth": "listaEnderecos = enderecoRepository.getEnderecoList();",
      "prediction": "listaEnderecos = enderecoRepository.listarEnderecos();",
      "raw_prediction": "listaEnderecos = enderecoRepository.listarEnderecos();\n",
      "es": 0.8518518518518519,
      "em": false,
      "passed": false
    },
    {
      "index": 1705,
      "groundtruth": "return R.error(\"\u672a\u77e5\u9519\u8bef\");",
      "prediction": "return R.success(\"success\");",
      "raw_prediction": "return R.success(\"success\");",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 1706,
      "groundtruth": ").put(\"name\", source.name()).put(\"version\", source.version()));",
      "prediction": ")",
      "raw_prediction": ")\n        .put(\"name\", source.name())\n        .put(\"version\", source.version())\n        .put(\"type\", toSnykPackageManager(source.pkgManager()))\n        .put(\"source\", \"local\"));\n  }\n\n  private Object",
      "es": 0.015873015873015928,
      "em": false,
      "passed": false
    },
    {
      "index": 1707,
      "groundtruth": ").purl().getType());",
      "prediction": ").getPackageName());",
      "raw_prediction": ").getPackageName());\n        }",
      "es": 0.4,
      "em": false,
      "passed": false
    },
    {
      "index": 1708,
      "groundtruth": "().map(v -> v.purl().getType()).distinct().toList();",
      "prediction": "()",
      "raw_prediction": "()\n            .map(PackageRef::getPackageManager)\n            .collect(Collectors.toList()));",
      "es": 0.038461538461538436,
      "em": false,
      "passed": false
    },
    {
      "index": 1709,
      "groundtruth": "severity(SeverityUtils.fromScore(score));",
      "prediction": "severity(SeverityUtils.fromCvss(score))",
      "raw_prediction": "severity(SeverityUtils.fromCvss(score))\n        .description(data.get(\"description\").asText())\n        .references(data.get(\"references\").elements().map(JsonNode::asText).toList())\n        .packageRef(PackageRef.builder",
      "es": 0.8536585365853658,
      "em": false,
      "passed": false
    },
    {
      "index": 1710,
      "groundtruth": "tree.root(), allDeps);",
      "prediction": "tree.root(), Collections.emptySet());",
      "raw_prediction": "tree.root(), Collections.emptySet());",
      "es": 0.5135135135135135,
      "em": false,
      "passed": false
    },
    {
      "index": 1711,
      "groundtruth": "(\"pkgs\", addPackages(depGraph, req.tree()));",
      "prediction": "(\"rootNodeId\", getId(req.root()));",
      "raw_prediction": "(\"rootNodeId\", getId(req.root()));\n\n    addPackages(depGraph, req.tree());\n",
      "es": 0.34090909090909094,
      "em": false,
      "passed": false
    },
    {
      "index": 1712,
      "groundtruth": "().add(createPkg(tree.root()));",
      "prediction": "();",
      "raw_prediction": "();\n    if (tree.root() != null) {\n      nodes.add(createNode(tree.root(), Collections.emptySet()));\n    }",
      "es": 0.09677419354838712,
      "em": false,
      "passed": false
    },
    {
      "index": 1713,
      "groundtruth": "c -> PackageRef.builder().purl(c.getPurl()).build())));",
      "prediction": "c -> PackageRef.builder().purl(c.getPurl()).build()));",
      "raw_prediction": " c -> PackageRef.builder().purl(c.getPurl()).build()));\n        });\n      }",
      "es": 0.9818181818181818,
      "em": false,
      "passed": false
    },
    {
      "index": 1714,
      "groundtruth": "&& !req.tree().getAll().isEmpty();",
      "prediction": "&& req.tree().dependencies() != null;",
      "raw_prediction": "&& req.tree().dependencies() != null;\n  }\n\n  public String buildRequest(@Body GraphRequest req) throws JsonProcessingException {\n    ArrayNode coordinates = mapper.createArrayNode();\n    req.tree().dependencies().forEach(\n        n ->",
      "es": 0.45945945945945943,
      "em": false,
      "passed": false
    },
    {
      "index": 1715,
      "groundtruth": "ref.name()).append(\"@\").append(ref.version()).toString();",
      "prediction": "ref.name()).append(\"@\").append(ref.version()).toString();",
      "raw_prediction": "ref.name()).append(\"@\").append(ref.version()).toString();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1716,
      "groundtruth": "PackageRef.builder().purl(pkgRef).build();",
      "prediction": "PackageRef.parse(pkgRef);",
      "raw_prediction": "PackageRef.parse(pkgRef);",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 1717,
      "groundtruth": "\"/*?\" + stonecutter.currentActive() + \" {",
      "prediction": "\" {\");",
      "raw_prediction": "\" {\");\n            editor.getCaretModel().moveToOffset(selectionStart + 1);\n            });\n        }\n    }\n\n        private void clickNewElse(ActionEvent e) {\n            StackingPopupDispatcher.getInstance().closeActivePopup();\n            String selection",
      "es": 0.07317073170731703,
      "em": false,
      "passed": false
    },
    {
      "index": 1718,
      "groundtruth": ").missingTokens.isEmpty() ? \"\" : stonecutter.tokenCache().missingTokens.iterator().next());",
      "prediction": ").commonTokenss().get(0));",
      "raw_prediction": ").commonTokenss().get(0));\n        tReader.setText(stonecutter.tokenCache().commonTokens().get(0));\n        tWriter.setText(stonecutter.tokenCache().commonTokens().get(0);",
      "es": 0.21978021978021978,
      "em": false,
      "passed": false
    },
    {
      "index": 1719,
      "groundtruth": "(ref.name(), issues);",
      "prediction": "(pkgRef, issues);",
      "raw_prediction": "(pkgRef, issues);",
      "es": 0.5714285714285714,
      "em": false,
      "passed": false
    },
    {
      "index": 1720,
      "groundtruth": "add(ref.purl().getType());",
      "prediction": "add(ref.purl().getType());",
      "raw_prediction": "add(ref.purl().getType());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1721,
      "groundtruth": "(ref.name()).append(\"@\").append(ref.version()).toString();",
      "prediction": "()",
      "raw_prediction": "()\n        .append(ref.name())\n        .append(\":\")\n        .append(ref.version())\n        .toString();",
      "es": 0.03448275862068961,
      "em": false,
      "passed": false
    },
    {
      "index": 1722,
      "groundtruth": "CharUtil.isBlankChar(str.charAt(i))) {",
      "prediction": "Character.isWhitespac",
      "raw_prediction": "Character.isWhitespace(str.charAt(i))) {",
      "es": 0.26315789473684215,
      "em": false,
      "passed": false
    },
    {
      "index": 1723,
      "groundtruth": "stonecutter.tokenCache().tokensByVersion.get(cVersion.getSelectedItem()).values());",
      "prediction": "stonecutter.tokens(cVersion.getSelectedItem()));",
      "raw_prediction": "stonecutter.tokens(cVersion.getSelectedItem()));\n",
      "es": 0.5783132530120482,
      "em": false,
      "passed": false
    },
    {
      "index": 1724,
      "groundtruth": "(stonecutter.currentActive());",
      "prediction": "(\"Stonecutter\");",
      "raw_prediction": "(\"Stonecutter\");\n        bTokens.setText(\"Tokens\");\n        bVersions.setEnabled(stonecutter.versions().size() > 1);\n        bTokens.setEnabled(stonecutter.tokenCache().tokensByVersion.get(stonecutter.current",
      "es": 0.4,
      "em": false,
      "passed": false
    },
    {
      "index": 1725,
      "groundtruth": "(moduleByRoot.get((setup.gradleProject().getChildProjects().get(version)).getProjectDir()), setup);",
      "prediction": "IfAbsent(module, setup);",
      "raw_prediction": "IfAbsent(module, setup);\n        for (StonecutterSetup setup : byVersioned.values())\n            byController.putIfAbsent(module, setup);",
      "es": 0.1515151515151515,
      "em": false,
      "passed": false
    },
    {
      "index": 1726,
      "groundtruth": "conditionResult = stonecutter.testVersion(expression);",
      "prediction": "conditionResult = !conditionResult;",
      "raw_prediction": " conditionResult = !conditionResult;",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 1727,
      "groundtruth": "req.tree() != null && !req.tree().getAll().isEmpty();",
      "prediction": "req.getDependencies() != null && !req.getDependencies().isEmpty();",
      "raw_prediction": "req.getDependencies() != null && !req.getDependencies().isEmpty();\n  }\n\n  public String buildRequest(@Body GraphRequest req) throws JsonProcessingException {\n    ArrayNode coordinates = mapper.createArrayNode();\n    req.getDependencies().forEach",
      "es": 0.6212121212121212,
      "em": false,
      "passed": false
    },
    {
      "index": 1728,
      "groundtruth": ".of(param.outputSideParam()), RetryJob.NEVER_RETRY);",
      "prediction": ".of(param.outputSideParam()), RetryJob.NEVER_RETRY);",
      "raw_prediction": ".of(param.outputSideParam()), RetryJob.NEVER_RETRY);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1729,
      "groundtruth": "PackageRef ref = tree.root();",
      "prediction": "PackageRef ref = tree.root().ref();",
      "raw_prediction": " PackageRef ref = tree.root().ref();",
      "es": 0.8285714285714285,
      "em": false,
      "passed": false
    },
    {
      "index": 1730,
      "groundtruth": "findExternalProject(entry.getValue().gradleProject(), entry.getKey()).keySet()) {",
      "prediction": "getModuleSourceSets().get(entry.getKey()).",
      "raw_prediction": "getModuleSourceSets().get(entry.getKey()).values()) {",
      "es": 0.37037037037037035,
      "em": false,
      "passed": false
    },
    {
      "index": 1731,
      "groundtruth": "job.setJobIndex(listIndexHolder.getAndIncrement());",
      "prediction": "{",
      "raw_prediction": "{\n            int index = listIndexHolder.getAndIncrement();\n            if (index < inputList.size()) {\nreturninputList.get(index).accept(job);\n            } else {\n            return;\n            }",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1732,
      "groundtruth": "(StrUtil.isBlank(str)) {",
      "prediction": "(str == null)",
      "raw_prediction": "(str == null) {",
      "es": 0.20833333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 1733,
      "groundtruth": "filePipe.close();",
      "prediction": "}",
      "raw_prediction": "}",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1734,
      "groundtruth": "deleteJob.run();",
      "prediction": "try {",
      "raw_prediction": "    try {\n            copy();\n        } catch (Exception e) {\n            deleteJob.run();\n            throw new RuntimeException(e);\n        }\n    }\n\n    private void copy() {\n        if (!input.exists(path)) {\n            return;\n        }",
      "es": 0.125,
      "em": false,
      "passed": false
    },
    {
      "index": 1735,
      "groundtruth": "deleteJob = RetryJob.fastFailWrap(DelJob.of(param.outputSideParam()));",
      "prediction": "deleteJob = param.getDeleteJob();",
      "raw_prediction": "deleteJob = param.getDeleteJob();",
      "es": 0.3285714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 1736,
      "groundtruth": "= param.getSubParams(MIRROR_MODE_PARAM, MIRROR_MODE_FULL).equals(MIRROR_MODE_APPEND);",
      "prediction": "= param.getSubParams(MIRROR_MODE_PARAM, MIRROR_MODE_APPEND).equals(MIRROR_MODE_APPEND);",
      "raw_prediction": "= param.getSubParams(MIRROR_MODE_PARAM, MIRROR_MODE_APPEND).equals(MIRROR_MODE_APPEND);",
      "es": 0.9310344827586207,
      "em": false,
      "passed": false
    },
    {
      "index": 1737,
      "groundtruth": "stonecutter.versions())\n                versionModel.add(version);",
      "prediction": "stonecutter.versions()) {\n                versionModel.addElement(version);",
      "raw_prediction": "stonecutter.versions()) {\n                versionModel.addElement(version);\n            }\n",
      "es": 0.88,
      "em": false,
      "passed": false
    },
    {
      "index": 1738,
      "groundtruth": "return ActivityJDBC.instance().update(ctx.body().asPojo(Activity.class).setId(id));",
      "prediction": "Activity activity = ctx.body().asJsonObject().mapTo(Activity.class);",
      "raw_prediction": "  Activity activity = ctx.body().asJsonObject().mapTo(Activity.class);\n            activity.setId(id);\n            return ActivityJDBC.instance().update(activity);\n        }).onFailure(ctx::fail).onSuccess(aVoid -> ctx.response().end());\n",
      "es": 0.3855421686746988,
      "em": false,
      "passed": false
    },
    {
      "index": 1739,
      "groundtruth": "(request.getLogin(), request.getPassword()).onComplete(ar -> {",
      "prediction": "(request.getUsername(), request.getPassword())",
      "raw_prediction": "(request.getUsername(), request.getPassword()).onFailure(ctx::fail).onSuccess(ar -> {",
      "es": 0.5806451612903225,
      "em": false,
      "passed": false
    },
    {
      "index": 1740,
      "groundtruth": "ActivityJDBC.instance().getById(id).compose(found -> {",
      "prediction": "ActivityJDBC.instance().getBy",
      "raw_prediction": "    ActivityJDBC.instance().getById(id).compose(found-> {",
      "es": 0.537037037037037,
      "em": false,
      "passed": false
    },
    {
      "index": 1741,
      "groundtruth": "UserJDBC.instance().login(request.getLogin(), request.getPassword()).onComplete(ar -> {",
      "prediction": "UserJDBC.instance().login(request.getUsername(), request.getPassword())",
      "raw_prediction": "    UserJDBC.instance().login(request.getUsername(), request.getPassword()).onFailure(ctx::fail).onSuccess(ar -> {",
      "es": 0.7011494252873562,
      "em": false,
      "passed": false
    },
    {
      "index": 1742,
      "groundtruth": "task.getOutputDir().set(task.getInputDir().get());",
      "prediction": "task.getOutputDir().set(versionProject.file(\"./build\"));",
      "raw_prediction": "task.getOutputDir().set(versionProject.file(\"./build\"));\n                task.getOutputJar().set(versionProject.file(\"./build/\" + versionData.version() + \".jar\"));\n            task.getOutputJar().get().asFile().getParentFile().",
      "es": 0.5714285714285714,
      "em": false,
      "passed": false
    },
    {
      "index": 1743,
      "groundtruth": "instance().login(request.getLogin(), request.getPassword()).onComplete(ar -> {",
      "prediction": "instance().login(request.getUsername(), request.getPassword())",
      "raw_prediction": "instance().login(request.getUsername(), request.getPassword()).onFailure(ctx::fail).onSuccess(ar -> {",
      "es": 0.6666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 1744,
      "groundtruth": "task.getInputDir().set(afterEvaluate.file(\"./src\"));",
      "prediction": "task.getOutputDir().set(task.getInputDir().get());",
      "raw_prediction": "task.getOutputDir().set(task.getInputDir().get());",
      "es": 0.5192307692307692,
      "em": false,
      "passed": false
    },
    {
      "index": 1745,
      "groundtruth": ".getOutputDir().set(task.getInputDir().get());",
      "prediction": ".getOutputDir().set(versionProject.file(\"./src\"));",
      "raw_prediction": ".getOutputDir().set(versionProject.file(\"./src\"));\n            task.getOutputDir().get().mkdirs();",
      "es": 0.56,
      "em": false,
      "passed": false
    },
    {
      "index": 1746,
      "groundtruth": "switch (matchPlayer.getTeam()) {",
      "prediction": "switch (matchPlayer.getTeam())",
      "raw_prediction": " switch (matchPlayer.getTeam()) {",
      "es": 0.9375,
      "em": false,
      "passed": false
    },
    {
      "index": 1747,
      "groundtruth": "(valorantAPI.sendRestRequest(\"/v2/match/\" + matchId).getAsJsonObject().getAsJsonObject(\"data\"));",
      "prediction": "(valorantapi.getMatch(matchId));",
      "raw_prediction": "(valorantapi.getMatch(matchId));\n);\n    }\n\n    public Match fetchData(String matchId, Region region) throws IOException {\n        return fetchData(valorantapi.getMatch(matchId, region));\n    }\n\n    public Match fetchData(String matchId,",
      "es": 0.27083333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 1748,
      "groundtruth": "JsonObject statusData = sendRestRequest(\"/v1/status/\" + region.getQuery()).getAsJsonObject().getAsJsonObject(\"data\");",
      "prediction": "JsonObject statusData = sendRestRequest(\"/v1/status/\" + region.getQuery()).getAsJsonObject();",
      "raw_prediction": "    JsonObject statusData = sendRestRequest(\"/v1/status/\" + region.getQuery()).getAsJsonObject();",
      "es": 0.7948717948717949,
      "em": false,
      "passed": false
    },
    {
      "index": 1749,
      "groundtruth": "+ region.getQuery() + \"?name=\" + data[0] + \"&tag=\" + data[1]).getAsJsonArray();",
      "prediction": "+ region.getQuery() + \"/\" + data[0] + \"/\" + data[1]).getAsJsonArray();",
      "raw_prediction": "+ region.getQuery() + \"/\" + data[0] + \"/\" + data[1]).getAsJsonArray();\n        }",
      "es": 0.8607594936708861,
      "em": false,
      "passed": false
    },
    {
      "index": 1750,
      "groundtruth": "commands.getOrderById(orderId),\n                HttpStatus.OK);",
      "prediction": "commands.getOrderById(orderId), HttpStatus.OK);",
      "raw_prediction": "commands.getOrderById(orderId), HttpStatus.OK);",
      "es": 0.746031746031746,
      "em": true,
      "passed": true
    },
    {
      "index": 1751,
      "groundtruth": "= commands.createRequest(body.get(\"bookId\"))\n                .toString();",
      "prediction": "= commands.createRequest(body.get(\"bookId\"));",
      "raw_prediction": "= commands.createRequest(body.get(\"bookId\"));",
      "es": 0.6164383561643836,
      "em": false,
      "passed": false
    },
    {
      "index": 1752,
      "groundtruth": "> booksToOrder = bookService.getBooksByIds(ids);",
      "prediction": "> booksToOrder = bookService.getBooksById(ids);",
      "raw_prediction": "> booksToOrder = bookService.getBooksById(ids);\n        List<Book> bookOutOfStock = bookService.getBooksOutOfStock(booksToOrder);",
      "es": 0.9791666666666666,
      "em": false,
      "passed": false
    },
    {
      "index": 1753,
      "groundtruth": "<>(commands.getNumberOfRequestsOnBook(bookId),\n                HttpStatus.OK);",
      "prediction": "<>(commands.getNumberOfRequestsOnBook(bookId), HttpStatus.OK);",
      "raw_prediction": "<>(commands.getNumberOfRequestsOnBook(bookId), HttpStatus.OK);",
      "es": 0.7948717948717949,
      "em": true,
      "passed": true
    },
    {
      "index": 1754,
      "groundtruth": "List<jenaTripleParser> result = serviceJena.getTriples(filePath, url, ontologyContentEncoded64) ;",
      "prediction": "List<jenaTripleParser> result = serviceJena.rdfToTriples(filePath, url, ontologyContentEncoded64);",
      "raw_prediction": "List<jenaTripleParser> result = serviceJena.rdfToTriples(filePath, url, ontologyContentEncoded64);",
      "es": 0.9387755102040817,
      "em": false,
      "passed": false
    },
    {
      "index": 1755,
      "groundtruth": "dependency.getVersion(),\n                dependency.getType(),\n                dependency.getClassifier(),\n                dependency.getScope()\n        );",
      "prediction": "dependency.getVersion(),\n            dependency.getType(),\n            dependency.getClassifier(),\n            dependency.getScope());",
      "raw_prediction": "dependency.getVersion(),\n            dependency.getType(),\n            dependency.getClassifier(),\n            dependency.getScope());\n    }\n\n    private static PomTransformer.NodeGavtcs nodeGavtcs(Gavtcs dependency) {\n        return new PomTransformer.NodeG",
      "es": 0.864516129032258,
      "em": false,
      "passed": false
    },
    {
      "index": 1756,
      "groundtruth": "dependency.getClassifier(),\n                dependency.getScope()\n        );",
      "prediction": "dependency.getClassifier(),\n            dependency.getScope());",
      "raw_prediction": "dependency.getClassifier(),\n            dependency.getScope());\n    }\n\n    private static PomTransformer.NodeGavtcs findDependency(Gavtcs dependency, PomTransformer.Context context) {\n        return context.getDependencies()\n            .stream()\n            .filter",
      "es": 0.8289473684210527,
      "em": false,
      "passed": false
    },
    {
      "index": 1757,
      "groundtruth": "pomFile).execute(() -> dependencyCommand().accept(pomFile, dependency));",
      "prediction": "pomFile)",
      "raw_prediction": "pomFile)\n            .withDependency(dependency)\n            .withDependencyCommand(addDependencyCommand)\n            .withBackupFunction(backupFunction)\n            .withRollbackFunction(rollbackFunction)\n            .execute();",
      "es": 0.11111111111111116,
      "em": false,
      "passed": false
    },
    {
      "index": 1758,
      "groundtruth": "dependency.getType(),\n                dependency.getClassifier(),\n                dependency.getScope()\n        );",
      "prediction": "dependency.getType(),\n            dependency.getClassifier(),\n            dependency.getScope());",
      "raw_prediction": "dependency.getType(),\n            dependency.getClassifier(),\n            dependency.getScope());\n    }\n\n    private static Gavtcs toGavtcs(Dependency dependency, String scope) {\n        return new Gavtcs(\ndependency.getGroupId(),\n       ",
      "es": 0.8508771929824561,
      "em": false,
      "passed": false
    },
    {
      "index": 1759,
      "groundtruth": "SWRLService.SWRLruleReclassification(filePath, url,reqBodies,reqHead);",
      "prediction": "SWRLService.SWRLruleReclassification(filePath,url,reqBodies,reqHead)",
      "raw_prediction": "SWRLService.SWRLruleReclassification(filePath,url,reqBodies,reqHead)",
      "es": 0.9714285714285714,
      "em": false,
      "passed": false
    },
    {
      "index": 1760,
      "groundtruth": "equivalentClass = request.getEquivalentClass();",
      "prediction": "equivalentClass = request.getEquivalentClass();",
      "raw_prediction": "equivalentClass = request.getEquivalentClass();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1761,
      "groundtruth": "result = SWRLService.SWRLruleReclassificationB64(ontologyContentDecoded64,reqBodies,reqHead);",
      "prediction": "result = SWRLService.SWRLruleReclassification(ontologyContentDecoded64,reqBodies,reqHead);",
      "raw_prediction": "result = SWRLService.SWRLruleReclassification(ontologyContentDecoded64,reqBodies,reqHead);",
      "es": 0.967741935483871,
      "em": false,
      "passed": false
    },
    {
      "index": 1762,
      "groundtruth": "DisjointClasses  = request.getDisjointClasses();",
      "prediction": "DisjointClasses = request.getDisjointClasses();",
      "raw_prediction": "DisjointClasses = request.getDisjointClasses();",
      "es": 0.9791666666666666,
      "em": true,
      "passed": true
    },
    {
      "index": 1763,
      "groundtruth": "= request.getParams();",
      "prediction": "= request.getParameters().split(\",\");",
      "raw_prediction": "= request.getParameters().split(\",\");",
      "es": 0.5945945945945945,
      "em": false,
      "passed": false
    },
    {
      "index": 1764,
      "groundtruth": "= reasonerService.getUnsatisfaisableClasses(filePath, url);",
      "prediction": "= reasonerService.getUnsatisfiableClasses(filePath, url)",
      "raw_prediction": "= reasonerService.getUnsatisfiableClasses(filePath, url)",
      "es": 0.9491525423728814,
      "em": false,
      "passed": false
    },
    {
      "index": 1765,
      "groundtruth": "= reasonerService.postConsistency(filePath, url);",
      "prediction": "= reasonerService.postConsistency(filePath, url);",
      "raw_prediction": "= reasonerService.postConsistency(filePath, url);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1766,
      "groundtruth": "reasonerService.postConsistencyContent(ontologyContentDecoded64);",
      "prediction": "reasonerService.postConsistencyContent(ontologyContentDecoded64);",
      "raw_prediction": "reasonerService.postConsistencyContent(ontologyContentDecoded64);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1767,
      "groundtruth": "reasonerService.postInferences(filePath, url,valuesList);",
      "prediction": "reasonerService.postInferences(filePath, url, valuesList);",
      "raw_prediction": "reasonerService.postInferences(filePath, url, valuesList);",
      "es": 0.9827586206896551,
      "em": false,
      "passed": false
    },
    {
      "index": 1768,
      "groundtruth": "result = reasonerService.postInferencesContent(ontologyContentDecoded64,valuesList);",
      "prediction": "result = reasonerService.postInferencesContent(ontologyContentDecoded64, valuesList);",
      "raw_prediction": "\tresult = reasonerService.postInferencesContent(ontologyContentDecoded64, valuesList);",
      "es": 0.9882352941176471,
      "em": false,
      "passed": false
    },
    {
      "index": 1769,
      "groundtruth": "result = reasonerService.getInferences(filePath, url);",
      "prediction": "result ;",
      "raw_prediction": "result ;\n    \tif (!(filePath == null) || !(url == null) ) {\n    \tresult = reasonerService.getInferences(filePath, url)\n    \t}else {\n    \tresult = reasonerService.getInferencesContent(ontologyContentDecoded6",
      "es": 0.14814814814814814,
      "em": false,
      "passed": false
    },
    {
      "index": 1770,
      "groundtruth": "= reasonerService.postUnsatisfaisableClasses(filePath, url);",
      "prediction": "= reasonerService.postUnsatisfaisableClasses(filePath, url);",
      "raw_prediction": "= reasonerService.postUnsatisfaisableClasses(filePath, url);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1771,
      "groundtruth": "callbackConfigCall = RestAdapter.createApi().getJsonUrl(url);",
      "prediction": "callbackConfigCall = RestAdapter.createApi().getJsonFile(url);",
      "raw_prediction": "    callbackConfigCall = RestAdapter.createApi().getJsonFile(url);",
      "es": 0.9516129032258065,
      "em": false,
      "passed": false
    },
    {
      "index": 1772,
      "groundtruth": "RestAdapter.createApi().getDriveJsonFileId(url);",
      "prediction": "RestAdapter.createApi().getJsonUrl(url);",
      "raw_prediction": "RestAdapter.createApi().getJsonUrl(url);",
      "es": 0.7916666666666666,
      "em": false,
      "passed": false
    },
    {
      "index": 1773,
      "groundtruth": "()).showAdIfAvailable(ActivitySplash.this, this::requestConfig);",
      "prediction": ").showAdIfAvailable(ActivitySplash.this, this::requestConfig);",
      "raw_prediction": ").showAdIfAvailable(ActivitySplash.this, this::requestConfig);\n                } else {\n                requestConfig();\n            }\n            break;\n            case GOOGLE_AD_MANAGER:\n            if (!Constant.GOOGLE_AD_MANAGER_APP_OPEN_AD_ID.equals(\"0",
      "es": 0.96875,
      "em": false,
      "passed": false
    },
    {
      "index": 1774,
      "groundtruth": "displayData(sharedPref.getPostList());",
      "prediction": "}",
      "raw_prediction": "\n    }\n",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1775,
      "groundtruth": "= RestAdapter.createApi().getDriveJsonFileId(googleDriveFileId);",
      "prediction": "= RestAdapter.createApi().getJsonFileId(googleDriveFileId);",
      "raw_prediction": "= RestAdapter.createApi().getJsonFileId(googleDriveFileId);",
      "es": 0.921875,
      "em": false,
      "passed": false
    },
    {
      "index": 1776,
      "groundtruth": "adapterPost.setOnItemClickListener((view, obj, position) -> {",
      "prediction": "adapterPost.notifyDataSetChanged();",
      "raw_prediction": "    adapterPost.notifyDataSetChanged();\n        } else {\n            Toast.makeText(getApplicationContext(), \"No data found\", Toast.LENGTH_SHORT).show();\n        }\n    }\n\n    private void displayData(List<Post> posts) {\n        if (posts != null && posts",
      "es": 0.29508196721311475,
      "em": false,
      "passed": false
    },
    {
      "index": 1777,
      "groundtruth": "(Tools.getAdSizeMREC());",
      "prediction": "(Tools.getAdSizeMREC());",
      "raw_prediction": "(Tools.getAdSizeMREC());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1778,
      "groundtruth": "writer.writeInt(length);",
      "prediction": "writer.writeInt(length);",
      "raw_prediction": "writer.writeInt(length);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1779,
      "groundtruth": ": return NbtTagValue.fromByte(readByte());",
      "prediction": ": return NbtTagValue.fromByte(readByte());",
      "raw_prediction": ": return NbtTagValue.fromByte(readByte());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1780,
      "groundtruth": "writer.writeShortUnsigned(value.length());",
      "prediction": "writer.writeInt(value.length);",
      "raw_prediction": "   writer.writeInt(value.length);",
      "es": 0.6666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 1781,
      "groundtruth": "visitor.visitByte(value);",
      "prediction": "visitor.visitByte(value);",
      "raw_prediction": "visitor.visitByte(value);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1782,
      "groundtruth": "writer.writeInt(value.length);",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1783,
      "groundtruth": "DoMainUtil.firstLevel(subDoMain)) {",
      "prediction": "DoMainUtil.firstLev",
      "raw_prediction": "DoMainUtil.firstLevel(subDoMain)) {",
      "es": 0.5428571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 1784,
      "groundtruth": "= reader.readInt();",
      "prediction": "= reader.readShort();",
      "raw_prediction": "= reader.readShort();",
      "es": 0.8095238095238095,
      "em": false,
      "passed": false
    },
    {
      "index": 1785,
      "groundtruth": "reader.readBytes(data);",
      "prediction": "reader.readBytes(data);",
      "raw_prediction": "    reader.readBytes(data);\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1786,
      "groundtruth": "int length = reader.readShort();",
      "prediction": "int length = reader.readInt();",
      "raw_prediction": "    int length = reader.readInt();",
      "es": 0.875,
      "em": false,
      "passed": false
    },
    {
      "index": 1787,
      "groundtruth": ".matcher(rule.getKafkaTopicTemplate());",
      "prediction": ".matcher(mappedKafkaTopic);",
      "raw_prediction": ".matcher(mappedKafkaTopic);",
      "es": 0.5641025641025641,
      "em": false,
      "passed": false
    },
    {
      "index": 1788,
      "groundtruth": "kafkaConfig.getProducerConfig().getConfig());",
      "prediction": "kafkaConfig.getProducerConfig());",
      "raw_prediction": "kafkaConfig.getProducerConfig());\n        props.put(ProducerConfig.RETRIES_CONFIG, \"0\");",
      "es": 0.7333333333333334,
      "em": false,
      "passed": false
    },
    {
      "index": 1789,
      "groundtruth": "ACKS_CONFIG, String.valueOf(producerAckLevel.getValue()));",
      "prediction": "ACKS_CONFIG, producerAckLevel.getLevel());",
      "raw_prediction": "ACKS_CONFIG, producerAckLevel.getLevel());",
      "es": 0.6379310344827587,
      "em": false,
      "passed": false
    },
    {
      "index": 1790,
      "groundtruth": "length = reader.readInt();",
      "prediction": "length = reader.readInt();",
      "raw_prediction": "length = reader.readInt();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1791,
      "groundtruth": "type = reader.readByte()) != NbtTagValue.TAG_END;",
      "prediction": "type = reader.readByte()) != NbtTagValue.TAG_END;",
      "raw_prediction": "type = reader.readByte()) != NbtTagValue.TAG_END;",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1792,
      "groundtruth": "?> codec = MetadataCodec.getCodec(type);",
      "prediction": "?> codec = MetadataCodec.getCodec(type);",
      "raw_prediction": "?> codec = MetadataCodec.getCodec(type);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1793,
      "groundtruth": "> codec = (MetadataCodec<Object>) MetadataCodec.getCodec(type);",
      "prediction": "> codec = MetadataCodec.getCodec(type);",
      "raw_prediction": "> codec = MetadataCodec.getCodec(type);",
      "es": 0.6190476190476191,
      "em": false,
      "passed": false
    },
    {
      "index": 1794,
      "groundtruth": "matcher(rule.getMqttTopicPattern());",
      "prediction": "matcher(mqttTopic);",
      "raw_prediction": "matcher(mqttTopic);\n            if (mqttTopicMatcher.find()) {",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 1795,
      "groundtruth": "= rule.getMqttTopicPattern().split(MQTT_TOPIC_SEPARATOR);",
      "prediction": "= rule.getMqttTopicPattern().split(MQTT_TOPIC_SEPARATOR););",
      "raw_prediction": "= rule.getMqttTopicPattern().split(MQTT_TOPIC_SEPARATOR););",
      "es": 0.9661016949152542,
      "em": false,
      "passed": false
    },
    {
      "index": 1796,
      "groundtruth": "properties.getCachePrefix() + \":\" + beanName + \":\" + method + \":%s:\" + key.toString();",
      "prediction": "properties.getCacheKey();",
      "raw_prediction": "properties.getCacheKey();\n        if (key == null) {\n            return;\n        }",
      "es": 0.2790697674418605,
      "em": false,
      "passed": false
    },
    {
      "index": 1797,
      "groundtruth": "cache.put(String.format(cacheKey, FAIL), bindData, Duration.ofSeconds(cacheTime));",
      "prediction": "cache.put(String.format(cacheKey, FAIL), bindData, Duration.ofSeconds(cacheTime));",
      "raw_prediction": "  cache.put(String.format(cacheKey, FAIL), bindData, Duration.ofSeconds(cacheTime));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1798,
      "groundtruth": "(!jacksonExpandProperties.isCanExpandToNotExistField() && writeClass == null) {",
      "prediction": "(writeClass == null) {",
      "raw_prediction": "(writeClass == null) {",
      "es": 0.2784810126582279,
      "em": false,
      "passed": false
    },
    {
      "index": 1799,
      "groundtruth": "if (jacksonExpandProperties.getExpandStrategy() == ExpandStrategy.COPY) {",
      "prediction": "if (jacksonExpandProperties.getExpandStrategy() == ExpandStrategy.COPY)",
      "raw_prediction": "if (jacksonExpandProperties.getExpandStrategy() == ExpandStrategy.COPY) {",
      "es": 0.9726027397260274,
      "em": false,
      "passed": false
    },
    {
      "index": 1800,
      "groundtruth": "setCacheTime(jacksonExpandProperties.getCacheTimeout());",
      "prediction": "setCacheTime(jacksonExpandProperties.getCacheTime());",
      "raw_prediction": "setCacheTime(jacksonExpandProperties.getCacheTime());\n            }\n            if (param.getExpand() == null) {\n public param.setExpand(load.expand());",
      "es": 0.9464285714285714,
      "em": false,
      "passed": false
    },
    {
      "index": 1801,
      "groundtruth": "cache.put(String.format(cacheKey, OK), result, Duration.ofSeconds(cacheTime));",
      "prediction": "} else {",
      "raw_prediction": "\n                } else {\n                cache.put(String.format(cacheKey, FAIL), bindData, Duration.ofSeconds(cacheTime));\n            }\n        } else {\n            cache.put(String.format(cacheKey, FAIL), bindData, Duration.ofSeconds(cacheTime",
      "es": 0.0641025641025641,
      "em": false,
      "passed": false
    },
    {
      "index": 1802,
      "groundtruth": "jacksonExpandProperties.getExpandStrategy() == ExpandStrategy.COVER) {",
      "prediction": "jacksonExpandProperties.getExpandStra",
      "raw_prediction": "jacksonExpandProperties.getExpandStrategy() == ExpandStrategy.FIX) {",
      "es": 0.5285714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 1803,
      "groundtruth": "cache.get(String.format(cacheKey, OK));",
      "prediction": "cache.get(String.format(cacheKey, OK));",
      "raw_prediction": "cache.get(String.format(cacheKey, OK));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1804,
      "groundtruth": "lock = lockCache.get(cacheKey, new StampedLock(), Duration.ofSeconds(300));",
      "prediction": "lock = cache.getLock();",
      "raw_prediction": "lock = cache.getLock();",
      "es": 0.30666666666666664,
      "em": false,
      "passed": false
    },
    {
      "index": 1805,
      "groundtruth": "format(jacksonExpandProperties.getCopyStrategyFormat(), gen.getOutputContext().getCurrentName());",
      "prediction": "join(\".\", writeFieldPath.split(\"\\\\.\"), writeField);",
      "raw_prediction": "join(\".\", writeFieldPath.split(\"\\\\.\"), writeField);",
      "es": 0.18556701030927836,
      "em": false,
      "passed": false
    },
    {
      "index": 1806,
      "groundtruth": "(jacksonExpandProperties.getDynamicExpandParameterName());",
      "prediction": ".get(params.getExpandKey());",
      "raw_prediction": ".get(params.getExpandKey());\n            if (needExpandField == null) {\n                needExpandField = new HashSet<>();\n            }\n            needExpandField.add(writeFieldPath);",
      "es": 0.3275862068965517,
      "em": false,
      "passed": false
    },
    {
      "index": 1807,
      "groundtruth": "(this.mqttConfig.getHost(), this.mqttConfig.getPort()).sync();",
      "prediction": "(this.mqttConfig.getPort()).sync();",
      "raw_prediction": "(this.mqttConfig.getPort()).sync();\n        logger.info(\"Netty server started on port {}\", this.mqttConfig.getPort());",
      "es": 0.564516129032258,
      "em": false,
      "passed": false
    },
    {
      "index": 1808,
      "groundtruth": "mqttConfig = MqttConfig.fromMap(map);",
      "prediction": "mqttConfig = MqttConfig.fromMap(map);",
      "raw_prediction": "mqttConfig = MqttConfig.fromMap(map);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1809,
      "groundtruth": "dataHolder.setVideoPopularLink(videoData.get(8));",
      "prediction": "dataHolder.setVideoPopularUrl(videoData.get(8));",
      "raw_prediction": "\tdataHolder.setVideoPopularUrl(videoData.get(8));\n\t\t\tdataHolder.setVideoPopularTitle(videoData.get(9));\n\t\t\tdataHolder.setVideoPopularUrl(videoData.get(10));\n\t\t\tdataHolder.setVideoPopularTitle(videoData",
      "es": 0.9183673469387755,
      "em": false,
      "passed": false
    },
    {
      "index": 1810,
      "groundtruth": "(config.getKafkaConfig());",
      "prediction": "(config);",
      "raw_prediction": "(config);",
      "es": 0.34615384615384615,
      "em": false,
      "passed": false
    },
    {
      "index": 1811,
      "groundtruth": "config.getMqttConfig();",
      "prediction": "new MqttConfig(config);",
      "raw_prediction": "new MqttConfig(config);",
      "es": 0.34782608695652173,
      "em": false,
      "passed": false
    },
    {
      "index": 1812,
      "groundtruth": "mqttServer.stop();",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1813,
      "groundtruth": ", this.mqttConfig.getPort()).sync();",
      "prediction": ", this.mqttConfig.getPort()).sync();",
      "raw_prediction": ", this.mqttConfig.getPort()).sync();\n        logger.info(\"Netty server started\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1814,
      "groundtruth": "MappingRulesLoader.getInstance().init(mappingRulesFile);",
      "prediction": "if (mappingRulesFile != null)",
      "raw_prediction": "    if (mappingRulesFile != null) {\n            bridgeConfig.setMappingRulesFile(mappingRulesFile);\n        }",
      "es": 0.2321428571428571,
      "em": false,
      "passed": false
    },
    {
      "index": 1815,
      "groundtruth": "return Integer.toString(record.getStatus());",
      "prediction": "return record.getStatus();",
      "raw_prediction": "return record.getStatus();",
      "es": 0.5909090909090908,
      "em": false,
      "passed": false
    },
    {
      "index": 1816,
      "groundtruth": "record.getTruncated();",
      "prediction": "Integer.toString(record.getTruncated());",
      "raw_prediction": "Integer.toString(record.getTruncated());",
      "es": 0.55,
      "em": false,
      "passed": false
    },
    {
      "index": 1817,
      "groundtruth": "CCMimeCounter.main(new String[]{",
      "prediction": "if (command.equals(\"CountMimes\"))",
      "raw_prediction": "if (command.equals(\"CountMimes\")) {\n            CCFileExtractor.main(new String[]{args[1]});\n        } else if (command.equals(\"CountMimes\")) {\n            CCFileExtractor.main(new String[]{",
      "es": 0.1515151515151515,
      "em": false,
      "passed": false
    },
    {
      "index": 1818,
      "groundtruth": "CCFileExtractor.main(new String[]{",
      "prediction": "CCFileFetcher.main(new String[]{",
      "raw_prediction": "    CCFileFetcher.main(new String[]{",
      "es": 0.8235294117647058,
      "em": false,
      "passed": false
    },
    {
      "index": 1819,
      "groundtruth": "R.error(\"bad request\");",
      "prediction": "R.error(e.getMessage());",
      "raw_prediction": "R.error(e.getMessage());",
      "es": 0.45833333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 1820,
      "groundtruth": "return R.error(error.get(\"errorMsg\").toString());",
      "prediction": "return R.error(error.get(\"errorMsg\").toString());",
      "raw_prediction": "    return R.error(error.get(\"errorMsg\").toString());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1821,
      "groundtruth": "R.error();",
      "prediction": "R.error",
      "raw_prediction": "R.error(e.getMessage());",
      "es": 0.7,
      "em": false,
      "passed": false
    },
    {
      "index": 1822,
      "groundtruth": "r.getOffset(), r.getLength(), r.getTruncated());",
      "prediction": "r.getWarcOffset(), r.getWarcLength(), r.getTruncated());",
      "raw_prediction": " r.getWarcOffset(), r.getWarcLength(), r.getTruncated());",
      "es": 0.8571428571428572,
      "em": false,
      "passed": false
    },
    {
      "index": 1823,
      "groundtruth": "R.ok(\"Verify successfully\");",
      "prediction": "R.ok(",
      "raw_prediction": "R.ok(\n            SessionResp.builder()\n            .auth(true)\n            .model(apiRunMode.getName())\n            .build()\n        );",
      "es": 0.1785714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 1824,
      "groundtruth": "!clause.select(val)) {",
      "prediction": "!clause.selec",
      "raw_prediction": "!clause.select(val)) {",
      "es": 0.5909090909090908,
      "em": false,
      "passed": false
    },
    {
      "index": 1825,
      "groundtruth": "StringBuilder sb = new StringBuilder(SpringUtil.getClientIp()).append(\"-\");",
      "prediction": "StringBuilder sb = new StringBuilder();",
      "raw_prediction": " StringBuilder sb = new StringBuilder();",
      "es": 0.52,
      "em": false,
      "passed": false
    },
    {
      "index": 1826,
      "groundtruth": "), r.getLength(), r.getTruncated());",
      "prediction": "), r.getLength(), r.getTruncated());",
      "raw_prediction": "), r.getLength(), r.getTruncated());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1827,
      "groundtruth": "sse.isDone()) {",
      "prediction": "sse.isDon",
      "raw_prediction": "sse.isDone()) {",
      "es": 0.6,
      "em": false,
      "passed": false
    },
    {
      "index": 1828,
      "groundtruth": "extracted = counter.getFilesExtracted().incrementAndGet();",
      "prediction": "extracted = counter.getExtracted().incrementAndGet();",
      "raw_prediction": "extracted = counter.getExtracted().incrementAndGet();",
      "es": 0.9137931034482758,
      "em": false,
      "passed": false
    },
    {
      "index": 1829,
      "groundtruth": "url = r.getUrl();",
      "prediction": "url = r.getUrl();",
      "raw_prediction": "url = r.getUrl();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1830,
      "groundtruth": "if (fetcherConfig.getNumThreads() > 10) {",
      "prediction": "if (fetcherConfig.getReportEvery() > 0)",
      "raw_prediction": "if (fetcherConfig.getReportEvery() > 0) {",
      "es": 0.6585365853658536,
      "em": false,
      "passed": false
    },
    {
      "index": 1831,
      "groundtruth": "getNormalizedMimeDetected(), r.getFilename(),\n                    r.getOffset(), r.getLength(), r.getTruncated());",
      "prediction": "getMime(), r.getWarcFile(), r.getWarcOffset(),\n            r.getWarcLength(), r.getTruncated());",
      "raw_prediction": "getMime(), r.getWarcFile(), r.getWarcOffset(),\n            r.getWarcLength(), r.getTruncated());",
      "es": 0.5526315789473684,
      "em": false,
      "passed": false
    },
    {
      "index": 1832,
      "groundtruth": "(fetcherConfig.getMaxFilesTruncated() > -1 &&\n                    truncated >= fetcherConfig.getMaxFilesTruncated()) {",
      "prediction": "(truncated >= fetcherConfig.getMaxTruncated()) {",
      "raw_prediction": "(truncated >= fetcherConfig.getMaxTruncated()) {",
      "es": 0.4067796610169492,
      "em": false,
      "passed": false
    },
    {
      "index": 1833,
      "groundtruth": "if (fetcherConfig.isExtractTruncated() || StringUtils.isBlank(r.getTruncated())) {",
      "prediction": "if (r.getFilename() != null) {",
      "raw_prediction": "if (r.getFilename() != null) {",
      "es": 0.24390243902439024,
      "em": false,
      "passed": false
    },
    {
      "index": 1834,
      "groundtruth": "if (fetcherConfig.isDryRun()) {",
      "prediction": "if (fetcherConfig.isDryRun())",
      "raw_prediction": "if (fetcherConfig.isDryRun()) {",
      "es": 0.935483870967742,
      "em": false,
      "passed": false
    },
    {
      "index": 1835,
      "groundtruth": ".indexFetcher = fetcherConfig.newIndexFetcher();",
      "prediction": ".indexFetcher = fetcherConfig.getIndexFetcher();",
      "raw_prediction": ".indexFetcher = fetcherConfig.getIndexFetcher();",
      "es": 0.9583333333333334,
      "em": false,
      "passed": false
    },
    {
      "index": 1836,
      "groundtruth": "ccIndexReaderCounter.getEmptyPayload().incrementAndGet();",
      "prediction": "ccIndexReaderCounter.getNoPayload().incrementAndGet();",
      "raw_prediction": "ccIndexReaderCounter.getNoPayload().incrementAndGet();",
      "es": 0.9122807017543859,
      "em": false,
      "passed": false
    },
    {
      "index": 1837,
      "groundtruth": "finishedWorkers < fetcherConfig.getNumThreads()) {",
      "prediction": "finishedWorkers < fetcherCo",
      "raw_prediction": "finishedWorkers < fetcherConfig.getNumThreads()) {",
      "es": 0.54,
      "em": false,
      "passed": false
    },
    {
      "index": 1838,
      "groundtruth": "streamEmitter = fetcherConfig.newEmitter();",
      "prediction": "streamEmitter = fetcherConfig.newStreamEmitter();",
      "raw_prediction": "streamEmitter = fetcherConfig.newStreamEmitter();\n",
      "es": 0.8775510204081632,
      "em": false,
      "passed": false
    },
    {
      "index": 1839,
      "groundtruth": ", record.getFilename(), record.getOffset(),\n                record.getLength());",
      "prediction": ", record.getUrl(), record.getFilename(), record.getOffset());",
      "raw_prediction": ", record.getUrl(), record.getFilename(), record.getOffset());",
      "es": 0.5375,
      "em": false,
      "passed": false
    },
    {
      "index": 1840,
      "groundtruth": ".debug(\"going to fetch {",
      "prediction": ".info(\"fetching {} {}->{}\", record.getFilename()",
      "raw_prediction": ".info(\"fetching {} {}->{}\", record.getFilename(), record.getOffset(),\n        record.getLength());\n        LOGGER.info(\"fetching {",
      "es": 0.1875,
      "em": false,
      "passed": false
    },
    {
      "index": 1841,
      "groundtruth": "record.getLength());",
      "prediction": "record.getLength());",
      "raw_prediction": "record.getLength());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1842,
      "groundtruth": "run(), TimeConverter.toTicks(delay, unit)\n                )\n        );",
      "prediction": "run(), delay, unit\n        )\n        );",
      "raw_prediction": "run(), delay, unit\n        )\n        );\n    }\n\n    @Override\n    public WrappedTask runLaterAsync(Runnable runnable, long delay, TimeUnit unit) {\n        return new WrappedFoliaTask(\n        this.asyncScheduler.runDelayed",
      "es": 0.5571428571428572,
      "em": false,
      "passed": false
    },
    {
      "index": 1843,
      "groundtruth": "TimeConverter.toTicks(period, unit))\n        );",
      "prediction": "TimeConverter.toTicks(period, unit))\n        );",
      "raw_prediction": " TimeConverter.toTicks(period, unit))\n        );",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1844,
      "groundtruth": "TimeConverter.toTicks(delay, unit),\n                        TimeConverter.toTicks(period, unit)\n                )\n        );",
      "prediction": "TimeConverter.toTicks(delay, unit),\npublic TimeConverter.toTicks(period, unit)\npublic)\n        );",
      "raw_prediction": " TimeConverter.toTicks(delay, unit),\npublic TimeConverter.toTicks(period, unit)\npublic)\n        );",
      "es": 0.685483870967742,
      "em": false,
      "passed": false
    },
    {
      "index": 1845,
      "groundtruth": "TimeConverter.toTicks(delay, unit),\n                        TimeConverter.toTicks(period, unit))\n        );",
      "prediction": "TimeConverter.toTicks(delay, unit>\npublic TimeConverter.toTicks(period, unit>",
      "raw_prediction": " TimeConverter.toTicks(delay, unit>\npublic TimeConverter.toTicks(period, unit>",
      "es": 0.6448598130841121,
      "em": false,
      "passed": false
    },
    {
      "index": 1846,
      "groundtruth": "runTaskLater(plugin, runnable, TimeConverter.toTicks(delay, unit))\n        );",
      "prediction": "runTaskLater(plugin, runnable, TimeConverter.toTick(delay, unit))\n        );",
      "raw_prediction": "runTaskLater(plugin, runnable, TimeConverter.toTick(delay, unit))\n        );",
      "es": 0.987012987012987,
      "em": false,
      "passed": false
    },
    {
      "index": 1847,
      "groundtruth": "record.getOffset() + record.getLength() - 1), new EmitKey());",
      "prediction": "record.getLength());",
      "raw_prediction": " record.getLength());",
      "es": 0.3278688524590164,
      "em": false,
      "passed": false
    },
    {
      "index": 1848,
      "groundtruth": ".equals(ccIndexRecord.getDigest())) {",
      "prediction": ".equals(ccIndexRecord.getDigest())",
      "raw_prediction": ".equals(ccIndexRecord.getDigest())) {",
      "es": 0.9189189189189189,
      "em": false,
      "passed": false
    },
    {
      "index": 1849,
      "groundtruth": ".getOffset() + record.getLength() - 1), new EmitKey());",
      "prediction": ".getLength());",
      "raw_prediction": ".getLength());\n        t.setEmitKey(new EmitKey(\"warc\", \"warc\"));\n        t.setEmitKey(new EmitKey(\"warc\", \"warc\"));",
      "es": 0.2545454545454545,
      "em": false,
      "passed": false
    },
    {
      "index": 1850,
      "groundtruth": "ccIndexRecord.getOffset(), ccIndexRecord.getLength(),\n                    ccIndexRecord.getTruncated(), targetDigest, length,\n                    targetPath);",
      "prediction": "ccIndexRecord.getOffset(), ccIndexRecord.getLength(),\n                    targetDigest, length,\n                    targetPath);",
      "raw_prediction": "ccIndexRecord.getOffset(), ccIndexRecord.getLength(),\n                    targetDigest, length,\n                    targetPath);",
      "es": 0.810126582278481,
      "em": false,
      "passed": false
    },
    {
      "index": 1851,
      "groundtruth": "totalCounts, r.getNormalizedMimeDetected());",
      "prediction": "totalCounts, r.getNormalizedMimeDetected());",
      "raw_prediction": "totalCounts, r.getNormalizedMimeDetected());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1852,
      "groundtruth": ".getOffset(), ccIndexRecord.getLength(),\n                    ccIndexRecord.getTruncated(), targetDigest, length,\n                    targetPath);",
      "prediction": ".getOffset(), ccIndexRecord.getLength(),\n        targetDigest, length,\n        targetPath);",
      "raw_prediction": ".getOffset(), ccIndexRecord.getLength(),\n        targetDigest, length,\n        targetPath);\n        } else {\n            EXTRACTED_LOGGER.info(\"\", ccIndexRecord.getUrl(),\n                ccIndexRecord.getNormalizedMime(),\n                ccIndexRecord.get",
      "es": 0.6275862068965516,
      "em": false,
      "passed": false
    },
    {
      "index": 1853,
      "groundtruth": "ccIndexRecord.getOffset(), ccIndexRecord.getLength(),\n                    targetDigest, length,\n                    targetPath);",
      "prediction": "ccIndexRecord.getOffset(), ccIndexRecord.getLength(),\n        targetDigest, length,\n        targetPath);",
      "raw_prediction": "ccIndexRecord.getOffset(), ccIndexRecord.getLength(),\n        targetDigest, length,\n        targetPath);\n        }",
      "es": 0.8125,
      "em": true,
      "passed": true
    },
    {
      "index": 1854,
      "groundtruth": "targetPath = targetPathRewriter.rewrite(targetDigest);",
      "prediction": "targetPath = targetPathRewriter.rewritePath(id, targetDigest);",
      "raw_prediction": "targetPath = targetPathRewriter.rewritePath(id, targetDigest);",
      "es": 0.8709677419354839,
      "em": false,
      "passed": false
    },
    {
      "index": 1855,
      "groundtruth": "RangeFetcher) fetcherConfig.newFetcher();",
      "prediction": "RangeFetcher) fetcherConfig.getFetcher();",
      "raw_prediction": "RangeFetcher) fetcherConfig.getFetcher();",
      "es": 0.9512195121951219,
      "em": false,
      "passed": false
    },
    {
      "index": 1856,
      "groundtruth": "ccIndexRecord.getFilename(),\n                    ccIndexRecord.getOffset(), ccIndexRecord.getLength(),\n                    targetDigest, length,\n                    targetPath);",
      "prediction": "ccIndexRecord.getFilename(),\n                    ccIndexRecord.getOffset(), ccIndexRecord.getLength(),\n        targetDigest, length, targetPath);",
      "raw_prediction": "ccIndexRecord.getFilename(),\n                    ccIndexRecord.getOffset(), ccIndexRecord.getLength(),\n        targetDigest, length, targetPath);",
      "es": 0.8192090395480226,
      "em": true,
      "passed": true
    },
    {
      "index": 1857,
      "groundtruth": ".targetPathRewriter = fetcherConfig.getTargetPathRewriter();",
      "prediction": ".targetPathRewriter = fetcherConfig.getTargetPathRewriter();",
      "raw_prediction": ".targetPathRewriter = fetcherConfig.getTargetPathRewriter();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1858,
      "groundtruth": "ccIndexRecord.getTruncated(), targetDigest, length,\n                    targetPath);",
      "prediction": "targetDigest, length,\n                    targetPath);",
      "raw_prediction": "targetDigest, length,\n                    targetPath);",
      "es": 0.6428571428571428,
      "em": false,
      "passed": false
    },
    {
      "index": 1859,
      "groundtruth": "r.getNormalizedMimeDetected());",
      "prediction": "r.getNormalizedMimeDetected());",
      "raw_prediction": "r.getNormalizedMimeDetected());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1860,
      "groundtruth": ".INSTANCE.getNumberPlan(deviceContext.getLineType(), deviceContext.getCountryCode());",
      "prediction": ".get(wrapper.getCountryCode(), wrapper.getRegionCode());",
      "raw_prediction": ".get(wrapper.getCountryCode(), wrapper.getRegionCode());\n        }\n\n        if (numberplan == null) {\n            LOGGER.debug(\"Numberplan is null\");\n            return wrapper.getDialableNumber();",
      "es": 0.3411764705882353,
      "em": false,
      "passed": false
    },
    {
      "index": 1861,
      "groundtruth": ".put(DeFixedLineNumberPlan.getCountryCode(), new DeFixedLineNumberPlan());",
      "prediction": ".put(DeFixedLineNumberPlan.getCountryCode(), new DeFixedLineNumberPlan());",
      "raw_prediction": ".put(DeFixedLineNumberPlan.getCountryCode(), new DeFixedLineNumberPlan());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1862,
      "groundtruth": "(), deviceContext.getCountryCode());",
      "prediction": ", deviceContext.getNationalDestinationCode());",
      "raw_prediction": ", deviceContext.getNationalDestinationCode());\n        } else {\n            numberplan = NumberPlanFactory.INSTANCE.getNumberPlan(deviceContext.getLineType, DeviceContext.UNKNOWN_VALUE);",
      "es": 0.6086956521739131,
      "em": false,
      "passed": false
    },
    {
      "index": 1863,
      "groundtruth": "deviceContext.getNationalDestinationCode());",
      "prediction": "deviceContext.getAreaCode());",
      "raw_prediction": "deviceContext.getAreaCode());\n        }",
      "es": 0.6136363636363636,
      "em": false,
      "passed": false
    },
    {
      "index": 1864,
      "groundtruth": "(!normalizedDeviceContext.getCountryCode().equals(DeviceContext.UNKNOWN_VALUE)) {",
      "prediction": "(normalizedDeviceContext.getCountryCode() == null)",
      "raw_prediction": "(normalizedDeviceContext.getCountryCode() == null) {\n            // Number is not dialable and has no CC, NAC or NDC.\n            return normalizerPhoneNumber.getDialableNumber();\n        } else {",
      "es": 0.5308641975308642,
      "em": false,
      "passed": false
    },
    {
      "index": 1865,
      "groundtruth": "= PhoneLibWrapper.getRegionCodeForCountryCode(normalizedDeviceContext.getCountryCode());",
      "prediction": "= normalizedDeviceContext.getCountryCode();",
      "raw_prediction": "= normalizedDeviceContext.getCountryCode();",
      "es": 0.48863636363636365,
      "em": false,
      "passed": false
    },
    {
      "index": 1866,
      "groundtruth": "if (! normalizerPhoneNumber.isNormalizingTried()) {",
      "prediction": "if (normalizerPhoneNumber.getSemiNormalizedNumber() == null)",
      "raw_prediction": "if (normalizerPhoneNumber.getSemiNormalizedNumber() == null) {",
      "es": 0.6,
      "em": false,
      "passed": false
    },
    {
      "index": 1867,
      "groundtruth": "(PhoneLibWrapper.getCountryCodeForRegion(fallBackRegionCode) > 0) {",
      "prediction": "(fallBackRegionCode != null && !fallBackRegionCode.isEmpty())",
      "raw_prediction": "(fallBackRegionCode != null && !fallBackRegionCode.isEmpty()) {",
      "es": 0.31343283582089554,
      "em": false,
      "passed": false
    },
    {
      "index": 1868,
      "groundtruth": "(wrapper.hasRegionNationalAccessCode() && deviceContext != null) {",
      "prediction": "(wrapper.hasNoCountryCodeNorNationalAccessCode())",
      "raw_prediction": "(wrapper.hasNoCountryCodeNorNationalAccessCode()) {",
      "es": 0.36363636363636365,
      "em": false,
      "passed": false
    },
    {
      "index": 1869,
      "groundtruth": ".extendNumberByDefaultAreaCodeAndCountryCode(wrapper.getNationalAccessCode(), deviceContext.getNationalDestinationCode());",
      "prediction": ".getE164Formatted();",
      "raw_prediction": ".getE164Formatted();",
      "es": 0.10655737704918034,
      "em": false,
      "passed": false
    },
    {
      "index": 1870,
      "groundtruth": ") : wrapper.getE164Formatted();",
      "prediction": ") :",
      "raw_prediction": ") :\n            wrapper.getE164Formatted();",
      "es": 0.09677419354838712,
      "em": false,
      "passed": false
    },
    {
      "index": 1871,
      "groundtruth": "return wrapper.getE164Formatted();",
      "prediction": "return wrapper.getE164Formatted();",
      "raw_prediction": "return wrapper.getE164Formatted();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1872,
      "groundtruth": "boolean hasNoCCAndNoNAC = wrapper.hasNoCountryCodeNorNationalAccessCode();",
      "prediction": "boolean hasNoCCAndNoNAC = wrapper.getCountryCode() == null && wrapper.getNationalDestinationCode() == null;",
      "raw_prediction": "boolean hasNoCCAndNoNAC = wrapper.getCountryCode() == null && wrapper.getNationalDestinationCode() == null;",
      "es": 0.5514018691588785,
      "em": false,
      "passed": false
    },
    {
      "index": 1873,
      "groundtruth": "!normalizedDeviceContext.getNationalDestinationCode().equals(DeviceContext.UNKNOWN_VALUE)) {",
      "prediction": "normalizerPhoneNumber.isNormalizTried()) {",
      "raw_prediction": "normalizerPhoneNumber.isNormalizTried()) {",
      "es": 0.26086956521739135,
      "em": false,
      "passed": false
    },
    {
      "index": 1874,
      "groundtruth": "(hitIndicator.expired())\n                latestHitIndicators.remove(i);",
      "prediction": "(hitIndicator.expired())\n                latestHitIndicators.remove(i);",
      "raw_prediction": "(hitIndicator.expired())\n                latestHitIndicators.remove(i);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1875,
      "groundtruth": "if (!destroyed || !capacity.isDestroyed() || this.stress != Integer.MAX_VALUE){",
      "prediction": "if (!destroyed){",
      "raw_prediction": "if (!destroyed){",
      "es": 0.20253164556962022,
      "em": false,
      "passed": false
    },
    {
      "index": 1876,
      "groundtruth": "capacity.setDestroyed(true);",
      "prediction": "}",
      "raw_prediction": "}\n            }\n            if (block.getLevel().random.nextInt(0,100) < 10){\n                block.getLevel().playSound(null,block.getBlockPos(),SoundEvents.BLOCK_LAVA_EXTINGUISH,",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1877,
      "groundtruth": "MachineCapacityEntry config = MachineCapacityStorage.getInstance().getCapacity(block.getBlockState().getBlock());",
      "prediction": "MachineCapacityEntry config = MachineCapacityStorage.getInstance().getCapacityConfig(block);",
      "raw_prediction": "MachineCapacityEntry config = MachineCapacityStorage.getInstance().getCapacityConfig(block);\n        if (config == null){\n            return;\n        }\n        if (config.durabilityMax <= 0){\n            return;\n        }\n        if (config",
      "es": 0.7699115044247787,
      "em": false,
      "passed": false
    },
    {
      "index": 1878,
      "groundtruth": "(capacity.getDurability()+damage_for_speed);",
      "prediction": "(capacity.getDurability() + damage_for_speed);",
      "raw_prediction": "(capacity.getDurability() + damage_for_speed);\n            block.getLevel().playSound(null,block.getBlockPos(),SoundEvents.BLOCK_Wooden_door_open,SoundSource.BLOCKS,1,1);\n            block.getLevel().",
      "es": 0.9565217391304348,
      "em": false,
      "passed": false
    },
    {
      "index": 1879,
      "groundtruth": "= config.durabilityMax - capacity.getDurability();",
      "prediction": "= config.durabilityMax - capacity.getDurability();",
      "raw_prediction": "= config.durabilityMax - capacity.getDurability();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1880,
      "groundtruth": "(MachineCapacityStorage.getInstance().isBlackListBlock(block)){",
      "prediction": "(block.getLevel().getBlockState(block.getBlockPos()).getBlock() == Blocks.AIR)",
      "raw_prediction": "(block.getLevel().getBlockState(block.getBlockPos()).getBlock() == Blocks.AIR){",
      "es": 0.2692307692307693,
      "em": false,
      "passed": false
    },
    {
      "index": 1881,
      "groundtruth": "put(\"machine_capacity\",createMachineCapacity().toTag());",
      "prediction": "put(\"machine_capacity\", this.machineCapacity.toTag(new CompoundTag()));",
      "raw_prediction": "put(\"machine_capacity\", this.machineCapacity.toTag(new CompoundTag()));",
      "es": 0.647887323943662,
      "em": false,
      "passed": false
    },
    {
      "index": 1882,
      "groundtruth": "(!MachineCapacityStorage.getInstance().active){",
      "prediction": "(block.getLevel().isClientSide)",
      "raw_prediction": "(block.getLevel().isClientSide){",
      "es": 0.21276595744680848,
      "em": false,
      "passed": false
    },
    {
      "index": 1883,
      "groundtruth": "element.setContent(text);",
      "prediction": "element.setText(text);",
      "raw_prediction": "element.setText(text);",
      "es": 0.8,
      "em": false,
      "passed": false
    },
    {
      "index": 1884,
      "groundtruth": "itemheight = element.getHeight(this.width);",
      "prediction": "itemheight = element.getHeight(this.theme, mouseX, mouseY, partialTicks);",
      "raw_prediction": "itemheight = element.getHeight(this.theme, mouseX, mouseY, partialTicks);",
      "es": 0.5342465753424658,
      "em": false,
      "passed": false
    },
    {
      "index": 1885,
      "groundtruth": "TagElement element = serializer.deserialize(mapAttributes(child.getAttributes()));",
      "prediction": "TagElement element = serializer.deserialize(mapAttributes(child.getAttributes()));",
      "raw_prediction": " TagElement element = serializer.deserialize(mapAttributes(child.getAttributes()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1886,
      "groundtruth": "element.mouseClicked(mouseX - (columnWidth * index), mouseY, button, columnWidth)) {",
      "prediction": "element.mouseClicked(mouseX, mouseY, button, columnWidth)",
      "raw_prediction": "element.mouseClicked(mouseX, mouseY, button, columnWidth)) {",
      "es": 0.6785714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 1887,
      "groundtruth": ".max(element.getHeight(width), 20);",
      "prediction": ".max(element.getHeight(width - 40), getHeight(width - 40));",
      "raw_prediction": ".max(element.getHeight(width - 40), getHeight(width - 40));",
      "es": 0.576271186440678,
      "em": false,
      "passed": false
    },
    {
      "index": 1888,
      "groundtruth": "child.getHeight(width);",
      "prediction": "child.getHeight(width);",
      "raw_prediction": "child.getHeight(width);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1889,
      "groundtruth": "element.mouseClicked(mouseX, mouseY, button, width - 40);",
      "prediction": "element.mouseClicked(mouseX, mouseY, button, width - 40);",
      "raw_prediction": "element.mouseClicked(mouseX, mouseY, button, width - 40);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1890,
      "groundtruth": "element.getHeight(width - indexWidth - 2), Minecraft.getInstance().font.lineHeight + 1);",
      "prediction": "element.getHeight(width - indexWidth - 2), Minecraft.getInstance().font.lineHeight + 1);",
      "raw_prediction": "element.getHeight(width - indexWidth - 2), Minecraft.getInstance().font.lineHeight + 1);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1891,
      "groundtruth": "bot.getCommand(cmdId).isPresent()) {",
      "prediction": "bot.isCommand(cmdId)",
      "raw_prediction": "bot.isCommand(cmdId)) {",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 1892,
      "groundtruth": "String key = command.getId();",
      "prediction": "String key = command.getId();",
      "raw_prediction": "String key = command.getId();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1893,
      "groundtruth": "filter(c -> c.getSources().length == 0).findFirst();",
      "prediction": "filter(c -> c.getClass().isAnnotationPresent(Command.class))",
      "raw_prediction": "filter(c -> c.getClass().isAnnotationPresent(Command.class)).filter(c -> c.getClass().getDeclaredAnnotation(Command.class).id().equalsIgnoreCase(\"start\")).findFirst();",
      "es": 0.4,
      "em": false,
      "passed": false
    },
    {
      "index": 1894,
      "groundtruth": "= bot.getStartCommand();",
      "prediction": "= bot.getStartCommand();",
      "raw_prediction": "= bot.getStartCommand();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1895,
      "groundtruth": "return command.getHelp();",
      "prediction": "return command.getHelp();",
      "raw_prediction": "\n        return command.getHelp();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1896,
      "groundtruth": ", \"checkExecutionOrder of {",
      "prediction": ", \"Command {",
      "raw_prediction": ", \"Command {",
      "es": 0.2592592592592593,
      "em": false,
      "passed": false
    },
    {
      "index": 1897,
      "groundtruth": "(command.getId());",
      "prediction": "();",
      "raw_prediction": "();\n",
      "es": 0.16666666666666663,
      "em": false,
      "passed": false
    },
    {
      "index": 1898,
      "groundtruth": "this.execute(command, null);",
      "prediction": "execute(command, null);",
      "raw_prediction": "\n        execute(command, null);",
      "es": 0.8214285714285714,
      "em": false,
      "passed": false
    },
    {
      "index": 1899,
      "groundtruth": ".getSizeZ() <= 1 && Math.abs(center.getY() - pos.getY()) <= area.getSizeY();",
      "prediction": ".getSizeZ() <= 1;",
      "raw_prediction": ".getSizeZ() <= 1;",
      "es": 0.22368421052631582,
      "em": false,
      "passed": false
    },
    {
      "index": 1900,
      "groundtruth": "load(gameMap, gameMap.getName() + \"_\" + System.currentTimeMillis());",
      "prediction": "load(gameMap, gameMap.getName());",
      "raw_prediction": "load(gameMap, gameMap.getName());",
      "es": 0.4852941176470589,
      "em": false,
      "passed": false
    },
    {
      "index": 1901,
      "groundtruth": "center = area.getCenter();",
      "prediction": "center = area.getCenter();",
      "raw_prediction": "center = area.getCenter();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1902,
      "groundtruth": "(gameMap.getSource(), activeWorldFolder);",
      "prediction": "(gameMap.getSource(), activeWorldFolder);",
      "raw_prediction": "(gameMap.getSource(), activeWorldFolder);\n        } catch (IOException ignored) {\n            return false;\n        }\n\n        world = Bukkit.getServer().createWorld(new WorldCreator(activeWorldFolder.getName()));\n\n        if(world != null)world.setAutoSave(false",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1903,
      "groundtruth": "= csStats.getProfileInfos(userid);",
      "prediction": "= csStats.getProfileInfo(userid);",
      "raw_prediction": "= csStats.getProfileInfo(userid);\n       ",
      "es": 0.9705882352941176,
      "em": false,
      "passed": false
    },
    {
      "index": 1904,
      "groundtruth": "= csStats.getStatistics(userid);",
      "prediction": "= csStats.getStatistics(userid);",
      "raw_prediction": "= csStats.getStatistics(userid);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1905,
      "groundtruth": "Main.getLogger().error(\"The json body for request '{",
      "prediction": "Main.getLogger().error(\"The response for request '{}' is malformed\", query);",
      "raw_prediction": "    Main.getLogger().error(\"The response for request '{}' is malformed\", query);\n            return null;\n        }\n    }\n\n    public static JSONObject getJson(String query) {\n        HttpResponse<String> response = get(query);\n        if (response ==",
      "es": 0.5657894736842105,
      "em": false,
      "passed": false
    },
    {
      "index": 1906,
      "groundtruth": "Main.getLogger().error(\"'success' was not '1' when trying to get statistics for {",
      "prediction": "return null;",
      "raw_prediction": "return null;\n        }\n\n        if (!objResponse.has(\"steamid\")) {\n            return null;\n        }\n\n        if (!objResponse.getString(\"steamid\").isEmpty()) {\n            return null;\n        }\n\n        if (!objResponse.has(\"",
      "es": 0.07407407407407407,
      "em": false,
      "passed": false
    },
    {
      "index": 1907,
      "groundtruth": "(hangman.initialize()) {",
      "prediction": "(hangman.start())",
      "raw_prediction": "(hangman.start()) {",
      "es": 0.5833333333333333,
      "em": false,
      "passed": false
    },
    {
      "index": 1908,
      "groundtruth": "if (!mTXVodPlayerWrapper.isPlaying()) {",
      "prediction": "if (mTXVodPlayerWrapper.isPlaying())",
      "raw_prediction": "if (mTXVodPlayerWrapper.isPlaying()) {\n            pausePlayer();",
      "es": 0.9230769230769231,
      "em": false,
      "passed": false
    },
    {
      "index": 1909,
      "groundtruth": "TAG, \"[setTXVodPlayer] , PLAY_EVT_PLAY_PROGRESS\uff0c\" + mTXVodPlayerWrapper.getVodPlayer().hashCode() + \" url \" + TXVodPlayerWrapper.getUrl());",
      "prediction": "TAG, \"[setTXVodPlayer] mTXVodPlayerWrapper.url \" + mTXVodPlayerWrapper.getUrl());",
      "raw_prediction": "TAG, \"[setTXVodPlayer] mTXVodPlayerWrapper.url \" + mTXVodPlayerWrapper.getUrl());",
      "es": 0.5683453237410072,
      "em": false,
      "passed": false
    },
    {
      "index": 1910,
      "groundtruth": "mTXVodPlayerWrapper.setVodChangeListener(this);",
      "prediction": "mTXVodPlayerWrapper.setVodChangeListener(this);",
      "raw_prediction": "mTXVodPlayerWrapper.setVodChangeListener(this);\n            mTXVodPlayerWrapper.startPlay();\n            Log.i(TAG, \"[startPlay] mTXVodPlayerWrapper.url \" + mTXVodPlayerWrapper.getUrl());\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1911,
      "groundtruth": "i(TAG, \"[setTXVodPlayer] , PLAY_EVT_PLAY_PROGRESS\uff0c\" + mTXVodPlayerWrapper.getVodPlayer().hashCode() + \" url \" + TXVodPlayerWrapper.getUrl());",
      "prediction": "i(TAG, \"[setTXVodPlayer] mTXVodPlayerWrapper.url \" + mTXVodPlayerWrapper.getUrl());",
      "raw_prediction": "i(TAG, \"[setTXVodPlayer] mTXVodPlayerWrapper.url \" + mTXVodPlayerWrapper.getUrl());",
      "es": 0.574468085106383,
      "em": false,
      "passed": false
    },
    {
      "index": 1912,
      "groundtruth": "Main.getLogger().error(\"The callable didn't return a value when trying to run 'quote'\");",
      "prediction": "Main.getLogger().error(\"The callable didn't return a value when trying to run 'quote'\");",
      "raw_prediction": "        Main.getLogger().error(\"The callable didn't return a value when trying to run 'quote'\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1913,
      "groundtruth": "mTXVodPlayerWrapper.resumePlay();",
      "prediction": "startPlayer();",
      "raw_prediction": "\n            startPlayer();",
      "es": 0.2727272727272727,
      "em": false,
      "passed": false
    },
    {
      "index": 1914,
      "groundtruth": "Log.i(TAG, \"[startPlay] mTXVodPlayerWrapper.url \" + mTXVodPlayerWrapper.getUrl());",
      "prediction": "mTXVodPlayerWrapper.setVodChangeListener(this);",
      "raw_prediction": "mTXVodPlayerWrapper.setVodChangeListener(this);",
      "es": 0.35365853658536583,
      "em": false,
      "passed": false
    },
    {
      "index": 1915,
      "groundtruth": "(scramble.initialize()) {",
      "prediction": "(scramble.start())",
      "raw_prediction": "(scramble.start()) {",
      "es": 0.6,
      "em": false,
      "passed": false
    },
    {
      "index": 1916,
      "groundtruth": ".status = HttpStatus.getEnum(code);",
      "prediction": ".status = HttpStatus.fromCode(code);",
      "raw_prediction": ".status = HttpStatus.fromCode(code);",
      "es": 0.7777777777777778,
      "em": false,
      "passed": false
    },
    {
      "index": 1917,
      "groundtruth": "videoView.stopForPlaying();",
      "prediction": "if (videoView != null)",
      "raw_prediction": "    if (videoView != null) {\n            videoView.stopPlay();\n        }",
      "es": 0.2592592592592593,
      "em": false,
      "passed": false
    },
    {
      "index": 1918,
      "groundtruth": "model.addAttribute(\"flights\", flightService.getUserFlights(principal));",
      "prediction": "model.addAttribute(\"flights\", flightService.listByUser(principal));",
      "raw_prediction": "   model.addAttribute(\"flights\", flightService.listByUser(principal));\n     model.addAttribute(\"user\", userService.getUserByPrincipal(principal));",
      "es": 0.8309859154929577,
      "em": false,
      "passed": false
    },
    {
      "index": 1919,
      "groundtruth": "txVodPlayerWrapper.stopPlay();",
      "prediction": "txVodPlayerWrapper.stopPlay();",
      "raw_prediction": "txVodPlayerWrapper.stopPlay();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1920,
      "groundtruth": "userRepository.findByEmail(principal.getName());",
      "prediction": "userRepository.findByUsername(principal.getName());",
      "raw_prediction": "userRepository.findByUsername(principal.getName());\n    }\n\n    /**\n     * Method for getting a user entity from the table \"user\"\n     *\n     * @param id - id of the current user\n     * @return - user entity\n    ",
      "es": 0.8627450980392157,
      "em": false,
      "passed": false
    },
    {
      "index": 1921,
      "groundtruth": "Main.getLogger().error(\"The callable didn't return a value when trying to run 'joke'\");",
      "prediction": "Main.getLogger().error(\"The callable didn't return a value when trying to run 'joke'\");",
      "raw_prediction": "    Main.getLogger().error(\"The callable didn't return a value when trying to run 'joke'\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1922,
      "groundtruth": "flightRepository.findFlightsByUser(userRepository.findByEmail(principal.getName()));",
      "prediction": "flightRepository.findByUserEmail(principal.getName());",
      "raw_prediction": "flightRepository.findByUserEmail(principal.getName());",
      "es": 0.6428571428571428,
      "em": false,
      "passed": false
    },
    {
      "index": 1923,
      "groundtruth": "String quote = Utils.getFromCallable(callable);",
      "prediction": "String quote = Utils.getFromCallable(callable);",
      "raw_prediction": " String quote = Utils.getFromCallable(callable);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1924,
      "groundtruth": "setUser(userRepository.findByEmail(principal.getName()));",
      "prediction": "setUser(userRepository.findByEmail(principal.getName()));",
      "raw_prediction": "setUser(userRepository.findByEmail(principal.getName()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1925,
      "groundtruth": "flightService.orderFlight(id, principal);",
      "prediction": "flightService.orderFlight(id, principal);",
      "raw_prediction": "    flightService.orderFlight(id, principal);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1926,
      "groundtruth": "mTXVodPlayerWrapper.stopForPlaying();",
      "prediction": "mTXVodPlayerWrapper.stopPlay();",
      "raw_prediction": "mTXVodPlayerWrapper.stopPlay();",
      "es": 0.8378378378378378,
      "em": false,
      "passed": false
    },
    {
      "index": 1927,
      "groundtruth": "ShortVideoModel.getInstance(this).setOnDataLoadFullListener(this);",
      "prediction": "",
      "raw_prediction": " ",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1928,
      "groundtruth": "getEmail(), userForm.getPassword());",
      "prediction": "toUser());",
      "raw_prediction": "toUser());",
      "es": 0.2222222222222222,
      "em": false,
      "passed": false
    },
    {
      "index": 1929,
      "groundtruth": "user = us.create(userForm.getEmail(), userForm.getPassword());",
      "prediction": "user = us.createUser(userForm);",
      "raw_prediction": "user = us.createUser(userForm);\n        // Ac\u00e1 tenemos que devolver un HTTP 201 Created, con un header Location con la URI del nuevo usuario creado.\n        // Para esto, usamos el m\u00e9todo create() de Uri",
      "es": 0.4838709677419355,
      "em": false,
      "passed": false
    },
    {
      "index": 1930,
      "groundtruth": "response.getFirstLine()));",
      "prediction": "response.getStatus().toString().getBytes()));",
      "raw_prediction": "response.getStatus().toString().getBytes()));",
      "es": 0.48888888888888893,
      "em": false,
      "passed": false
    },
    {
      "index": 1931,
      "groundtruth": "ShortVideoModel.getInstance(this).loadDefaultVideo();",
      "prediction": "ShortVideoModel.getInstance(this).setOnDataLoadFullListener(this);",
      "raw_prediction": "    ShortVideoModel.getInstance(this).setOnDataLoadFullListener(this);",
      "es": 0.6515151515151515,
      "em": false,
      "passed": false
    },
    {
      "index": 1932,
      "groundtruth": "response.getHeaders().toString().getBytes()));",
      "prediction": "\"\\r\\n\".getBytes()));",
      "raw_prediction": "\"\\r\\n\".getBytes()));\n        for (String header : request.getHeaders().getHeaders()) {\n            channel.write(ByteBuffer.wrap(header.getBytes()));\n            channel.write(ByteBuffer.wrap(\"\\r\\n\".getBytes()));\n        }",
      "es": 0.34782608695652173,
      "em": false,
      "passed": false
    },
    {
      "index": 1933,
      "groundtruth": "channel.write(ByteBuffer.wrap(response.getBody()));",
      "prediction": "channel.write(ByteBuffer.wrap(response.getBody()));",
      "raw_prediction": "channel.write(ByteBuffer.wrap(response.getBody()));\n        channel.close();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1934,
      "groundtruth": "ShortVideoModel.getInstance(this).getVideoByFileId();",
      "prediction": "ShortVideoModel.getInstance(this).loadDefaultVideo();",
      "raw_prediction": "  ShortVideoModel.getInstance(this).loadDefaultVideo();",
      "es": 0.7169811320754718,
      "em": false,
      "passed": false
    },
    {
      "index": 1935,
      "groundtruth": "write(response.getFirstLine());",
      "prediction": "write(response.getStatus().getBytes());",
      "raw_prediction": "write(response.getStatus().getBytes());\n        outputStream.write(\"\\r\\n\".getBytes());",
      "es": 0.641025641025641,
      "em": false,
      "passed": false
    },
    {
      "index": 1936,
      "groundtruth": ".write(response.getBody());",
      "prediction": ".write(response.getBody());",
      "raw_prediction": ".write(response.getBody());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1937,
      "groundtruth": "ShortVideoModel.getInstance(this).release();",
      "prediction": "ShortVideoModel.getInstance(this).release();",
      "raw_prediction": "    ShortVideoModel.getInstance(this).release();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1938,
      "groundtruth": "response.getHeaders().toString().getBytes());",
      "prediction": "\"\\r\\n\".getBytes());",
      "raw_prediction": "\"\\r\\n\".getBytes());\n        for (String header : response.getHeaders().getHeaders()) {\n            outputStream.write(header.getBytes());\n            outputStream.write(\"\\r\\n\".getBytes());\n        }",
      "es": 0.33333333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 1939,
      "groundtruth": "ShortVideoModel.getInstance(this).setOnDataLoadFullListener(null);",
      "prediction": "LiteAVShortVideoPlayer.getInstance().release();",
      "raw_prediction": "    LiteAVShortVideoPlayer.getInstance().release();",
      "es": 0.3939393939393939,
      "em": false,
      "passed": false
    },
    {
      "index": 1940,
      "groundtruth": "faceProvider.invalidateCache();",
      "prediction": "faceProvider.reload();",
      "raw_prediction": "faceProvider.reload();",
      "es": 0.5806451612903225,
      "em": false,
      "passed": false
    },
    {
      "index": 1941,
      "groundtruth": "String mrState = mrEvent.getMrState();",
      "prediction": "String mrState = mrEvent.getMrState();",
      "raw_prediction": "\tString mrState = mrEvent.getMrState();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1942,
      "groundtruth": "Long projectId = mrEvent.getProjectId();",
      "prediction": "Long projectId = mrEvent.getProjectId();",
      "raw_prediction": "\tLong projectId = mrEvent.getProjectId();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1943,
      "groundtruth": "CascadeResult result = gitLabService.createResult(gitlabEventUUID);",
      "prediction": "CascadeResult result = gitLabService.createResult(gitlabEventUUID);",
      "raw_prediction": "\tCascadeResult result = gitLabService.createResult(gitlabEventUUID);\n",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1944,
      "groundtruth": "String gitlabEventUUID = mrSimple.getGitlabEventUUID();",
      "prediction": "String gitlabEventUUID = mrSimple.getGitlabEventUUID();",
      "raw_prediction": "\tString gitlabEventUUID = mrSimple.getGitlabEventUUID();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1945,
      "groundtruth": "result.setError(\"Invalid path: \" + path);",
      "prediction": "rc.response().setStatusCode(202);",
      "raw_prediction": "\trc.response().setStatusCode(202);",
      "es": 0.19512195121951215,
      "em": false,
      "passed": false
    },
    {
      "index": 1946,
      "groundtruth": "result.setPreviousAutoMrMergedError(e.getMessage());",
      "prediction": "private boolean isPipeline(String gitlabEventUUID, MergeRequest mr)",
      "raw_prediction": "\tprivate boolean isPipeline(String gitlabEventUUID, MergeRequest mr) {\n\t\ttry {\nreturn gitlab.getMergeRequestApi().getMergeRequestPipelines(mr.getProjectId(), mr.getIid()).stream().anyMatch(Pipeline::",
      "es": 0.16417910447761197,
      "em": false,
      "passed": false
    },
    {
      "index": 1947,
      "groundtruth": "Long mrNumber = mrEvent.getMrNumber();",
      "prediction": "Long mrNumber = mrEvent.getMrNumber();",
      "raw_prediction": "\tLong mrNumber = mrEvent.getMrNumber();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1948,
      "groundtruth": "Long userId = mrEvent.getUserId();",
      "prediction": "Long userId = mrEvent.getUserId();",
      "raw_prediction": "\tLong userId = mrEvent.getUserId();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1949,
      "groundtruth": "= mrEvent.getMergeCommitSha();",
      "prediction": "= mrEvent.getMergeSha();",
      "raw_prediction": "= mrEvent.getMergeSha();",
      "es": 0.8,
      "em": false,
      "passed": false
    },
    {
      "index": 1950,
      "groundtruth": "result.setExistingBranchDeleteError(e.getMessage());",
      "prediction": "}",
      "raw_prediction": "\n}",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1951,
      "groundtruth": "result.setCreatedAutoMrError(e.getMessage());",
      "prediction": "result.setCreateAutoMrError(e.getMessage());",
      "raw_prediction": "\tresult.setCreateAutoMrError(e.getMessage());\n\t\t}\n\t}\n\n\tprivate void handleMrCloseEvent(MergeRequestSimple mrEvent, String gitlabEventUUID, CascadeResult result) {\n\t\tLong userId = mrEvent.getUserId();\n\t\tLong",
      "es": 0.9777777777777777,
      "em": false,
      "passed": false
    },
    {
      "index": 1952,
      "groundtruth": "presentation.setTitle(getTitle(doc, SHOWTITLE));",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 1953,
      "groundtruth": ".print(((BitmapItem) slideItem).getName());",
      "prediction": ".print(((BitmapItem) slideItem).getFilename());",
      "raw_prediction": ".print(((BitmapItem) slideItem).getFilename());",
      "es": 0.8936170212765957,
      "em": false,
      "passed": false
    },
    {
      "index": 1954,
      "groundtruth": "mrEvent.getProjectId(), mrEvent.getUserId(), mrEvent.getTargetBranch(), mrEvent.getMrNumber(), mrState, mrAction);",
      "prediction": "projectId, userId, targetBranch, mrNumber, mrState, mrAction);",
      "raw_prediction": "projectId, userId, targetBranch, mrNumber, mrState, mrAction);",
      "es": 0.5263157894736843,
      "em": false,
      "passed": false
    },
    {
      "index": 1955,
      "groundtruth": "= Style.getStyle(slideItem.getLevel());",
      "prediction": "= Style.getStyle(slideItem.getLevel());",
      "raw_prediction": "= Style.getStyle(slideItem.getLevel());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1956,
      "groundtruth": "out.print(((TextItem) slideItem).getText());",
      "prediction": "out.print(((TextItem) slideItem).getText());",
      "raw_prediction": "out.print(((TextItem) slideItem).getText());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1957,
      "groundtruth": ".print(\"\\\"text\\\" level=\\\"\" + slideItem.getLevel() + \"\\\">\");",
      "prediction": ".print(\"\\\"text\\\" level=\\\"\" + slideItem.getLevel() + \"\\\">\");",
      "raw_prediction": ".print(\"\\\"text\\\" level=\\\"\" + slideItem.getLevel() + \"\\\">\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1958,
      "groundtruth": "< presentation.getSize();",
      "prediction": "< presentation.getSlideCount();",
      "raw_prediction": "< presentation.getSlideCount();",
      "es": 0.7741935483870968,
      "em": false,
      "passed": false
    },
    {
      "index": 1959,
      "groundtruth": ", mrEvent.getUserId(), mrEvent.getTargetBranch(), mrEvent.getMrNumber(), mrState, mrAction);",
      "prediction": ", mrEventEventUUID, mrEventEventUUID, mrEvent.getUserIid(), mrEventEventUUID, mrEvent.getMrState(), mrEvent.getMrAction());",
      "raw_prediction": ", mrEventEventUUID, mrEventEventUUID, mrEvent.getUserIid(), mrEventEventUUID, mrEvent.getMrState(), mrEvent.getMrAction());",
      "es": 0.49593495934959353,
      "em": false,
      "passed": false
    },
    {
      "index": 1960,
      "groundtruth": "bookDTO.setAuthorName(\"Ranjan Sir\");",
      "prediction": "bookDTO.setAuthorName(\"Author One\");",
      "raw_prediction": "    bookDTO.setAuthorName(\"Author One\");",
      "es": 0.75,
      "em": false,
      "passed": false
    },
    {
      "index": 1961,
      "groundtruth": "bookDTO.setAuthorEmail(\"author1@gmail.com\");",
      "prediction": "bookDTO.setAuthorId(101L);",
      "raw_prediction": "    bookDTO.setAuthorId(101L);",
      "es": 0.4772727272727273,
      "em": false,
      "passed": false
    },
    {
      "index": 1962,
      "groundtruth": "bookDTO.setAvailableQty(10);",
      "prediction": "bookDTO.setBookId(111L);",
      "raw_prediction": "    bookDTO.setBookId(111L);",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 1963,
      "groundtruth": "bookDTO.setDescription(\"Book One Description\");",
      "prediction": "bookDTO.setCategory(\"Java\");",
      "raw_prediction": "\n        bookDTO.setCategory(\"Java\");",
      "es": 0.34042553191489366,
      "em": false,
      "passed": false
    },
    {
      "index": 1964,
      "groundtruth": "bookDTO.setName(\"PlacementPrep\");",
      "prediction": "bookDTO.setBookName(\"Book One\");",
      "raw_prediction": "\n        bookDTO.setBookName(\"Book One\");",
      "es": 0.5454545454545454,
      "em": false,
      "passed": false
    },
    {
      "index": 1965,
      "groundtruth": "bookDTO.setPricePerQty(88.959);",
      "prediction": "bookDTO.setPricePerQty(100.00);",
      "raw_prediction": "    bookDTO.setPricePerQty(100.00);",
      "es": 0.8064516129032258,
      "em": false,
      "passed": false
    },
    {
      "index": 1966,
      "groundtruth": "!code.equals(twoFactorService.getTOTPCode(secret)))\n            return ResponseEntity.status(403).build();",
      "prediction": "twoFactorService.verifyCode(secret, code)) {\n            generateRequests.remove(object);",
      "raw_prediction": "twoFactorService.verifyCode(secret, code)) {\n            generateRequests.remove(object);\n        } else {\n            return ResponseEntity.status(403).build();\n        }",
      "es": 0.44339622641509435,
      "em": false,
      "passed": false
    },
    {
      "index": 1967,
      "groundtruth": "token = BackendApplication.generateString(20);",
      "prediction": "token = tokenGenerator.generateToken();",
      "raw_prediction": "token = tokenGenerator.generateToken();",
      "es": 0.5869565217391304,
      "em": false,
      "passed": false
    },
    {
      "index": 1968,
      "groundtruth": "= twoFactorService.getGoogleAuthenticatorBarCode(secret, username, company);",
      "prediction": "= twoFactorService.createBarcodeURL(company, username, secret);",
      "raw_prediction": "= twoFactorService.createBarcodeURL(company, username, secret);",
      "es": 0.513157894736842,
      "em": false,
      "passed": false
    },
    {
      "index": 1969,
      "groundtruth": "twoFactorService.createQRCode(barCode, 400, 400);",
      "prediction": "twoFactorService.getGoogleAuthenticatorQRCode(secret, username, company);",
      "raw_prediction": "twoFactorService.getGoogleAuthenticatorQRCode(secret, username, company);",
      "es": 0.452054794520548,
      "em": false,
      "passed": false
    },
    {
      "index": 1970,
      "groundtruth": "ok(service.getUserByUsername(username));",
      "prediction": "ok(service.findByUsername(username));",
      "raw_prediction": "ok(service.findByUsername(username));",
      "es": 0.825,
      "em": false,
      "passed": false
    },
    {
      "index": 1971,
      "groundtruth": "ok(service.searchByUsername(username));",
      "prediction": "ok(service.searchByUsername(username));",
      "raw_prediction": "ok(service.searchByUsername(username));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1972,
      "groundtruth": "return ResponseEntity.ok(service.findAll());",
      "prediction": "return ResponseEntity.ok(service.getAll());",
      "raw_prediction": " return ResponseEntity.ok(service.getAll());",
      "es": 0.9090909090909091,
      "em": false,
      "passed": false
    },
    {
      "index": 1973,
      "groundtruth": "min = URL.convertDate(minDate, new Date(0L));",
      "prediction": "min = URL.convertDate(minDate, new Date());",
      "raw_prediction": "min = URL.convertDate(minDate, new Date());",
      "es": 0.9555555555555556,
      "em": false,
      "passed": false
    },
    {
      "index": 1974,
      "groundtruth": "Post> list = postService.fullSearch(text, min ,max);",
      "prediction": "Post> list = postService.fullSearch(text, min, max);",
      "raw_prediction": "Post> list = postService.fullSearch(text, min, max);",
      "es": 0.9615384615384616,
      "em": false,
      "passed": false
    },
    {
      "index": 1975,
      "groundtruth": "obj.getId()) ;",
      "prediction": "obj.getId());",
      "raw_prediction": "obj.getId());",
      "es": 0.9285714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 1976,
      "groundtruth": "text = URL.decodeParam(text);",
      "prediction": "text = URL.decodeParam(text);",
      "raw_prediction": "   text = URL.decodeParam(text);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1977,
      "groundtruth": "= URL.convertDate(maxDate, new Date());",
      "prediction": "= URL.convertDate(maxDate, new Date());",
      "raw_prediction": "= URL.convertDate(maxDate, new Date());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1978,
      "groundtruth": "post1.getCommentsList().addAll(Arrays.asList(c1,c2));",
      "prediction": "post1.getCommentsList().addAll(Arrays.asList(c1,c2));",
      "raw_prediction": " post1.getCommentsList().addAll(Arrays.asList(c1,c2));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1979,
      "groundtruth": "return new User(objDTO.getId(), objDTO.getName(), objDTO.getEmail());",
      "prediction": "return new User(objDTO.getId(),objDTO.getName(),objDTO.getEmail());",
      "raw_prediction": "   return new User(objDTO.getId(),objDTO.getName(),objDTO.getEmail());",
      "es": 0.9710144927536232,
      "em": false,
      "passed": false
    },
    {
      "index": 1980,
      "groundtruth": "messageHandler.destroySession(username);",
      "prediction": "messageHandler.deleteSession(username);",
      "raw_prediction": "messageHandler.deleteSession(username);",
      "es": 0.875,
      "em": false,
      "passed": false
    },
    {
      "index": 1981,
      "groundtruth": "MethodStatistics(row.getCount()));",
      "prediction": "MethodStatistics(row.getCount(), row.getModifier()));",
      "raw_prediction": "MethodStatistics(row.getCount(), row.getModifier()));\n            }",
      "es": 0.6415094339622642,
      "em": false,
      "passed": false
    },
    {
      "index": 1982,
      "groundtruth": "row.getCount(), Modifier.CONSTRUCTOR));",
      "prediction": "row.getCount(), row.getConstructor()));",
      "raw_prediction": "row.getCount(), row.getConstructor()));",
      "es": 0.5128205128205128,
      "em": false,
      "passed": false
    },
    {
      "index": 1983,
      "groundtruth": "return this.modifiers.isInstanceOverridden();",
      "prediction": "boolean isInstancePublic",
      "raw_prediction": "    boolean isInstancePublicOverridden() {",
      "es": 0.28888888888888886,
      "em": false,
      "passed": false
    },
    {
      "index": 1984,
      "groundtruth": "maria.getPosts().addAll(Arrays.asList(post1,post2));",
      "prediction": "maria.getPosts().addAll(Arrays.asList(post1,post2));",
      "raw_prediction": " maria.getPosts().addAll(Arrays.asList(post1,post2));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1985,
      "groundtruth": "new GitHubMetrics(this.project.githubUrl())\n        ).cells();",
      "prediction": "new StatisticsCaseWithModifiers(title, csv, project, filters)\n        ).cells();",
      "raw_prediction": "new StatisticsCaseWithModifiers(title, csv, project, filters)\n        ).cells();",
      "es": 0.475,
      "em": false,
      "passed": false
    },
    {
      "index": 1986,
      "groundtruth": "method -> !method.isConstructor())\n            .mapToLong(MethodStatistics::total)\n            .sum();",
      "prediction": "MethodStatistics::isMethod)\n            .mapToLong(MethodStatistics::total)\n            .sum();",
      "raw_prediction": "MethodStatistics::isMethod)\n            .mapToLong(MethodStatistics::total)\n            .sum();",
      "es": 0.7647058823529411,
      "em": false,
      "passed": false
    },
    {
      "index": 1987,
      "groundtruth": "(this.project.path())) {",
      "prediction": "(this.project.path())",
      "raw_prediction": "(this.project.path())) {",
      "es": 0.875,
      "em": false,
      "passed": false
    },
    {
      "index": 1988,
      "groundtruth": ".modifiers.isStaticPackagePrivate();",
      "prediction": ".modifiers.isStaticPackage();",
      "raw_prediction": ".modifiers.isStaticPackage();",
      "es": 0.8055555555555556,
      "em": false,
      "passed": false
    },
    {
      "index": 1989,
      "groundtruth": "modifiers.isInstancePackage();",
      "prediction": "modifiers.isInstancePackagePrivate();",
      "raw_prediction": "modifiers.isInstancePackagePrivate();\n    }\n\n    boolean isInstanceProtected() {\n        return this.modifiers.isInstanceProtected();",
      "es": 0.8108108108108107,
      "em": false,
      "passed": false
    },
    {
      "index": 1990,
      "groundtruth": "obj.setId(id);",
      "prediction": "obj.setId(id);",
      "raw_prediction": " obj.setId(id);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1991,
      "groundtruth": "proxyServer.open();",
      "prediction": "proxyServer.start();",
      "raw_prediction": "    proxyServer.start();",
      "es": 0.75,
      "em": false,
      "passed": false
    },
    {
      "index": 1992,
      "groundtruth": "proxyClient.authSuccess();",
      "prediction": "Frame frame = new Frame(0x42, serviceKey, null);",
      "raw_prediction": "Frame frame = new Frame(0x42, serviceKey, null);\n            ctx.writeAndFlush(frame);",
      "es": 0.16666666666666663,
      "em": false,
      "passed": false
    },
    {
      "index": 1993,
      "groundtruth": "proxyClient.shutdown();",
      "prediction": "map.clear();",
      "raw_prediction": "    map.clear();",
      "es": 0.21739130434782605,
      "em": false,
      "passed": false
    },
    {
      "index": 1994,
      "groundtruth": "proxyClient.updateHeatbeatTime();",
      "prediction": "proxyClient.updateHeartbeatTime();",
      "raw_prediction": "    proxyClient.updateHeartbeatTime();",
      "es": 0.9705882352941176,
      "em": false,
      "passed": false
    },
    {
      "index": 1995,
      "groundtruth": "().write(Json.parseToJson(this.body));",
      "prediction": "().write(this.json.toJson(this.body));",
      "raw_prediction": "().write(this.json.toJson(this.body));",
      "es": 0.736842105263158,
      "em": false,
      "passed": false
    },
    {
      "index": 1996,
      "groundtruth": "message, status.getValue(), request.getRequestURI(), new Date())).build(response);",
      "prediction": "new Date(), status.value(), message)).contentType(ContentType.TEXT_PLAIN.getValue()).build(response);",
      "raw_prediction": "new Date(), status.value(), message)).contentType(ContentType.TEXT_PLAIN.getValue()).build(response);",
      "es": 0.4554455445544554,
      "em": false,
      "passed": false
    },
    {
      "index": 1997,
      "groundtruth": "ResponseEntity.ok().body(obj.getPosts());",
      "prediction": "ResponseEntity.ok().body(obj.getPosts());",
      "raw_prediction": "ResponseEntity.ok().body(obj.getPosts());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1998,
      "groundtruth": "= tenantRepository.findByTenantId(tenant).get();",
      "prediction": "= tenantRepository.findByTenantId(tenant);",
      "raw_prediction": "= tenantRepository.findByTenantId(tenant);",
      "es": 0.875,
      "em": false,
      "passed": false
    },
    {
      "index": 1999,
      "groundtruth": "String encryptedPassword = encryptionService.encrypt(password, secret, salt);",
      "prediction": "String encryptedPassword = encryptionService.encrypt(password, secret, salt);",
      "raw_prediction": " String encryptedPassword = encryptionService.encrypt(password, secret, salt);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2000,
      "groundtruth": "= masterTenantRepository.findByTenantId(key)\n                                .orElseThrow(() -> new RuntimeException(\"No such tenant: \" + key));",
      "prediction": "= masterTenantRepository.findById(tenantIdentifier).get();",
      "raw_prediction": "= masterTenantRepository.findById(tenantIdentifier).get();",
      "es": 0.3125,
      "em": false,
      "passed": false
    },
    {
      "index": 2001,
      "groundtruth": "String tenant = TenantContext.getTenantId();",
      "prediction": "properties.put(AvailableSettings.MULTI_TENANT, AvailableSettings.MULTI_TENANT_SHARED);",
      "raw_prediction": "    properties.put(AvailableSettings.MULTI_TENANT, AvailableSettings.MULTI_TENANT_SHARED);\n        properties.put(AvailableSettings.MULTI_TENANT_CONNECTION_PROVIDER, connectionProvider);\n        properties.put(AvailableSettings.MULT",
      "es": 0.15116279069767447,
      "em": false,
      "passed": false
    },
    {
      "index": 2002,
      "groundtruth": "gpuTestCurlAnimView.flipSetToDefault();",
      "prediction": "gpuTestCurlAnimView.flipFinish();",
      "raw_prediction": "gpuTestCurlAnimView.flipFinish();",
      "es": 0.6923076923076923,
      "em": false,
      "passed": false
    },
    {
      "index": 2003,
      "groundtruth": "f.setXY(width, height);",
      "prediction": "f.setXY(0, height);",
      "raw_prediction": "    f.setXY(0, height);",
      "es": 0.782608695652174,
      "em": false,
      "passed": false
    },
    {
      "index": 2004,
      "groundtruth": "animationEffecter.onScroll();",
      "prediction": "animationEffecter.computeScroll();",
      "raw_prediction": "animationEffecter.computeScroll();",
      "es": 0.8235294117647058,
      "em": false,
      "passed": false
    },
    {
      "index": 2005,
      "groundtruth": "return animationEffecter.animInEffect();",
      "prediction": "return animationEffecter.animRunning();",
      "raw_prediction": "return animationEffecter.animRunning();",
      "es": 0.8,
      "em": false,
      "passed": false
    },
    {
      "index": 2006,
      "groundtruth": "f.setXY(0, 0);",
      "prediction": "f.setXY(width, height);",
      "raw_prediction": "    f.setXY(width, height);",
      "es": 0.5217391304347826,
      "em": false,
      "passed": false
    },
    {
      "index": 2007,
      "groundtruth": "readAnimView.buildBitmap(coverSlideDirection);",
      "prediction": "}",
      "raw_prediction": "}",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 2008,
      "groundtruth": "animationEffecter.onViewAttachedToWindow();",
      "prediction": "animationEffecter.onViewAttachedToWindow();",
      "raw_prediction": "    animationEffecter.onViewAttachedToWindow();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2009,
      "groundtruth": "f.setXY(width, 0);",
      "prediction": "f.setXY(0, 0);",
      "raw_prediction": "    f.setXY(0, 0);",
      "es": 0.7222222222222222,
      "em": false,
      "passed": false
    },
    {
      "index": 2010,
      "groundtruth": "a.setXY(-1, -1);",
      "prediction": "pathA = new Path();",
      "raw_prediction": "    pathA = new Path();\n        pathC = new Path();\n        pathB = new Path();\n        pathAPaint = new Paint(Paint.ANTI_ALIAS_FLAG);\n        pathCPaint = new Paint(Paint.ANTI_ALIAS_FLAG",
      "es": 0.1578947368421053,
      "em": false,
      "passed": false
    },
    {
      "index": 2011,
      "groundtruth": "animationEffecter.onViewSizeChanged(vWidth, vHeight);",
      "prediction": "animationEffecter.setAnimMode(animMode);",
      "raw_prediction": "   animationEffecter.setAnimMode(animMode);",
      "es": 0.4716981132075472,
      "em": false,
      "passed": false
    },
    {
      "index": 2012,
      "groundtruth": "(readAnimView.getPreviousBitmap(), -leftOffset, 0, paint);",
      "prediction": "(readAnimView.getPreviousBitmap(), 0, 0, paint);",
      "raw_prediction": "(readAnimView.getPreviousBitmap(), 0, 0, paint);",
      "es": 0.8103448275862069,
      "em": false,
      "passed": false
    },
    {
      "index": 2013,
      "groundtruth": "int i = mRetrofitUrlManager.getPathSize();",
      "prediction": "int i = 0;",
      "raw_prediction": "int i = 0;",
      "es": 0.2142857142857143,
      "em": false,
      "passed": false
    },
    {
      "index": 2014,
      "groundtruth": "(slideDirection == AnimHelper.SLID_DIRECTION_LEFT && (null != readAnimView.getNextBitmap() && null != readAnimView.getCurrentBitmap())) {",
      "prediction": "(slideDirection == AnimHelper.SLID_DIRECTION_LEFT && null != readAnimView.getNextBitmap())",
      "raw_prediction": "(slideDirection == AnimHelper.SLID_DIRECTION_LEFT && null != readAnimView.getNextBitmap()) {",
      "es": 0.656934306569343,
      "em": false,
      "passed": false
    },
    {
      "index": 2015,
      "groundtruth": "+ mRetrofitUrlManager.getPathSize();",
      "prediction": "+ domainUrl.encodedPathSegments().size() + url.encodedPathSegments().siz",
      "raw_prediction": "    + domainUrl.encodedPathSegments().size() + url.encodedPathSegments().size();\n    }\n\n    @Override\n    public void clear() {\n        mCache.clear();",
      "es": 0.26388888888888884,
      "em": false,
      "passed": false
    },
    {
      "index": 2016,
      "groundtruth": "+ mRetrofitUrlManager.getBaseUrl().host()\n                                + mRetrofitUrlManager.getBaseUrl().encodedPath()));",
      "prediction": "+ mRetrofitUrlManager.getBaseUrl().host() + mRetrofitUrlManager.getBaseUrl().encodedPath()));",
      "raw_prediction": "        + mRetrofitUrlManager.getBaseUrl().host() + mRetrofitUrlManager.getBaseUrl().encodedPath()));",
      "es": 0.744,
      "em": true,
      "passed": true
    },
    {
      "index": 2017,
      "groundtruth": "() > mRetrofitUrlManager.getPathSize()) {",
      "prediction": "() > mRetrofitUrlManag",
      "raw_prediction": "() > mRetrofitUrlManager.getPathSize()) {",
      "es": 0.5365853658536586,
      "em": false,
      "passed": false
    },
    {
      "index": 2018,
      "groundtruth": "drawable = readAnimView.getAnimHelper().getCoverGradientDrawable();",
      "prediction": "drawable = new GradientDrawable();",
      "raw_prediction": "drawable = new GradientDrawable();\n        drawable.setColor(0x80000000);",
      "es": 0.4925373134328358,
      "em": false,
      "passed": false
    },
    {
      "index": 2019,
      "groundtruth": "DLog.log(\"touchUp coverAnimationRunning=%s\", coverAnimationRunning);",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 2020,
      "groundtruth": "readLayoutManger.getBookFlipMode();",
      "prediction": "readLayoutManger.getBookFlipMode();",
      "raw_prediction": "readLayoutManger.getBookFlipMode();\n    }\n\n    @Override\n    public void setOnPositionChangedListener(BookView.OnPositionChangedListener onPositionChangedListener) {\n        this.onPositionChangedListener = onPositionChangedListener;\n   ",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2021,
      "groundtruth": "readLayoutManger.setonStopScroller(new ItemOnScrollStop());",
      "prediction": "setLayoutManager(readLayoutManger);",
      "raw_prediction": "    setLayoutManager(readLayoutManger);",
      "es": 0.3220338983050848,
      "em": false,
      "passed": false
    },
    {
      "index": 2022,
      "groundtruth": "readLayoutManger.setAutoLeftScroll(finallyMoveX < 10);",
      "prediction": "if (flipMode == BookLayoutManager.BookFlipMode.MODE_COVER)",
      "raw_prediction": "if (flipMode == BookLayoutManager.BookFlipMode.MODE_COVER) {\n                    readLayoutManger.setAutoLeftScroll(finallyMoveX > 0);",
      "es": 0.10344827586206895,
      "em": false,
      "passed": false
    },
    {
      "index": 2023,
      "groundtruth": "readLayoutManger.onRecyclerViewSizeChange();",
      "prediction": "}",
      "raw_prediction": "}\n    readLayoutManger.forceLayout();",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 2024,
      "groundtruth": "readLayoutManger.setAutoLeftScroll(finallyMoveX < 0);",
      "prediction": "readLayoutManger.setAutoLeftScroll(false);",
      "raw_prediction": " readLayoutManger.setAutoLeftScroll(false);",
      "es": 0.7735849056603774,
      "em": false,
      "passed": false
    },
    {
      "index": 2025,
      "groundtruth": "readLayoutManger.setBookFlipMode(flipMode);",
      "prediction": "readLayoutManger.setBookFlipMode(flipMode);",
      "raw_prediction": "readLayoutManger.setBookFlipMode(flipMode);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2026,
      "groundtruth": "DLog.log(\"coverAnimationRunning coverAnimationRunning=%s \u7ed3\u675f\uff0c\u5ef6\u65f6\u5f00\u542f \u72b6\u6001\u91cd\u7f6e\", coverAnimationRunning);",
      "prediction": "readAnimView.postInvalidate();",
      "raw_prediction": "readAnimView.postInvalidate();",
      "es": 0.1473684210526316,
      "em": false,
      "passed": false
    },
    {
      "index": 2027,
      "groundtruth": "readLayoutManger.forceScrollToPosition(position);",
      "prediction": "readLayoutManger.scrollToPosition(position);",
      "raw_prediction": "readLayoutManger.scrollToPosition(position);",
      "es": 0.8775510204081632,
      "em": false,
      "passed": false
    },
    {
      "index": 2028,
      "groundtruth": "readLayoutManger.setOnForceLayoutCompleted(new ItemOnForceLayoutCompleted());",
      "prediction": "setOverScrollMode(OVERScrollMode.ALWAYS);",
      "raw_prediction": "    setOverScrollMode(OVERScrollMode.ALWAYS);\n        setNestedScrollingEnabled(false);\n;\n        setNestedScrollingEnabled(false);\n        setNestedScrollingEnabled(false);\n        setNestedScrollingEnabled(false);\n        setNested",
      "es": 0.19480519480519476,
      "em": false,
      "passed": false
    },
    {
      "index": 2029,
      "groundtruth": "Food americanFoodA = AmericanFoodFactory.produce(\"A\");",
      "prediction": "Food americanFoodA = AmericanFoodFactory.produce(\"A\");",
      "raw_prediction": "    Food americanFoodA = AmericanFoodFactory.produce(\"A\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2030,
      "groundtruth": ").animRunning();",
      "prediction": ").animRunning();",
      "raw_prediction": ").animRunning();\n        } else {",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2031,
      "groundtruth": "animParentView.onClickMenuArea();",
      "prediction": "if (null != eventProxyWeakReference && null != eventProxyWeakRefer",
      "raw_prediction": "if (null != eventProxyWeakReference && null != eventProxyWeakReference.get()) {\n            eventProxyWeakReference.get().onClickMenu();\n        }\n    }\n\n    @Override\n    public void onItemViewClick(int position) {\n       ",
      "es": 0.18181818181818177,
      "em": false,
      "passed": false
    },
    {
      "index": 2032,
      "groundtruth": "= AmericanFoodFactory.produce(\"A\");",
      "prediction": "= AmericanFoodFactory.produce(\"B\");",
      "raw_prediction": "= AmericanFoodFactory.produce(\"B\");",
      "es": 0.9714285714285714,
      "em": false,
      "passed": false
    },
    {
      "index": 2033,
      "groundtruth": "DLog.log(\"CoverAnimationEffect draw 1\");",
      "prediction": "DLog.log(\"CoverAnimationEffect draw 1\");",
      "raw_prediction": "DLog.log(\"CoverAnimationEffect draw 1\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2034,
      "groundtruth": "PlayingSessionInformation.isOnNetwork()) {",
      "prediction": "PlayingSessionInformation.isOnServer()) { return; }",
      "raw_prediction": "PlayingSessionInformation.isOnServer()) { return; }\n        // Check if the user is on the server since you don't want to trigger certain macros on other servers\n        if(!PlayingSessionInformation.isOnServer()) {",
      "es": 0.7058823529411764,
      "em": false,
      "passed": false
    },
    {
      "index": 2035,
      "groundtruth": "!XenyriaConfigManager.getConfig().improvedShootingDetectionForPaintSquad) {",
      "prediction": "!XenyriaConfigManager.getInstance().get",
      "raw_prediction": "!XenyriaConfigManager.getInstance().getBoolean(\"paintsquad.enable\")) {",
      "es": 0.4,
      "em": false,
      "passed": false
    },
    {
      "index": 2036,
      "groundtruth": "configData = config.toJSON().toString(4);",
      "prediction": "configData = config.save();",
      "raw_prediction": "configData = config.save();",
      "es": 0.5609756097560976,
      "em": false,
      "passed": false
    },
    {
      "index": 2037,
      "groundtruth": "discordActivityAccess.start(applicationId);",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 2038,
      "groundtruth": "!XenyriaConfigManager.getConfig().shareServerActivity) {",
      "prediction": "!XenyriaConfigManager.getInsta",
      "raw_prediction": "!XenyriaConfigManager.getInstance().getDiscord().getShareActivity()) {",
      "es": 0.5,
      "em": false,
      "passed": false
    },
    {
      "index": 2039,
      "groundtruth": "PlayingSessionInformation.setOnNetwork(true);",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 2040,
      "groundtruth": "discordActivityAccess.stop();",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 2041,
      "groundtruth": "String instanceId = packet.getData().getString(\"server_id\");",
      "prediction": "int instanceId = packet.getData().getInt(\"instance_id\");",
      "raw_prediction": " int instanceId = packet.getData().getInt(\"instance_id\");",
      "es": 0.7333333333333334,
      "em": false,
      "passed": false
    },
    {
      "index": 2042,
      "groundtruth": "EXenyriaServerType.determineServerType(instanceId)\n                        );",
      "prediction": "XenyriaServerType.valueOf(instanceId)\n            );",
      "raw_prediction": "XenyriaServerType.valueOf(instanceId)\n            );",
      "es": 0.5974025974025974,
      "em": false,
      "passed": false
    },
    {
      "index": 2043,
      "groundtruth": "setLastReceivedRichPresence(packet.getData());",
      "prediction": "updateRichPresence(packet.getData());",
      "raw_prediction": "updateRichPresence(packet.getData());\n            } else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.HANDSHAKE_RESPONSE) {\n            // Orion sends one mod handshake packet on login\n            // This packet contains",
      "es": 0.7391304347826086,
      "em": false,
      "passed": false
    },
    {
      "index": 2044,
      "groundtruth": "\"Current server id: \" + PlayingSessionInformation.getServerInstanceId());",
      "prediction": "\"Current server instance ID: \" + PlayingSessionInformation.getServerInstanceId());",
      "raw_prediction": "\"Current server instance ID: \" + PlayingSessionInformation.getServerInstanceId());\n            } else {\n            LOGGER.warning(\"Received unknown packet type: \" + packet.getPacketType());",
      "es": 0.8780487804878049,
      "em": false,
      "passed": false
    },
    {
      "index": 2045,
      "groundtruth": "responsePacket.sendToServer();",
      "prediction": "ClientPlayNetworking.send(ID, responsePacket);",
      "raw_prediction": " ClientPlayNetworking.send(ID, responsePacket);",
      "es": 0.26086956521739135,
      "em": false,
      "passed": false
    },
    {
      "index": 2046,
      "groundtruth": "XenyriaServerPacket packet = XenyriaServerPacket.parsePacket(rawJsonText);",
      "prediction": "XenyriaServerPacket packet = XenyriaServerPacket.parsePacket(rawJsonText);",
      "raw_prediction": "XenyriaServerPacket packet = XenyriaServerPacket.parsePacket(rawJsonText);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2047,
      "groundtruth": "(\"Current network state: \" + PlayingSessionInformation.isOnNetwork());",
      "prediction": "(\"Received debug packet: \" + packet.getData().toString());",
      "raw_prediction": "(\"Received debug packet: \" + packet.getData().toString());\n            } else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.SERVER_INFO) {\n            LOGGER.info(\"Received server info packet: \" + packet.getData",
      "es": 0.2857142857142857,
      "em": false,
      "passed": false
    },
    {
      "index": 2048,
      "groundtruth": "XenyriaConfigManager.getConfig().enableDiscordRichPresence) {",
      "prediction": "XenyriaConfigManager.isRichPrese",
      "raw_prediction": "XenyriaConfigManager.isRichPresenceEnabled()) {",
      "es": 0.5245901639344263,
      "em": false,
      "passed": false
    },
    {
      "index": 2049,
      "groundtruth": "PlayingSessionInformation.setServerInstanceId(instanceId);",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 2050,
      "groundtruth": "else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.DEBUG) {",
      "prediction": "else {",
      "raw_prediction": "else {\n            // We don't care about other packets\n            LOGGER.info(\"Received packet of type \" + packet.getPacketType() + \" with data: \" + packet.getData());\n            }",
      "es": 0.07999999999999996,
      "em": false,
      "passed": false
    },
    {
      "index": 2051,
      "groundtruth": "(packet.getPacketType() == XenyriaServerPacket.EPacketType.RP) {",
      "prediction": "(packet.getPacketType() == XenyriaServerPacket.EPacketType.RICH_PRESENCE)",
      "raw_prediction": "(packet.getPacketType() == XenyriaServerPacket.EPacketType.RICH_PRESENCE) {",
      "es": 0.8356164383561644,
      "em": false,
      "passed": false
    },
    {
      "index": 2052,
      "groundtruth": ".lexer.lex(markdown)).visit(compiler);",
      "prediction": ".lexer.lex(markdown));",
      "raw_prediction": ".lexer.lex(markdown));\n        compiler.accept(this.parser.parse());\n",
      "es": 0.5789473684210527,
      "em": false,
      "passed": false
    },
    {
      "index": 2053,
      "groundtruth": "+ feature.name() + \"' is incompatible with compiler '\" + testCompiler.name() + \"'\");",
      "prediction": "+ feature.getClass().getSimpleName() + \"' does not support the compiler of type '\" + testCompiler.getClass().getSimpleName() +",
      "raw_prediction": "+ feature.getClass().getSimpleName() + \"' does not support the compiler of type '\" + testCompiler.getClass().getSimpleName() + \"'\");",
      "es": 0.4444444444444444,
      "em": false,
      "passed": false
    },
    {
      "index": 2054,
      "groundtruth": "builder.pushStyle(style -> style.withColor(Formatting.GRAY).withItalic(true));",
      "prediction": "this.builder.pushStyle(style);",
      "raw_prediction": "this.builder.pushStyle(style);",
      "es": 0.2564102564102564,
      "em": false,
      "passed": false
    },
    {
      "index": 2055,
      "groundtruth": "this.builder.popStyle();",
      "prediction": "if (this.quoteDepth > 0)",
      "raw_prediction": "if (this.quoteDepth > 0) {",
      "es": 0.20833333333333337,
      "em": false,
      "passed": false
    },
    {
      "index": 2056,
      "groundtruth": "return RealCameraCore.isRenderingWorld && config.shouldDisableRender(modelPartName) && RealCameraCore.isActive();",
      "prediction": "return config.getDisableRender();",
      "raw_prediction": "return config.getDisableRender();",
      "es": 0.2654867256637168,
      "em": false,
      "passed": false
    },
    {
      "index": 2057,
      "groundtruth": "modConfig.set(new ModConfig());",
      "prediction": "modConfig = new ModConfig();",
      "raw_prediction": "\n        modConfig = new ModConfig();",
      "es": 0.8064516129032258,
      "em": false,
      "passed": false
    },
    {
      "index": 2058,
      "groundtruth": "get(config.getModelModID()).test(tickDelta, matrixStack);",
      "prediction": "getOrDefault(config.getModid(), (tickDelta, matrixStack) -> false)",
      "raw_prediction": "getOrDefault(config.getModid(), (tickDelta, matrixStack) -> false).test(tickDelta, matrixStack);",
      "es": 0.5303030303030303,
      "em": false,
      "passed": false
    },
    {
      "index": 2059,
      "groundtruth": "else config.setAdjustOffset(!config.isAdjustingOffset());",
      "prediction": "ConfigFile.save();",
      "raw_prediction": "ConfigFile.save();\n        }\n        while (TOGGLE_CAMERA_MODE.wasPressed()) {\n            config.setClassic(!config.isClassic());\n            ConfigFile.save();\n        }\n        while (ADJUST_LEFT.wasPressed()) {\n            if (",
      "es": 0.21052631578947367,
      "em": false,
      "passed": false
    },
    {
      "index": 2060,
      "groundtruth": "(config.isClassic()) config.adjustClassicZ(true);",
      "prediction": "(config.isClassic()) config.adjustClassicZ(true);",
      "raw_prediction": "(config.isClassic()) config.adjustClassicZ(true);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2061,
      "groundtruth": "(config.isClassic()) config.cycleClassicAdjustMode();",
      "prediction": "config.isAdjustingOffset()",
      "raw_prediction": "config.isAdjustingOffset()",
      "es": 0.30188679245283023,
      "em": false,
      "passed": false
    },
    {
      "index": 2062,
      "groundtruth": "!config.isClassic());",
      "prediction": "!config.isClassic());",
      "raw_prediction": "!config.isClassic());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2063,
      "groundtruth": "RealCameraCore.isActive();",
      "prediction": "!ModConfig.Disa",
      "raw_prediction": "!ModConfig.Disable.optionalParts.contains(modelPartName);",
      "es": 0.15384615384615385,
      "em": false,
      "passed": false
    },
    {
      "index": 2064,
      "groundtruth": "config.isEnabled();",
      "prediction": "config.isEnabled();",
      "raw_prediction": "config.isEnabled();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2065,
      "groundtruth": "config.isClassic()) config.cycleClassicAdjustMode();",
      "prediction": "config.isAdjustingOffset()) config.setAdjustOffset(!config.isAdjustingOffset()",
      "raw_prediction": "config.isAdjustingOffset()) config.setAdjustOffset(!config.isAdjustingOffset());",
      "es": 0.41025641025641024,
      "em": false,
      "passed": false
    },
    {
      "index": 2066,
      "groundtruth": ")) config.adjustClassicZ(true);",
      "prediction": ")) config.adjustClassicZ(true);",
      "raw_prediction": ")) config.adjustClassicZ(true);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2067,
      "groundtruth": "config.adjustBindingZ(true);",
      "prediction": "config.adjustBindingZ(true);",
      "raw_prediction": "config.adjustBindingZ(true);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2068,
      "groundtruth": "return config.getModModelPartName();",
      "prediction": "return config.getModelModID();",
      "raw_prediction": "\n        return config.getModelModID();",
      "es": 0.6944444444444444,
      "em": false,
      "passed": false
    },
    {
      "index": 2069,
      "groundtruth": "TableFieldUtil.getFieldMap(r.getClass());",
      "prediction": "TableFieldUtil.getColumnMap(tableClass);",
      "raw_prediction": "TableFieldUtil.getColumnMap(tableClass);",
      "es": 0.6829268292682926,
      "em": false,
      "passed": false
    },
    {
      "index": 2070,
      "groundtruth": "Object result = StringConvertUtil.convertType(type, value);",
      "prediction": "if (type == String.class) {",
      "raw_prediction": "if (type == String.class) {\n            field.set(object, value);\n        } else if (type == int.class || type == Integer.class) {\n            field.set(object, Integer.parseInt(value));\n        } R result = (R)",
      "es": 0.22033898305084743,
      "em": false,
      "passed": false
    },
    {
      "index": 2071,
      "groundtruth": ") config.adjustClassicX(false);",
      "prediction": ") config.adjustClassicX(false);",
      "raw_prediction": ") config.adjustClassicX(false);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2072,
      "groundtruth": "= canalProperties.getRabbitMq();",
      "prediction": "= canalProperties.getRabbitMq();",
      "raw_prediction": "= canalProperties.getRabbitMq();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2073,
      "groundtruth": "(VirtualRenderer.shouldDisableRender(\"jacket\")) model.jacket.visible = false;",
      "prediction": "(VirtualRenderer.shouldDisableRender(\"leftSocks\")) model.leftSocks.visible = false;",
      "raw_prediction": "(VirtualRenderer.shouldDisableRender(\"leftSocks\")) model.leftSocks.visible = false;\n        if (VirtualRenderer.shouldDisableRender(\"rightSocks\")) model.rightSocks.visible = false;",
      "es": 0.8072289156626506,
      "em": false,
      "passed": false
    },
    {
      "index": 2074,
      "groundtruth": "() && DoABarrelRollCompat.modEnabled() && RealCameraCore.isActive()) {",
      "prediction": "&& !RealCameraCore.isActive() && !DoA",
      "raw_prediction": " && !RealCameraCore.isActive() && !DoABarrelRollCompat.isDoABarrelRollActive()) {\n            DoABarrelRollCompat.enableDoABarrelRoll();\n        }\n    }\n\n    @Inject(method = \"",
      "es": 0.34285714285714286,
      "em": false,
      "passed": false
    },
    {
      "index": 2075,
      "groundtruth": ".modEnabled() && RealCameraCore.isActive()) {",
      "prediction": ".isDoABarrelRollActive()",
      "raw_prediction": ".isDoABarrelRollActive()) {",
      "es": 0.2666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 2076,
      "groundtruth": "if (VirtualRenderer.shouldDisableRender(\"leftPants\")) model.leftPants.visible = false;",
      "prediction": "if (VirtualRenderer.shouldDisableRender(\"leftPants\")) model.leftPants.visible = false;",
      "raw_prediction": "    if (VirtualRenderer.shouldDisableRender(\"leftPants\")) model.leftPants.visible = false;",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2077,
      "groundtruth": "&& camera.isThirdPerson() && RealCameraCore.isActive() &&\n                !ConfigFile.modConfig.allowRenderingHandWhen(client)) {",
      "prediction": "&& RealCameraCore.isActive()) {",
      "raw_prediction": "&& RealCameraCore.isActive()) {",
      "es": 0.24031007751937983,
      "em": false,
      "passed": false
    },
    {
      "index": 2078,
      "groundtruth": ").OnMessageReceive(m_baseObject, code, msg);",
      "prediction": ").OnMessageReceive(null, code, msg);",
      "raw_prediction": ").OnMessageReceive(null, code, msg);",
      "es": 0.7272727272727273,
      "em": false,
      "passed": false
    },
    {
      "index": 2079,
      "groundtruth": "m_metaphorManager.showFragment(strTag);",
      "prediction": "m_metaphorManager.showFragment(strTag);",
      "raw_prediction": "m_metaphorManager.showFragment(strTag);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2080,
      "groundtruth": "m_fx1 = FragmentX1.newInstance();",
      "prediction": "m_fx1 = FragmentX1.newInstance();",
      "raw_prediction": "    m_fx1 = FragmentX1.newInstance();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2081,
      "groundtruth": "settings.setTemperature(getMaxTemperatureValue(form.getTemperature()));",
      "prediction": "settings.setTemperature(getMaxTemperatureValue(form.getTemperature()));",
      "raw_prediction": "settings.setTemperature(getMaxTemperatureValue(form.getTemperature()));\n    }",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2082,
      "groundtruth": "!form.getTemperature().equals(String.valueOf(settings.getTemperature()));",
      "prediction": "!form.getTemperature().equals(String.valueOf(settings.getTemperature()));",
      "raw_prediction": "!form.getTemperature().equals(String.valueOf(settings.getTemperature()));\n    }",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2083,
      "groundtruth": "return form.getMainPanel();",
      "prediction": "return form.getMainPanel();",
      "raw_prediction": "  return form.getMainPanel();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2084,
      "groundtruth": "(testRun.getTestRunOutcome() == null) {",
      "prediction": "(testRun.getTestRunOutcome() == null)",
      "raw_prediction": "(testRun.getTestRunOutcome() == null) {",
      "es": 0.9487179487179487,
      "em": false,
      "passed": false
    },
    {
      "index": 2085,
      "groundtruth": "form.getTemperature().equals(String.valueOf(settings.getTemperature()));",
      "prediction": "form.getTemperature().equals(String.valueOf(settings.getTemperature()));",
      "raw_prediction": "form.getTemperature().equals(String.valueOf(settings.getTemperature()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2086,
      "groundtruth": "apiResponse.getMessage(),\n              String.format(\"%d ExceptionAI Error\", apiResponse.getCode()),\n              Messages.getErrorIcon());",
      "prediction": "\"Error: \" + apiResponse.getMessage(),\n            \"ExceptionAI Suggestions\",\n            Messages.getErrorIcon());",
      "raw_prediction": "\"Error: \" + apiResponse.getMessage(),\n            \"ExceptionAI Suggestions\",\n            Messages.getErrorIcon());",
      "es": 0.5815602836879432,
      "em": false,
      "passed": false
    },
    {
      "index": 2087,
      "groundtruth": "\"\\n\" + apiResponse.getMessage(),\n              \"ExceptionAI Suggestions\",\n              Messages.getInformationIcon());",
      "prediction": "apiResponse.getMessage(),\n            String.format(\"%d ExceptionAI Suggestion\", apiResponse.getCode()),\n            Messages.getInformationIcon()\n        );",
      "raw_prediction": " apiResponse.getMessage(),\n            String.format(\"%d ExceptionAI Suggestion\", apiResponse.getCode()),\n            Messages.getInformationIcon()\n        );",
      "es": 0.6242038216560509,
      "em": false,
      "passed": false
    },
    {
      "index": 2088,
      "groundtruth": "= testRun.getDateTime();",
      "prediction": "= testRun.getDateTime().toString();",
      "raw_prediction": "= testRun.getDateTime().toString();",
      "es": 0.6857142857142857,
      "em": false,
      "passed": false
    },
    {
      "index": 2089,
      "groundtruth": "switch (testRun.getTestRunOutcome()) {",
      "prediction": "switch (testRun.getTestRunOutcome())",
      "raw_prediction": "switch (testRun.getTestRunOutcome()) {",
      "es": 0.9473684210526316,
      "em": false,
      "passed": false
    },
    {
      "index": 2090,
      "groundtruth": "14, testRun.getCommit());",
      "prediction": "10);",
      "raw_prediction": "10);\n            historyContent.add(exampleGreenCirclePanel, historyGbc);\n\n",
      "es": 0.12,
      "em": false,
      "passed": false
    },
    {
      "index": 2091,
      "groundtruth": "= testRun.getPrediction() == Prediction.CORRECT ? AllIcons.RunConfigurations.TestPassed : AllIcons.RunConfigurations.TestFailed;",
      "prediction": "= null;",
      "raw_prediction": "= null;\n                if (testRun.getTestRunOutcome() == TestRun.TestRunOutcome.PASSED) {\n                icon = AllIcons.General.Check;\n                } else if (testRun.getTestRunOutcome() == TestRun.Test",
      "es": 0.0546875,
      "em": false,
      "passed": false
    },
    {
      "index": 2092,
      "groundtruth": "apiResponse.getCode() == 200) {",
      "prediction": "apiResponse.getCo",
      "raw_prediction": "apiResponse.getCode() == 200) {",
      "es": 0.5483870967741935,
      "em": false,
      "passed": false
    },
    {
      "index": 2093,
      "groundtruth": "<Class<?>, List<ISubscriber>> registeredSubs = SubscriberFinder.find(subscriber);",
      "prediction": "<Class<?>, List<ISubscriber>> registeredSubs = new HashMap<>();",
      "raw_prediction": "<Class<?>, List<ISubscriber>> registeredSubs = new HashMap<>();\n        subscriber.getClass().getDeclaredMethods().forEach(method -> {\n            if(method.isAnnotationPresent(Subscribe.class)) {\n                Subscribe subscribe = method.getAnnotation(Subscribe",
      "es": 0.6419753086419753,
      "em": false,
      "passed": false
    },
    {
      "index": 2094,
      "groundtruth": "subscriber.getThreadType() == ThreadType.ASYNC) {",
      "prediction": "subscriber.getThreadType()",
      "raw_prediction": "subscriber.getThreadType() == ThreadType.EXECUTOR) {",
      "es": 0.5306122448979591,
      "em": false,
      "passed": false
    },
    {
      "index": 2095,
      "groundtruth": "(sub -> sub.getSubscriber() == subscriber);",
      "prediction": "(subscriber::equals);",
      "raw_prediction": "(subscriber::equals);",
      "es": 0.32558139534883723,
      "em": false,
      "passed": false
    },
    {
      "index": 2096,
      "groundtruth": "DataSourceContext.get();",
      "prediction": "DataSourceContext.get();",
      "raw_prediction": "DataSourceContext.get();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2097,
      "groundtruth": "return TransactionContext.get() != null;",
      "prediction": "TxId tid = TransactionContext.get();",
      "raw_prediction": "    TxId tid = TransactionContext.get();\n        return tid != null;",
      "es": 0.575,
      "em": false,
      "passed": false
    },
    {
      "index": 2098,
      "groundtruth": "= transaction.getNoRollbackFor();",
      "prediction": "= transaction.getNoRollbackFor();",
      "raw_prediction": "= transaction.getNoRollbackFor();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2099,
      "groundtruth": "TransactionContext.remove();",
      "prediction": "TxConnectionContext.notify(tid, true);",
      "raw_prediction": "TxConnectionContext.notify(tid, true);",
      "es": 0.4736842105263158,
      "em": false,
      "passed": false
    },
    {
      "index": 2100,
      "groundtruth": "= transaction.proceed();",
      "prediction": "= transaction.proceed();",
      "raw_prediction": "= transaction.proceed();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2101,
      "groundtruth": "Extractor.warning(\"Warning: Did not match as a member: \" + line);",
      "prediction": "Extractor.warning(\"Warning: Did not match as a member: \" + line);",
      "raw_prediction": "\n                Extractor.warning(\"Warning: Did not match as a member: \" + line);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2102,
      "groundtruth": "Extractor.warning(\"Warning: Did not match as a class/interface: \" + line);",
      "prediction": "Extractor.warning(\"Warning: Did not match as a class: \" + line);",
      "raw_prediction": " Extractor.warning(\"Warning: Did not match as a class: \" + line);",
      "es": 0.8648648648648649,
      "em": false,
      "passed": false
    },
    {
      "index": 2103,
      "groundtruth": "action.deleteCache();",
      "prediction": "action.clearCache();",
      "raw_prediction": "    action.clearCache();",
      "es": 0.8095238095238095,
      "em": false,
      "passed": false
    },
    {
      "index": 2104,
      "groundtruth": "callback.onCompletion(content);",
      "prediction": "BotUtil.updatePrompt(sessionId, content);",
      "raw_prediction": " BotUtil.updatePrompt(sessionId, content);\n",
      "es": 0.41463414634146345,
      "em": false,
      "passed": false
    },
    {
      "index": 2105,
      "groundtruth": "BotUtil.resetAll();",
      "prediction": "BotUtil.res",
      "raw_prediction": "BotUtil.resetPrompt(chatBO.getSessionId());\n            BotUtil.resetModel(chatBO.getSessionId());\n            BotUtil.resetPrompt(chatBO.getSessionId());",
      "es": 0.5789473684210527,
      "em": false,
      "passed": false
    },
    {
      "index": 2106,
      "groundtruth": "rateLimiter.setPrompt(sessionId, prompt);",
      "prediction": "rateLimiter.setPrompt(sessionId, prompt);",
      "raw_prediction": "rateLimiter.setPrompt(sessionId, prompt);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2107,
      "groundtruth": "FixProtocolVersion.fix();",
      "prediction": "}",
      "raw_prediction": "}\n        //OpenAI\n        for (String apiKey : apiKeyPlus){\n            apiKey = apiKey.trim();\n            if (!\"\".equals(apiKey)){\n                openAiServiceList.add(new OpenAiService(apiKey, Duration.ofSeconds(10",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 2108,
      "groundtruth": "this.code = code.getValue();",
      "prediction": "this.code = code.getValue();",
      "raw_prediction": "    this.code = code.getValue();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2109,
      "groundtruth": "HttpContextUtil.setAttributeToSession(\"verifyCode\", code);",
      "prediction": "HttpContextUtil.setAttributeToInSession(\"verifyCode\", code);",
      "raw_prediction": "HttpContextUtil.setAttributeToInSession(\"verifyCode\", code);",
      "es": 0.9666666666666667,
      "em": false,
      "passed": false
    },
    {
      "index": 2110,
      "groundtruth": "request.getName())\n                .createdBy(userId)\n                .build();",
      "prediction": "request.getName())\n        .status(OrgStatus.NORMAL)\n        .build();",
      "raw_prediction": "request.getName())\n        .status(OrgStatus.NORMAL)\n        .build();\n\n        orgHandler.create(org, userId);",
      "es": 0.6075949367088608,
      "em": false,
      "passed": false
    },
    {
      "index": 2111,
      "groundtruth": "(request.getTenantId(), id)\n                .orElseThrow(() -> {",
      "prediction": "(id)\n        .orElseThrow(() -> {",
      "raw_prediction": "(id)\n        .orElseThrow(() -> {",
      "es": 0.515625,
      "em": false,
      "passed": false
    },
    {
      "index": 2112,
      "groundtruth": "= status.code();",
      "prediction": "= status.getCode();",
      "raw_prediction": "= status.getCode();",
      "es": 0.7894736842105263,
      "em": false,
      "passed": false
    },
    {
      "index": 2113,
      "groundtruth": "assertOrgName.shouldNotEmpty(newName);",
      "prediction": "if (newName != null && !newName.equals(org.getName()))",
      "raw_prediction": "if (newName != null && !newName.equals(org.getName())) {",
      "es": 0.2222222222222222,
      "em": false,
      "passed": false
    },
    {
      "index": 2114,
      "groundtruth": "(request.getSuperiorId())\n                .name(request.getName())\n                .createdBy(userId)\n                .build();",
      "prediction": "(request.getSuperiorId())\n        .name(request.getName())\n        .status(OrgStatus.ENABLED)\n        .createdBy(userId)\n        .createdAt(System.currentTimeMillis())\n        .build();",
      "raw_prediction": "(request.getSuperiorId())\n        .name(request.getName())\n        .status(OrgStatus.ENABLED)\n        .createdBy(userId)\n        .createdAt(System.currentTimeMillis())\n        .build();",
      "es": 0.6,
      "em": false,
      "passed": false
    },
    {
      "index": 2115,
      "groundtruth": "org, request.getName() , request.getLeaderId(), userId);",
      "prediction": "org, request, userId);",
      "raw_prediction": "org, request, userId);",
      "es": 0.3928571428571429,
      "em": false,
      "passed": false
    },
    {
      "index": 2116,
      "groundtruth": "return orgService.cancelOrg(tenant, id, userId);",
      "prediction": "return orgService.cancelOrg(id, tenant, userId);",
      "raw_prediction": "return orgService.cancelOrg(id, tenant, userId);",
      "es": 0.8333333333333334,
      "em": false,
      "passed": false
    },
    {
      "index": 2117,
      "groundtruth": "orgHandler.updateBasic(org, request.getName() , request.getLeaderId(), userId);",
      "prediction": "orgHandler.updateBasic(org, request, userId);",
      "raw_prediction": "    orgHandler.updateBasic(org, request, userId);",
      "es": 0.5696202531645569,
      "em": false,
      "passed": false
    },
    {
      "index": 2118,
      "groundtruth": "if (newLeader != null && !newLeader.equals(org.getLeaderId())) {",
      "prediction": "if (newLeader != null && !newLeader.equals(org.getLeaderId()))",
      "raw_prediction": "    if (newLeader != null && !newLeader.equals(org.getLeaderId())) {",
      "es": 0.96875,
      "em": false,
      "passed": false
    },
    {
      "index": 2119,
      "groundtruth": "org.cancel();",
      "prediction": "",
      "raw_prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false
    },
    {
      "index": 2120,
      "groundtruth": "OrgStatus.ofCode(statusCode));",
      "prediction": "statusCode);",
      "raw_prediction": "statusCode);\n        org.setCreatedAt(createdAt);\n        org.setCreatedBy(createdBy);",
      "es": 0.4,
      "em": false,
      "passed": false
    },
    {
      "index": 2121,
      "groundtruth": "assertOrgType.shouldEffective(tenantId, orgTypeCode);",
      "prediction": "assertOrgType.shouldEffective(orgTypeCode);OrgType.of(tenantId, orgTypeCode));",
      "raw_prediction": "    assertOrgType.shouldEffective(orgTypeCode);OrgType.of(tenantId, orgTypeCode));",
      "es": 0.6794871794871795,
      "em": false,
      "passed": false
    },
    {
      "index": 2122,
      "groundtruth": "= assertSuperior.shouldEffective(tenantId, superiorId);",
      "prediction": "= assertSuperior.shouldEffective(tenantId, superiorId);",
      "raw_prediction": "= assertSuperior.shouldEffective(tenantId, superiorId);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2123,
      "groundtruth": "assertOrgLeader.shouldEffective(org.getTenantId(), newLeader);",
      "prediction": "assertOrgLeader.shouldNotEmpty(newLeader);",
      "raw_prediction": "    assertOrgLeader.shouldNotEmpty(newLeader);",
      "es": 0.5967741935483871,
      "em": false,
      "passed": false
    },
    {
      "index": 2124,
      "groundtruth": "assertOrgName.shouldNotEmpty(name);",
      "prediction": "assertOrgName.shouldNotEmpty(name);",
      "raw_prediction": "    assertOrgName.shouldNotEmpty(name);\n        assertOrgName.shouldEffective(tenantId, name);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2125,
      "groundtruth": "), org.getSuperiorId(), newName);",
      "prediction": "), newName);",
      "raw_prediction": "), newName);",
      "es": 0.36363636363636365,
      "em": false,
      "passed": false
    },
    {
      "index": 2126,
      "groundtruth": "shouldNotDuplicatedInSameSuperior(org.getTenantId(), org.getSuperiorId(), newName);",
      "prediction": "shouldNotExisted(org.getTenantId(), newName);",
      "raw_prediction": "shouldNotExisted(org.getTenantId(), newName);",
      "es": 0.5060240963855422,
      "em": false,
      "passed": false
    },
    {
      "index": 2127,
      "groundtruth": "assertOrgLeader.shouldEffective(tenantId, leaderId);",
      "prediction": "assertOrgLeader.shouldNotEmpty(leaderId);",
      "raw_prediction": "    assertOrgLeader.shouldNotEmpty(leaderId);\n        assertOrgLeader.shouldEffective(tenantId, leaderId);",
      "es": 0.6538461538461539,
      "em": false,
      "passed": false
    },
    {
      "index": 2128,
      "groundtruth": "assertOrgName.shouldNotDuplicatedInSameSuperior(tenantId, superiorId, name);",
      "prediction": "assertOrgName.shouldNotBeEmpty(name);",
      "raw_prediction": "assertOrgName.shouldNotBeEmpty(name);",
      "es": 0.4342105263157895,
      "em": false,
      "passed": false
    },
    {
      "index": 2129,
      "groundtruth": "assertOrgType.shouldNotEntp(orgTypeCode);",
      "prediction": "assertOrgType.shouldNotDuplicatedInSameSuperior(tenantId, superiorId, orgTypeCode)",
      "raw_prediction": "    assertOrgType.shouldNotDuplicatedInSameSuperior(tenantId, superiorId, orgTypeCode);",
      "es": 0.4512195121951219,
      "em": false,
      "passed": false
    },
    {
      "index": 2130,
      "groundtruth": "+ \"' \u7684\u7ec4\u7ec7\u7684\u7ec4\u7ec7\u7c7b\u578b\u4ee3\u7801 '\" + superiorOrg.getOrgTypeCode() + \"' \u65e0\u6548!\"));",
      "prediction": "+ \"' \u7684\u7ec4\u7ec7\u7c7b\u578b\u4ee3\u7801\u4e0d\u6b63\u786e\uff01\"));",
      "raw_prediction": "   + \"' \u7684\u7ec4\u7ec7\u7c7b\u578b\u4ee3\u7801\u4e0d\u6b63\u786e\uff01\"));\n    }\n\n    // \u4e0a\u7ea7\u7ec4\u7ec7\u4e0d\u80fd\u662f\u81ea\u5df1\n    public void superiorNotSelf(Long superior, Long superior) {\n        if (superior.equals(superior)) {\n            throw new",
      "es": 0.25806451612903225,
      "em": false,
      "passed": false
    },
    {
      "index": 2131,
      "groundtruth": "assertOrgType.shouldNotEmpty(orgTypeCode);",
      "prediction": "assertOrgType.shouldNotEmpty(orgTypeCode);",
      "raw_prediction": "assertOrgType.shouldNotEmpty(orgTypeCode);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2132,
      "groundtruth": "waitPoint.reset();",
      "prediction": "log.info(\"wait for running \" + this.",
      "raw_prediction": " log.info(\"wait for running \" + this.getServiceName() + \" interval \" + interval);",
      "es": 0.2222222222222222,
      "em": false,
      "passed": false
    },
    {
      "index": 2133,
      "groundtruth": "metrics.start();",
      "prediction": "metric.start();",
      "raw_prediction": "  metric.start();\n        Object input = service.input(input, getFlow().getServiceContext());",
      "es": 0.9375,
      "em": false,
      "passed": false
    },
    {
      "index": 2134,
      "groundtruth": "null, flow.getServiceContext());",
      "prediction": "flow.getEntry().getInput());",
      "raw_prediction": "flow.getEntry().getInput());",
      "es": 0.40625,
      "em": false,
      "passed": false
    },
    {
      "index": 2135,
      "groundtruth": "process(input, getFlow().getServiceContext());",
      "prediction": "process(input, executionId);",
      "raw_prediction": "process(input, executionId);\n        log.info(\"\u6267\u884c id\uff1a{} \u7ed3\u675f\", executionId);",
      "es": 0.4782608695652174,
      "em": false,
      "passed": false
    },
    {
      "index": 2136,
      "groundtruth": "if (StringUtils.hasText(groovyCode) && HadesCache.diff(instanceName, groovyCode)) {",
      "prediction": "if (!HaidCache.isEquals(config.getUpdateTime(), groovyCode))",
      "raw_prediction": " if (!HaidCache.isEquals(config.getUpdateTime(), groovyCode)) {",
      "es": 0.32530120481927716,
      "em": false,
      "passed": false
    },
    {
      "index": 2137,
      "groundtruth": "= GroovyUtils.parseClass(instanceName, groovyCode);",
      "prediction": "= GroovyUtils.loadClass(groovyCode, instanceName);",
      "raw_prediction": "= GroovyUtils.loadClass(groovyCode, instanceName);",
      "es": 0.47058823529411764,
      "em": false,
      "passed": false
    },
    {
      "index": 2138,
      "groundtruth": "Object bean = registerBeanService.registerBean(instanceName, clazz);",
      "prediction": "registerBeanService.registerBean(clazz);",
      "raw_prediction": " registerBeanService.registerBean(clazz);",
      "es": 0.5882352941176471,
      "em": false,
      "passed": false
    }
  ],
  "errors": [
    {
      "index": 1117,
      "error": "RetryError[<Future at 0x10a48a630 state=finished raised HTTPError>]",
      "error_type": "RetryError",
      "prompt": "<|fim_prefix|>/*\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtai..."
    },
    {
      "index": 1122,
      "error": "RetryError[<Future at 0x10a4a4800 state=finished raised HTTPError>]",
      "error_type": "RetryError",
      "prompt": "<|fim_prefix|>/*\n * Copyright 2021 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtai..."
    },
    {
      "index": 1647,
      "error": "RetryError[<Future at 0x10ac4d430 state=finished raised HTTPError>]",
      "error_type": "RetryError",
      "prompt": "<|fim_prefix|>package com.ap.spotify.server;\n\nimport com.ap.spotify.shared.Request;\nimport com.ap.spotify.shared.Response;\nimport com.ap.spotify.shared.crudFiles.*;\nimport com.ap.spotify.shared.models..."
    },
    {
      "index": 1648,
      "error": "RetryError[<Future at 0x10a4f8560 state=finished raised HTTPError>]",
      "error_type": "RetryError",
      "prompt": "<|fim_prefix|>package com.ap.spotify.server;\n\nimport com.ap.spotify.shared.Request;\nimport com.ap.spotify.shared.Response;\nimport com.ap.spotify.shared.crudFiles.*;\nimport com.ap.spotify.shared.models..."
    },
    {
      "index": 1649,
      "error": "RetryError[<Future at 0x10abb0860 state=finished raised HTTPError>]",
      "error_type": "RetryError",
      "prompt": "<|fim_prefix|>package com.ap.spotify.server;\n\nimport com.ap.spotify.shared.Request;\nimport com.ap.spotify.shared.Response;\nimport com.ap.spotify.shared.crudFiles.*;\nimport com.ap.spotify.shared.models..."
    },
    {
      "index": 1650,
      "error": "RetryError[<Future at 0x10abdb560 state=finished raised HTTPError>]",
      "error_type": "RetryError",
      "prompt": "<|fim_prefix|>package com.ap.spotify.server;\n\nimport com.ap.spotify.shared.Request;\nimport com.ap.spotify.shared.Response;\nimport com.ap.spotify.shared.crudFiles.*;\nimport com.ap.spotify.shared.models..."
    },
    {
      "index": 1651,
      "error": "RetryError[<Future at 0x10b77f920 state=finished raised HTTPError>]",
      "error_type": "RetryError",
      "prompt": "<|fim_prefix|>package com.ap.spotify.server;\n\nimport com.ap.spotify.shared.Request;\nimport com.ap.spotify.shared.Response;\nimport com.ap.spotify.shared.crudFiles.*;\nimport com.ap.spotify.shared.models..."
    },
    {
      "index": 1652,
      "error": "RetryError[<Future at 0x10a34eab0 state=finished raised HTTPError>]",
      "error_type": "RetryError",
      "prompt": "<|fim_prefix|>package com.ap.spotify.server;\n\nimport com.ap.spotify.shared.Request;\nimport com.ap.spotify.shared.Response;\nimport com.ap.spotify.shared.crudFiles.*;\nimport com.ap.spotify.shared.models..."
    }
  ]
}