{
  "metrics": {
    "pass@1": 0.6129032258064516,
    "edit_similarity": 0.7293091501196908,
    "exact_match": 0.6129032258064516,
    "total_samples": 2139,
    "passes": 1311
  },
  "results": [
    {
      "index": 0,
      "groundtruth": "int startAngle = ((Arc) object).getStartAngle();",
      "prediction": "int startAngle = ((Arc) object).getStartAngle();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1,
      "groundtruth": "((Line) object).getColor());",
      "prediction": "((Line) object).getColor());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2,
      "groundtruth": "(Arc) object).getStopAngle();",
      "prediction": "(Arc) object).getStopAngle();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "((Arc) object).getStopAngle());"
    },
    {
      "index": 3,
      "groundtruth": "server.blockUntilShutdown();",
      "prediction": "System.out.print",
      "es": 0.1785714285714286,
      "em": false,
      "passed": false,
      "original_prediction": "System.out.print"
    },
    {
      "index": 4,
      "groundtruth": "HttpClientUtil.sendGetRequest();",
      "prediction": "logger.info(\"Receive message, message={}\", messageView.getMessag)",
      "es": 0.1384615384615384,
      "em": false,
      "passed": false,
      "original_prediction": "logger.info(\"Receive message, message={}\", messageView.getMessag"
    },
    {
      "index": 5,
      "groundtruth": "GreetingClient.start();",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 6,
      "groundtruth": "RocketMqClients.CreatePushConsumer(messageView -> {",
      "prediction": "RocketMqClients.consumeMess",
      "es": 0.4901960784313726,
      "em": false,
      "passed": false,
      "original_prediction": "RocketMqClients.consumeMess"
    },
    {
      "index": 7,
      "groundtruth": "Producer producer = RocketMqClients.CreateProducer();",
      "prediction": "Producer producer = RocketMqClients.CreateProducer();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "Producer producer = RocketMqClients.createProducer(\"test-topic\");"
    },
    {
      "index": 8,
      "groundtruth": "systemMessage.setContent(systemprompt);",
      "prediction": "systemMessage.setCont",
      "es": 0.5384615384615384,
      "em": false,
      "passed": false,
      "original_prediction": "systemMessage.setCont"
    },
    {
      "index": 9,
      "groundtruth": "\"Contador de tokens: %d\",gptService.getNumTokens());",
      "prediction": "\"Current usage: %d tokens\", this.gptService.getUsage());",
      "es": 0.5178571428571428,
      "em": false,
      "passed": false,
      "original_prediction": "\"Current usage: %d tokens\", this.gptService.getUsage());"
    },
    {
      "index": 10,
      "groundtruth": "chatRequest.setMaxTokens(maxtokens);",
      "prediction": "chatRequest.setMaxTokens(maxtokens);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 11,
      "groundtruth": "chatRequest.setModel(model);",
      "prediction": "chatRequest.setModel(model);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "chatRequest.setM"
    },
    {
      "index": 12,
      "groundtruth": "systemMessage.setRole(\"system\");",
      "prediction": "systemMessage.setRole(\"system\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 13,
      "groundtruth": "userMessage.setContent(this.presentation);",
      "prediction": "userMessage.setContent(this.presentation);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "userMessage.setContent(text;"
    },
    {
      "index": 14,
      "groundtruth": "exampleMessage.setRole(role.toLowerCase());",
      "prediction": "exampleMessage.setRole(role.toLowerCase());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "exampleMessage.setRole(role);"
    },
    {
      "index": 15,
      "groundtruth": "AccUtils.printLogMsg(\"\u63d0\u53d6\u5230\u7684\u7b2c\u4e00\u4e2a\u6574\u6570\u662f\uff1a\" + i);",
      "prediction": "AccUtils.printLogMsg(\"\u63d0\u53d6\u5230\u7684\u7b2c\u4e00\u4e2a\u6574\u6570\u662f\uff1a\" + i);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "AccUtils.printLogMsg(\"\u5728\u5b57\u7b26\u4e32\u4e2d\u627e\u5230\u6574\u6570\uff1a\" + i);"
    },
    {
      "index": 16,
      "groundtruth": "AccUtils.printLogMsg(\"\u70b9\u51fb\u5de5\u4f5c\u53f0\");",
      "prediction": "AccUtils.printLogMsg(\"\u70b9\u51fb\u5de5\u4f5c\u53f0\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "AccUtils.printLogMsg(\"\u70b9\u51fb\u5de5\u4f5c\u53f0\u6253\u5f00\");"
    },
    {
      "index": 17,
      "groundtruth": "AccUtils.printLogMsg(\"\u70b9\u51fb\u8003\u52e4\u6253\u5f00\");",
      "prediction": "AccUtils.printLogMsg(\"\u70b9\u51fb\u8003\u52e4\u6253\u5f00\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "AccUtils.printLogMsg(\"\u70b9\u51fb\u8003\u52e4\u6253\u5361\");"
    },
    {
      "index": 18,
      "groundtruth": "AccUtils.printLogMsg(\"\u6253\u5f00\u9489\u9489\");",
      "prediction": "AccUtils.printLogMsg(\"\u6253\u5f00\u9489\u9489\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 19,
      "groundtruth": "AccUtils.printLogMsg(\"\u70b9\u51fb\u6253\u5361\");",
      "prediction": "AccUtils.printLogMsg(\"\u70b9\u51fb\u6253\u5361\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 20,
      "groundtruth": "AccUtils.printLogMsg(\"\u70b9\u51fb\u6682\u65f6\u4e0d\");",
      "prediction": "AccUtils.printLogMsg(\"\u70b9\u51fb\u6682\u65f6\u4e0d\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "AccUtils.printLogMsg(\"\u70b9\u51fb\u4e0a\u73ed\u6253\u5361\");"
    },
    {
      "index": 21,
      "groundtruth": "AccUtils.printLogMsg(\"\u6807\u9898 => \" + videoDesc);",
      "prediction": "if (videoDesc != null)",
      "es": 0.16279069767441856,
      "em": false,
      "passed": false,
      "original_prediction": "if (videoDesc != null)"
    },
    {
      "index": 22,
      "groundtruth": "AccUtils.printLogMsg(\"\u8fd4\u56de\u5230\u521d\u59cb\u72b6\u6001\");",
      "prediction": "AccUtils.printLogMsg(\"\u8fd4\u56de\u5230\u521d\u59cb\u72b6\u6001\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "AccUtils.printLogMsg(\"\u70b9\u51fb\u5de5\u4f5c\u53f0\");"
    },
    {
      "index": 23,
      "groundtruth": "AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u5de5\u4f5c\u53f0\"));",
      "prediction": "AccUtils.clickParentCanClick(AccUtils.findElementByText(\"\u5de5\u4f5c\u53f0\"));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 24,
      "groundtruth": "AccUtils.printLogMsg(\"\u70b9\u51fb\u597d\u7684\");",
      "prediction": "AccUtils.printLogMsg(\"\u70b9\u51fb\u597d\u7684\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "AccUtils.printLogMsg(\"\u70b9\u51fb\u4e0a\u73ed\u6253\u5361\");"
    },
    {
      "index": 25,
      "groundtruth": "dyTaskService.main();",
      "prediction": "dyTaskService.main();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 26,
      "groundtruth": "AccUtils.printLogMsg(\"\u5411\u4e0b\u6ed1\u52a8\");",
      "prediction": "AccUtils.printLogMsg(\"\u5411\u4e0b\u6ed1\u52a8\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "AccUtils.printLogMsg(\"swipe to next video\");"
    },
    {
      "index": 27,
      "groundtruth": "= AccUtils.findElementListByContainText(\"\u6253\u5361\");",
      "prediction": "= AccUtils.findElementListByContainText(\"\u6253\u5361\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= AccUtils.findAccessibilityNodeInfosByText(\"\u4e0a\u73ed\u6253\u5361\");"
    },
    {
      "index": 28,
      "groundtruth": "AccUtils.printLogMsg(\"\u6253\u5361\u5b8c\u6210\uff0c\u8fd4\u56de\u684c\u9762\");",
      "prediction": "AccUtils.back();",
      "es": 0.3529411764705882,
      "em": false,
      "passed": false,
      "original_prediction": "AccUtils.back();"
    },
    {
      "index": 29,
      "groundtruth": "TinkerManager.setUpgradeRetryEnable(true);",
      "prediction": "TinkerManager.setUpgradeRetryEnable(true);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 30,
      "groundtruth": "AccUtils.findElementByText(\"\u8003\u52e4\u6253\u5361\"));",
      "prediction": "AccUtils.findElementByText(\"\u8003\u52e4\u6253\u5361\"));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "AccUtils.findElementByText(\"\u8003\u52e4\"));"
    },
    {
      "index": 31,
      "groundtruth": "TinkerManager.installTinker(this);",
      "prediction": "TinkerManager.setTinkerFlags(ShareConstants.TINKER_ENABLE_ALL);",
      "es": 0.3492063492063492,
      "em": false,
      "passed": false,
      "original_prediction": "TinkerManager.setTinkerFlags(ShareConstants.TINKER_ENABLE_ALL);"
    },
    {
      "index": 32,
      "groundtruth": "= AccUtils.findElementByText(\"\u6211\u77e5\u9053\u4e86\");",
      "prediction": "= AccUtils.findElementByText(\"\u6211\u77e5\u9053\u4e86\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= AccUtils.findElementByText(\"\u4ee5\u540e\u518d\u8bf4\");"
    },
    {
      "index": 33,
      "groundtruth": "element = AccUtils.findElementByText(\"\u4ee5\u540e\u518d\u8bf4\");",
      "prediction": "element = AccUtils.findElementByText(\"\u4ee5\u540e\u518d\u8bf4\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "element = AccUtils.findElementByText(\"\u8df3\u8fc7\");"
    },
    {
      "index": 34,
      "groundtruth": "AccUtils.printLogMsg(\"open dy App\");",
      "prediction": "AccUtils.timeSleep(waitTwoSecond);",
      "es": 0.36111111111111116,
      "em": false,
      "passed": false,
      "original_prediction": "AccUtils.timeSleep(waitTwoSecond);"
    },
    {
      "index": 35,
      "groundtruth": "AccUtils.openApp(\"\u6296\u97f3\");",
      "prediction": "AccUtils.timeSleep(waitSixSecond);",
      "es": 0.4117647058823529,
      "em": false,
      "passed": false,
      "original_prediction": "AccUtils.timeSleep(waitSixSecond);"
    },
    {
      "index": 36,
      "groundtruth": "TinkerManager.setTinkerApplicationLike(this);",
      "prediction": "//Optional, you should allow framework to collect tinker info",
      "es": 0.14754098360655743,
      "em": false,
      "passed": false,
      "original_prediction": "//Optional, you should allow framework to collect tinker info"
    },
    {
      "index": 37,
      "groundtruth": "Utils.isBackground()) {",
      "prediction": "!isTinkerInst",
      "es": 0.26086956521739135,
      "em": false,
      "passed": false,
      "original_prediction": "!isTinkerInst"
    },
    {
      "index": 38,
      "groundtruth": "AccUtils.printLogMsg(\"\u5728\u5b57\u7b26\u4e32\u4e2d\u6ca1\u6709\u627e\u5230\u6574\u6570\uff01\");",
      "prediction": "AccUtils.printLogMsg(\"\u5728\u5b57\u7b26\u4e32\u4e2d\u6ca1\u6709\u627e\u5230\u6574\u6570\uff01\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "AccUtils.printLogMsg(\"\u6ca1\u6709\u63d0\u53d6\u5230\u6574\u6570\");"
    },
    {
      "index": 39,
      "groundtruth": "WindowPermissionCheck.checkPermission(this);",
      "prediction": "WindowPermissionCheck.checkPermission(this);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 40,
      "groundtruth": "AccUtils.timeSleep(3000);",
      "prediction": "AccUtils.timeSleep(3000);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 41,
      "groundtruth": "AccUtils.timeSleep(6000);",
      "prediction": "AccUtils.timeSleep(6000);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "AccUtils.timeSleep(3000);"
    },
    {
      "index": 42,
      "groundtruth": "AccUtils.timeSleep(2000);",
      "prediction": "AccUtils.printLogMsg(\"\u8fd4\u56de\u5230\u521d\u59cb\u72b6\u6001\");",
      "es": 0.40625,
      "em": false,
      "passed": false,
      "original_prediction": "AccUtils.printLogMsg(\"\u8fd4\u56de\u5230\u521d\u59cb\u72b6\u6001\");"
    },
    {
      "index": 43,
      "groundtruth": "AccUtils.timeSleep(7000);",
      "prediction": "AccUtils.timeSleep(7000);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 44,
      "groundtruth": "returnCode = Utils.checkForPatchRecover(NEW_PATCH_RESTRICTION_SPACE_SIZE_MIN, maxMemory);",
      "prediction": "if (patchFile.length() > NEW_patch_RESTRICTIONspaceSize_min)",
      "es": 0.2921348314606742,
      "em": false,
      "passed": false,
      "original_prediction": "if (patchFile.length() > NEW_patch_RESTRICTIONspaceSize_min)"
    },
    {
      "index": 45,
      "groundtruth": "ntokens = ntokens + response.getUsage().getTotalTokens();",
      "prediction": "ntokens = ntokens + response.getUsage().getTotalTokens();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 46,
      "groundtruth": ".setContent(response.getChoices().get(0).getMessage().getContent());",
      "prediction": ".setContent(response.getChoices().get(0).getMessage().getContent());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 47,
      "groundtruth": "out.println(filme.getNome()+\" - \"+filme.getDuracao());",
      "prediction": "out.println(filme.getNome()+\" - \"+filme.getDuracao());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "out.println(filme.getNome() + \" - \" + filme.getDuracao());"
    },
    {
      "index": 48,
      "groundtruth": "itempedido.getPreco();",
      "prediction": "itempedido.getPreco()*itempedido.getQuantida",
      "es": 0.4772727272727273,
      "em": false,
      "passed": false,
      "original_prediction": "itempedido.getPreco()*itempedido.getQuantida"
    },
    {
      "index": 49,
      "groundtruth": "= meuDVD.removerFilme();",
      "prediction": "= meuDVD.removerFilme();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 50,
      "groundtruth": "meuDVD.aumentarVolume();",
      "prediction": "meuDVD.aumentarVolume();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "meuDVD.diminuirVolume();"
    },
    {
      "index": 51,
      "groundtruth": "(filme.getNome()+\" - \"+filme.getDuracao());",
      "prediction": "(filme.getNome()+\" - \"+filme.getDuracao());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(\"Filme: \"+filme.getNome()+\" Dura\u00e7\u00e3o: \"+filme.getDuracao());"
    },
    {
      "index": 52,
      "groundtruth": "meuDVD.diminuirVolume();",
      "prediction": "meuDVD.diminuirVolume();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 53,
      "groundtruth": "meuDVD.play();",
      "prediction": "meuDVD.play();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 54,
      "groundtruth": "this.ipList.put(Sneaky.stringifyAddress(address), System.currentTimeMillis());",
      "prediction": "String ip = Sneaky.stringifyAddress(address);",
      "es": 0.46153846153846156,
      "em": false,
      "passed": false,
      "original_prediction": "String ip = Sneaky.stringifyAddress(address);"
    },
    {
      "index": 55,
      "groundtruth": "= translator.detectLanguage(questionInput);",
      "prediction": "= question.getSourceLang();",
      "es": 0.2790697674418605,
      "em": false,
      "passed": false,
      "original_prediction": "= question.getSourceLang();"
    },
    {
      "index": 56,
      "groundtruth": "= translator.translate(translator.middleLanguage(), sourceLang, answerOutput);",
      "prediction": "= translator.translate(translator.middleLanguage(), sourceLang, answerOutput);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 57,
      "groundtruth": "= translator.translate(sourceLang, translator.middleLanguage(), questionInput);",
      "prediction": "= translator.translate(sourceLang, translator.middleLanguage(), questionInput);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= translator.translate(translator.middleLanguage(), sourceLang, questionInput);"
    },
    {
      "index": 58,
      "groundtruth": "fill(WebActions.decrypt(password));",
      "prediction": "fill(WebActions.decrypt(password));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "fill(WebActions.getProperty(password));"
    },
    {
      "index": 59,
      "groundtruth": "= PluginImpl.getInstance().getAccessKeyId();",
      "prediction": "= PluginImpl.getInstance().getAccessKeyId();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 60,
      "groundtruth": "instance.getOosClient().getAcsResponse(request);",
      "prediction": "instance.getOosClient().getAcsResponse(request);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 61,
      "groundtruth": "uploadPartResult = instance.getOssClient().uploadPart(uploadPartRequest);",
      "prediction": "uploadPartResult = instance.getOssClient().uploadPart(uploadPartRequest);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 62,
      "groundtruth": "instance.build(this.region);",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 63,
      "groundtruth": "(instance.getOssClient() != null) {",
      "prediction": "instance != null {}",
      "es": 0.48571428571428577,
      "em": false,
      "passed": false,
      "original_prediction": "instance != null {"
    },
    {
      "index": 64,
      "groundtruth": "upresult = instance.getOssClient().initiateMultipartUpload(request);",
      "prediction": "upresult = instance.getOssClient().initiateMultipartUpload(request);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 65,
      "groundtruth": "instance.getOosClient().getAcsResponse(executionsRequest).getExecutions().get(0).getStatus();",
      "prediction": "\"",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": "\""
    },
    {
      "index": 66,
      "groundtruth": "HazardDiamondAPI.open(this);",
      "prediction": "return ActionResult.PASS;",
      "es": 0.1428571428571429,
      "em": false,
      "passed": false,
      "original_prediction": "return ActionResult.PASS;"
    },
    {
      "index": 67,
      "groundtruth": "setScreen(new HazardScreen(holder.getHazardData()));",
      "prediction": "setScreen(new HazardScreen(holder.getHazardData()));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "setScreen(new HazardScreen(holder.getHazardData());"
    },
    {
      "index": 68,
      "groundtruth": ".register(Registry.ITEM, HDiamond.id(\"panel_item\"), INSTANCE);",
      "prediction": ".register(Registry.ITEM, HDiamond.id(\"panel_item\"), INSTANCE);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".register(Registry.ITEM, HDiamond.id(\"panel\"), INSTANCE);"
    },
    {
      "index": 69,
      "groundtruth": "= holder.getHazardData().getTooltip().stream()\n                .map(Text.Serializer::toJson)\n                .toList();",
      "prediction": "= holder.getHazardData().toWaila();",
      "es": 0.2773109243697479,
      "em": false,
      "passed": false,
      "original_prediction": "= holder.getHazardData().toWaila();"
    },
    {
      "index": 70,
      "groundtruth": "AliyunPushLog.e(REC_TAG, \"key \" + entry.getKey() + \" value \" + entry.getValue());",
      "prediction": "AliyunPushLog.e(REC_TAG, \"key \" + entry.getKey() + \" value \" + entry.getValue());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "AliyunPushLog.e(REC_TAG, \"key: \" + entry.getKey() + \" value: \" + entry.getValue());"
    },
    {
      "index": 71,
      "groundtruth": "ResultUtil.error();",
      "prediction": "ResultUtil.error();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "ResultUtil."
    },
    {
      "index": 72,
      "groundtruth": "target = (Annotation) AopUtil.getTarget(annotation);",
      "prediction": "target = annotation.annotationType();",
      "es": 0.5,
      "em": false,
      "passed": false,
      "original_prediction": "target = annotation.annotationType();"
    },
    {
      "index": 73,
      "groundtruth": ".info(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u5931\u8d25\uff01\u624b\u673a\u53f7\uff1a\u3010{",
      "prediction": ".info(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u5931\u8d25\uff01\u624b\u673a\u53f7\uff1a\u3010{}\u3011 -- \u9a8c\u8bc1\u7801\uff1a\u3010{}\u3011 -- {}\",)",
      "es": 0.5,
      "em": false,
      "passed": false,
      "original_prediction": ".info(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u5931\u8d25\uff01\u624b\u673a\u53f7\uff1a\u3010{}\u3011 -- \u9a8c\u8bc1\u7801\uff1a\u3010{}\u3011 -- {}\","
    },
    {
      "index": 74,
      "groundtruth": "= UserRoleEnum.getEnumByValue(mustRole);",
      "prediction": "= UserRoleEnum.getEnumByValue(mustRole);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 75,
      "groundtruth": "(errorCode.getMsg());",
      "prediction": "(message);",
      "es": 0.23809523809523814,
      "em": false,
      "passed": false,
      "original_prediction": "(message);"
    },
    {
      "index": 76,
      "groundtruth": "(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u6210\u529f\uff01\u624b\u673a\u53f7\uff1a\u3010{",
      "prediction": "(\"\u963f\u91cc\u4e91\u77ed\u4fe1\u53d1\u9001\u6210\u529f\uff01\u624b\u673a\u53f7\uff1a\u3010{",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 77,
      "groundtruth": "username = jwtTokenProvider.getUsername(token);",
      "prediction": "username = jwtTokenProvider.getUsername(token);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "username = jwtTokenProvider.getUsernameFromJWT(token);"
    },
    {
      "index": 78,
      "groundtruth": "(cityService.findCitiesByName(pageNo, pageSize, sortBy, sortDir,name));",
      "prediction": "(cityService.findCitiesByName(pageNo, pageSize, sortBy, sortDir,name));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(cityService.getCitiesByName(name, pageNo, pageSize, sortBy, sortDir));"
    },
    {
      "index": 79,
      "groundtruth": "return JSON_CONVERTOR.parseObject(input, clazz);",
      "prediction": "return JSON_CONVERTOR.parseObject(input, clazz);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 80,
      "groundtruth": ".append(commandNamespace.name());",
      "prediction": ".append(commandNamespace.name());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".append(commandNamespace.getNamespace());"
    },
    {
      "index": 81,
      "groundtruth": ".namespaceManager.getCommandNamespaces().forEach(namespace -> {",
      "prediction": ".setClassLoader(this.getClass().getClassLoader());",
      "es": 0.2222222222222222,
      "em": false,
      "passed": false,
      "original_prediction": ".setClassLoader(this.getClass().getClassLoader());"
    },
    {
      "index": 82,
      "groundtruth": ".print(namespaceManager.dump());",
      "prediction": ".println(\"help command list:\");",
      "es": 0.375,
      "em": false,
      "passed": false,
      "original_prediction": ".println(\"help command list:\");"
    },
    {
      "index": 83,
      "groundtruth": "shell.start();",
      "prediction": "shell.start();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 84,
      "groundtruth": "commandNamespace.getCommands().forEach(\n                            (cmdName, cmd) -> {",
      "prediction": "commandNamespace.getCommands().forEach(\n                            (cmdName, cmd) -> {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "commandNamespace.getCommands().forEach(\n                cmd -> {\n                String cmdName = cmd.getName();"
    },
    {
      "index": 85,
      "groundtruth": "String result = shell.execute(command);",
      "prediction": "String result = shell.execute(command);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 86,
      "groundtruth": "!grpcClient.checkServerStatus()) {",
      "prediction": "!grpcClient.connect",
      "es": 0.4411764705882353,
      "em": false,
      "passed": false,
      "original_prediction": "!grpcClient.connect"
    },
    {
      "index": 87,
      "groundtruth": "getGrpcClient().shutdown();",
      "prediction": "getGrpcClient().shutdown();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "getGrpcClient().close();"
    },
    {
      "index": 88,
      "groundtruth": "\"                          PLUGIN SERVER CLI \" + Launcher.getVersion()\n        );",
      "prediction": "\"  \\n\" +\n                \"  antchain-cli version: \" + ShellProvider.VERSION + \"\\n\" +\n                \"  antchain-cli home",
      "es": 0.3305785123966942,
      "em": false,
      "passed": false,
      "original_prediction": "\"  \\n\" +\n                \"  antchain-cli version: \" + ShellProvider.VERSION + \"\\n\" +\n                \"  antchain-cli home"
    },
    {
      "index": 89,
      "groundtruth": ").execute();",
      "prediction": ").run();",
      "es": 0.5,
      "em": false,
      "passed": false,
      "original_prediction": ").run();"
    },
    {
      "index": 90,
      "groundtruth": "().println(JsonUtil.format(result));",
      "prediction": "().println(result);",
      "es": 0.5277777777777778,
      "em": false,
      "passed": false,
      "original_prediction": "().println(result);"
    },
    {
      "index": 91,
      "groundtruth": "(!buffer.isEmpty() && !namespace.name().startsWith(buffer)) {",
      "prediction": "(!namespace.name().equals(buffer))",
      "es": 0.47540983606557374,
      "em": false,
      "passed": false,
      "original_prediction": "(!namespace.name().equals(buffer))"
    },
    {
      "index": 92,
      "groundtruth": "new StringBuilder(namespace.name());",
      "prediction": "new StringBuilder(namespace.name());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 93,
      "groundtruth": "namespace.getCommands().forEach((cmdName, cmd) -> {",
      "prediction": "if (!namespace.getCommands().isEmpty())",
      "es": 0.43137254901960786,
      "em": false,
      "passed": false,
      "original_prediction": "if (!namespace.getCommands().isEmpty())"
    },
    {
      "index": 94,
      "groundtruth": "!namespace.name().equals(buf[0])) {",
      "prediction": "!namespace.name().e",
      "es": 0.5428571428571429,
      "em": false,
      "passed": false,
      "original_prediction": "!namespace.name().e"
    },
    {
      "index": 95,
      "groundtruth": "Candidate(namespace.name() + \".\", namespace.name(), null, null, null, null, true));",
      "prediction": "Candidate(namespace.name() + \".\", namespace.name(), null, null, null, null, true));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "Candidate(namespace.name() + \".\" + cmdName, sb.toString(), null, null, null,"
    },
    {
      "index": 96,
      "groundtruth": "cmd.addArgs(argName, param.getType().getSimpleName(), constraints);",
      "prediction": "cmd.addArg(argName, constraints);",
      "es": 0.4925373134328358,
      "em": false,
      "passed": false,
      "original_prediction": "cmd.addArg(argName, constraints);"
    },
    {
      "index": 97,
      "groundtruth": "(namespaceManager.getCommandNamespaces());",
      "prediction": "(namespaceManager.getCommandNamespaces());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(namespaceManager.getNamespaces());"
    },
    {
      "index": 98,
      "groundtruth": "mThermalUtils.setDefaultThermalProfile();",
      "prediction": "if (intent.getAction().equals(Intent.ACTION_SCREEN_OFF))",
      "es": 0.1428571428571429,
      "em": false,
      "passed": false,
      "original_prediction": "if (intent.getAction().equals(Intent.ACTION_SCREEN_OFF))"
    },
    {
      "index": 99,
      "groundtruth": "mThermalUtils.setThermalProfile(foregroundApp);",
      "prediction": "mThermalUtils.setThermalProfile(foregroundApp);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 100,
      "groundtruth": "mDiracSound.setMusic(enable ? 1 : 0);",
      "prediction": "mDiracSound.setHifiM",
      "es": 0.43243243243243246,
      "em": false,
      "passed": false,
      "original_prediction": "mDiracSound.setHifiM"
    },
    {
      "index": 101,
      "groundtruth": "FileUtils.writeLine(THERMAL_SCONFIG, THERMAL_STATE_DEFAULT);",
      "prediction": "FileUtils.writeLine(THERMAL_SCONFIG, THERMAL_STATE_DEFAULT);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "FileUtils.writeString(THERMAL_SCONFIG, THERMAL_STATE_DEFAULT);"
    },
    {
      "index": 102,
      "groundtruth": "null && mDiracSound.getMusic() == 1;",
      "prediction": "null && mDiracSound.getMusic() == 1;",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "null && mDiracSound.isEnabled();"
    },
    {
      "index": 103,
      "groundtruth": "mDiracSound.setLevel(band, Float.valueOf(level[band]));",
      "prediction": "mDiracSound.setLevel(band, Float.valueOf(level[band]));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "mDiracSound.setBandLevel(band, Integer.parseInt(level[band]));"
    },
    {
      "index": 104,
      "groundtruth": "? mDiracUtils.isDiracEnabled() : false;",
      "prediction": "? mDiracUtils.isDiracEnabled() : false;",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "? mDiracUtils.isEnabled() : false;"
    },
    {
      "index": 105,
      "groundtruth": "mDiracSound.setHifiMode(paramInt);",
      "prediction": "}",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": "}"
    },
    {
      "index": 106,
      "groundtruth": "gptClient.updateSettings(newApiKey, newModelId, newMaxPromptSize, newPrompt);",
      "prediction": "gptClient = new GPTClient(apiKey, model, prompt, logging);",
      "es": 0.4285714285714286,
      "em": false,
      "passed": false,
      "original_prediction": "gptClient = new GPTClient(apiKey, model, prompt, logging);"
    },
    {
      "index": 107,
      "groundtruth": "mDiracUtils.setHifiMode((Boolean) newValue ? 1 : 0);",
      "prediction": "mDiracUtils.setHifiMode((Boolean) newValue ? 1 : 0);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "mDiracUtils.setHifiMode((Boolean) newValue);"
    },
    {
      "index": 108,
      "groundtruth": "mDiracUtils.setHeadsetType(Integer.parseInt(newValue.toString()));",
      "prediction": "mDiracUtils.setHeadsetType(Integer.parseInt(newValue.toString()));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "mDiracUtils.setHeadsetType((String) newValue);"
    },
    {
      "index": 109,
      "groundtruth": ".helpMenu.setHelpColors(config.getMessages().getHelpCmd().getHelpColors());",
      "prediction": ".helpMenu.colorProvider()",
      "es": 0.28,
      "em": false,
      "passed": false,
      "original_prediction": ".helpMenu.colorProvider("
    },
    {
      "index": 110,
      "groundtruth": "Menu menu = MyMenu.createMenu(this);",
      "prediction": "montoyaApi.extension().addPropertyChangeListener(this);",
      "es": 0.2909090909090909,
      "em": false,
      "passed": false,
      "original_prediction": "montoyaApi.extension().addPropertyChangeListener(this);"
    },
    {
      "index": 111,
      "groundtruth": "(sender, key, args) -> config.getMessages().getHelpCmd().getMessage(key));",
      "prediction": "(sender, key, args) -> config.getMessages().getHelpCmd().getMessage(key));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "sender -> sender.sendMessage(config.getMessages().getHelpCmd().getHelpMessage()),"
    },
    {
      "index": 112,
      "groundtruth": "description = HtmlResourceLoader.loadHtmlContent(\"aboutDescription.html\");",
      "prediction": "description = HtmlResourceLoader.loadHtmlContent(\"aboutDescription.html\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "description = HtmlResourceLoader.loadHtmlResource(\"about.html\");"
    },
    {
      "index": 113,
      "groundtruth": "mDiracUtils.setScenario(Integer.parseInt(newValue.toString()));",
      "prediction": "mDiracUtils.setScenario(Integer.parseInt(newValue.toString()));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "mDiracUtils.setScenario((String) newValue);"
    },
    {
      "index": 114,
      "groundtruth": "mDiracUtils.setLevel((String) newValue);",
      "prediction": "mDiracUtils.setPreset(Integer.parseInt(newValue.toString()));",
      "es": 0.4918032786885246,
      "em": false,
      "passed": false,
      "original_prediction": "mDiracUtils.setPreset(Integer.parseInt(newValue.toString()));"
    },
    {
      "index": 115,
      "groundtruth": "myBurpExtension.updateSettings(newApiKey, newModelId, newMaxPromptSize, newPromptText);",
      "prediction": "myBurpExtension.setApiKey(newApiKey);",
      "es": 0.367816091954023,
      "em": false,
      "passed": false,
      "original_prediction": "myBurpExtension.setApiKey(newApiKey);"
    },
    {
      "index": 116,
      "groundtruth": "settingsView.setOnApplyButtonClickListener(() -> {",
      "prediction": "myBurpExtension.getMontoyaApi().userInterface().applyThemeToComponent(this)",
      "es": 0.18666666666666665,
      "em": false,
      "passed": false,
      "original_prediction": "myBurpExtension.getMontoyaApi().userInterface().applyThemeToComponent(this)"
    },
    {
      "index": 117,
      "groundtruth": "gptRequest.setPrompt(prompt);",
      "prediction": "Request request = new Request.Builder()",
      "es": 0.23076923076923073,
      "em": false,
      "passed": false,
      "original_prediction": "Request request = new Request.Builder()"
    },
    {
      "index": 118,
      "groundtruth": "inst.setOption(\"Skill Level\", String.valueOf(level));",
      "prediction": "inst.setLevel(level);",
      "es": 0.39622641509433965,
      "em": false,
      "passed": false,
      "original_prediction": "inst.setLevel(level);"
    },
    {
      "index": 119,
      "groundtruth": "(reader.getRest());",
      "prediction": "(reader.getRest());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(reader.peek());"
    },
    {
      "index": 120,
      "groundtruth": "reader.hint(\"An Integer\");",
      "prediction": "return null;",
      "es": 0.2692307692307693,
      "em": false,
      "passed": false,
      "original_prediction": "return null;"
    },
    {
      "index": 121,
      "groundtruth": "if (!reader.canRead()) {",
      "prediction": "if (reader.canRead() && reader.peek() == ' ')",
      "es": 0.4666666666666667,
      "em": false,
      "passed": false,
      "original_prediction": "if (reader.canRead() && reader.peek() == ' ')"
    },
    {
      "index": 122,
      "groundtruth": "(cfg.getApiKey() != null) {",
      "prediction": "(cfg.getApiKey() != null) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(cfg.getToken() != null)"
    },
    {
      "index": 123,
      "groundtruth": "cfg.getTenantId() != null) {",
      "prediction": "cfg.getTenantId() != null) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "cfg.getTenantId()"
    },
    {
      "index": 124,
      "groundtruth": "cfg.setCaCertPath(caCertPath);",
      "prediction": "cfg.setCaCertPath(caCertPath);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 125,
      "groundtruth": "), cfg.getPort())\n                .intercept(MetadataUtils.newAttachHeadersInterceptor(metadata));",
      "prediction": "), cfg.getPort())\n        .intercept(MetadataUtils.newAttachHeadersInterceptor(metadata));",
      "es": 0.9183673469387755,
      "em": true,
      "passed": true
    },
    {
      "index": 126,
      "groundtruth": "(cfg.getHost(), cfg.getPort())\n                .intercept(MetadataUtils.newAttachHeadersInterceptor(metadata));",
      "prediction": "(cfg.getHost(), cfg.getPort())\n        .intercept(MetadataUtils.newAttachHeadersInterceptor(metadata));",
      "es": 0.9279279279279279,
      "em": true,
      "passed": true
    },
    {
      "index": 127,
      "groundtruth": "reader.peek(1);",
      "prediction": "}",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": "}"
    },
    {
      "index": 128,
      "groundtruth": "return new AnalysisTaskWrapper(inst.calculate(), b);",
      "prediction": "return new AnalysisTaskWrapper(inst.calculate(), b);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 129,
      "groundtruth": "reader.peek(p - reader.getPos()));",
      "prediction": "reader.get(p));",
      "es": 0.4117647058823529,
      "em": false,
      "passed": false,
      "original_prediction": "reader.get(p));"
    },
    {
      "index": 130,
      "groundtruth": "= reader.find(\" \")) == -1) {",
      "prediction": "= reader.peek()) == ' ' || p == '\\n') {}",
      "es": 0.44999999999999996,
      "em": false,
      "passed": false,
      "original_prediction": "= reader.peek()) == ' ' || p == '\\n') {"
    },
    {
      "index": 131,
      "groundtruth": "mDiracUtils.setEnabled(isChecked);",
      "prediction": "mDiracUtils.setEnabled(isChecked);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "mDiracUtils.setDiracEnabled(isChecked);"
    },
    {
      "index": 132,
      "groundtruth": "ShadeParser.parseShadeOutput(buildResult.toPath()),\n                        DependencyParser.parseDependencyCopyOutput(buildResult.toPath()));",
      "prediction": "modulesWithBundledDependencies,\nimport modulessWithCopiedDependencies);",
      "es": 0.18309859154929575,
      "em": false,
      "passed": false,
      "original_prediction": "modulesWithBundledDependencies,\nimport modulessWithCopiedDependencies);"
    },
    {
      "index": 133,
      "groundtruth": "Node.greedyString())\n                                )\n                );",
      "prediction": "Node.greedyString())\n                                )\n                );",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "Node.string().complete(\n                                        (s) -> {"
    },
    {
      "index": 134,
      "groundtruth": "DependencyParser.parseDependencyCopyOutput(buildResult.toPath()));",
      "prediction": "DependencyParser.parseDependencyCopyOutput(buildResult.toPath()));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "import DeployParser.parseDeployOutput(buildResult.toPath()));"
    },
    {
      "index": 135,
      "groundtruth": "return ParserUtils.parsePluginOutput(\n                lines,\n                DEPENDENCY_COPY_NEXT_MODULE_PATTERN,\n                DependencyParser::parseCopyDependencyBlock);",
      "prediction": "return ParserUtils.parsePluginOutput(\n                lines,\n                DEPENDENCY_COPY_NEXT_MODULE_PATTERN,\n                DependencyParser::parseCopyDependencyBlock);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 136,
      "groundtruth": "return dependency.getGroupId().contains(\"org.scala-lang\")\n                || scalaSuffixPattern.matcher(dependency.getArtifactId()).find();",
      "prediction": "final String artifactId = dependency.getArtifactId();",
      "es": 0.27338129496402874,
      "em": false,
      "passed": false,
      "original_prediction": "final String artifactId = dependency.getArtifactId();"
    },
    {
      "index": 137,
      "groundtruth": "+ dependency.getVersion()\n                + \":\"\n                + dependency.getClassifier().orElse(\"(no-classifier)\");",
      "prediction": "+ dependency.getVersion();",
      "es": 0.2184873949579832,
      "em": false,
      "passed": false,
      "original_prediction": "+ dependency.getVersion();"
    },
    {
      "index": 138,
      "groundtruth": "= !cfg.getCaCertPath().isEmpty();",
      "prediction": "= !cfg.getCaCertPath().isEmpty();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= cfg.getCaCertPath() != null;"
    },
    {
      "index": 139,
      "groundtruth": "with(Node.literal(\"string\").mustConsumeChild()\n                                        .with(Node.greedyString())\n                                )\n                );",
      "prediction": "with(Node.literal(\"string\").mustConsumeChild()\n                                        .with(Node.greedyString())\n                                )\n                );",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "with(Node.literal(\"string\").mustConsumeChild()\n                                        .with(Node.string().complete(s -> {\n                                        StringReader reader = new StringReader(s);"
    },
    {
      "index": 140,
      "groundtruth": "boolean isTestDependency = dependency.getScope().get().equals(\"test\");",
      "prediction": "boolean isTestDependency = dependency.getScope().get().equals(\"test\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "boolean isTestDependency = dependency.getScope().equals(\"test\");"
    },
    {
      "index": 141,
      "groundtruth": "= NoticeFileChecker.run(new File(args[0]), Paths.get(args[1]));",
      "prediction": "= 0;",
      "es": 0.06349206349206349,
      "em": false,
      "passed": false,
      "original_prediction": "= 0;"
    },
    {
      "index": 142,
      "groundtruth": "severeIssueCount += JarFileChecker.checkPath(Paths.get(args[2]));",
      "prediction": "if (severeIssueCount > 0) {}",
      "es": 0.2153846153846154,
      "em": false,
      "passed": false,
      "original_prediction": "if (severeIssueCount > 0) {"
    },
    {
      "index": 143,
      "groundtruth": "wrapped.start(cmd),\n                SearchResultsWrapper::new,\n                b\n        );",
      "prediction": "wrapped.start(cmd),",
      "es": 0.20879120879120883,
      "em": false,
      "passed": false,
      "original_prediction": "wrapped.start(cmd),"
    },
    {
      "index": 144,
      "groundtruth": "DependencyParser.parseDependencyTreeOutput(path);",
      "prediction": "DependencyParser.parseMavenOutput(path, moduleNamePattern, blockPattern);",
      "es": 0.4246575342465754,
      "em": false,
      "passed": false,
      "original_prediction": "DependencyParser.parseMavenOutput(path, moduleNamePattern, blockPattern);"
    },
    {
      "index": 145,
      "groundtruth": "(!noticeContents.getNoticeModuleName().equals(moduleName)) {",
      "prediction": "!noticeContents.getNoticeModuleN",
      "es": 0.5333333333333333,
      "em": false,
      "passed": false,
      "original_prediction": "!noticeContents.getNoticeModuleN"
    },
    {
      "index": 146,
      "groundtruth": "+ dependency.getClassifier().orElse(\"(no-classifier)\");",
      "prediction": "+ dependency.getScope()",
      "es": 0.36363636363636365,
      "em": false,
      "passed": false,
      "original_prediction": "+ dependency.getScope()"
    },
    {
      "index": 147,
      "groundtruth": "final Set<String> deployedModules = DeployParser.parseDeployOutput(buildResult);",
      "prediction": "// parse deployed modules from deploy output",
      "es": 0.3375,
      "em": false,
      "passed": false,
      "original_prediction": "// parse deployed modules from deploy output"
    },
    {
      "index": 148,
      "groundtruth": "= isExcluded(dependency.getArtifactId());",
      "prediction": "= EXCLUDED_MODULES.stream().anyMatch(moduleName::contains);",
      "es": 0.1694915254237288,
      "em": false,
      "passed": false,
      "original_prediction": "= EXCLUDED_MODULES.stream().anyMatch(moduleName::contains);"
    },
    {
      "index": 149,
      "groundtruth": "wrapped.stop();",
      "prediction": "wrapped.stop();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 150,
      "groundtruth": "declaredDependency : noticeContents.getDeclaredDependencies()) {",
      "prediction": "declaredDependency : noticeContent",
      "es": 0.53125,
      "em": false,
      "passed": false,
      "original_prediction": "declaredDependency : noticeContent"
    },
    {
      "index": 151,
      "groundtruth": "of(Dependency.create(groupId, artifactId, version, classifier));",
      "prediction": "of(Dependency.create(groupId, artifactId, version, classifier));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "of(new Dependency(groupId, artifactId, version, classifier));"
    },
    {
      "index": 152,
      "groundtruth": "(dependency.getArtifactId()).find();",
      "prediction": "(moduleName).find();",
      "es": 0.36111111111111116,
      "em": false,
      "passed": false,
      "original_prediction": "(moduleName).find();"
    },
    {
      "index": 153,
      "groundtruth": "NoticeParser.parseNoticeFile(noticeFile);",
      "prediction": "new NoticeContents()",
      "es": 0.2682926829268293,
      "em": false,
      "passed": false,
      "original_prediction": "new NoticeContents("
    },
    {
      "index": 154,
      "groundtruth": ".get(module).flatten().collect(Collectors.toList());",
      "prediction": ".get(module).getDependencies();",
      "es": 0.40384615384615385,
      "em": false,
      "passed": false,
      "original_prediction": ".get(module).getDependencies();"
    },
    {
      "index": 155,
      "groundtruth": "return ParserUtils.parsePluginOutput(\n                lines.filter(line -> !line.contains(\" Excluding \")),\n                SHADE_NEXT_MODULE_PATTERN,\n                ShadeParser::parseBlock);",
      "prediction": "final Map<String, Set<Dependency>> result = ParserUtils.newModuleMap();",
      "es": 0.13089005235602091,
      "em": false,
      "passed": false,
      "original_prediction": "final Map<String, Set<Dependency>> result = ParserUtils.newModuleMap();"
    },
    {
      "index": 156,
      "groundtruth": "(policyCtx.getName(), policyCtx.getLabel());",
      "prediction": "(policyCtx.getName(), policyCtx.getLabel());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 157,
      "groundtruth": "identityContext.getIdentityType());",
      "prediction": "identityContext.getIdentityType());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "identityContext.getType());"
    },
    {
      "index": 158,
      "groundtruth": "PolicyInstance policy = buildPolicy(policyContext.getName(), policyContext.getLabel());",
      "prediction": "public List<Decision> is(IdentityCtx identityCtx, PolicyCtx policyCtx,Map<String,Value>values)",
      "es": 0.24468085106382975,
      "em": false,
      "passed": false,
      "original_prediction": "public List<Decision> is(IdentityCtx identityCtx, PolicyCtx policyCtx,Map<String,Value>values)"
    },
    {
      "index": 159,
      "groundtruth": "configIntermediary.updateConfigByObject(className, configObjString);",
      "prediction": "ConfigSupport configByObject = configIntermediary.getConfigByObject(className);",
      "es": 0.3291139240506329,
      "em": false,
      "passed": false,
      "original_prediction": "ConfigSupport configByObject = configIntermediary.getConfigByObject(className);"
    },
    {
      "index": 160,
      "groundtruth": "gitClient.listTags();",
      "prediction": "gitClient.listTags();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "gitClient.getAllTags();"
    },
    {
      "index": 161,
      "groundtruth": "gitClient.commitChangelogTagAndPush(tagName);",
      "prediction": "gitClient.commitChangelogTagAndPush(tagName);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "gitClient.commitAndPushChangelog(tagName);"
    },
    {
      "index": 162,
      "groundtruth": "> issueKeys = gitClient.getAllIssuesSinceLastTag();",
      "prediction": "> issueKeys = gitClient.getAllIssuesSinceLastTag();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "> issueKeys = gitClient.getIssuesWithinTag(tagName);"
    },
    {
      "index": 163,
      "groundtruth": ".generateChangelogFromExisting(gitClient.getWorkingDir(), tagName, jiraIssues);",
      "prediction": ".generateChangelog(tagName, jiraIssues);",
      "es": 0.5063291139240507,
      "em": false,
      "passed": false,
      "original_prediction": ".generateChangelog(tagName, jiraIssues);"
    },
    {
      "index": 164,
      "groundtruth": "ConfigPlus config = new ConfigPlus(configCategory, configCode, TypeJudgmentUtil.toJsonString(configValue));",
      "prediction": "ConfigPlus config = new ConfigPlus(configCategory, configCode, TypeJudgmentUtil.toJsonString(configValue));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "ConfigPlus config = new ConfigPlus(configCategory, configCode, configValue);"
    },
    {
      "index": 165,
      "groundtruth": "Config(configCategory, configCode, TypeJudgmentUtil.toJsonString(configValue));",
      "prediction": "Config(configCategory, configCode, TypeJudgmentUtil.toJsonString(configValue));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "Config(configCategory, configCode, configValue);"
    },
    {
      "index": 166,
      "groundtruth": "replaceAll(configIntermediary.getRequestMapping() + \"get\", \"\");",
      "prediction": "replaceAll(configIntermediary.getRequestMapping() + \"get\", \"\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 167,
      "groundtruth": "> issueKeys = gitClient.getIssuesWithinTag(tagName);",
      "prediction": "> issueKeys = gitClient.getIssuesWithinTag(tagName);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 168,
      "groundtruth": "<Issue> jiraIssues = jiraClient.getIssueList(jiraIssueKeys);",
      "prediction": "<Issue> jiraIssues = jiraClient.getIssueList(jiraIssueKeys);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "<Issue> jiraIssues = jiraClient.getIssues(jiraIssueKeys);"
    },
    {
      "index": 169,
      "groundtruth": "withRegion(null != config.getAwsRegionName() ? config.getAwsRegionName() : Constants.DEFAULT_AWS_REGION_NAME)\n                .withClientConfiguration(configuration)\n                .build();",
      "prediction": "withEndpointOverride(config.getEndpoint())\n            .withClientConfiguration(configuration)\n            .build();",
      "es": 0.5235602094240838,
      "em": false,
      "passed": false,
      "original_prediction": "withEndpointOverride(config.getEndpoint())\n            .withClientConfiguration(configuration)\n            .build();"
    },
    {
      "index": 170,
      "groundtruth": "writer.closeQuietly();",
      "prediction": "writer.closeQuietly();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 171,
      "groundtruth": "(config.getMaxRetries());",
      "prediction": "(config.getMaxRetries());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "s(config.getMaxRetries());"
    },
    {
      "index": 172,
      "groundtruth": "!= config.getAwsRegionName() ? config.getAwsRegionName() : Constants.DEFAULT_AWS_REGION_NAME)\n                .withClientConfiguration(configuration)\n                .build();",
      "prediction": "+ config.getRegion())\n            .withClientConfiguration(configuration)\n            .build();",
      "es": 0.5371428571428571,
      "em": false,
      "passed": false,
      "original_prediction": "+ config.getRegion())\n            .withClientConfiguration(configuration)\n            .build();"
    },
    {
      "index": 173,
      "groundtruth": "\"chat\", token.chat().id())\n      .fetch()\n      .first()\n      .then();",
      "prediction": "\"chat\", token.chat().id())\n      .fetch()\n      .first()\n      .then();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "\"chat\", token.chat())\n      .fetch()\n      .rowsUpdated();"
    },
    {
      "index": 174,
      "groundtruth": "methodLog.setStartTime(startTime);",
      "prediction": "methodLog.setStartTime(startTime);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 175,
      "groundtruth": "methodLog.setOperator(\"system\");",
      "prediction": "methodLog.setOperator(\"system\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "methodLog.setOperator(\"admin\");"
    },
    {
      "index": 176,
      "groundtruth": ".bind(\"id\", chat.id())\n      .fetch()\n      .first()\n      .then();",
      "prediction": ".bind(\"id\", chat.id())\n      .fetch()\n      .first()\n      .then();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".bind(\"id\", chat.id())\n      .fetch()\n      .rowsUpdated();"
    },
    {
      "index": 177,
      "groundtruth": "methodLog.setMethodName(methodName);",
      "prediction": "methodLog.setException(exceptionInfo);",
      "es": 0.5263157894736843,
      "em": false,
      "passed": false,
      "original_prediction": "methodLog.setException(exceptionInfo);"
    },
    {
      "index": 178,
      "groundtruth": "methodLog.setAllParams(args);",
      "prediction": "methodLog.setAllParams(args);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "methodLog.setArgs(args);"
    },
    {
      "index": 179,
      "groundtruth": "methodLog.setCreateTime(startTime);",
      "prediction": "methodLog.setMethod(methods);",
      "es": 0.5428571428571429,
      "em": false,
      "passed": false,
      "original_prediction": "methodLog.setMethod(methods);"
    },
    {
      "index": 180,
      "groundtruth": "methodLog.setTimeConsuming(timeConsuming);",
      "prediction": "methodLog.setTimeConsuming(timeConsuming);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "methodLog.setConsumingTime(intConsuming);"
    },
    {
      "index": 181,
      "groundtruth": "methodLog.setExceptionInfo(exceptionInfo);",
      "prediction": "methodLog.setExceptionInfo(exceptionInfo);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "methodLog.setException(exceptionInfo);"
    },
    {
      "index": 182,
      "groundtruth": "methodLog.setIpAddress(ipAddress);",
      "prediction": "methodLog.setExceptionInfo(exceptionInfo);",
      "es": 0.4285714285714286,
      "em": false,
      "passed": false,
      "original_prediction": "methodLog.setExceptionInfo(exceptionInfo);"
    },
    {
      "index": 183,
      "groundtruth": "methodLog.setResult(returning);",
      "prediction": "methodLog.setResult(returning);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "methodLog.setReturning(returning);"
    },
    {
      "index": 184,
      "groundtruth": "methodLog.setDesc(finishedDesc);",
      "prediction": "methodLog.setDesc(finishedDesc);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "methodLog.setFinishedDesc(finishedDesc);"
    },
    {
      "index": 185,
      "groundtruth": "methodLog.setEndTime(endTime);",
      "prediction": "methodLog.setEndTime(endTime);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 186,
      "groundtruth": "movimentacaoRepository.findByVeiculoId(id).isEmpty()){",
      "prediction": "movimentacaoRepository.exists",
      "es": 0.5,
      "em": false,
      "passed": false,
      "original_prediction": "movimentacaoRepository.exists"
    },
    {
      "index": 187,
      "groundtruth": ".marcaRepository.findByNome(nome));",
      "prediction": ".marcaRepository.findByNome(nome));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 188,
      "groundtruth": "return ResponseEntity.ok(condutorRepository.findAllAtivo());",
      "prediction": "return ResponseEntity.ok(condutorRepository.findAllAtivo());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "return ResponseEntity.ok(this.condutorRepository.findActiveCondutores());"
    },
    {
      "index": 189,
      "groundtruth": "marcaService.validarDeleteMarca(id);",
      "prediction": "this.marcaService.excluirMarca(id);",
      "es": 0.5277777777777778,
      "em": false,
      "passed": false,
      "original_prediction": "this.marcaService.excluirMarca(id);"
    },
    {
      "index": 190,
      "groundtruth": "<Veiculo> veiculoList = veiculoRepository.findAllAtivo();",
      "prediction": "<Veiculo> veiculoList = veiculoRepository.findAllAtivo();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "<Veiculo> veiculoList = this.veiculoiculoRepository.findAllByAtivo(true);"
    },
    {
      "index": 191,
      "groundtruth": "= this.veiculoRepository.findByPlaca(placa);",
      "prediction": "= this.veiculoRepository.findByPlaca(placa);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= veiculoRepository.findByPlaca(placa);"
    },
    {
      "index": 192,
      "groundtruth": "!this.movimentacaoRepository.findByVeiculoId(id).isEmpty()) {",
      "prediction": "veiculo.getAtivo()) {}",
      "es": 0.19672131147540983,
      "em": false,
      "passed": false,
      "original_prediction": "veiculo.getAtivo()) {"
    },
    {
      "index": 193,
      "groundtruth": "Condutor condutor = this.condutorRepository.findbyCPF(cpf);",
      "prediction": "Condutor condutor = this.condutorRepository.findbyCPF(cpf);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "Condutor condutor = this.condutorRepository.findByCpf(cpf)"
    },
    {
      "index": 194,
      "groundtruth": "(!this.modeloRepository.findByMarcaId(id).isEmpty()){",
      "prediction": "(marca.getAtivo()) {}",
      "es": 0.16981132075471694,
      "em": false,
      "passed": false,
      "original_prediction": "(marca.getAtivo()) {"
    },
    {
      "index": 195,
      "groundtruth": "veiculoService.validarDeleteVeiculo(id);",
      "prediction": "veiculoService.validarDeleteVeiculo(id);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "veiculoService.excluirVeiculo(id);"
    },
    {
      "index": 196,
      "groundtruth": "modeloService.validarDeleteModelo(id);",
      "prediction": "modeloService.validarDeleteModelo(id);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "modelooService.validarDeleteModelo(id);"
    },
    {
      "index": 197,
      "groundtruth": "condutor = this.condutorRepository.findByNome(nome);",
      "prediction": "condutor = this.condutorRepository.findByNome(nome);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "condutor = this.condutorRepository.findbyNome(nome)"
    },
    {
      "index": 198,
      "groundtruth": "= movimentacaoRepository.findLastFiveByOrderByEntryDateDesc();",
      "prediction": "= movimentacaoRepository.findLastFiveByOrderByEntryDateDesc();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= movimentacaoRepository.findLastFiveMovimentacoes();"
    },
    {
      "index": 199,
      "groundtruth": ".ok(movimentacaoRepository.ultimaMovimentacao());",
      "prediction": ".ok(movimentacaoRepository.ultimaMovimentacao());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".ok(movimentacaoRepository.findLastMovimentacao());"
    },
    {
      "index": 200,
      "groundtruth": "ok(marcaRepository.findAllAtivo());",
      "prediction": "ok(marcaRepository.findAllAtivo());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "ok(this.marcaRepository.findMarcasAtivos());"
    },
    {
      "index": 201,
      "groundtruth": "<Movimentacao> movimentacoes = movimentacaoRepository.findMovimentacoesAbertasByPlaca(placa);",
      "prediction": "<Movimentacao> movimentacoes = movimentacaoRepository.findMovimentacoesAbertasByPlaca(placa);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "<Movimentacao> movimentacoes = movimentacaoRepository.findByPlaca(placa);"
    },
    {
      "index": 202,
      "groundtruth": ".ok(this.modeloRepository.findByNome(nome));",
      "prediction": ".ok(this.modeloRepository.findByNome(nome));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".ok(this.modeloRepository.findByNomeMarca(nome));"
    },
    {
      "index": 203,
      "groundtruth": "> modeloList = modeloRepository.findAllAtivo();",
      "prediction": "> modeloList = modeloRepository.findAllAtivo();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "> modeloList = this.modeloRepository.findByAtivo(true);"
    },
    {
      "index": 204,
      "groundtruth": ".ok(configuracaoRepository.ultimaConfiguracao());",
      "prediction": ".ok(configuracaoRepository.ultimaConfiguracao());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".ok(configuracaoRepository.findFirstByOrderByIdDesc());"
    },
    {
      "index": 205,
      "groundtruth": "Movimentacao> movimentacoes = movimentacaoRepository.findAllAbertas();",
      "prediction": "Movimentacao> movimentacoes = movimentacaoRepository.findAllAbertas();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 206,
      "groundtruth": "if (!this.modeloRepository.findByMarcaId(id).isEmpty()) {",
      "prediction": "if (modelo.getAtivo()) {}",
      "es": 0.2807017543859649,
      "em": false,
      "passed": false,
      "original_prediction": "if (modelo.getAtivo()) {"
    },
    {
      "index": 207,
      "groundtruth": "= marcaRepository.findActiveElement(marcaId);",
      "prediction": "= this.marcaRepository.findByAtivo(true);",
      "es": 0.5111111111111111,
      "em": false,
      "passed": false,
      "original_prediction": "= this.marcaRepository.findByAtivo(true);"
    },
    {
      "index": 208,
      "groundtruth": "movimentacaoService.validarDeleteMovimentacao(id);",
      "prediction": "movimentacaoService.validarDeleteMovimentacao(id);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "movimentacaoService.excluirMovimentacao(id);"
    },
    {
      "index": 209,
      "groundtruth": "<Boolean>newResult().data(dao.deleteComposition(composerId, title)).build();",
      "prediction": "newResult().data(true).build();",
      "es": 0.39473684210526316,
      "em": false,
      "passed": false,
      "original_prediction": "newResult().data(true).build();"
    },
    {
      "index": 210,
      "groundtruth": "(dao.allComposers()).detect(c -> id == c.id());",
      "prediction": "(dao.getComposer(id)).first();",
      "es": 0.4042553191489362,
      "em": false,
      "passed": false,
      "original_prediction": "(dao.getComposer(id)).first();"
    },
    {
      "index": 211,
      "groundtruth": "(Lists.adapt(dao.allComposers()));",
      "prediction": "(Lists.adapt(dao.allComposers()));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(Lists.adapt(dao.allComposers()))"
    },
    {
      "index": 212,
      "groundtruth": "symbolNum = lsbBitReader.readBit() + 1;",
      "prediction": "symbolNum = lsbBitReader.readBit() + 1;",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "symbolNum = (int) (lsbBitReader.readBits(3) + 1);"
    },
    {
      "index": 213,
      "groundtruth": "int) (2 + 2 * lsbBitReader.readBits(3));",
      "prediction": "int) (2 + 2 * lsbBitReader.readBits(3));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "int) (lsbBitReader.readBits(4) + 4);"
    },
    {
      "index": 214,
      "groundtruth": "short len = (short) lsbBitReader.readBits(3);",
      "prediction": "short len = (short) lsbBitReader.readBits(3);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 215,
      "groundtruth": "lsbBitReader.readBits(length);",
      "prediction": "lsbBitReader.readBits(length);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 216,
      "groundtruth": "int) (lsbBitReader.readBits(4) + 4);",
      "prediction": "int) (lsbBitReader.readBits(4) + 4);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "int) (lsbBitReader.readBits(5);"
    },
    {
      "index": 217,
      "groundtruth": "lsbBitReader.readBits(LEVEL1_BITS);",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 218,
      "groundtruth": "short symbol2 = (short) lsbBitReader.readBits(8);",
      "prediction": "// Only 2 symbols",
      "es": 0.1428571428571429,
      "em": false,
      "passed": false,
      "original_prediction": "// Only 2 symbols"
    },
    {
      "index": 219,
      "groundtruth": "(int) (lsbBitReader.readBits(extraBits) + repeatOffset);",
      "prediction": "(int) (lsbBitReader.readBits(extraBits) + repeatOffset);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "1 << lsbBitReader.readBits(extraBits;"
    },
    {
      "index": 220,
      "groundtruth": "simpleLengthCode = lsbBitReader.readBit() == 1;",
      "prediction": "simpleLengthCode = lsbBitReader.readBit() == 1;",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "simpleLengthCode = lsbBitReader.readBit() == 0;"
    },
    {
      "index": 221,
      "groundtruth": "level2Index = (int) lsbBitReader.peekBits(length - LEVEL1_BITS);",
      "prediction": "level2Index = lengthAndSymbol & 0xffff;",
      "es": 0.328125,
      "em": false,
      "passed": false,
      "original_prediction": "level2Index = lengthAndSymbol & 0xffff;"
    },
    {
      "index": 222,
      "groundtruth": "short symbol1 = (short) lsbBitReader.readBits(first8Bits ? 8 : 1);",
      "prediction": "if (first8Bits) {}",
      "es": 0.19696969696969702,
      "em": false,
      "passed": false,
      "original_prediction": "if (first8Bits) {"
    },
    {
      "index": 223,
      "groundtruth": ") lsbBitReader.peekBits(LEVEL1_BITS);",
      "prediction": ") lsbBitReader.peekBits(LEVEL1_BITS);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 224,
      "groundtruth": "data.getDataElements(x >> bits, y >> bits, rgba);",
      "prediction": "rgba[0] = raster.getRed(x, y);",
      "es": 0.16326530612244894,
      "em": false,
      "passed": false,
      "original_prediction": "rgba[0] = raster.getRed(x, y);"
    },
    {
      "index": 225,
      "groundtruth": "int) (2 + lsbBitReader.readBits(maxSymbolBitLength));",
      "prediction": "int) (2 + lsbBitReader.readBits(maxSymbolBitLength));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "int) (lsbBitReader.readBits(5) + 1);"
    },
    {
      "index": 226,
      "groundtruth": "ReplayManager.getInstance().despawnPlayerClone(this);",
      "prediction": "this.lastGamemode = this.session.getPlayer().getGameMode().ordinal();",
      "es": 0.24637681159420288,
      "em": false,
      "passed": false,
      "original_prediction": "this.lastGamemode = this.session.getPlayer().getGameMode().ordinal();"
    },
    {
      "index": 227,
      "groundtruth": "raster.setDataElements(x, 0, rgba);",
      "prediction": "raster.setDataElements(x, 0, rgba);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 228,
      "groundtruth": "Live.getInstance().requestLiveToken(\n                (deviceCode, userCode, verificationUrl, expiresIn, interval) -> {",
      "prediction": "Live.authenticate((verificationUrl, userCode) -> {)})",
      "es": 0.2966101694915254,
      "em": false,
      "passed": false,
      "original_prediction": "Live.authenticate((verificationUrl, userCode) -> {"
    },
    {
      "index": 229,
      "groundtruth": "String data = FileManager.getFileResourceAsString(\"bedrock-data/required_item_list.json\");",
      "prediction": "String data = FileManager.getFileResourceAsString(\"bedrock-data/required_item_list.json\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "String data = FileManager.readFileAsString(\"bedrock-data/item_entries.json\");"
    },
    {
      "index": 230,
      "groundtruth": "raster.getDataElements(0, 0, rgba);",
      "prediction": "raster.getDataElements(0, 0, rgba);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 231,
      "groundtruth": "raster.setDataElements(0, 0, rgba);",
      "prediction": "raster.setDataElements(0, 0, rgba);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 232,
      "groundtruth": "ReplayManager.getInstance().spawnPlayerClone(this);",
      "prediction": "} else {}",
      "es": 0.05882352941176472,
      "em": false,
      "passed": false,
      "original_prediction": "} else {"
    },
    {
      "index": 233,
      "groundtruth": "OutputWindow.print(\"Proxy server Listening on \" + bindAddress);",
      "prediction": "OutputWindow.print(\"Bedrock data loaded!\");",
      "es": 0.4444444444444444,
      "em": false,
      "passed": false,
      "original_prediction": "OutputWindow.print(\"Bedrock data loaded!\");"
    },
    {
      "index": 234,
      "groundtruth": "proxyServer.start();",
      "prediction": "proxyServer.start();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 235,
      "groundtruth": "OutputWindow.print(\"Successfully loaded your account!\");",
      "prediction": "String encrypted = FileManager.getFileContents(\".account\");",
      "es": 0.22033898305084743,
      "em": false,
      "passed": false,
      "original_prediction": "String encrypted = FileManager.getFileContents(\".account\");"
    },
    {
      "index": 236,
      "groundtruth": "OutputWindow.print(\"Done (took \" + (System.currentTimeMillis() / 1000L - startTime) + \"s)!\");",
      "prediction": "OutputWindow.print(\"Loading account...\");",
      "es": 0.30107526881720426,
      "em": false,
      "passed": false,
      "original_prediction": "OutputWindow.print(\"Loading account...\");"
    },
    {
      "index": 237,
      "groundtruth": "raster.getSample(xC, y, 1);",
      "prediction": "raster.getSample(xC, y, 1);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "raster.getSample(x, y, 0);"
    },
    {
      "index": 238,
      "groundtruth": "callback.onComplete(accessToken, refreshToken);",
      "prediction": "callback.onComplete(accessToken, refreshToken);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 239,
      "groundtruth": "raster.getDataElements(x, 0, rgba);",
      "prediction": "raster.getDataElements(x, 0, rgba);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 240,
      "groundtruth": "raster.getDataElements(x - 1, 0, predictor);",
      "prediction": "raster.getDataElements(x - 1, 0, predictor);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "raster.getDataElements(0, 0, predictor);"
    },
    {
      "index": 241,
      "groundtruth": "FileManager.getFileContents(connection.getInputStream());",
      "prediction": "FileManager.getFileContents(connection.getInputStream());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 242,
      "groundtruth": "OutputWindow.print(\"Failed to load your account, please authenticate with your Microsoft account again.\");",
      "prediction": "OutputWindow.print(\"Failed to load your account, please authenticate with your Microsoft account again.\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "OutputWindow.print(\"Failed to load your account, please try again.\");"
    },
    {
      "index": 243,
      "groundtruth": "Utils.toByteArray(currentTime));",
      "prediction": "Utils.toByteArray(currentTime));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 244,
      "groundtruth": "OutputWindow.print(\"First time running BedrockReplay, please authenticate with your Microsoft account first.\");",
      "prediction": "OutputWindow.print(\"First time running BedrockReplay, please authenticate with your Microsoft account first.\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "OutputWindow.print(\"No account found, please authenticate with your Microsoft account.\");"
    },
    {
      "index": 245,
      "groundtruth": "return FileManager.getFileContents(connection.getInputStream());",
      "prediction": "return FileManager.getFileContents(connection.getInputStream());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "String response = FileManager.getFileContents(connection.getInputStream());"
    },
    {
      "index": 246,
      "groundtruth": "callback.onFailure(\"Failed to save replay: \" + e.getMessage());",
      "prediction": "callback.onFailure(\"Failed to save replay: \" + e.getMessage());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 247,
      "groundtruth": "int transformType = data.getSample(x >> bits, y >> bits, 1);",
      "prediction": "raster.getDataElements(x, y, rgba);",
      "es": 0.2833333333333333,
      "em": false,
      "passed": false,
      "original_prediction": "raster.getDataElements(x, y, rgba);"
    },
    {
      "index": 248,
      "groundtruth": "= xbox.getDeviceToken((ECPublicKey) this.keyPair.getPublic(), (ECPrivateKey) this.keyPair.getPrivate());",
      "prediction": "= xbox.getDeviceToken();",
      "es": 0.23076923076923073,
      "em": false,
      "passed": false,
      "original_prediction": "= xbox.getDeviceToken();"
    },
    {
      "index": 249,
      "groundtruth": "xbox.requestMinecraftChain(xsts, (ECPublicKey) this.keyPair.getPublic());",
      "prediction": "xbox.getChainData(xsts, deviceToken);",
      "es": 0.34246575342465757,
      "em": false,
      "passed": false,
      "original_prediction": "xbox.getChainData(xsts, deviceToken);"
    },
    {
      "index": 250,
      "groundtruth": "CODEC_HELPER.setBlockDefinitions(FakeDefinitionRegistry.createBlockRegistry());",
      "prediction": "BedrockCodecHelper codecHelper = BEDROCK_CODEC.createHelper();",
      "es": 0.20253164556962022,
      "em": false,
      "passed": false,
      "original_prediction": "BedrockCodecHelper codecHelper = BEDROCK_CODEC.createHelper();"
    },
    {
      "index": 251,
      "groundtruth": "xbox.getXBLToken((ECPublicKey) this.keyPair.getPublic(), (ECPrivateKey) this.keyPair.getPrivate(), deviceToken);",
      "prediction": "xbox.getXSTS(deviceToken);",
      "es": 0.2142857142857143,
      "em": false,
      "passed": false,
      "original_prediction": "xbox.getXSTS(deviceToken);"
    },
    {
      "index": 252,
      "groundtruth": "raster.getDataElements(trX, trY, predictor2);",
      "prediction": "raster.getDataElements(trX, trY, predictor2);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 253,
      "groundtruth": "raster.getDataElements(trX, trY, predictor3);",
      "prediction": "average2(predictor, predictor2);",
      "es": 0.4666666666666667,
      "em": false,
      "passed": false,
      "original_prediction": "average2(predictor, predictor2);"
    },
    {
      "index": 254,
      "groundtruth": "raster.getDataElements(lX, y, predictor);",
      "prediction": "raster.getDataElements(lX, y, predictor);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "aster.getDataElements(lX, y, predictor);"
    },
    {
      "index": 255,
      "groundtruth": "raster.getDataElements(x, tY, predictor2);",
      "prediction": "addPixels(rgba, predictor);",
      "es": 0.4285714285714286,
      "em": false,
      "passed": false,
      "original_prediction": "addPixels(rgba, predictor);"
    },
    {
      "index": 256,
      "groundtruth": "raster.getDataElements(lX, tY, predictor3);",
      "prediction": "raster.getDataElements(lX, tY, predictor3);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 257,
      "groundtruth": "lsbBitInputStream.readBits(14);",
      "prediction": "lsbBitInputStream.readBits(14);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 258,
      "groundtruth": "colorCacheBits = (int) lsbBitReader.readBits(4);",
      "prediction": "colorCacheBits = (int) lsbBitReader.readBits(4);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "colorCacheBits = (int) lsbBitReader.readBits(3) + 2;"
    },
    {
      "index": 259,
      "groundtruth": "lsbBitInputStream.readBit();",
      "prediction": "lsbBitInputStream.readBit();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "if (lsbBitInputStream.readBit() == 1)"
    },
    {
      "index": 260,
      "groundtruth": "(int) lsbBitInputStream.readBits(3) != 0) {",
      "prediction": "lsbBitInputStream.readB",
      "es": 0.5348837209302326,
      "em": false,
      "passed": false,
      "original_prediction": "lsbBitInputStream.readB"
    },
    {
      "index": 261,
      "groundtruth": "+ (int) lsbBitReader.readBits(extraBits) + 1;",
      "prediction": "+ lz77decode(lsbBitReader.readBits() << 8);",
      "es": 0.4666666666666667,
      "em": false,
      "passed": false,
      "original_prediction": "+ lz77decode(lsbBitReader.readBits() << 8);"
    },
    {
      "index": 262,
      "groundtruth": "int transformType = (int) lsbBitReader.readBits(2);",
      "prediction": "int transformType = (int) lsbBitReader.readBits(2);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "int transformType = lsbBitReader.readBits() << 1 | lsbBitReader.readBit();"
    },
    {
      "index": 263,
      "groundtruth": "decodeRaster = RGBABuffer.createRelativeImage(raster, 0, 0, xSize, height);",
      "prediction": "decodeRaster = RGBABuffer.createAbsolut",
      "es": 0.45333333333333337,
      "em": false,
      "passed": false,
      "original_prediction": "decodeRaster = RGBABuffer.createAbsolut"
    },
    {
      "index": 264,
      "groundtruth": "&& lsbBitReader.readBit() == 1) {",
      "prediction": "== true) {}",
      "es": 0.18181818181818177,
      "em": false,
      "passed": false,
      "original_prediction": "== true) {"
    },
    {
      "index": 265,
      "groundtruth": "RGBABuffer outputBuffer = RGBABuffer.createAbsoluteImage(width, height);",
      "prediction": "// Read the color cache size",
      "es": 0.1527777777777778,
      "em": false,
      "passed": false,
      "original_prediction": "// Read the color cache size"
    },
    {
      "index": 266,
      "groundtruth": "byte) (lsbBitReader.readBits(3) + 2);",
      "prediction": "byte) (xSize > 16 ? 0 :)",
      "es": 0.32432432432432434,
      "em": false,
      "passed": false,
      "original_prediction": "byte) (xSize > 16 ? 0 :"
    },
    {
      "index": 267,
      "groundtruth": "colorTableSize = ((int) lsbBitReader.readBits(8)) + 1;",
      "prediction": "colorTableSize = ((int) lsbBitReader.readBits(8)) + 1;",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "colorTableSize = (int) lsbBitReader.readBits(8) + 1;"
    },
    {
      "index": 268,
      "groundtruth": "(int) lsbBitReader.readBits(3) + 2;",
      "prediction": "(int) lsbBitReader.readBits(3) + 2;",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(int) lsbBitReader.readBits(3);"
    },
    {
      "index": 269,
      "groundtruth": "configVariables.setClientID(System.getenv(\"BOT_CLIENT_ID\"));",
      "prediction": "configVariables.setClientID(System.getenv(\"BOT_CLIENT_ID\"));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 270,
      "groundtruth": "configVariables.setUser(System.getenv(\"BOT_USER\"));",
      "prediction": "configVariables.setUser(System.getenv(\"BOT_USER\"));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 271,
      "groundtruth": "RGBABuffer.createAbsoluteImage(blockWidth, blockHeight);",
      "prediction": "RGBABuffer.createAbsoluteImage",
      "es": 0.5357142857142857,
      "em": false,
      "passed": false,
      "original_prediction": "RGBABuffer.createAbsoluteImage"
    },
    {
      "index": 272,
      "groundtruth": "RGBABuffer colorTableRGBABuffer = RGBABuffer.createAbsoluteImage(colorTableSize, 1);",
      "prediction": "RGBABuffer colorTableRGBABuffer = RGBABuffer",
      "es": 0.5238095238095238,
      "em": false,
      "passed": false,
      "original_prediction": "RGBABuffer colorTableRGBABuffer = RGBABuffer"
    },
    {
      "index": 273,
      "groundtruth": "raster.getDataElements(x1, ySrc, rgba);",
      "prediction": "if (ySrc < 0 ySrc < ySize)",
      "es": 0.1282051282051282,
      "em": false,
      "passed": false,
      "original_prediction": "if (ySrc < 0 ySrc < ySize)"
    },
    {
      "index": 274,
      "groundtruth": "topLevel && lsbBitReader.readBit() == 1) {",
      "prediction": "lsbBitReader.readBit()",
      "es": 0.5238095238095238,
      "em": false,
      "passed": false,
      "original_prediction": "lsbBitReader.readBit()"
    },
    {
      "index": 275,
      "groundtruth": "colorTableRGBABuffer.getDataElements(x, 0, colorTableRGBACopyBuffer);",
      "prediction": "colorTableRGBABuffer.getDataElements(x, 0, colorTableRGBACopyBuffer);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "raster.getDataElements(x, 0, colorTableRGBACopyBuffer);"
    },
    {
      "index": 276,
      "groundtruth": "int argb = colorCache.lookup(code - 256 - 24);",
      "prediction": "int argb = colorCache.lookup(code - 256 - 24);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "int argb = colorCache.getSample(x, y);"
    },
    {
      "index": 277,
      "groundtruth": "userID = twitchAPI.getUserID(user).orElse(\"\");",
      "prediction": "isJoined = false;",
      "es": 0.15217391304347827,
      "em": false,
      "passed": false,
      "original_prediction": "isJoined = false;"
    },
    {
      "index": 278,
      "groundtruth": "= botsAPI.getOnlineBots();",
      "prediction": "= botsAPI.getOnlineBots();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 279,
      "groundtruth": "twitchAPI.getUserID(userName.trim());",
      "prediction": "twitchAPI.getUserID(userName.trim());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 280,
      "groundtruth": "broadcasterID = twitchAPI.getUserID(channel.trim());",
      "prediction": "broadcasterID = twitchAPI.getUserID(channel.trim());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "broadcasterid = twitchAPI.getBroadcasterID(channel);"
    },
    {
      "index": 281,
      "groundtruth": "Generator().generate(schemaVersion, scanPackages, outputDir, skipValidation);",
      "prediction": "Generator(project, schemaVersion, outputDir, scanPackages, skipValidation).generate();",
      "es": 0.5116279069767442,
      "em": false,
      "passed": false,
      "original_prediction": "Generator(project, schemaVersion, outputDir, scanPackages, skipValidation).generate();"
    },
    {
      "index": 282,
      "groundtruth": "template.setTemplateName(templateName);",
      "prediction": "template.setTemplateName(templateName);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "template.setName(templateName);"
    },
    {
      "index": 283,
      "groundtruth": "template.setAppliesTo((String[]) methodParameters.get(APPLIES_TO));",
      "prediction": "template.setAppliesTo((String[]) methodParameters.get(APPLIES_TO));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "String appliesTo = String.valueOf(methodParameters.get(APPLiesTo));"
    },
    {
      "index": 284,
      "groundtruth": "template.setEntriesVisible(((Boolean) (methodParameters.get(ENTRIES_VISIBLE))).booleanValue());",
      "prediction": "template.setEntriesVisible(((Boolean) (methodParameters.get(ENTRIES_VISIBLE))).booleanValue());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "template.setEntriesVisible((Boolean) methodParameters.get(ENTRIES_VISIBLE));"
    },
    {
      "index": 285,
      "groundtruth": "treeMapPane = TreeMapPane.forTreeContent();",
      "prediction": "treeMapPane = TreeMapPane.forTreeContent();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "treeMapPane = new TreeMapPane<>();"
    },
    {
      "index": 286,
      "groundtruth": "(exemption != null && exemption.isExemptionActive()) {",
      "prediction": "(exemption != null && exemption.isExemptionActive()) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(exemption != null && exemption.isExempted())"
    },
    {
      "index": 287,
      "groundtruth": "final ThreadInfo threadInfo = ThreadInfo.fromThread(thread);",
      "prediction": "final ThreadInfo threadInfo = ThreadInfo.fromThread(thread);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "final ThreadInfo threadInfo = threadAccessor.getThreadInfo(thread);"
    },
    {
      "index": 288,
      "groundtruth": "(\"  executePrice=\" + DoubleUtils.toDouble(executePrice));",
      "prediction": "(\"  executePrice=\" + DoubleUtils.toDouble(executePrice));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 289,
      "groundtruth": "cancel(ts.nanoEpoch());",
      "prediction": "cancel(ts.nanoEpoch());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 290,
      "groundtruth": "ts = book.getTimestamper();",
      "prediction": "ts = book.getTimestamper();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "ts = Timestamper.now();"
    },
    {
      "index": 291,
      "groundtruth": "messages = body.getMessages();",
      "prediction": "messages = body.getMessages();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 292,
      "groundtruth": ".cancel(orderBook.getTimestamper().nanoEpoch());",
      "prediction": "Book.cancelOrder(order.getId(), \"USER\");",
      "es": 0.33333333333333337,
      "em": false,
      "passed": false,
      "original_prediction": "Book.cancelOrder(order.getId(), \"USER\");"
    },
    {
      "index": 293,
      "groundtruth": "ts.nanoEpoch(), 100);",
      "prediction": "ts.nanoEpoch(), 100);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 294,
      "groundtruth": "if (!book.isEmpty()) throw new IllegalStateException(\"Book must be empty here!\");",
      "prediction": "if (createGarbage) {}",
      "es": 0.14814814814814814,
      "em": false,
      "passed": false,
      "original_prediction": "if (createGarbage) {"
    },
    {
      "index": 295,
      "groundtruth": "(orderBook.getTimestamper().nanoEpoch(), 100);",
      "prediction": "orderBook.createLimit(String.valueOf(++orderId), orderId, Side.SELL, 100, 148.14, TimeInForc)",
      "es": 0.24731182795698925,
      "em": false,
      "passed": false,
      "original_prediction": "orderBook.createLimit(String.valueOf(++orderId), orderId, Side.SELL, 100, 148.14, TimeInForc"
    },
    {
      "index": 296,
      "groundtruth": "orderBook.showOrders();",
      "prediction": "orderBook.showOrders();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 297,
      "groundtruth": "(listeners, client.isRetryOnReadTimeout(), (response) -> {",
      "prediction": "(listener, requestBody, onRetry -> {)})",
      "es": 0.3448275862068966,
      "em": false,
      "passed": false,
      "original_prediction": "(listener, requestBody, onRetry -> {"
    },
    {
      "index": 298,
      "groundtruth": "+= order.getOpenSize();",
      "prediction": "=",
      "es": 0.04347826086956519,
      "em": false,
      "passed": false,
      "original_prediction": "="
    },
    {
      "index": 299,
      "groundtruth": "orderBookLogger.off();",
      "prediction": "// Create a few orders and show the levels a",
      "es": 0.15909090909090906,
      "em": false,
      "passed": false,
      "original_prediction": "// Create a few orders and show the levels a"
    },
    {
      "index": 300,
      "groundtruth": "listeners.onComplete(messageBuilder);",
      "prediction": "listeners.onComplete(messageBuilder);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 301,
      "groundtruth": "proxyAuthenticator.getUsername(),\n                      proxyAuthenticator.getPassword()))\n                  .build());",
      "prediction": "proxyAuthenticator.getUsername(),\n                      proxyAuthenticator.getPassword()))\n                  .build());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "proxyAuthenticator.getUsername(),\n             proxyAuthenticator.getPassword()\n             ))\n             .build()\n             .build()\n             .build()\n             .bu"
    },
    {
      "index": 302,
      "groundtruth": "createFactory(client.getHttpClient())\n        .newEventSource(\n            request,\n            getEventListener(listeners, client.isRetryOnReadTimeout(), (response) -> {",
      "prediction": "create(request, getEventListener(listener, requestBody.isStream(), error -> {))}))",
      "es": 0.3176470588235294,
      "em": false,
      "passed": false,
      "original_prediction": "create(request, getEventListener(listener, requestBody.isStream(), error -> {"
    },
    {
      "index": 303,
      "groundtruth": "!= null && mDiracSound.getMusic() == 1;",
      "prediction": "!= null && mDiracSound.getMusic() == 1;",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "!= null && mDiracSound.isEnabled();"
    },
    {
      "index": 304,
      "groundtruth": "orderBook.showLevels();",
      "prediction": "orderBook.showLevels();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 305,
      "groundtruth": "DoubleUtils.toDouble(price);",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 306,
      "groundtruth": "orderBookLogger.on();",
      "prediction": "// now hit the sell side of the book with",
      "es": 0.12195121951219512,
      "em": false,
      "passed": false,
      "original_prediction": "// now hit the sell side of the book with"
    },
    {
      "index": 307,
      "groundtruth": "= client.getHttpClient().newCall(buildRequest(requestBody)).execute()) {",
      "prediction": "= client.getHttpClient().newCall(buildRequest(requestBody)).execute()) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= client.getHttpClient().newCall(buildRequest(requestBody))"
    },
    {
      "index": 308,
      "groundtruth": "mDiracUtils != null ? mDiracUtils.isDiracEnabled() : false;",
      "prediction": "mDiracUtils.isEnabled();",
      "es": 0.4067796610169492,
      "em": false,
      "passed": false,
      "original_prediction": "mDiracUtils.isEnabled();"
    },
    {
      "index": 309,
      "groundtruth": "if (StringUtils.equals(s.getFixCode(), sb)) {",
      "prediction": "if (StringUtils.equals(s.getFixCode(), sb)) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "if (StringUtils.equals(s.getFixCode(), sb))"
    },
    {
      "index": 310,
      "groundtruth": "\"  restPrice=\" + DoubleUtils.toDouble(restPrice));",
      "prediction": "\"  restPrice=\" + DoubleUtils.toDouble(restPrice));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 311,
      "groundtruth": "book.getBestBidOrder();",
      "prediction": "book.getBestBidOrder();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 312,
      "groundtruth": "VoidAffordance.create(), afford(methodOn(ItemController.class).create(null))));",
      "prediction": "VoidAffordance.create(), afford(methodOn(ItemController.class).create(null))));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "afford(methodOn(ItemController.class).create(null), \"edit\")"
    },
    {
      "index": 313,
      "groundtruth": "class).findById(item.id())).toUri())\n        .build();",
      "prediction": "class).findById(item.id()))\n                .withSelfRel()\n            .andAfford",
      "es": 0.49382716049382713,
      "em": false,
      "passed": false,
      "original_prediction": "class).findById(item.id()))\n                .withSelfRel()\n            .andAfford"
    },
    {
      "index": 314,
      "groundtruth": ".withDimension(milvusConfiguration.getDimensions())\n            .build();",
      "prediction": ".build();",
      "es": 0.12328767123287676,
      "em": false,
      "passed": false,
      "original_prediction": ".build();"
    },
    {
      "index": 315,
      "groundtruth": ".withTimeout(milvusConfiguration.getTimeout(), TimeUnit.MILLISECONDS)\n                .createCollection(createCollectionReq);",
      "prediction": ".createCollection(createCollectionReq);",
      "es": 0.31200000000000006,
      "em": false,
      "passed": false,
      "original_prediction": ".createCollection(createCollectionReq);"
    },
    {
      "index": 316,
      "groundtruth": "if(milvusConfiguration.getDeleteOnStartup() && hasCollection) {",
      "prediction": "if(hasCollection) {}",
      "es": 0.2857142857142857,
      "em": false,
      "passed": false,
      "original_prediction": "if(hasCollection) {"
    },
    {
      "index": 317,
      "groundtruth": "(milvusConfiguration.getCollection())\n                .build());",
      "prediction": "(milvusConfiguration.getCollection())\n            .build());",
      "es": 0.9375,
      "em": true,
      "passed": true
    },
    {
      "index": 318,
      "groundtruth": "new Entry(entry1.path, entry1.metadata, classMergerCooler.merge(entry1.data, entry2.data));",
      "prediction": "classMergerCooler.merge(entry1.data, entry2.data);",
      "es": 0.5494505494505495,
      "em": false,
      "passed": false,
      "original_prediction": "classMergerCooler.merge(entry1.data, entry2.data);"
    },
    {
      "index": 319,
      "groundtruth": "(MinivanPlugin.filenameSafe(name) + \".jar\");",
      "prediction": "(name.replace(':', '/'));",
      "es": 0.25,
      "em": false,
      "passed": false,
      "original_prediction": "(name.replace(':', '/'));"
    },
    {
      "index": 320,
      "groundtruth": "sendInputMessage(uuid, request.getInput(), InputMessage.TIMEOUT);",
      "prediction": "requests.remove();",
      "es": 0.16923076923076918,
      "em": false,
      "passed": false,
      "original_prediction": "requests.remove();"
    },
    {
      "index": 321,
      "groundtruth": ".get(uuid).forEach(request -> request.getFuture().complete(response));",
      "prediction": ".get(uuid).forEach(request -> request.getFuture().complete(response));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 322,
      "groundtruth": "request.getInput().getTimeout() * 20L);",
      "prediction": "request.getInput().getTimeout() * 20L);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "request.getInput().getTimeout());"
    },
    {
      "index": 323,
      "groundtruth": "if (request.getInput().getTimeout() < 0) return;",
      "prediction": "Queue<AquaInputRequest> requests = requestQueue.get(uuid);",
      "es": 0.22413793103448276,
      "em": false,
      "passed": false,
      "original_prediction": "Queue<AquaInputRequest> requests = requestQueue.get(uuid);"
    },
    {
      "index": 324,
      "groundtruth": ", request.getInput(), InputMessage.PROMPT);",
      "prediction": ", request.getInput(), InputMessage.PROMPT);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 325,
      "groundtruth": ".element().getInput();",
      "prediction": ".element();",
      "es": 0.5,
      "em": false,
      "passed": false,
      "original_prediction": ".element();"
    },
    {
      "index": 326,
      "groundtruth": "requests.element().getFuture().complete(response);",
      "prediction": "if (requests.isEmpty()) return;",
      "es": 0.28,
      "em": false,
      "passed": false,
      "original_prediction": "if (requests.isEmpty()) return;"
    },
    {
      "index": 327,
      "groundtruth": "request.getFuture();",
      "prediction": "request.getFuture();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 328,
      "groundtruth": "d.getOriginalText().split(\"\\\\n\");",
      "prediction": "d.getOriginalText().split(\"\\\\n\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "d.getOriginalText().split(\" \");"
    },
    {
      "index": 329,
      "groundtruth": "(description.getName().equals(skillType)) {",
      "prediction": "(description.getName().equals(skillType)) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(description.getName().equals(skillType))"
    },
    {
      "index": 330,
      "groundtruth": ").infer(object, recordName));",
      "prediction": ").infer(object, recordName));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ").infer(recordName);"
    },
    {
      "index": 331,
      "groundtruth": "conversation.formattedFullHistory(), null);",
      "prediction": "conversation);",
      "es": 0.32558139534883723,
      "em": false,
      "passed": false,
      "original_prediction": "conversation);"
    },
    {
      "index": 332,
      "groundtruth": "= currentSkill.describe();",
      "prediction": "= currentSkill.describe();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= currentSkill.getDescription();"
    },
    {
      "index": 333,
      "groundtruth": "conversation.getAllMessages().get(0).getRole().equals(ChatMessageRole.SYSTEM.value())) {",
      "prediction": "conversation.getAllMessages().size() > 0) {}",
      "es": 0.3977272727272727,
      "em": false,
      "passed": false,
      "original_prediction": "conversation.getAllMessages().size() > 0) {"
    },
    {
      "index": 334,
      "groundtruth": "conversation.getAllMessages())\n                    .maxTokens(agencyConfiguration.getChatRequestMaxTokens())\n                    .build();",
      "prediction": "conversation.getAllMessages())\n         .model(openAiConfiguration.chatModel())\n         .maxTokens(1000)\n         .temperature(0.7)\n         .topP(1)\n         .frequencyPenalty(0)\n         .",
      "es": 0.4345549738219895,
      "em": false,
      "passed": false,
      "original_prediction": "conversation.getAllMessages())\n         .model(openAiConfiguration.chatModel())\n         .maxTokens(1000)\n         .temperature(0.7)\n         .topP(1)\n         .frequencyPenalty(0)\n         ."
    },
    {
      "index": 335,
      "groundtruth": "var message : conversation.getAllMessages()) {",
      "prediction": "ChatMessage message : con",
      "es": 0.28260869565217395,
      "em": false,
      "passed": false,
      "original_prediction": "ChatMessage message : con"
    },
    {
      "index": 336,
      "groundtruth": "historyAgentConversation.getAllMessages().get(\n                        historyAgentConversation.getAllMessages().size()-1)));",
      "prediction": "historyAgentConversation.form.formFullHistory()));",
      "es": 0.29600000000000004,
      "em": false,
      "passed": false,
      "original_prediction": "historyAgentConversation.form.formFullHistory()));"
    },
    {
      "index": 337,
      "groundtruth": "return mapper.deleteRegister(challengeSeq, id);",
      "prediction": "// TODO Auto-generated method stub",
      "es": 0.17021276595744683,
      "em": false,
      "passed": false,
      "original_prediction": "// TODO Auto-generated method stub"
    },
    {
      "index": 338,
      "groundtruth": "dto.setOnOffNoty(\"Y\");",
      "prediction": "dto.setUserRegDate(new java.util.Date());",
      "es": 0.2682926829268293,
      "em": false,
      "passed": false,
      "original_prediction": "dto.setUserRegDate(new java.util.Date());"
    },
    {
      "index": 339,
      "groundtruth": "> challenges = challengeBiz.findbyCate(category);",
      "prediction": "> challenges = challengeBiz.findbyCate(category);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 340,
      "groundtruth": "historyAgentConversation.getAllMessages().size()-1)));",
      "prediction": "historyAgentConversation.getAllMessages().size()-1)));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "historyAgentConversation.getAllMessages().size() - 1).getContent());"
    },
    {
      "index": 341,
      "groundtruth": "conversation.getAllMessages().size()).toArray(new ChatMessage[0]);",
      "prediction": "conversation.getAllMessages().size()).toArray(new ChatMessage[0]);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 342,
      "groundtruth": "dto.setUserLoginType(\"K\");",
      "prediction": "loginBiz.insert(dto);",
      "es": 0.23076923076923073,
      "em": false,
      "passed": false,
      "original_prediction": "loginBiz.insert(dto);"
    },
    {
      "index": 343,
      "groundtruth": "dto.setUserName(userName);",
      "prediction": "dto.setUserName(userName);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 344,
      "groundtruth": ".put(\"userId\", dto.getUserId());",
      "prediction": ".put(\"userId\", dto.getUserId());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 345,
      "groundtruth": "dto.setUserPhone(userPhone);",
      "prediction": "dto.setUserPhone(userPhone);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 346,
      "groundtruth": "user = loginBiz.findByUserId(userId);",
      "prediction": "user = loginBiz.findByUserId(userId);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "user = loginBiz.selectOne(userId);"
    },
    {
      "index": 347,
      "groundtruth": "&& user.getUserPw().equals(userPw)) {",
      "prediction": "&& user.getUserPw().",
      "es": 0.5405405405405406,
      "em": false,
      "passed": false,
      "original_prediction": "&& user.getUserPw()."
    },
    {
      "index": 348,
      "groundtruth": "openAiConfiguration.chatModel(), \n            conversation);",
      "prediction": "agencyConfiguration.getChatRequestModel());",
      "es": 0.35,
      "em": false,
      "passed": false,
      "original_prediction": "agencyConfiguration.getChatRequestModel());"
    },
    {
      "index": 349,
      "groundtruth": "(conversation.getAllMessages().size() > agencyConfiguration.getChatSummaryRetainedMessageCount()) {",
      "prediction": "(conversation.getAllMessages().size() > agencyConfiguration.getChatSummaryRetainedMessageCount()) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(conversation.getAllMessages().size() > agencyConfiguration.getChatSummaryRetainedMessageCount())"
    },
    {
      "index": 350,
      "groundtruth": "ChallengeDto currentChallenge = challengeBiz.selectOneBySeq(challengeSeq);",
      "prediction": "ChallengeDto currentChallenge = challengeBiz.selectOneBySeq(challengeSeq);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 351,
      "groundtruth": "challenge = challengeBiz.selectOne(challengeName);",
      "prediction": "challenge = challengeBiz.selectOne(challengeName);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 352,
      "groundtruth": "return redisOps.getValue(getApiKeyRedisKey());",
      "prediction": "return redisOps.getValue(getApiKeyRedisKey());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "String openApiKey = redisOps.getValue(apiKeyRedisKey);"
    },
    {
      "index": 353,
      "groundtruth": "redisOps.setValue(apiKeyRedisKey, openApiKey);",
      "prediction": "redisOps.setValue(apiKeyRedisKey, openApiKey);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "redisOps.setValue(getApiKeyRedisKey(), openApiKey);"
    },
    {
      "index": 354,
      "groundtruth": "int currentMember = registeredBiz.coutBySeq(challengeSeq);",
      "prediction": "RegisteredMemberDto currentMemb",
      "es": 0.24137931034482762,
      "em": false,
      "passed": false,
      "original_prediction": "RegisteredMemberDto currentMemb"
    },
    {
      "index": 355,
      "groundtruth": "registeredBiz.coutBySeq(challengeSeq);",
      "prediction": "registeredBiz.coutBySeq(challengeSeq);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 356,
      "groundtruth": "registeredBiz.challengeStart(challengeSeq);",
      "prediction": "currentChallenge.setChallengeEnabled(\"N\");",
      "es": 0.32558139534883723,
      "em": false,
      "passed": false,
      "original_prediction": "currentChallenge.setChallengeEnabled(\"N\");"
    },
    {
      "index": 357,
      "groundtruth": "if (currentChallenge.getChallengeEnabled().equals(\"Y\")\n\t\t\t\t\t&& currentMember < currentChallenge.getChallengeMaxMember()) {",
      "prediction": "if (currentChallenge.getChallengeEnabled().equals(\"Y\")) {}",
      "es": 0.4590163934426229,
      "em": false,
      "passed": false,
      "original_prediction": "if (currentChallenge.getChallengeEnabled().equals(\"Y\")) {"
    },
    {
      "index": 358,
      "groundtruth": "return currentChallenge.getChallengeName() + \"\uc5d0 \ucc38\uc5ec\ud558\uc600\uc2b5\ub2c8\ub2e4. \";",
      "prediction": "res = registeredBiz.coutBySeq(challengeSeq);",
      "es": 0.22033898305084743,
      "em": false,
      "passed": false,
      "original_prediction": "res = registeredBiz.coutBySeq(challengeSeq);"
    },
    {
      "index": 359,
      "groundtruth": "currentChallenge.getChallengeMaxMember()) {",
      "prediction": "currentChallenge.getCha",
      "es": 0.5348837209302326,
      "em": false,
      "passed": false,
      "original_prediction": "currentChallenge.getCha"
    },
    {
      "index": 360,
      "groundtruth": ".equals(settings.sopsExecutable, settingsComponent.getSopsExecutable()) ||\n\t\t\t!Objects.equals(settings.sopsFilesReadOnly, settingsComponent.getSopsFilesReadOnly());",
      "prediction": ".equals(settings.sopsExecutable, settingsComponent.getSopsExecutable()) ||\n\t\t!Objects.equals(settings.sopsFilesReadOnly, settingsComponent.getSopsFilesReadOnly());",
      "es": 0.9939024390243902,
      "em": true,
      "passed": true
    },
    {
      "index": 361,
      "groundtruth": "settingsComponent.getSopsFilesReadOnly());",
      "prediction": "settingsComponent.getSopsFilesReadOnly());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 362,
      "groundtruth": "if (currentChallenge.getChallengeEnabled().equals(\"Y\")) {",
      "prediction": "// \ube44\uad50 \ud6c4 \ub514\ube44\uc5d0 \ub123\uae30",
      "es": 0.01754385964912286,
      "em": false,
      "passed": false,
      "original_prediction": "// \ube44\uad50 \ud6c4 \ub514\ube44\uc5d0 \ub123\uae30"
    },
    {
      "index": 363,
      "groundtruth": "SettingsState.getInstance().sopsEnvironment.split(\"\\\\s(?=(?:[^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)\");",
      "prediction": "SettingsState.getInstance().environment;",
      "es": 0.4382022471910112,
      "em": false,
      "passed": false,
      "original_prediction": "SettingsState.getInstance().environment;"
    },
    {
      "index": 364,
      "groundtruth": "currentChallenge.getChallengeMaxMember() <= member) {",
      "prediction": "member == currentChallenge.g",
      "es": 0.2264150943396226,
      "em": false,
      "passed": false,
      "original_prediction": "member == currentChallenge.g"
    },
    {
      "index": 365,
      "groundtruth": "+ \" &3&o\u2192 &r\" + blockItem.getDisplayName());",
      "prediction": "+ \" &3&o\u2192 &r\" + blockItem.getDisplayName());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "+ \" &f&o(\" + blockItem.getDisplayName() + \")\");"
    },
    {
      "index": 366,
      "groundtruth": "world.dropItemNaturally(location, blockItem.getItem(1));",
      "prediction": "ItemStack itemStack = blockItem.getItemStack();",
      "es": 0.4107142857142857,
      "em": false,
      "passed": false,
      "original_prediction": "ItemStack itemStack = blockItem.getItemStack();"
    },
    {
      "index": 367,
      "groundtruth": "player.getInventory().addItem(blockItem.getItem(amount));",
      "prediction": "if (blockItem.getLimit() != 0 && blockItem.getLimit() < amount)",
      "es": 0.38095238095238093,
      "em": false,
      "passed": false,
      "original_prediction": "if (blockItem.getLimit() != 0 && blockItem.getLimit() < amount)"
    },
    {
      "index": 368,
      "groundtruth": "edgarSectorEnrichService.exportToCSV(writer);",
      "prediction": "writer.println(\"Ticker, Cik, Sector, SIC\");",
      "es": 0.1777777777777778,
      "em": false,
      "passed": false,
      "original_prediction": "writer.println(\"Ticker, Cik, Sector, SIC\");"
    },
    {
      "index": 369,
      "groundtruth": "edgarSectorEnrichService.enrichCik(ticker);",
      "prediction": "stockCikRepository.findByTicker(ticker);",
      "es": 0.3023255813953488,
      "em": false,
      "passed": false,
      "original_prediction": "stockCikRepository.findByTicker(ticker);"
    },
    {
      "index": 370,
      "groundtruth": "fullIndexDownloadService.processFillings(filingTypesList);",
      "prediction": "stockEnrichmentService.enrichStocksWithCusip(filingilingTypesList);",
      "es": 0.4328358208955224,
      "em": false,
      "passed": false,
      "original_prediction": "stockEnrichmentService.enrichStocksWithCusip(filingilingTypesList);"
    },
    {
      "index": 371,
      "groundtruth": "String> formTypes = fullIndexRepository.findDistinctFormTypes();",
      "prediction": "String> formTypes = fullIndexRepository.findDistinctFormTypes();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "String> formTypes = filingsDownloadService.getDistinctFormTypes();"
    },
    {
      "index": 372,
      "groundtruth": "filingsDownloadService.downloadFullIndex();",
      "prediction": "try {}",
      "es": 0.023255813953488413,
      "em": false,
      "passed": false,
      "original_prediction": "try {"
    },
    {
      "index": 373,
      "groundtruth": "<String> allFormTypes = fullIndexRepository.findDistinctFormTypes();",
      "prediction": "<String> allFormTypes = fullIndexRepository.findDistinctFormTypes();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "<String> allFormTypes = stockCikRepository.findAll().stream()"
    },
    {
      "index": 374,
      "groundtruth": "IAPKAnalyzer.createFor(inputFile);",
      "prediction": "IAPKAnalyzer.createFor(inputFile);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "new IAPkAnalyzer(inputFile);"
    },
    {
      "index": 375,
      "groundtruth": "targetFilings = fullIndexRepository.findByFormType(filingType);",
      "prediction": "targetFilings = fullIndexRepository.findByFormType(filingType);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 376,
      "groundtruth": "nativeLibraryDirectories = ShareReflectUtil.findField(dexPathList, \"nativeLibraryDirectories\");",
      "prediction": "nativeLibraryDirectories = ShareReflectUtil.findField(dexPathList, \"nativeLibraryDirectories\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 377,
      "groundtruth": "Field systemNativeLibraryDirectories = ShareReflectUtil.findField(dexPathList, \"systemNativeLibraryDirectories\");",
      "prediction": "Field systemNativeLibraryDirectories = ShareReflectUtil.findField(dexPathList, \"systemNativeLibraryDirectories\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 378,
      "groundtruth": "Field nativeLibDirField = ShareReflectUtil.findField(dexPathList, \"nativeLibraryDirectories\");",
      "prediction": "Field nativeLibDirField = ShareReflectUtil.findField(dexPathList, \"nativeLibraryDirectories\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 379,
      "groundtruth": "= ShareReflectUtil.findField(classLoader, \"libPath\");",
      "prediction": "= ShareReflectUtil.findField(classLoader, \"libPath\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= ShareReflectUtil.findField(classLoader, \"path\");"
    },
    {
      "index": 380,
      "groundtruth": "= parser.readLong(buffer, baseOffset);",
      "prediction": "= parser.readLong(buffer, baseOffset);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= parser.readLong(buffer, baseOffset + 0x0);"
    },
    {
      "index": 381,
      "groundtruth": "val = parser.readWord(buffer, baseOffset + 0x4);",
      "prediction": "val = parser.readWord(buffer, baseOffset + 0x4);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "value = parser.readWord(buffer, baseOffset + 4);"
    },
    {
      "index": 382,
      "groundtruth": "= parser.readWord(buffer, 0x1C);",
      "prediction": "= parser.readWord(buffer, 0x1C);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= parser.readWord(buffer, 0x14);"
    },
    {
      "index": 383,
      "groundtruth": "final Method makeElements = ShareReflectUtil.findMethod(dexPathList, \"makePathElements\", List.class);",
      "prediction": "final Method makeElements = ShareReflectUtil.findMet",
      "es": 0.5148514851485149,
      "em": false,
      "passed": false,
      "original_prediction": "final Method makeElements = ShareReflectUtil.findMet"
    },
    {
      "index": 384,
      "groundtruth": "libraryPathElementsFiled = ShareReflectUtil.findField(classLoader, \"libraryPathElements\");",
      "prediction": "libraryPathElementsFiled = ShareReflectUtil.findField(classLoader, \"libraryPathElements\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 385,
      "groundtruth": "ShareTinkerLog.e(TAG, \"installNativeLibraryPath, folder %s is illegal\", folder);",
      "prediction": "ShareTinkerLog.e(TAG, \"installNativeLibraryPath, folder %s is illegal\", folder);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "ShareTinkerLog.e(TAG, \"installNativeLibraryPath, folder is null or not exists, ignore.\");"
    },
    {
      "index": 386,
      "groundtruth": "parser.readWord(buffer, 0x20);",
      "prediction": "parser.readWord(buffer, 0x20);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 387,
      "groundtruth": "pathListField = ShareReflectUtil.findField(classLoader, \"pathList\");",
      "prediction": "pathListField = ShareReflectUtil.findField(classLoader, \"pathList\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 388,
      "groundtruth": "makeElements = ShareReflectUtil.findMethod(dexPathList,\n                    \"makePathElements\", List.class, File.class, List.class);",
      "prediction": "makeElements = ShareReflectUtil.findMethod(dexPathList,\n                    \"makePathElements\", List.class, File.class, List.class);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "makeElements = ShareReflectUtil.findMethod(dexPathList, \"makePathElements\", List.class, List.class, List.class);"
    },
    {
      "index": 389,
      "groundtruth": "= parser.readHalf(buffer, 0x2A);",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 390,
      "groundtruth": "= parser.readHalf(buffer, 0x2E);",
      "prediction": "= parser.readHalf(buffer, 0x2E);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= parser.readHalf(buffer, 0x34);"
    },
    {
      "index": 391,
      "groundtruth": "parser.readLong(buffer, 0x20);",
      "prediction": "parser.readLong(buffer, 0x20);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "parser.readLong(buffer, 0x18);"
    },
    {
      "index": 392,
      "groundtruth": "parser.readLong(buffer, baseOffset + 0x28);",
      "prediction": "parser.readLong(buffer, baseOffset + 0x28);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "parser.readLong(buffer, baseOffset + 0x18);"
    },
    {
      "index": 393,
      "groundtruth": "= parser.readHalf(buffer, 0x36);",
      "prediction": "= parser.readHalf(buffer, 0x36);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "magic = parser.readBytes(buffer, 0x00, 4);"
    },
    {
      "index": 394,
      "groundtruth": "parser.readWord(buffer, baseOffset + 0x8);",
      "prediction": "parser.readWord(buffer, baseOffset + 0x8);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 395,
      "groundtruth": "offset = parser.readLong(buffer, baseOffset + 0x8);",
      "prediction": "offset = parser.readLong(buffer, baseOffset + 0x8);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "offset = parser.readLong(buffer, baseOffset + 0x08);"
    },
    {
      "index": 396,
      "groundtruth": "= parser.readWord(buffer, baseOffset + 0x14);",
      "prediction": "= parser.readWord(buffer, baseOffset + 0x14);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= parser.readWord(buffer, baseOffset + 0x10);"
    },
    {
      "index": 397,
      "groundtruth": "offset = parser.readWord(buffer, baseOffset + 0x4);",
      "prediction": "offset = parser.readWord(buffer, baseOffset + 0x4);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 398,
      "groundtruth": "= StartupMode.fromString(properties.get(\"scan.startup.mode\"));",
      "prediction": "= StartupMode.fromString(properties.get(\"scan.startup.mode\"));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= StartupMode.valueOf(properties.get(\"sink.startup-mode\"));"
    },
    {
      "index": 399,
      "groundtruth": "(streamConfig.transactionalIdPrefix())\n            .setKafkaProducerConfig(toProperties(streamConfig.kafkaProperties()))\n            .build();",
      "prediction": "(streamConfig.transactionalIdPrefix())\n            .setKafkaProducerConfig(toProperties(streamConfig.kafkaProperties()))\n            .build();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(streamConfig.transactionalIdPrefix())\n            .setProperties(toProperties(streamConfig.properties()))\n            .build();"
    },
    {
      "index": 400,
      "groundtruth": ".subscribe(Collections.singleton(testEnvironment.topicFor(name)));",
      "prediction": ".subscribe(Collections.singleton(testEnvironment.topicFor(name)));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".subscribe(Collections.singletonList(testEnvironment.topicFor(name)));"
    },
    {
      "index": 401,
      "groundtruth": "setTopics(streamConfig.topic())\n            .setProperties(toProperties(streamConfig.kafkaProperties()))\n            .setValueOnlyDeserializer(deserializationSchema);",
      "prediction": "setTopics(streamConfig.topic())\n            .setProperties(toProperties(streamConfig.kafkaProperties()))\n            .setValueOnlyDeserializer(deserializationSchema);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "setGroupId(streamConfig.groupId())\n            .setTopics(streamConfig.topics())\n            .setProperties(toProperties(streamConfig.properties()))\n            .setValueOnlyDeserializer(deserializationSchema);"
    },
    {
      "index": 402,
      "groundtruth": "((DecodableSourceSplitImpl) obj).getDelegate());",
      "prediction": "obj.getDelegate());",
      "es": 0.39583333333333337,
      "em": false,
      "passed": false,
      "original_prediction": "obj.getDelegate());"
    },
    {
      "index": 403,
      "groundtruth": "producerProperties(testEnvironment.bootstrapServers()));",
      "prediction": "producerProperties(testEnvironment.bootstrapServers()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 404,
      "groundtruth": ".setKafkaProducerConfig(toProperties(streamConfig.kafkaProperties()))\n            .build();",
      "prediction": ".setKafkaProducerConfig(toProperties(streamConfig.kafkaProperties()))\n            .build();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".setProperties(toProperties(streamConfig.properties()))\n            .build();"
    },
    {
      "index": 405,
      "groundtruth": "(testEnvironment.topicFor(streamName), streamRecord.value()));",
      "prediction": "()",
      "es": 0.032258064516129004,
      "em": false,
      "passed": false,
      "original_prediction": "("
    },
    {
      "index": 406,
      "groundtruth": "toProperties(streamConfig.kafkaProperties()))\n            .setValueOnlyDeserializer(deserializationSchema);",
      "prediction": "toProperties(streamConfig.kafkaProperties()))\n            .setValueOnlyDeserializer(deserializationSchema);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "toProperties(streamConfig.properties()))\n            .setDeserializer(deserializationSchema);"
    },
    {
      "index": 407,
      "groundtruth": "if (streamConfig.startupMode() != null) {",
      "prediction": "if (streamConfig.startupMode() != null) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "if (startupMode != null)"
    },
    {
      "index": 408,
      "groundtruth": "tbApikeyDAO.useOnece(key);",
      "prediction": "if (Objects.equals(message.getType(), Message.Messag))",
      "es": 0.16666666666666663,
      "em": false,
      "passed": false,
      "original_prediction": "if (Objects.equals(message.getType(), Message.Messag"
    },
    {
      "index": 409,
      "groundtruth": "Object cnt = jdbcTemplate.queryForMap(dialect.getCountSql(sql), actionInfo.getParameter()).get(\"PG_COUNT\");",
      "prediction": "Object cnt = jdbcTemplate.queryForMap(dialect.getCountSql(sql), actionInfo.getParameter()).get(\"PG_COUNT\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "Object cnt = jdbcTemplate.queryForMap(dialect.getCountSql(sql), methodInfo.getArgs()[actionInfo.getParameterIndex()], actionInfo.getParameterType())"
    },
    {
      "index": 410,
      "groundtruth": "() != null && methodInfo.getArgs().length > 0) {",
      "prediction": "() != null) {}",
      "es": 0.25,
      "em": false,
      "passed": false,
      "original_prediction": "() != null) {"
    },
    {
      "index": 411,
      "groundtruth": "), actionInfo.getParameter(), actionInfo.getParameterType()).get(\"PG_COUNT\");",
      "prediction": "), actionInfo.getParameterTypes(), methodInfo.getArgs()[actionInfo.getParameterIndex()], new ResultSetExtractor<Map",
      "es": 0.5043478260869565,
      "em": false,
      "passed": false,
      "original_prediction": "), actionInfo.getParameterTypes(), methodInfo.getArgs()[actionInfo.getParameterIndex()], new ResultSetExtractor<Map"
    },
    {
      "index": 412,
      "groundtruth": "cnt = jdbcTemplate.queryForMap(dialect.getCountSql(sql), actionInfo.getParameter()).get(\"PG_COUNT\");",
      "prediction": "cnt = jdbcTemplate.query(dialect.getCountSql(sql), (PreparedStatementSetter) methodInfo.getArgs()[actionInfo.getParameterIndex()], new ResultSetExtrac)",
      "es": 0.4701986754966887,
      "em": false,
      "passed": false,
      "original_prediction": "cnt = jdbcTemplate.query(dialect.getCountSql(sql), (PreparedStatementSetter) methodInfo.getArgs()[actionInfo.getParameterIndex()], new ResultSetExtrac"
    },
    {
      "index": 413,
      "groundtruth": ".debug(\"finish sql==>{",
      "prediction": ".debug(\"finish sql==>{}\", this.toStr(methodI))",
      "es": 0.4782608695652174,
      "em": false,
      "passed": false,
      "original_prediction": ".debug(\"finish sql==>{}\", this.toStr(methodI"
    },
    {
      "index": 414,
      "groundtruth": "pages = page.getPages();",
      "prediction": "pages = page.getPages();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "total = page.getTotal();"
    },
    {
      "index": 415,
      "groundtruth": "] = this.actionInfo.getParameter();",
      "prediction": "] = this.actionInfo.getParameter();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "] = this.actionInfo.getBatchParameter();"
    },
    {
      "index": 416,
      "groundtruth": "MethodActionInfo actionInfo = methodInfo.getActionInfo();",
      "prediction": "if (actionInfo.isHasParameter())",
      "es": 0.2807017543859649,
      "em": false,
      "passed": false,
      "original_prediction": "if (actionInfo.isHasParameter())"
    },
    {
      "index": 417,
      "groundtruth": ".debug(\"method==>name:{",
      "prediction": ".debug(\"method==>name:{",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".debug(\"method==>{}(args:{"
    },
    {
      "index": 418,
      "groundtruth": "queryForMap(dialect.getCountSql(sql), actionInfo.getParameter(), actionInfo.getParameterType()).get(\"PG_COUNT\");",
      "prediction": "queryForMap(dialect.getCountSql(sql), actionInfo.getParameter(), actionInfo.getParameterType()).get(\"PG_COUNT\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "query(dialect.getCountSql(sql), actionInfo.getParameter(), new ResultSetExtractor<Map>() {"
    },
    {
      "index": 419,
      "groundtruth": "String sql = actionInfo.getSql();",
      "prediction": ".getDataSource().getConnection().getMetaData());",
      "es": 0.25,
      "em": false,
      "passed": false,
      "original_prediction": ".getDataSource().getConnection().getMetaData());"
    },
    {
      "index": 420,
      "groundtruth": "cpuPattern.matcher(location.fileContent());",
      "prediction": "cpuPattern.matcher(location.fileContent());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 421,
      "groundtruth": "() && methodInfo.getActionInfo().isReturnIsList()) {",
      "prediction": "()) {}",
      "es": 0.07692307692307687,
      "em": false,
      "passed": false,
      "original_prediction": "()) {"
    },
    {
      "index": 422,
      "groundtruth": "sql), (PreparedStatementSetter) methodInfo.getArgs()[actionInfo.getParameterIndex()], new ResultSetExtractor<Map>() {",
      "prediction": "sql), actionInfo.getParameter(), actionInfo.getParameterType()",
      "es": 0.3589743589743589,
      "em": false,
      "passed": false,
      "original_prediction": "sql), actionInfo.getParameter(), actionInfo.getParameterType("
    },
    {
      "index": 423,
      "groundtruth": "(methodInfo.getActionInfo().getBatchParameter()));",
      "prediction": "(methodInfo.getActionInfo().getBatchParameter()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 424,
      "groundtruth": "page.getStartRow() + 1;",
      "prediction": "page.getStartRow() + 1;",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "page.getStartRow();"
    },
    {
      "index": 425,
      "groundtruth": "Repository repository : gitLabRepositoryApi.findRepositories()) {",
      "prediction": "Repository repository : gitLabRepo",
      "es": 0.523076923076923,
      "em": false,
      "passed": false,
      "original_prediction": "Repository repository : gitLabRepo"
    },
    {
      "index": 426,
      "groundtruth": "if (methodInfo.getArgs() != null && methodInfo.getArgs().length > 0) {",
      "prediction": "interceptor.beforePrepare(methodInfo, jdbcTemplate);",
      "es": 0.2571428571428571,
      "em": false,
      "passed": false,
      "original_prediction": "interceptor.beforePrepare(methodInfo, jdbcTemplate);"
    },
    {
      "index": 427,
      "groundtruth": "toStr(methodInfo.getActionInfo().getBatchSql()));",
      "prediction": "toStr(methodInfo.getActionInfo().getBatchSql()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 428,
      "groundtruth": "methodInfo.resolveSql(sql);",
      "prediction": "methodInfo.resolveSql(sql);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "actionInfo.setSql(sql);"
    },
    {
      "index": 429,
      "groundtruth": "equalsTo.setRightExpression(this.tenantLineHandler.getTenantId());",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 430,
      "groundtruth": "new EqualsTo(this.getAliasColumn(table), this.tenantLineHandler.getTenantId());",
      "prediction": "this.andExpression(table, where, whereSegment);",
      "es": 0.31645569620253167,
      "em": false,
      "passed": false,
      "original_prediction": "this.andExpression(table, where, whereSegment);"
    },
    {
      "index": 431,
      "groundtruth": "(methodInfo.getActionInfo().isReturnIsList()) {",
      "prediction": "(methodInfo.getActionInfo().isReturnIsList()) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(methodInfo.getActionInfo().isReturnIsList())"
    },
    {
      "index": 432,
      "groundtruth": "(new SelectExpressionItem(new Column(this.tenantLineHandler.getTenantIdColumn())));",
      "prediction": "(new AllColumns());",
      "es": 0.20481927710843373,
      "em": false,
      "passed": false,
      "original_prediction": "(new AllColumns());"
    },
    {
      "index": 433,
      "groundtruth": "String.format(\"%s-- key: %s\\n\", prefix, keyType.getTypeName()));",
      "prediction": "String.format(\"%s-- key: %s\\n\", prefix, keyType.getTypeName()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 434,
      "groundtruth": "DataType.buildFormattedString(elementType, nextPrefix, builder);",
      "prediction": "@Override",
      "es": 0.09375,
      "em": false,
      "passed": false,
      "original_prediction": "@Override"
    },
    {
      "index": 435,
      "groundtruth": "DataType.buildFormattedString(dataType, nextPrefix, builder);",
      "prediction": "}",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": "}"
    },
    {
      "index": 436,
      "groundtruth": "prefix, valueType.getTypeName(),\n\t\t\t\tvalueContainsNull));",
      "prediction": "prefix, valueType.getTypeName(),\n\t\t\t\tvalueContainsNull));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "nextPrefix,\n\t\tvalueType.getTypeName(), valueContainsNull));"
    },
    {
      "index": 437,
      "groundtruth": ".format(\"%s-- element: %s (containsNull = %b)\\n\", prefix, elementType.getTypeName(),\n\t\t\t\tcontainsNull));",
      "prediction": ".format(\"%s%s%s%s%s%s\\n\", prefix, \"  \", \"Array\", containsNull ? \" Nullable\" : \"\", \" [\", elementType));])",
      "es": 0.1923076923076923,
      "em": false,
      "passed": false,
      "original_prediction": ".format(\"%s%s%s%s%s%s\\n\", prefix, \"  \", \"Array\", containsNull ? \" Nullable\" : \"\", \" [\", elementType));"
    },
    {
      "index": 438,
      "groundtruth": "dataType.getTypeName(), nullable, metadata.toString()));",
      "prediction": "dataType.getTypeName(), nullable, metadata.toString()));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "dataType, nullable, metadata));"
    },
    {
      "index": 439,
      "groundtruth": "DataType.buildFormattedString(keyType, nextPrefix, builder);",
      "prediction": "builder.append(String.format(\"%s-- value: %s (valueContainsNull = %b)\\n\", nextPrefix, valu))",
      "es": 0.2717391304347826,
      "em": false,
      "passed": false,
      "original_prediction": "builder.append(String.format(\"%s-- value: %s (valueContainsNull = %b)\\n\", nextPrefix, valu"
    },
    {
      "index": 440,
      "groundtruth": "(!dbHero.getId().equals(heroToUpdate.getId())) {",
      "prediction": "(!dbHero.getId().equals(heroToUpdate.getId())) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(!dbHero.getId().equals(heroToUpdate.getId()))"
    },
    {
      "index": 441,
      "groundtruth": "dbHero.getXp() + 2);",
      "prediction": "dbHero.getXp() + 2);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "dbHero.getXp() + 1);"
    },
    {
      "index": 442,
      "groundtruth": ").equals(heroToUpdate.getId())) {",
      "prediction": ").equals(heroToUpd)",
      "es": 0.5757575757575757,
      "em": false,
      "passed": false,
      "original_prediction": ").equals(heroToUpd"
    },
    {
      "index": 443,
      "groundtruth": "Insets insets = UIUtils.getInsets(\"Toast.shadowInsets\", new Insets(0, 0, 6, 6));",
      "prediction": "float shadowSize = FlatUIUtils.getUIFloat(\"Toast.shadowSize\", 10);",
      "es": 0.375,
      "em": false,
      "passed": false,
      "original_prediction": "float shadowSize = FlatUIUtils.getUIFloat(\"Toast.shadowSize\", 10);"
    },
    {
      "index": 444,
      "groundtruth": "UIUtils.getString(prefix + \".effectAlignment\", \"left\");",
      "prediction": "UIUtils.getString(prefix + \".effectAlignment\", \"left\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "FlatUIUtils.getUIString(prefix + \".effectAlignment\", \"center\");"
    },
    {
      "index": 445,
      "groundtruth": "notificationHolder.clearHold();",
      "prediction": "notificationHolder.clearHold();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 446,
      "groundtruth": "UIUtils.getInsets(\"Toast.frameInsets\", new Insets(10, 10, 10, 10));",
      "prediction": "UIUtils.getInsets(\"Toast.frameInsets\", new Insets(10, 10, 10, 10));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "FlatUIUtils.getInsets(\"Toast.frameInsets\", 10, 10, 10, 10);"
    },
    {
      "index": 447,
      "groundtruth": "notificationHolder.removeHold(hold);",
      "prediction": "notificationHolder.removeHold(hold);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "notificationClose(hold);"
    },
    {
      "index": 448,
      "groundtruth": "toastNotificationPanel.setDialog(window);",
      "prediction": "window.setLocationByPlatform(true);",
      "es": 0.24390243902439024,
      "em": false,
      "passed": false,
      "original_prediction": "window.setLocationByPlatform(true);"
    },
    {
      "index": 449,
      "groundtruth": "+ \".closeIcon\", UIUtils.createIcon(\"raven/toast/svg/close.svg\", closeIconColor, 0.75f));",
      "prediction": "+ \".closeButtonIcon\", null);",
      "es": 0.25,
      "em": false,
      "passed": false,
      "original_prediction": "+ \".closeButtonIcon\", null);"
    },
    {
      "index": 450,
      "groundtruth": "hold = notificationHolder.getHold(notificationAnimation.getLocation());",
      "prediction": "hold = notificationHolder.getHold(notificationAnimation.getLocation());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "hold = notificationHolder.getHold(location);"
    },
    {
      "index": 451,
      "groundtruth": "UIUtils.getInsets(prefix + \".margin\", new Insets(8, 8, 8, 8));",
      "prediction": "UIUtils.getInsets(prefix + \".margin\", new Insets(8, 8, 8, 8));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "UIUtils.getInsets(prefix + \".margin\", new Insets(0, 0, 0, 0);"
    },
    {
      "index": 452,
      "groundtruth": "notificationHolder.clearHold(location);",
      "prediction": "List<NotificationAnimation> list = lists.get(location);",
      "es": 0.4545454545454546,
      "em": false,
      "passed": false,
      "original_prediction": "List<NotificationAnimation> list = lists.get(location);"
    },
    {
      "index": 453,
      "groundtruth": "toastNotificationPanel.set(type, message);",
      "prediction": "toastNotificationPanel.set(type, message);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "toastNotificationPanel.setText(message);"
    },
    {
      "index": 454,
      "groundtruth": "notificationHolder.hold(notificationAnimation);",
      "prediction": "clear(location);",
      "es": 0.276595744680851,
      "em": false,
      "passed": false,
      "original_prediction": "clear(location);"
    },
    {
      "index": 455,
      "groundtruth": "lowerLeft.getY()).transform(new GenericShape(originalPoints)).getPoints();",
      "prediction": "lowerLeft.getY()).apply(originalPoints);",
      "es": 0.4864864864864865,
      "em": false,
      "passed": false,
      "original_prediction": "lowerLeft.getY()).apply(originalPoints);"
    },
    {
      "index": 456,
      "groundtruth": "lowerLeft.getX(), lowerLeft.getY()).transform(new GenericShape(originalPoints)).getPoints();",
      "prediction": "lowerLeft).transform(originalPoints);",
      "es": 0.40217391304347827,
      "em": false,
      "passed": false,
      "original_prediction": "lowerLeft).transform(originalPoints);"
    },
    {
      "index": 457,
      "groundtruth": "y][x].isSet()) {",
      "prediction": "y][x].isSet()) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "y][x].isSe"
    },
    {
      "index": 458,
      "groundtruth": "(point.getX(), point.getY());",
      "prediction": "(point.getX(), point.getY());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 459,
      "groundtruth": "getX() * factor, point.getY() * factor + 50, factor, factor);",
      "prediction": "getX() * factor, point.getY() * factor + 50, factor, factor);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "getX() * factor, point.getY() * factor, factor, factor);"
    },
    {
      "index": 460,
      "groundtruth": ".drawOval(point.getX() * factor, point.getY() * factor + 50, factor, factor);",
      "prediction": ".drawOval(point.getX() * factor, point.getY() * factor + 50, factor, factor);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".drawLine(factor * point.getX(), factor * point.getY(), factor * point.getX(), factor * point.getY());"
    },
    {
      "index": 461,
      "groundtruth": ", this.parserMulti(methodInfo.getActionInfo().getBatchSql()[i], null));",
      "prediction": ", sql, obj);",
      "es": 0.12676056338028174,
      "em": false,
      "passed": false,
      "original_prediction": ", sql, obj);"
    },
    {
      "index": 462,
      "groundtruth": "ExceptionUtils.mpe(\"Failed to process multiple-table update, please exclude the tableName or statementId\");",
      "prediction": "ExceptionUtils.unsupportedException(\"insert into select not support\");",
      "es": 0.3551401869158879,
      "em": false,
      "passed": false,
      "original_prediction": "ExceptionUtils.unsupportedException(\"insert into select not support\");"
    },
    {
      "index": 463,
      "groundtruth": "array.validateShape(String.valueOf(key), expectedShape);",
      "prediction": "if (array == null) {}",
      "es": 0.1071428571428571,
      "em": false,
      "passed": false,
      "original_prediction": "if (array == null) {"
    },
    {
      "index": 464,
      "groundtruth": "myJavaInputStream    = in.getInputStream();",
      "prediction": "myJavaInputStream   = in.getInputStream();",
      "es": 0.9767441860465116,
      "em": true,
      "passed": true
    },
    {
      "index": 465,
      "groundtruth": "myPythonInputStream  = out.getInputStream();",
      "prediction": "myPythonInputStream  = out.getInputStream();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 466,
      "groundtruth": "= StringUtil.stackTraceToString(t);",
      "prediction": "= StringUtil.stackTraceToString(t);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 467,
      "groundtruth": "param.put(item.getValue(), hParam);",
      "prediction": "param.put(item.getValue(), hParam);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "param.put(item.getValue(),hParam);"
    },
    {
      "index": 468,
      "groundtruth": "GrayParamHolder.putValues(param);",
      "prediction": "GrayParamHolder.putValues(param);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "GrayParamHolder.putValue(param);"
    },
    {
      "index": 469,
      "groundtruth": "= GrayUtil.isGrayRequest();",
      "prediction": "= GrayUtil.isGrayRequest();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 470,
      "groundtruth": "if(GrayUtil.isGrayPod()){",
      "prediction": "if(GrayUtil.isGrayPod()){",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "if(GrayUtil.isGray())"
    },
    {
      "index": 471,
      "groundtruth": "info(\"\u5f53\u524d\u5b9e\u4f8b\u76d1\u542cmq\u961f\u5217\u7684\u72b6\u6001:{",
      "prediction": "info(\"\u5f53\u524d\u5b9e\u4f8b\u76d1\u542cmq\u961f\u5217\u7684\u72b6\u6001:{",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "info(\"\u5f53\u524d\u5b9e\u4f8b\u7684\u76d1\u542c\u72b6\u6001\uff1a{"
    },
    {
      "index": 472,
      "groundtruth": "=GrayUtil.requestGroup();",
      "prediction": "=GrayUtil.requestGroup();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "=GrayUtil.getGrayGroup();"
    },
    {
      "index": 473,
      "groundtruth": "String> attributes= GrayParamHolder.getGrayMap();",
      "prediction": "String> attributes= GrayParamHolder.getGrayMap();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 474,
      "groundtruth": "getName() + \"\u7070\u5ea6\u73af\u5883\u53d8\u66f4:\" + listenerStateEnum.getValue());",
      "prediction": "getName().concat(\"\u76d1\u542c\u5668\u72b6\u6001\u53d1\u751f\u6539\u53d8\uff0c\u5f53\u524d\u72b6\u6001\u4e3a\uff1a\").concat(listenerStateEnum.name()));",
      "es": 0.45070422535211263,
      "em": false,
      "passed": false,
      "original_prediction": "getName().concat(\"\u76d1\u542c\u5668\u72b6\u6001\u53d1\u751f\u6539\u53d8\uff0c\u5f53\u524d\u72b6\u6001\u4e3a\uff1a\").concat(listenerStateEnum.name()));"
    },
    {
      "index": 475,
      "groundtruth": "getHeader(item.getValue());",
      "prediction": "getHeader(item.getValue());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 476,
      "groundtruth": "(\"\u5f53\u524d\u5b9e\u4f8b\u662f\u5426\u4e3a\u7070\u5ea6\u73af\u5883\uff1a{",
      "prediction": "(\"\u5f53\u524d\u5b9e\u4f8b\u662f\u5426\u4e3a\u7070\u5ea6\u73af\u5883\uff1a{",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(\"\u5f53\u524d\u5b9e\u4f8b\u662f\u5426\u662f\u7070\u5ea6\u5b9e\u4f8b:{"
    },
    {
      "index": 477,
      "groundtruth": "myByteList.clear();",
      "prediction": "write(Operations.BINFLOAT);",
      "es": 0.18518518518518523,
      "em": false,
      "passed": false,
      "original_prediction": "write(Operations.BINFLOAT);"
    },
    {
      "index": 478,
      "groundtruth": "(myByteList.toArray());",
      "prediction": "(myFourByteBuffer.putFloat(0, o);)",
      "es": 0.3529411764705882,
      "em": false,
      "passed": false,
      "original_prediction": "(myFourByteBuffer.putFloat(0, o);"
    },
    {
      "index": 479,
      "groundtruth": "PythonMinion.byValue(foo);",
      "prediction": "\"foo\";",
      "es": 0.15384615384615385,
      "em": false,
      "passed": false,
      "original_prediction": "\"foo\";"
    },
    {
      "index": 480,
      "groundtruth": "python.invoke(\"len\", Integer.class, foo);",
      "prediction": "python.invoke(\"len\", Integer.class, foo);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 481,
      "groundtruth": "python.invoke(\"len\", Integer.class, arg);",
      "prediction": "python.invoke(\"len\", Integer.class, arg);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 482,
      "groundtruth": "[]     shape   = {",
      "prediction": "}",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": "}"
    },
    {
      "index": 483,
      "groundtruth": "RtcMsg.createContractTransaction(\n                        subject, application, content, to));",
      "prediction": "RtcMsg.createContractTransaction(\n                        subject, application, content, to));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "RtcMsg.createRtcMsg(subject, application, content, to);"
    },
    {
      "index": 484,
      "groundtruth": "rawTransaction = RawTelegram.createTransaction(nonce, gasPrice, gasLimit, contractAddress, value, data);",
      "prediction": "rawTransaction = RawTelegram.createTransaction(nonce, gasPrice, gasLimit, contractAddress, value, data);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 485,
      "groundtruth": "o.getNoCheck(i));",
      "prediction": "/**",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": "/**"
    },
    {
      "index": 486,
      "groundtruth": "myByteList.append(Float.toString(o).getBytes());",
      "prediction": "myByteList.add((byte) (o < 0 ? 0 : 1));",
      "es": 0.39583333333333337,
      "em": false,
      "passed": false,
      "original_prediction": "myByteList.add((byte) (o < 0 ? 0 : 1));"
    },
    {
      "index": 487,
      "groundtruth": "(config.getValueOutputFormat() == BaseTableWriterConfig.OutputFormat.STRING\n        && !(recordValue instanceof String)) {",
      "prediction": "(config.getValueOutputFormat() == BaseTableWriterConfig.OutputFormat.STRING\n        && !(recordValue instanceof String)) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(config.getValueOutputFormat() == BaseTableWriterConfig.OutputFormat.STRING\n        && !(recordValue instanceof String))"
    },
    {
      "index": 488,
      "groundtruth": ", SCALAR_ARRAY_SHAPE, rawData.data());",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 489,
      "groundtruth": "Util.parseHumanReadableDuration(value.toString());",
      "prediction": "Duration.parse(value.toString());",
      "es": 0.45999999999999996,
      "em": false,
      "passed": false,
      "original_prediction": "Duration.parse(value.toString());"
    },
    {
      "index": 490,
      "groundtruth": "(config.getKeyOutputFormat() == BaseTableWriterConfig.OutputFormat.STRING\n        && !(recordKey instanceof String)) {",
      "prediction": "(config.getKeyOutputFormat() == BaseTableWriterConfig.OutputFormat.STRING\n        && !(recordKey instanceof String)) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(config.getKeyOutputFormat() == BaseTableWriterConfig.OutputFormat.STRING\n        && !(recordKey instanceof String))"
    },
    {
      "index": 491,
      "groundtruth": "return dummyArray.getLong(0);",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 492,
      "groundtruth": "if (usuario.getPassword().equals(Senha)) {",
      "prediction": "if (usuario.getPassword().equals(Senha)) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "if (usuario.getSenha().equals(Senha))"
    },
    {
      "index": 493,
      "groundtruth": "RA_atual = usuario.getMatricula();",
      "prediction": "usuarioLogado = usuario;",
      "es": 0.2647058823529411,
      "em": false,
      "passed": false,
      "original_prediction": "usuarioLogado = usuario;"
    },
    {
      "index": 494,
      "groundtruth": "!twilioService.validatePhoneNumber(from)) {",
      "prediction": "!twilioService.isValidP",
      "es": 0.41860465116279066,
      "em": false,
      "passed": false,
      "original_prediction": "!twilioService.isValidP"
    },
    {
      "index": 495,
      "groundtruth": "String response = chatGPTService.askQuestion(message);",
      "prediction": "String response = chatGPTService.askQuestion(message);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "String response = chatGPTService.sendChatMessage(message);"
    },
    {
      "index": 496,
      "groundtruth": "chatGPTService.askQuestion(body);",
      "prediction": "chatGPTService.askQuestion(body);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "chatGPTService.processMessage(from, body);"
    },
    {
      "index": 497,
      "groundtruth": "chatGPTConfiguration.setApiKey(ConfigUtils.obfuscateApiKey(chatGPTConfiguration.getApiKey()));",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 498,
      "groundtruth": "(request.getTo());",
      "prediction": "(request.getTo());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 499,
      "groundtruth": "responseFrame = FrameMapper.mapFromBytesToInstance(currentFrameBytes);",
      "prediction": "responseFrame = FrameMapper.mapFromBytesToInstance(currentFrameBytes);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 500,
      "groundtruth": "UDPFrame currentFrame = FrameMapper.mapFromBytesToInstance(incomingRequestPacket.getData());",
      "prediction": "UDPFrame currentFrame = FrameMapper.mapFromBytesToInstance(incomingRequestPacket.getData());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "UDPFrame currentFrame = FrameMapper.map(incomingRequestPacket.getData(), incomingRequestPacket.getLength());"
    },
    {
      "index": 501,
      "groundtruth": ", List<UDPFrame>> completedRequestFrameList : map.findCompletedRequestsFrameLists())\n\t\t\t\t{",
      "prediction": ", List<UDPFrame>> completedRequestFrameList : m",
      "es": 0.5222222222222221,
      "em": false,
      "passed": false,
      "original_prediction": ", List<UDPFrame>> completedRequestFrameList : m"
    },
    {
      "index": 502,
      "groundtruth": "sendResponseWithOverhead(responseBytes, response.getTo());",
      "prediction": "sendResponseWithOverhead(responseBytes, response.getTo());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 503,
      "groundtruth": "return execute(api.getModel(modelId));",
      "prediction": "return execute(api.getModel(modelId));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 504,
      "groundtruth": "return execute(api.listModels()).data;",
      "prediction": "return execute(api.listModels()).data;",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 505,
      "groundtruth": "if (infoFilter.isStudentIdValid(studentId)) {",
      "prediction": "if (infoFilter.isStudentIdValid(studentId)) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "if (!infoFilter.isStudentIdValid(studentId))"
    },
    {
      "index": 506,
      "groundtruth": "infoFilter.isPersonIdValid(id)) {",
      "prediction": "infoFilter.isIdVal",
      "es": 0.5454545454545454,
      "em": false,
      "passed": false,
      "original_prediction": "infoFilter.isIdVal"
    },
    {
      "index": 507,
      "groundtruth": "if (subject.getKind().compareTo(\n                    comboSubjectType.getItemAt(i).toString()) == 0) {",
      "prediction": "if (subject.getKind().equals(comboSubjectType.getItemAt(i)))",
      "es": 0.5392156862745099,
      "em": false,
      "passed": false,
      "original_prediction": "if (subject.getKind().equals(comboSubjectType.getItemAt(i)))"
    },
    {
      "index": 508,
      "groundtruth": "txtMajor.setText(student.getMajor());",
      "prediction": "txtMajor.setText(student.getMajor());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 509,
      "groundtruth": "subject.getKind().compareTo(\n                    comboSubjectType.getItemAt(i).toString()) == 0) {",
      "prediction": "subject.getKind().equals(comboSubjectType.getItemAt(i))",
      "es": 0.5102040816326531,
      "em": false,
      "passed": false,
      "original_prediction": "subject.getKind().equals(comboSubjectType.getItemAt(i))"
    },
    {
      "index": 510,
      "groundtruth": "ect.getName() + \" tr\u01b0\u1edbc \u0111\u00f3.\";",
      "prediction": "ect.getName() + \" tr\u01b0\u1edbc \u0111\u00f3.\";",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "e.getName() + \" tr\u01b0\u1edbc!\";"
    },
    {
      "index": 511,
      "groundtruth": "if (infoFilter.isDateOfBirthValid(dob)) {",
      "prediction": "if (infoFilter.isDateOfBirthValid(dob)) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "if (infoFilter.isDateOfBirthValid(dob))"
    },
    {
      "index": 512,
      "groundtruth": "if (s.getStudentId().compareTo(studentId) == 0) {",
      "prediction": "if (s.getStudentId().compareTo(studentId) == 0) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "if (s.getStudentId().equals(studentId))"
    },
    {
      "index": 513,
      "groundtruth": "System.out.println(\"[ \" + raiz.getElement() + \" ]\");",
      "prediction": "System.out.println(\"[ \" + raiz.getElement() + \" ]\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 514,
      "groundtruth": "nodo.setRightSon(raiz.getRightSon());",
      "prediction": "if (previousNode == null)",
      "es": 0.1351351351351351,
      "em": false,
      "passed": false,
      "original_prediction": "if (previousNode == null)"
    },
    {
      "index": 515,
      "groundtruth": "if (element == raiz.getElement()) {",
      "prediction": "if (element == raiz.getElement()) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "if (element < raiz.getElement())"
    },
    {
      "index": 516,
      "groundtruth": "raiz.isLeaf()) {",
      "prediction": "raiz.hasOn",
      "es": 0.375,
      "em": false,
      "passed": false,
      "original_prediction": "raiz.hasOn"
    },
    {
      "index": 517,
      "groundtruth": "(element < previousNode.getElement()) {",
      "prediction": "(element < previousNode.getElement()) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(element < previousNode.getElement())"
    },
    {
      "index": 518,
      "groundtruth": "else if (raiz.hasOnlyRightSon()) {",
      "prediction": "else if (raiz.hasOnlyRightSon()) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "else if (raiz.hasOnlyRightSon())"
    },
    {
      "index": 519,
      "groundtruth": "raiz.getRightSon() != null;",
      "prediction": "raiz.getRightSon() != null;",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 520,
      "groundtruth": "nodo.setLeftSon(raiz.getLeftSon());",
      "prediction": "if (element < previousNode.getElement())",
      "es": 0.25,
      "em": false,
      "passed": false,
      "original_prediction": "if (element < previousNode.getElement())"
    },
    {
      "index": 521,
      "groundtruth": "Nodo nodo = searchNodoToReplace(raiz.getLeftSon());",
      "prediction": "Nodo nodo = searchNodoToReplace(raiz.getLeftSon());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "public Nodo nodo = searchNodoToReplace(raiz.getLeftSon());"
    },
    {
      "index": 522,
      "groundtruth": "validateLeftSon(raiz.getLeftSon());",
      "prediction": "raiz.hasOnlyRightSon();",
      "es": 0.34285714285714286,
      "em": false,
      "passed": false,
      "original_prediction": "raiz.hasOnlyRightSon();"
    },
    {
      "index": 523,
      "groundtruth": ".setRightSon(raiz.getRightSon());",
      "prediction": ".setRightSon(raiz.getRightSon());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 524,
      "groundtruth": "Nodo nodo = raiz.getLeftSon();",
      "prediction": "Nodo nodo = searchNodoToReplace(raiz.getRightSon());",
      "es": 0.5192307692307692,
      "em": false,
      "passed": false,
      "original_prediction": "Nodo nodo = searchNodoToReplace(raiz.getRightSon());"
    },
    {
      "index": 525,
      "groundtruth": "while(raiz.getRightSon() != null) {",
      "prediction": "while(raiz.getRightSon() != null) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "while (raiz.getRightSon() != null)"
    },
    {
      "index": 526,
      "groundtruth": "[] newSons = new Nodo[father.getSons().length + 1];",
      "prediction": "[] newSons = new Nodo[father.getSons().length + 1];",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 527,
      "groundtruth": "pointer.getElement() == fatherElement) {",
      "prediction": "pointer.getElement() == fatherElement) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "pointer.getElement() ="
    },
    {
      "index": 528,
      "groundtruth": "if (pointer.getSons()[i].getElement() == fatherElement) {",
      "prediction": "if (pointer.getSons()[i] == null)",
      "es": 0.5263157894736843,
      "em": false,
      "passed": false,
      "original_prediction": "if (pointer.getSons()[i] == null)"
    },
    {
      "index": 529,
      "groundtruth": "out.println(\"[ \"+raiz.getElement() + \" ]\");",
      "prediction": "out.println(\"[ \"+raiz.getElement() + \" ]\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "out.println(raiz.getElement());"
    },
    {
      "index": 530,
      "groundtruth": "33, bst.getRoot());",
      "prediction": "33, bst.getRoot());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "45, bst.getRoot());"
    },
    {
      "index": 531,
      "groundtruth": ".preOrden(bst.getRoot());",
      "prediction": ".preOrden(bst.getRoot());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 532,
      "groundtruth": "(25, bst.getRoot());",
      "prediction": "(25, bst.getRoot());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(15, bst.getRoot());"
    },
    {
      "index": 533,
      "groundtruth": ".deleteNodo(30, bst.getRoot(), null);",
      "prediction": ".deleteNodo(30, bst.getRoot(), null);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".deleteNodo(20, bst.getRoot());"
    },
    {
      "index": 534,
      "groundtruth": "(getPeek().getNext());",
      "prediction": "(getPeek().getNext());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(pointer.getNext());"
    },
    {
      "index": 535,
      "groundtruth": "(pointer.getNext() != pointer2) {",
      "prediction": "(pointer.getNext() != pointer2) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(pointer.getNext() != getHead())"
    },
    {
      "index": 536,
      "groundtruth": ".println(\"[ \"+pointer.getElement()+\" ]\");",
      "prediction": ".println(\"[ \"+pointer.getElement()+\" ]\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".println(pointer.getElement());"
    },
    {
      "index": 537,
      "groundtruth": ").setNext(getHead());",
      "prediction": ").setNext(getHead());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 538,
      "groundtruth": "while (pointer.getNext() != getHead()) {",
      "prediction": "while (pointer.getNext() != getHead()) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "while (((Nodo) pointer.getNext()) != getHead())"
    },
    {
      "index": 539,
      "groundtruth": "pointer.getNext())).getNext() != getHead()) {",
      "prediction": "pointer.getNext())).getNext() != getHead()) {",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 540,
      "groundtruth": "pointer.setNext(getHead());",
      "prediction": "pointer.setNext(getHead());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "pointer.setNext(node);"
    },
    {
      "index": 541,
      "groundtruth": "list.deleteInIndex(3);",
      "prediction": "list.printList();",
      "es": 0.40909090909090906,
      "em": false,
      "passed": false,
      "original_prediction": "list.printList();"
    },
    {
      "index": 542,
      "groundtruth": "while (pointer.getNext() != pointer2) {",
      "prediction": "pointer2.setNext(null);",
      "es": 0.41025641025641024,
      "em": false,
      "passed": false,
      "original_prediction": "pointer2.setNext(null);"
    },
    {
      "index": 543,
      "groundtruth": ".getNext())).getNext() != getHead()) {",
      "prediction": ".getNext())).getNext() != getHead()) {",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 544,
      "groundtruth": "int) pointer1.getElement();",
      "prediction": "int) pointer1.getElement();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 545,
      "groundtruth": "pointer1 = lista1.getHead();",
      "prediction": "pointer1 = lista1.getHead();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 546,
      "groundtruth": "Nodo pointer3 = lista3.getHead();",
      "prediction": "Nodo pointer3 = lista3.getHead();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 547,
      "groundtruth": ").setPrevious(node);",
      "prediction": ").setPrevious(node);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 548,
      "groundtruth": "node.setPrevious(pointer);",
      "prediction": "pointer.setNext(node);",
      "es": 0.34615384615384615,
      "em": false,
      "passed": false,
      "original_prediction": "pointer.setNext(node);"
    },
    {
      "index": 549,
      "groundtruth": "= (NodoDoble) pointer.getNext();",
      "prediction": "= (NodoDoble) pointer.getNext();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 550,
      "groundtruth": "pointer2 = pointer.getPrevious();",
      "prediction": "pointer2 = pointer.getPrevious();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 551,
      "groundtruth": "pointer.setPrevious(null);",
      "prediction": "pointer.setPrevious(null);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 552,
      "groundtruth": "pointer2 = pointer.getNext();",
      "prediction": "pointer2 = pointer.getNext();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 553,
      "groundtruth": "pointer2.getNext().setPrevious(pointer);",
      "prediction": "pointer2.getNext().setPrevious(pointer);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 554,
      "groundtruth": "emoji.getSubgroup() == subgroup).collect(Collectors.toSet());",
      "prediction": "emoji.getSubgroup() == subgroup).collect(Collectors.toSet());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "emoji.getSubGroup() == subgroup).collect(Collectors.toSet());"
    },
    {
      "index": 555,
      "groundtruth": "(emoji -> emoji.getDiscordAliases().contains(aliasWithoutColon) || emoji.getDiscordAliases().contains(aliasWithColon))\n                .findFirst();",
      "prediction": "(emoji -> emoji.getDiscordAliases().contains(aliasWithoutColon) || emoji.getDiscordAliases().contains(aliasWithColon))\n                .findFirst();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(emoji -> emoji.getAllAliases().contains(aliasWithoutColon) || emoji.getAllAliases().contains(aliasWithColon))\n                .findFirst();"
    },
    {
      "index": 556,
      "groundtruth": "emoji.getAllAliases().contains(aliasWithoutColon) || emoji.getAllAliases().contains(aliasWithColon))\n                .findFirst();",
      "prediction": "emoji.getAllAliases().contains(aliasWithoutColon) || emoji.getAllAliases().contains(aliasWithColon))\n                .findFirst();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "emoji.getAliases().contains(aliasWithoutColon) || emoji.getAliases().contains(aliasWithColon))\n                .findFirst();"
    },
    {
      "index": 557,
      "groundtruth": "return EMOJIS_LENGTH_DESCENDING.stream().filter(emoji -> emoji.getGroup() == group).collect(Collectors.toSet());",
      "prediction": "return EMOJIS_LENGTH_DESCENDING.stream().filter(emoji -> emoji.getGroup() == group).collect(Collectors.toSet());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 558,
      "groundtruth": ".removeHairStyle(Fitzpatrick.removeFitzpatrick(emoji));",
      "prediction": ".removeHairStyle(Fitzpatrick.removeFitzpatrick(emoji));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".removeHairStyle(Fitzpatrick.removeFitzpatrick(getEmoji()));"
    },
    {
      "index": 559,
      "groundtruth": "mListener.onCancelledAuth();",
      "prediction": "mListener.onCancelledAuth();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "mListener.onLoggedOut();"
    },
    {
      "index": 560,
      "groundtruth": "mListener.onLoggedOut();",
      "prediction": "mListener.onLoggedOut();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "mListener.onLogOut();"
    },
    {
      "index": 561,
      "groundtruth": "HuaweiPushPlugin.handleReceiveMessage(messageData);",
      "prediction": "if (messageData == null) {}",
      "es": 0.11764705882352944,
      "em": false,
      "passed": false,
      "original_prediction": "if (messageData == null) {"
    },
    {
      "index": 562,
      "groundtruth": "mAdStatusListener.onRewarded(rewardName, rewardAmount);",
      "prediction": "mAdStatusListener.onRewarded(rewardName, rewardAmount);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "mAdStatusListener.onRewarded(rewardAmount, rewardName);"
    },
    {
      "index": 563,
      "groundtruth": "CipherUtil.doCheck(inAppPurchaseDataStr, inAppPurchaseDataSignature, mPublicKey)) {",
      "prediction": "CipherUtil.doCheck(inAppPurchaseDataStr, inAppPurchaseDataSignature, mPublicKey)) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "CipherUtil.doCheck(inAppPurchaseDataStr, inAppPurchaseDataSignature, mPublicKey)"
    },
    {
      "index": 564,
      "groundtruth": "iapApiCallback.onFail(e);",
      "prediction": "iapApiCallback.onFail(e);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 565,
      "groundtruth": "list.deleteInIndex(6);",
      "prediction": "list.printList();",
      "es": 0.40909090909090906,
      "em": false,
      "passed": false,
      "original_prediction": "list.printList();"
    },
    {
      "index": 566,
      "groundtruth": "list.deleteInIndex(2);",
      "prediction": "list.printList();",
      "es": 0.40909090909090906,
      "em": false,
      "passed": false,
      "original_prediction": "list.printList();"
    },
    {
      "index": 567,
      "groundtruth": ").compareTo(cont.getTitular()) < 0) {",
      "prediction": ").compareTo(cont.get)",
      "es": 0.5675675675675675,
      "em": false,
      "passed": false,
      "original_prediction": ").compareTo(cont.get"
    },
    {
      "index": 568,
      "groundtruth": "out.printf(\"Saldo atualizado: R$%.2f%n\", conta.getSaldo());",
      "prediction": "out.println(\"Saldo atual: \" + this.saldo);",
      "es": 0.5423728813559322,
      "em": false,
      "passed": false,
      "original_prediction": "out.println(\"Saldo atual: \" + this.saldo);"
    },
    {
      "index": 569,
      "groundtruth": ".getTitular().compareTo(cont.getTitular()) > 0) {",
      "prediction": ".getTitular().compareTo(cont.getTitular()) > 0) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".getTitular().compareTo(cont.getTitular())"
    },
    {
      "index": 570,
      "groundtruth": "conta.sacar(valor, conta);",
      "prediction": "conta.sacar(valor, conta);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 571,
      "groundtruth": "printf(\"Saldo atual: R$ %.2f\", conta.getSaldo());",
      "prediction": "println(\"Dep\u00f3sito realizado com sucesso.\");",
      "es": 0.30612244897959184,
      "em": false,
      "passed": false,
      "original_prediction": "println(\"Dep\u00f3sito realizado com sucesso.\");"
    },
    {
      "index": 572,
      "groundtruth": "pointer2 = (Nodo) pointer2.getNext();",
      "prediction": "System.out.print(\" \");",
      "es": 0.2432432432432432,
      "em": false,
      "passed": false,
      "original_prediction": "System.out.print(\" \");"
    },
    {
      "index": 573,
      "groundtruth": "System.out.println(\"Valor de tarifa cobrado no dep\u00f3sito: R$ \" + ContaCorrente.getTarifaDeposito());",
      "prediction": "System.out.println(\"Valor de tarifa cobrado no dep\u00f3sito: R$ \" + ContaCorrente.getTarifaDeposito());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 574,
      "groundtruth": "(cpfDestinatario.equals(conta.getCpf())) {",
      "prediction": "(cpfDestinatario.equals(conta.getCpf())) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(cpfDestinatario.equals(cpf))"
    },
    {
      "index": 575,
      "groundtruth": "conta.transferir(contaDestino, valor, conta);",
      "prediction": "if (contaDestino == null)",
      "es": 0.37777777777777777,
      "em": false,
      "passed": false,
      "original_prediction": "if (contaDestino == null)"
    },
    {
      "index": 576,
      "groundtruth": "printf(\"NOME: %s\\t| AG\u00caNCIA: %s\\n\", c.getTitular(), c.getAgencia());",
      "prediction": "println(c);",
      "es": 0.1470588235294118,
      "em": false,
      "passed": false,
      "original_prediction": "println(c);"
    },
    {
      "index": 577,
      "groundtruth": "etTitular(), c.getAgencia());",
      "prediction": "etCliente().getNome(), c.getAgencia().getNumAgencia());",
      "es": 0.4363636363636364,
      "em": false,
      "passed": false,
      "original_prediction": "etCliente().getNome(), c.getAgencia().getNumAgencia());"
    },
    {
      "index": 578,
      "groundtruth": "Escritor.registroDeDadosAtualizados();",
      "prediction": "System.out.println();",
      "es": 0.23684210526315785,
      "em": false,
      "passed": false,
      "original_prediction": "System.out.println();"
    },
    {
      "index": 579,
      "groundtruth": "println(\"Total de saques: \" + conta.getTotalSaques());",
      "prediction": "println(\"Total de saques: \" + conta.getTotalSaques());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 580,
      "groundtruth": "capitalBancoSaldo += lista.getSaldo();",
      "prediction": "capitalBancoSaldo += lista.getSaldo();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 581,
      "groundtruth": ".out.println(pointer2.getElement());",
      "prediction": ".out.println(\"El elemento en la posicion \"+cont+\" es: \"+pointer2.getElem)",
      "es": 0.3287671232876712,
      "em": false,
      "passed": false,
      "original_prediction": ".out.println(\"El elemento en la posicion \"+cont+\" es: \"+pointer2.getElem"
    },
    {
      "index": 582,
      "groundtruth": "(\"Valor de tarifa cobrado na tranfer\u00eancia: R$ \" + ContaCorrente.getTarifaTransferencia());",
      "prediction": "(\"Valor de tarifa cobrado na tranfer\u00eancia: R$ \" + ContaCorrente.getTarifaTransferencia());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(\"Valor de tarifa cobrado em transfer\u00eancia: R$ \" + ContaCorrente.getTarifaTransferencia());"
    },
    {
      "index": 583,
      "groundtruth": "conta.imprimeExtrato(conta);",
      "prediction": "}",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": "}"
    },
    {
      "index": 584,
      "groundtruth": "= \"Ag\u00eancia: \" + conta.getAgencia();",
      "prediction": "= \"Ag\u00eancia: \" + conta.getAgencia();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= \"Agencia: \" + conta.getAgencia();"
    },
    {
      "index": 585,
      "groundtruth": "= valorSimulado * ((ContaPoupanca.getTaxaRendimento() / 30) * dias);",
      "prediction": "= valorSimulado * ((ContaPoupanca.getTaxaRendimento() / 30) * dias);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= valorSimulado * (ContaPoupanca.getTaxaDeRendimento() / 100) * dias;"
    },
    {
      "index": 586,
      "groundtruth": "tarifaTotalSaque = conta.getTotalSaques() * ContaCorrente.getTarifaSaque();",
      "prediction": "tarifaTotalSaque = conta.getTotalSaques() * ContaCorrente.getTarifaSaque();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 587,
      "groundtruth": "ag.getNumAgencia());",
      "prediction": "ag.getNumAgencia() + \";\" + ag.getRua() +",
      "es": 0.475,
      "em": false,
      "passed": false,
      "original_prediction": "ag.getNumAgencia() + \";\" + ag.getRua() +"
    },
    {
      "index": 588,
      "groundtruth": ").getNome() + \"_\" + conta.getTitular().getTipoDeUsuario();",
      "prediction": ").getNome();",
      "es": 0.2068965517241379,
      "em": false,
      "passed": false,
      "original_prediction": ").getNome();"
    },
    {
      "index": 589,
      "groundtruth": "queue.getSize()){",
      "prediction": "queue.getSize()){",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "queue.getS"
    },
    {
      "index": 590,
      "groundtruth": "= (Nodo) queue.getHead().getNext();",
      "prediction": "= (Nodo) queue.getHead().getNext();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= (Nodo) queue.getHead();"
    },
    {
      "index": 591,
      "groundtruth": "\"Ag\u00eancia : \" + conta.getAgencia();",
      "prediction": "\"Ag\u00eancia : \" + conta.getAgencia();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "\"Agencia: \" + conta.getAgencia();"
    },
    {
      "index": 592,
      "groundtruth": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteTransferencia\";",
      "prediction": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteTransferencia\";",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 593,
      "groundtruth": "String arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteExtrato\";",
      "prediction": "String arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteExtrato\";",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 594,
      "groundtruth": ".getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteExtrato\";",
      "prediction": ".getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteExtrato\";",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_extratoConta\";"
    },
    {
      "index": 595,
      "groundtruth": "conta.getTipoDeConta();",
      "prediction": "conta.getTipoDeConta();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 596,
      "groundtruth": "\"Titular: \" + conta.getTitular().getNome() + \" | CPF: \" + conta.imprimeCPF(conta.getCpf());",
      "prediction": "\"Agencia: \" + conta.getAgencia().getNumAgencia();",
      "es": 0.3296703296703297,
      "em": false,
      "passed": false,
      "original_prediction": "\"Agencia: \" + conta.getAgencia().getNumAgencia();"
    },
    {
      "index": 597,
      "groundtruth": "conta.getAgencia().getNumAgencia() + \" | Conta: \" + conta.getNumConta();",
      "prediction": "conta.getAgencia();",
      "es": 0.26388888888888884,
      "em": false,
      "passed": false,
      "original_prediction": "conta.getAgencia();"
    },
    {
      "index": 598,
      "groundtruth": "+ conta.imprimeCPF(conta.getCpf());",
      "prediction": "+ conta.getCpf();",
      "es": 0.48571428571428577,
      "em": false,
      "passed": false,
      "original_prediction": "+ conta.getCpf();"
    },
    {
      "index": 599,
      "groundtruth": "+ conta.getAgencia().getNumAgencia() + \" | Conta: \" + conta.getNumConta();",
      "prediction": "+ conta.getAgencia();",
      "es": 0.28378378378378377,
      "em": false,
      "passed": false,
      "original_prediction": "+ conta.getAgencia();"
    },
    {
      "index": 600,
      "groundtruth": "Extrato listaMovimentacao : conta.getlistaDeMovimentacoes()) {",
      "prediction": "Extrato listaMovMovimentacao : co",
      "es": 0.4354838709677419,
      "em": false,
      "passed": false,
      "original_prediction": "Extrato listaMovMovimentacao : co"
    },
    {
      "index": 601,
      "groundtruth": "linha = \"Saldo: R$\" + String.format(\"%.2f\", conta.getSaldo());",
      "prediction": "linha = \"*********************************************\";",
      "es": 0.16129032258064513,
      "em": false,
      "passed": false,
      "original_prediction": "linha = \"*********************************************\";"
    },
    {
      "index": 602,
      "groundtruth": ") + \"_\" + conta.getTitular().getTipoDeUsuario();",
      "prediction": ") + \"_\" + conta.getTitular().getTipoDeUsuario();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 603,
      "groundtruth": "= \"Agencia: \" + conta.getAgencia();",
      "prediction": "= \"Agencia: \" + conta.getAgencia();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= \"Agencia: \" + conta.getAgencia().getNumAgencia();"
    },
    {
      "index": 604,
      "groundtruth": "linha = \"Tipo: \" + conta.getTipoDeConta();",
      "prediction": "linha = \"Tipo: \" + conta.getTipoDeConta();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 605,
      "groundtruth": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteSaldo\";",
      "prediction": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_comprovanteSaldo\";",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 606,
      "groundtruth": "String arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado\n\t\t\t\t+ \"_relatorioRendimentoPoupanca\";",
      "prediction": "String arquivo = conta.getCpf() + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_relatorioRendimentoPoupanca\";",
      "es": 0.9576271186440678,
      "em": true,
      "passed": true
    },
    {
      "index": 607,
      "groundtruth": "\"Saldo: R$\" + String.format(\"%.2f\", (conta.getSaldo()));",
      "prediction": "\"Saldo: R$\" + String.format(\"%.2f\", (conta.getSaldo()));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "\"Saldo: R$\" + String.format(\"%.2f\", conta.getSaldo());"
    },
    {
      "index": 608,
      "groundtruth": "= \"Simula\u00e7\u00e3o para CPF: \" + conta.getCpf();",
      "prediction": "= \"Simula\u00e7\u00e3o para CPF: \" + conta.getCpf();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= \"CPF: \" + conta.getCpf();"
    },
    {
      "index": 609,
      "groundtruth": "\"Ag\u00eancia : \" + conta.getAgencia().getNumAgencia();",
      "prediction": "\"Ag\u00eancia : \" + conta.getAgencia().getNumAgencia();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "\"Agencia: \" + conta.getAgencia();"
    },
    {
      "index": 610,
      "groundtruth": "= \"Total gasto em transa\u00e7\u00f5es = R$\" + conta.getTotalTarifas();",
      "prediction": "= \"Taxa de juros = \" + ContaCorrente.getTaxaJuros();",
      "es": 0.3770491803278688,
      "em": false,
      "passed": false,
      "original_prediction": "= \"Taxa de juros = \" + ContaCorrente.getTaxaJuros();"
    },
    {
      "index": 611,
      "groundtruth": "\"%.2f\", ((ContaCorrente) conta).getTotalTarifas());",
      "prediction": "\"%.2f\", ((ContaCorrente) conta).getTotalTarifas());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "\"%.2f\", conta.getTotalTarifas());"
    },
    {
      "index": 612,
      "groundtruth": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado\n\t\t\t\t+ \"_relatorioRendimentoPoupanca\";",
      "prediction": ") + \"_\" + conta.getAgencia() + \"_\" + hojeFormatado + \"_relatorioRendimentoPoupanca\";",
      "es": 0.9431818181818182,
      "em": true,
      "passed": true
    },
    {
      "index": 613,
      "groundtruth": "linha = \"Taxa para deposito = \" + ContaCorrente.getTarifaDeposito();",
      "prediction": "linha = \"Taxa para deposito = \" + ContaCorrente.getTarifaDeposito();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "linha = \"Taxa para dep\u00f3sito = \" + ContaCorrente.getTarifaDeposito();"
    },
    {
      "index": 614,
      "groundtruth": "= \"Taxa para saque = \" + ContaCorrente.getTarifaSaque();",
      "prediction": "= \"Taxa para saque = \" + ContaCorrente.getTarifaSaque();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 615,
      "groundtruth": "= \"Taxa para tranfer\u00eancia = \" + ContaCorrente.getTarifaTransferencia();",
      "prediction": "= \"Taxa para tranfer\u00eancia = \" + ContaCorrente.getTarifaTransferencia();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= \"Taxa para transfer\u00eancia = \" + ContaCorrente.getTarifaTransferencia();"
    },
    {
      "index": 616,
      "groundtruth": "\"Total de saques realizados = \" + conta.getTotalSaques();",
      "prediction": "\"Total de saques realizados = \" + conta.getTotalSaques();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "\"Total de saques realizados = \" + conta.getTotalSaque();"
    },
    {
      "index": 617,
      "groundtruth": "\"Total de tranfer\u00eancias realizadas = \" + conta.getTotalTransferencias();",
      "prediction": "\"Total de tranfer\u00eancias realizadas = \" + conta.getTotalTransferencias();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "\"Total de transfer\u00eancias realizadas = \" + conta.getTotalTransferencias();"
    },
    {
      "index": 618,
      "groundtruth": "main = CheckHostAPI.performGetRequest(\"https://check-host.net/check-result/\" + URLEncoder.encode(id, StandardCharsets.UTF_8));",
      "prediction": "main = CheckHostAPI.performGetRequest(\"https://check-host.net/check-result/\" + URLEncoder.encode(id, StandardCharsets.UTF_8));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "main = CheckHostAPI.performGetRequest(\"https://check-host.net/check-result/\" + URLEncoder.encode(id, StandardCharsets.UTF_8);"
    },
    {
      "index": 619,
      "groundtruth": "cookieStore.appendCookies(builder).build();",
      "prediction": "builder.headers(\"Cookie\", cookieStore.getCookieString()).build();",
      "es": 0.4,
      "em": false,
      "passed": false,
      "original_prediction": "builder.headers(\"Cookie\", cookieStore.getCookieString()).build();"
    },
    {
      "index": 620,
      "groundtruth": "cookieStore.mergeFromResponse(response);",
      "prediction": "cookieStore.updateCookies(response.headers());",
      "es": 0.5434782608695652,
      "em": false,
      "passed": false,
      "original_prediction": "cookieStore.updateCookies(response.headers());"
    },
    {
      "index": 621,
      "groundtruth": "new FXMLLoader(DownfallUtil.getInstance().getURLDownfallMainFXML());",
      "prediction": "new FXMLLoader(DownfallUtil.getInstance().getURLDownfallMainFXML());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "new FXMLLoader(DownfallUtil.class.getResource(\"downfall.fxml\"));"
    },
    {
      "index": 622,
      "groundtruth": "selectedProperty()  .unbindBidirectional(tag.isFactionalProperty());",
      "prediction": "selectedProperty() .unbindBidirectional(tag.isFactionalProperty());",
      "es": 0.9852941176470589,
      "em": true,
      "passed": true
    },
    {
      "index": 623,
      "groundtruth": ", null, null, defConstructionCost, null, defConstructionTime, operatesImmediately, Configurator.getInstance().getDefBuildingGFXPathname());",
      "prediction": ", \"\", defConstructionCost, defConstructionTime, operatesImmediately);",
      "es": 0.48201438848920863,
      "em": false,
      "passed": false,
      "original_prediction": ", \"\", defConstructionCost, defConstructionTime, operatesImmediately);"
    },
    {
      "index": 624,
      "groundtruth": ").setUserRealm(savegame.getUserRealm());",
      "prediction": ").setUserRealm(savegame.getUserRealm());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 625,
      "groundtruth": ").loadAndApplyRules(savegame.getPathToRules());",
      "prediction": ").loadAndApplyRules(savegame.getPathToRules());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ").setLastRulesPathname(savegame.getPathToRules());"
    },
    {
      "index": 626,
      "groundtruth": "this.pathToGFXProperty.setValue(Configurator.getInstance().getDefBuildingGFXPathname());",
      "prediction": "this.GFX = DownfallUtil.getInstance().loadImage(pathToGFX);",
      "es": 0.36363636363636365,
      "em": false,
      "passed": false,
      "original_prediction": "this.GFX = DownfallUtil.getInstance().loadImage(pathToGFX);"
    },
    {
      "index": 627,
      "groundtruth": "configurator.loadAndApplyRules();",
      "prediction": "configurator.saveConfiguration();",
      "es": 0.48484848484848486,
      "em": false,
      "passed": false,
      "original_prediction": "configurator.saveConfiguration();"
    },
    {
      "index": 628,
      "groundtruth": "configurator.saveRules();",
      "prediction": "e.consume();",
      "es": 0.28,
      "em": false,
      "passed": false,
      "original_prediction": "e.consume();"
    },
    {
      "index": 629,
      "groundtruth": ".getLogger(DownfallUtil.DEFAULT_LOGGER).log(Level.SEVERE, \"No Template found for id = \"+material.getTemplateId());",
      "prediction": ".getLogger(DownfallUtil.DEFAULT_LOGGER).log(Level.SEVERE, \"No Template found for id = \"+material.getTemplateId());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".getLogger(DownfallUtil.DEFAULT_LOGGER).log(Level.WARNING,\"No ID found for template with id = \"+material.getTemplateId());"
    },
    {
      "index": 630,
      "groundtruth": "= Configurator.getInstance();",
      "prediction": "= new Configurator();",
      "es": 0.4482758620689655,
      "em": false,
      "passed": false,
      "original_prediction": "= new Configurator();"
    },
    {
      "index": 631,
      "groundtruth": ", defImportPrice, isExportable, isEphemeral, Configurator.getInstance().getDefMaterialGFXPathname());",
      "prediction": ", defImportPrice, isExportable, isEphemeral);",
      "es": 0.4455445544554455,
      "em": false,
      "passed": false,
      "original_prediction": ", defImportPrice, isExportable, isEphemeral);"
    },
    {
      "index": 632,
      "groundtruth": "DownfallUtil.getInstance().loadImage(item));",
      "prediction": "DownfallUtil.getInstance().loadImage(item));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "DownfallUtil.getImage(item));"
    },
    {
      "index": 633,
      "groundtruth": "()  .bindBidirectional(tag.isFactionalProperty());",
      "prediction": "() .bindBidirectional(tag.isFactionalProperty());",
      "es": 0.98,
      "em": true,
      "passed": true
    },
    {
      "index": 634,
      "groundtruth": ".unbindBidirectional(tag.tagProperty());",
      "prediction": ".unbindBidirectional(tag.tagProperty());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 635,
      "groundtruth": "(relativisor.relativize());",
      "prediction": "if(fileChosen != null)",
      "es": 0.11111111111111116,
      "em": false,
      "passed": false,
      "original_prediction": "if(fileChosen != null)"
    },
    {
      "index": 636,
      "groundtruth": "tag.setTag(\"New Tag\");",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 637,
      "groundtruth": "Configurator.getInstance().getUserRealm();",
      "prediction": "Configurator.getInstance().getUserRealm();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 638,
      "groundtruth": "tag.setId(1);",
      "prediction": "//otherwise set the new in",
      "es": 0.15384615384615385,
      "em": false,
      "passed": false,
      "original_prediction": "//otherwise set the new in"
    },
    {
      "index": 639,
      "groundtruth": ".setText(userRealm.getDiplomaticReputation().toString());",
      "prediction": ".setText(userRealm.getDiplomaticReputation().toString());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".setText(userRealm.getDiplomaticRep().toString());"
    },
    {
      "index": 640,
      "groundtruth": "configurator.loadConfiguration();",
      "prediction": "configurator.loadConfiguration();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 641,
      "groundtruth": ".setValue(template.getId());",
      "prediction": ".setValue(template.getId());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 642,
      "groundtruth": "= FXCollections.observableList(Configurator.getInstance().getRules().getActorTags());",
      "prediction": "= Configurator.getTags();",
      "es": 0.2941176470588235,
      "em": false,
      "passed": false,
      "original_prediction": "= Configurator.getTags();"
    },
    {
      "index": 643,
      "groundtruth": "legitimacyLabel         .setText(userRealm.getLegitimacy().toString());",
      "prediction": "stabilityPerMonthLabel  .setText(userRealm.getStabilityPerMonth().toString());",
      "es": 0.5384615384615384,
      "em": false,
      "passed": false,
      "original_prediction": "stabilityPerMonthLabel  .setText(userRealm.getStabilityPerMonth().toString());"
    },
    {
      "index": 644,
      "groundtruth": ".pathToGFXProperty.setValue(Configurator.getInstance().getDefMaterialGFXPathname());",
      "prediction": ";",
      "es": 0.011904761904761862,
      "em": false,
      "passed": false,
      "original_prediction": ";"
    },
    {
      "index": 645,
      "groundtruth": "setLegitimacy(realm.getLegitimacy());",
      "prediction": "setPower(realm.getPower());",
      "es": 0.45945945945945943,
      "em": false,
      "passed": false,
      "original_prediction": "setPower(realm.getPower());"
    },
    {
      "index": 646,
      "groundtruth": "(s -> s.gameVersion().equals(gameVersion)).toList();",
      "prediction": "(s -> s.gameVersion().equals(gameVersion)).toList();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 647,
      "groundtruth": "BCVersion.fromString(versionIdentifier);",
      "prediction": "BCVersion.fromString(versionIdentifier);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "BCVersion.fromIdentifier(versionIdentifier);"
    },
    {
      "index": 648,
      "groundtruth": "joinServerInterface.sendAuthRequest(sha1(server.getBytes()));",
      "prediction": "if (joinServerInterface != null)",
      "es": 0.2786885245901639,
      "em": false,
      "passed": false,
      "original_prediction": "if (joinServerInterface != null)"
    },
    {
      "index": 649,
      "groundtruth": "userRealm.setPowerProjection(realm.getPowerProjection());",
      "prediction": "userRealm.setPowerProjection(realm.getPowerProjection());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "userRealm.setPower(realm.getPower());"
    },
    {
      "index": 650,
      "groundtruth": "loadAndApplyRules(configuration.getLastRulesPathname());",
      "prediction": "loadAndApplyRules(DEFAULT_RULES_PATH);",
      "es": 0.3928571428571429,
      "em": false,
      "passed": false,
      "original_prediction": "loadAndApplyRules(DEFAULT_RULES_PATH);"
    },
    {
      "index": 651,
      "groundtruth": ".setRulerPathToGFX(realm.getRulerPathToGFX());",
      "prediction": ".setRulerPathToGFX(realm.getRulerPathToGFX());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".setRealmPathToGFX(realmalm.getRealmPathToGFX());"
    },
    {
      "index": 652,
      "groundtruth": ".textProperty()        .bindBidirectional(realm.diplomaticReputationProperty(),    new NumberStringConverter());",
      "prediction": ".textProperty()        .bindBidirectional(realm.diplomaticReputationProperty(),    new NumberStringConverter());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".textProperty()      .bindBidirectional(realm.diplomaticReputationProperty(),new NumberStringConverter());"
    },
    {
      "index": 653,
      "groundtruth": "textProperty()        .bindBidirectional(realm.prestigeProperty(),                new NumberStringConverter());",
      "prediction": "textProperty()      .bindBidirectional(realm.prestigeProperty(),              new NumberStringConverter());",
      "es": 0.963963963963964,
      "em": true,
      "passed": true
    },
    {
      "index": 654,
      "groundtruth": "prompter.findCommand(commandText, commands);",
      "prediction": "prompter.findCommand(commandText, commands);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "prompter.parseCommand(commandText);"
    },
    {
      "index": 655,
      "groundtruth": ", prompter.getSystemPrompt(commands));",
      "prediction": ", \"You are a helpful assistant.\");",
      "es": 0.26315789473684215,
      "em": false,
      "passed": false,
      "original_prediction": ", \"You are a helpful assistant.\");"
    },
    {
      "index": 656,
      "groundtruth": "textProperty()       .bindBidirectional(materialTemplate.pathToGFXProperty());",
      "prediction": "textProperty()       .bindBidirectional(materialTemplate.pathToGFXProperty());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 657,
      "groundtruth": "return DEFAULT_SYSTEM_PROMPT.replaceAll(PREFIX_TEMPLATE, delimiter.getPrefix())//\n\t\t\t\t.replaceAll(POSTFIX_TEMPLATE, delimiter.getPostfix());",
      "prediction": "return DEFAULT_SYSTEM_PROMPT.replaceAll(PREFIX_TEMPLATE, delimiter.getPrefix())//\n\t\t\t\t.replaceAll(POSTFIX_TEMPLATE, delimiter.getPostfix());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "return DEFAULT_SYSTEM_PROMPT.replace(PREFIX_TEMPLATE, delimiter.getPrefix()).replace(Postfix_TEMPLATE, delimiter.getPostfix());"
    },
    {
      "index": 658,
      "groundtruth": ".textProperty()        .bindBidirectional(realm.rulerPathToGFXProperty());",
      "prediction": ".textProperty()        .bindBidirectional(realm.rulerPathToGFXProperty());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 659,
      "groundtruth": "return commandWrapper.unwrapCommand(commandString);",
      "prediction": "return commandString.replac",
      "es": 0.37254901960784315,
      "em": false,
      "passed": false,
      "original_prediction": "return commandString.replac"
    },
    {
      "index": 660,
      "groundtruth": ".textProperty()        .bindBidirectional(realm.realmPathToGFXProperty());",
      "prediction": ".textProperty()        .bindBidirectional(realm.realmPathToGFXProperty());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".textProperty()        .bindBidirectional(realm.realmPathToGfxProperty());"
    },
    {
      "index": 661,
      "groundtruth": "BCServerListRequest.send().whenComplete((bcServerList, throwable) -> {",
      "prediction": "new BCServerListRequest(BetaCraftHandler.SERVER_LIST)",
      "es": 0.30000000000000004,
      "em": false,
      "passed": false,
      "original_prediction": "new BCServerListRequest(BetaCraftHandler.SERVER_LIST)"
    },
    {
      "index": 662,
      "groundtruth": "authenticationData = new CCAuthenticationData(account.username(), account.password(), previousResponse.token, loginCode);",
      "prediction": "authenticationData = new CCAuthenticationData(account.username(), account.password(), previousResponse.token, loginCode);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "authenticationData = new CCAuthenticationData(account, previousResponse, loginCode);"
    },
    {
      "index": 663,
      "groundtruth": "<>(\"login_code\", authenticationData.loginCode())\n            );",
      "prediction": "<>(\"login_code\", authenticationData.loginCode())\n            );",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "<>(\"loginCode\", authenticationData.loginCode())\n        );"
    },
    {
      "index": 664,
      "groundtruth": ", account.password(), previousResponse.token, loginCode);",
      "prediction": ", account.password(), previousResponse.token, loginCode);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ", account.password(), previousResponse.token(), loginCode);"
    },
    {
      "index": 665,
      "groundtruth": "StatusBarHelper.setStatusBarLightMode(this);",
      "prediction": "StatusBarHelper.setStatusBarLightMode(this);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 666,
      "groundtruth": "StatusBarHelper.translucent(this);",
      "prediction": "titleBar.setTitleGravity(TitleBar.TitleGravity.CENTER);",
      "es": 0.23636363636363633,
      "em": false,
      "passed": false,
      "original_prediction": "titleBar.setTitleGravity(TitleBar.TitleGravity.CENTER);"
    },
    {
      "index": 667,
      "groundtruth": "d(\"TitleBar\",\"onCreate-getStatusbarHeight\"+StatusBarHelper.getStatusbarHeight(this));",
      "prediction": "e(\"getLocationOnScreen\",view.getTop()+\"\");",
      "es": 0.21176470588235297,
      "em": false,
      "passed": false,
      "original_prediction": "e(\"getLocationOnScreen\",view.getTop()+\"\");"
    },
    {
      "index": 668,
      "groundtruth": "product0 = productRepository.findById(id);",
      "prediction": "product0 = productRepository.findById(id);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 669,
      "groundtruth": "user0 = userRepository.findByIdentifier(identifier);",
      "prediction": "user0 = userRepository.findByIdentifier(identifier);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 670,
      "groundtruth": "== null || !Objects.equals(user0.getPassword(), senha)) {",
      "prediction": "== null) {}",
      "es": 0.1578947368421053,
      "em": false,
      "passed": false,
      "original_prediction": "== null) {"
    },
    {
      "index": 671,
      "groundtruth": "user0 = userRepository.findByEmail(email);",
      "prediction": "user0 = userRepository.findByEmail(email);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 672,
      "groundtruth": ".OK).body(userRepository.findByIdentifier(identifier));",
      "prediction": ".OK).body(user0);",
      "es": 0.2909090909090909,
      "em": false,
      "passed": false,
      "original_prediction": ".OK).body(user0);"
    },
    {
      "index": 673,
      "groundtruth": "(plugin.getParticleManager(), lobbyParticles, player);",
      "prediction": "(plugin, player, lobbyParticles);",
      "es": 0.537037037037037,
      "em": false,
      "passed": false,
      "original_prediction": "(plugin, player, lobbyParticles);"
    },
    {
      "index": 674,
      "groundtruth": "DiscordVerifier.getInstance().getConfig().getBoolean(\"code-numbers-only\")) {",
      "prediction": "length == 0) {}",
      "es": 0.07894736842105265,
      "em": false,
      "passed": false,
      "original_prediction": "length == 0) {"
    },
    {
      "index": 675,
      "groundtruth": "DiscordVerifier.getInstance().getLogger().severe(\"Failed to save player \" + uuid + \" to database\");",
      "prediction": "DiscordVerifier.getInstance().getLogger().severe(\"Failed to save player \" + uuid + \" to database\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 676,
      "groundtruth": "if (DiscordVerifier.getDiscordCodes().containsValue(sb.toString())) {",
      "prediction": "if (DiscordVerifier.getDiscordCodes().containsValue(sb.toString())) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "if (DiscordVerifier.getDiscordCodes().containsValue(sb.toString()))"
    },
    {
      "index": 677,
      "groundtruth": "Connection connection = DiscordVerifier.getDatabaseConnection();",
      "prediction": "Connection connection = DiscordVerifier.getDatabaseConnection();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 678,
      "groundtruth": "lobbyParticles.getParticle(), playerLocation, lobbyParticles.getCount());",
      "prediction": "particleManager.getParticle(), playerLocation, 0, 0, 0, 0, 0);",
      "es": 0.4794520547945206,
      "em": false,
      "passed": false,
      "original_prediction": "particleManager.getParticle(), playerLocation, 0, 0, 0, 0, 0);"
    },
    {
      "index": 679,
      "groundtruth": "sendMessage(CustomColor.translate(\"&7Invalid usage.. Try &e/gmp (player)&7.\"));",
      "prediction": "sendMessage(CustomColor.translate(\"&7Invalid usage.. Try &e/gmp (player)&7.\"));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "sendMessage(CustomColor.translate(\"&7Usage: /gmp [player]\"));"
    },
    {
      "index": 680,
      "groundtruth": "sender.sendMessage(CustomColor.translate(\"&a\" + args[0] + \" &7is &cnot &7online.\"));",
      "prediction": "sender.sendMessage(CustomColor.translate(\"&a\" + args[0] + \" &7is &cnot &7online.\"));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "sender.sendMessage(CustomColor.translate(\"&cPlayer not found!\"));"
    },
    {
      "index": 681,
      "groundtruth": "playerLocation, lobbyParticles.getCount());",
      "prediction": "playerLocation, 1, 0.05, 0.05, 0.05, 0.05);",
      "es": 0.41860465116279066,
      "em": false,
      "passed": false,
      "original_prediction": "playerLocation, 1, 0.05, 0.05, 0.05, 0.05);"
    },
    {
      "index": 682,
      "groundtruth": "UUID, Integer> idsProducts = cartModel.getIdsProducts();",
      "prediction": "UUID, Integer> idsProducts = cartModel.getIdsProducts();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "UUID, Integer> idsProducts = cartRecordDto.getIdsProducts();"
    },
    {
      "index": 683,
      "groundtruth": "= userRepository.findByIdentifier(identifier);",
      "prediction": "= new UserModel();",
      "es": 0.21739130434782605,
      "em": false,
      "passed": false,
      "original_prediction": "= new UserModel();"
    },
    {
      "index": 684,
      "groundtruth": "> list = userRepository.findByType(type);",
      "prediction": "> list = userRepository.findByType(type);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 685,
      "groundtruth": "asList(manager.getItemsAsArray()), new ArrayList<>());",
      "prediction": "asList(manager.getItemsAsArray()), new ArrayList<>());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "asList(manager.getItemNames()), new ArrayList<>());"
    },
    {
      "index": 686,
      "groundtruth": "size = plugin.getParticleManager().getParticlesMapSize()+1;",
      "prediction": "size = 9;",
      "es": 0.13559322033898302,
      "em": false,
      "passed": false,
      "original_prediction": "size = 9;"
    },
    {
      "index": 687,
      "groundtruth": ": mainInstance.getYmlDataFile().getConfigurationSection(\"\").getKeys(false)){",
      "prediction": ": mainInstance.getYmlDataFile().getConfigurationSection(\"\").getKeys(false)){",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ": mainInstance.getYmlDataFile().getKeys(false)"
    },
    {
      "index": 688,
      "groundtruth": ".delete(userRepository.findByIdentifier(identifier));",
      "prediction": ".deleteById(identifier);",
      "es": 0.4528301886792453,
      "em": false,
      "passed": false,
      "original_prediction": ".deleteById(identifier);"
    },
    {
      "index": 689,
      "groundtruth": ".get().addProduct(idProduct, 1);",
      "prediction": ".get().addProduct(idProduct, 1);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".get().setIdsProducts(products);"
    },
    {
      "index": 690,
      "groundtruth": "DiscordVerifier.getDiscordCodes().get(player.getUniqueId()).getRight();",
      "prediction": "DiscordVerifier.getDiscordCodes().get(player.getUniqueId()).getRight();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 691,
      "groundtruth": "(DiscordVerifier.getInstance().getConfig().getBoolean(\"should-minecraft-chat-copyable\")) {",
      "prediction": "(DiscordVerifier.getInstance().getConfig().getBoolean(\"should-minecraft-chat-copyable\")) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(DiscordVerifier.getInstance().getConfig().getBoolean(\"messages.code-suggest\"))"
    },
    {
      "index": 692,
      "groundtruth": "mainInstance.getYmlDataFile().save(mainInstance.getDatafile());",
      "prediction": "mainInstance.getYmlDataFile().save(mainInstance.getDatafile());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "mainInstance.getYmlDataFile().save(mainInstance.getDataFolder() + \"/customItems.yml\");"
    },
    {
      "index": 693,
      "groundtruth": "manager.saveFile();",
      "prediction": "player.getInventory().setItemInMainHan",
      "es": 0.1842105263157895,
      "em": false,
      "passed": false,
      "original_prediction": "player.getInventory().setItemInMainHan"
    },
    {
      "index": 694,
      "groundtruth": ".setDisplayName(Color.translate(name));",
      "prediction": ".setDisplayName(Color.translate(name));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 695,
      "groundtruth": ".requireNonNull(e.getGuild()).getRoleById(DiscordVerifier.getInstance().getConfig().getString(\"discord.role-given\"));",
      "prediction": ".requireNonNull(e.getGuild()).getRoleById(DiscordVerifier.getInstance().getConfig().getString(\"discord.role-given\"));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".requireNonNull(e.getGuild().getRoleById(DiscordVerifier.getInstance().getConfig().getString(\"discord.role-given\")));"
    },
    {
      "index": 696,
      "groundtruth": ".save(mainInstance.getDatafile());",
      "prediction": ".save(mainInstance.getDatafile());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".save(mainInstance.getYmlDataFile());"
    },
    {
      "index": 697,
      "groundtruth": "(DiscordVerifier.getInstance().getConfig().getString(\"messages.verification-successful-discord\")).queue();",
      "prediction": "(DiscordVerifier.getInstance().getConfig().getString(\"messages.verification-successful-discord\")).queue();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(DiscordVerifier.getInstance().getConfig().getString(\"messages.verification-successful\")).queue();"
    },
    {
      "index": 698,
      "groundtruth": ".teleport(main.getWarpManager().getWarp(args[0]));",
      "prediction": ".teleport(new Location(Bukkit.getWorld(warps.getString(args[0] + \".world\"))))",
      "es": 0.4415584415584416,
      "em": false,
      "passed": false,
      "original_prediction": ".teleport(new Location(Bukkit.getWorld(warps.getString(args[0] + \".world\"))"
    },
    {
      "index": 699,
      "groundtruth": "<= configManager.getTalkRange()) {",
      "prediction": "<= configManager.getTalkRange()) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "<= configManager.ge"
    },
    {
      "index": 700,
      "groundtruth": ".cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.verification-successful-mc\")));",
      "prediction": ".getMessage(\"discord.verification-successful\"));",
      "es": 0.4020618556701031,
      "em": false,
      "passed": false,
      "original_prediction": ".getMessage(\"discord.verification-successful\"));"
    },
    {
      "index": 701,
      "groundtruth": "DiscordVerifier.getDiscordCodes().forEach((uuid, data) -> {",
      "prediction": "DiscordVerifier.getDiscordCodes().forEach((uuid, data) -> {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "DiscordVerifierAPI.getCode(code, (data) -> {"
    },
    {
      "index": 702,
      "groundtruth": "String code = DiscordVerifier.getDiscordCodes().get(player.getUniqueId()).getLeft();",
      "prediction": "String code = DiscordVerifier.getDiscordCodes().get(player.getUniqueId()).getLeft();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 703,
      "groundtruth": "main.getWarpManager().setWarp(args[0], loc);",
      "prediction": "warps.set(args[0] + \".world\", loc.getWorld().getName());",
      "es": 0.2678571428571429,
      "em": false,
      "passed": false,
      "original_prediction": "warps.set(args[0] + \".world\", loc.getWorld().getName());"
    },
    {
      "index": 704,
      "groundtruth": "cc(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-generated\"))\n                .replace(\"{",
      "prediction": "getConfig().getString(\"message.code\");",
      "es": 0.3363636363636363,
      "em": false,
      "passed": false,
      "original_prediction": "getConfig().getString(\"message.code\");"
    },
    {
      "index": 705,
      "groundtruth": "if (DiscordVerifier.getInstance().getConfig().getBoolean(\"discord.sync-name\")){",
      "prediction": "if (DiscordVerifier.getInstance().getConfig().getBoolean(\"discord.sync-name\")){",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "if (DiscordVerifier.getInstance().getConfig().getBoolean(\"Minecraft.Change-Name\"))"
    },
    {
      "index": 706,
      "groundtruth": "return DiscordVerifier.getDiscordCodes().get(player.getUniqueId()) != null;",
      "prediction": "return DiscordVerifier.getDiscordCodes().get(player.getUniqueId()) != null;",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "return DiscordVerifier.getDiscordCodes().containsKey(player.getUniqueId());"
    },
    {
      "index": 707,
      "groundtruth": ", Color.translate(\"&6Particle Menu\"));",
      "prediction": ", \"Particles\");",
      "es": 0.368421052631579,
      "em": false,
      "passed": false,
      "original_prediction": ", \"Particles\");"
    },
    {
      "index": 708,
      "groundtruth": "().editOriginal(DiscordVerifier.getInstance().getConfig().getString(\"messages.code-invalid\")).queue();",
      "prediction": "().editOriginal(\"Invalid code!\").queue();",
      "es": 0.3431372549019608,
      "em": false,
      "passed": false,
      "original_prediction": "().editOriginal(\"Invalid code!\").queue();"
    },
    {
      "index": 709,
      "groundtruth": "DiscordVerifier.getDiscordCodes().remove(uuid);",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 710,
      "groundtruth": "List<String> commands = DiscordVerifier.getInstance().getConfig().getStringList(\"Minecraft.Command\");",
      "prediction": "List<String> commands = DiscordVerifier.getInstance().getConfig().getStringList(\"Minecraft.Command\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "List<String> commands = DiscordVerifier.getInstance().getConfig().getStringList(\"discord.commands\");"
    },
    {
      "index": 711,
      "groundtruth": "DiscordVerifier.getInstance().getConfig().getBoolean(\"should-code-be-case-sensitive\");",
      "prediction": "DiscordVerifier.getInstance().getConfig().getBoolean(\"should-code-be-case-sensitive\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "DiscordVerifier.getInstance().getConfig().getBoolean(\"discord.case-sensitive\");"
    },
    {
      "index": 712,
      "groundtruth": "Bukkit.getScheduler().runTask(DiscordVerifier.getInstance(), () -> {",
      "prediction": "Bukkit.getScheduler().runTaskAsynchr",
      "es": 0.47058823529411764,
      "em": false,
      "passed": false,
      "original_prediction": "Bukkit.getScheduler().runTaskAsynchr"
    },
    {
      "index": 713,
      "groundtruth": "Player player = DiscordVerifier.getInstance().getServer().getPlayer(uuid);",
      "prediction": "Player player = Bukkit.getPlayer(uuid);",
      "es": 0.472972972972973,
      "em": false,
      "passed": false,
      "original_prediction": "Player player = Bukkit.getPlayer(uuid);"
    },
    {
      "index": 714,
      "groundtruth": "megaphoneMeta.setDisplayName(CustomColor.translate(\"&a&lMegaphone\"));",
      "prediction": "megaphoneMeta.setDisplayName(CustomColor.translate(\"&a&lMegaphone\"));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "megaphoneMeta.setDisplayName(CustomColor.translate(\"&eMegaphone\"));"
    },
    {
      "index": 715,
      "groundtruth": "Role removed = e.getGuild().getRoleById(DiscordVerifier.getInstance().getConfig().getString(\"discord.role-removed\"));",
      "prediction": "Role removed = e.getGuild().getRoleById(DiscordVerifier.getInstance().getConfig().getString(\"discord.role-removed\"));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "Role removed = Objects.requireNonNull(e.getGuild()).getRoleById(DiscordVerifier.getInstance().getConfig().getString(\"discord.role-removed\"));"
    },
    {
      "index": 716,
      "groundtruth": "+ getConfigManager().getMegaphoneRange()\n                            + \" &7blocks!\")));",
      "prediction": "e &7meters\")));",
      "es": 0.11494252873563215,
      "em": false,
      "passed": false,
      "original_prediction": "e &7meters\")));"
    },
    {
      "index": 717,
      "groundtruth": "if (newCart.get().getIdsProducts().isEmpty()){",
      "prediction": "}",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": "}"
    },
    {
      "index": 718,
      "groundtruth": ").getAmount() - value);",
      "prediction": ").getAmount() - value);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 719,
      "groundtruth": "Optional<CartModel> cart = cartRepository.findByIdClient(idClient);",
      "prediction": "Optional<CartModel> cart = cartRepository.findByIdClient(idClient);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 720,
      "groundtruth": "saleModel.addProduct(idProduct, quantidade);",
      "prediction": "ProductModel product = productRepository.findById(idProduct).get();",
      "es": 0.31343283582089554,
      "em": false,
      "passed": false,
      "original_prediction": "ProductModel product = productRepository.findById(idProduct).get();"
    },
    {
      "index": 721,
      "groundtruth": "saleModel.getIdClient());",
      "prediction": "saleModel.getIdClient());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "saleRecordDto.getIdClient());"
    },
    {
      "index": 722,
      "groundtruth": "saleModel.setDate(java.sql.Date.valueOf(date));",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 723,
      "groundtruth": "productRepository.findById(idProduct).get().getValue();",
      "prediction": "productRepository.findById(idProduct).get().getValue();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 724,
      "groundtruth": ": thoughts.getPlan().split(\"\\n\")) {",
      "prediction": ": thoughts.getPlan().split(\"\\n\")) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ": thoughts.getPlan()"
    },
    {
      "index": 725,
      "groundtruth": "= agent.chat(\"GENERATE NEXT COMMAND JSON\", true);",
      "prediction": "= agent.chat(null, true);",
      "es": 0.4285714285714286,
      "em": false,
      "passed": false,
      "original_prediction": "= agent.chat(null, true);"
    },
    {
      "index": 726,
      "groundtruth": "agent.chat(feedback, false);",
      "prediction": "agent.chat(\"GENERATE NEXT COMMAND JSON\", true);",
      "es": 0.3191489361702128,
      "em": false,
      "passed": false,
      "original_prediction": "agent.chat(\"GENERATE NEXT COMMAND JSON\", true);"
    },
    {
      "index": 727,
      "groundtruth": "+= product.get().getValue() * quantidade;",
      "prediction": "+= product.get().getValue() * quantidade;",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 728,
      "groundtruth": "saleModel.setIdSeller(idSeller);",
      "prediction": "if (!idSeller.equals(saleModel.getIdSeller()))",
      "es": 0.34782608695652173,
      "em": false,
      "passed": false,
      "original_prediction": "if (!idSeller.equals(saleModel.getIdSeller()))"
    },
    {
      "index": 729,
      "groundtruth": "<String> relevantMemory = memory.get(10);",
      "prediction": "<String> relevantMemory = memory.get(10);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "<String> relevantMemory = memory.getRelevantMemory(userInput);"
    },
    {
      "index": 730,
      "groundtruth": "(HttpStatus.OK).body(saleRepository.findByIdSeller(id));",
      "prediction": "(HttpStatus.OK).body(saleRepository.findByIdSeller(id));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 731,
      "groundtruth": "(thoughts.hasCriticism()) {",
      "prediction": "(thoughts.hasCriticism()) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(thoughts.hasCriticism())"
    },
    {
      "index": 732,
      "groundtruth": "thoughts.hasSpeak()) {",
      "prediction": "thoughts.hasSpeak()) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "thoughts.hasS"
    },
    {
      "index": 733,
      "groundtruth": "out.println(agent.getName() + \": (voice) \" + thoughts.getSpeak());",
      "prediction": "out.println(agent.getName() + \": (voice) \" + thoughts.getSpeak());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "out.println(agent.getName() + \": Speak: \" + thoughts.getSpeak());"
    },
    {
      "index": 734,
      "groundtruth": "resp.hasCommand()) {",
      "prediction": "resp.hasCommand()) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "resp.hasComm"
    },
    {
      "index": 735,
      "groundtruth": "return openAIModel.chat(prompts);",
      "prediction": "String response = openAIModel.chat(prompts, maxTokens);",
      "es": 0.5454545454545454,
      "em": false,
      "passed": false,
      "original_prediction": "String response = openAIModel.chat(prompts, maxTokens);"
    },
    {
      "index": 736,
      "groundtruth": ".add(PromptUtils.buildPrompts(role, content));",
      "prediction": ".add(Map.of(\"role\", role, \"content\", content));",
      "es": 0.4042553191489362,
      "em": false,
      "passed": false,
      "original_prediction": ".add(Map.of(\"role\", role, \"content\", content));"
    },
    {
      "index": 737,
      "groundtruth": "consumerAccessor.setPickupDelay(Math.max(consumerAccessor.getPickupDelay(), supplierAccessor.getPickupDelay()));",
      "prediction": "var consumerExtraItemCount = getExtraItemCount(consumer);",
      "es": 0.1875,
      "em": false,
      "passed": false,
      "original_prediction": "var consumerExtraItemCount = getExtraItemCount(consumer);"
    },
    {
      "index": 738,
      "groundtruth": "return chat(seedInput.getContent(), false);",
      "prediction": "prompt.add(seedInput.getPrompt());",
      "es": 0.4418604651162791,
      "em": false,
      "passed": false,
      "original_prediction": "prompt.add(seedInput.getPrompt());"
    },
    {
      "index": 739,
      "groundtruth": "var age = accessor.getAge();",
      "prediction": "var age = accessor.getAge();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 740,
      "groundtruth": "|| Staaaaaaaaaaaack.getItemBlackList().contains(itemStack.getItem());",
      "prediction": "|| itemStack.is(Staaaaaaaaaaaack.BLACK_LIST_TAG)",
      "es": 0.21739130434782605,
      "em": false,
      "passed": false,
      "original_prediction": "|| itemStack.is(Staaaaaaaaaaaack.BLACK_LIST_TAG)"
    },
    {
      "index": 741,
      "groundtruth": "openAIModel.getTokenLimit();",
      "prediction": "openAIModel.getTokenLimit();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "openAIModel.getTokenLimit() - tokenCount;"
    },
    {
      "index": 742,
      "groundtruth": ".summarizer.summarize(extractedText, question);",
      "prediction": ".summarizer.summarize(extractedText, question);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".summarizer.summarize(extractededText, 100);"
    },
    {
      "index": 743,
      "groundtruth": "min(consumerAccessor.getAge(), supplierAccessor.getAge()));",
      "prediction": "min(consumerAccessor.getAge(), supplierAccessor.getAge()));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "max(consumerAccessor.getAge(), supplierAccessor.getAge()));"
    },
    {
      "index": 744,
      "groundtruth": "(Math.max(consumerAccessor.getPickupDelay(), supplierAccessor.getPickupDelay()));",
      "prediction": "(32767);",
      "es": 0.03703703703703709,
      "em": false,
      "passed": false,
      "original_prediction": "(32767);"
    },
    {
      "index": 745,
      "groundtruth": "= openAIModel.countTokens(updatedPrompt);",
      "prediction": "= openAIModel.countTokens(updatedPrompt);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 746,
      "groundtruth": "= openAIModel.chat(fullPrompt, tokenLimit - tokenCount);",
      "prediction": "= openAIModel.chat(fullPrompt, tokenLimit - tokenCount);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 747,
      "groundtruth": ".memory.add(humanFeedbackPrompt.getContent());",
      "prediction": ".memory.add(humanFeedbackPrompt.getContent());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 748,
      "groundtruth": "int tokenLimit = openAIModel.getTokenLimit() - 1000;",
      "prediction": "// Ensure the prompt is not empty",
      "es": 0.17307692307692313,
      "em": false,
      "passed": false,
      "original_prediction": "// Ensure the prompt is not empty"
    },
    {
      "index": 749,
      "groundtruth": "return defaultResponsePrompt.getContent();",
      "prediction": "return defaultResponsePrompt.getContent();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 750,
      "groundtruth": "(currentTimePrompt.getPrompt());",
      "prediction": "(prompt.subList(1, prompt.size()));",
      "es": 0.2857142857142857,
      "em": false,
      "passed": false,
      "original_prediction": "(prompt.subList(1, prompt.size()));"
    },
    {
      "index": 751,
      "groundtruth": "Prompt.getDefaultResponse();",
      "prediction": "\"Respond in the",
      "es": 0.1071428571428571,
      "em": false,
      "passed": false,
      "original_prediction": "\"Respond in the"
    },
    {
      "index": 752,
      "groundtruth": "return seeMore.getSchedulerHook().runTaskDelayed(() -> updateDistance(player, 0, attempts, distanceMap, taskMap, distanceConsumer), delay);",
      "prediction": "return seeMore.getSchedulerHook().runTaskDelayed(() -> updateDistance(player, 0, attempts, distanceMap, taskMap, distanceConsumer), delay);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "task = seeMore.getSchedulerHook().runTaskLater(() -> updateDistance(player, 0, attempts + 1, distanceMap, taskMap, distanceConsumer), delay);"
    },
    {
      "index": 753,
      "groundtruth": "viewDistanceController.updateAllPlayers();",
      "prediction": "viewDistanceController.updateAllPlayers();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "viewDistanceController.updateViewDistance();"
    },
    {
      "index": 754,
      "groundtruth": "updateTask = seeMore.getSchedulerHook().runEntityTaskAsap(() -> {",
      "prediction": "updateTask = seeMore.getSchedulerH",
      "es": 0.523076923076923,
      "em": false,
      "passed": false,
      "original_prediction": "updateTask = seeMore.getSchedulerH"
    },
    {
      "index": 755,
      "groundtruth": "seeMore.getSeeMoreConfig().updateDelay.get();",
      "prediction": "Math.max(0, 20 - (player.getViewDistance() - targetViewDistanceMap.get(player.getUniqueId())))",
      "es": 0.23404255319148937,
      "em": false,
      "passed": false,
      "original_prediction": "Math.max(0, 20 - (player.getViewDistance() - targetViewDistanceMap.get(player.getUniqueId("
    },
    {
      "index": 756,
      "groundtruth": "parsedReport.getAverages().get(test.getTestName()));",
      "prediction": "parsedReport.getAverages().get(test.getTestName()));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "parsedReport.getAverages().get(test.getTestName())"
    },
    {
      "index": 757,
      "groundtruth": ".out.println(\"Successfully completed \" + test.getTestName() + \" in \" + timeElapsed + \" ms!\");",
      "prediction": ".out.println(\"Tested \" + test.getTestName() + \" in \" + NumberFormat.getInstance().format(isElapsed) + \"ms\");",
      "es": 0.5,
      "em": false,
      "passed": false,
      "original_prediction": ".out.println(\"Tested \" + test.getTestName() + \" in \" + NumberFormat.getInstance().format(isElapsed) + \"ms\");"
    },
    {
      "index": 758,
      "groundtruth": "\"results for \" + test.getTestName() + \"!\");",
      "prediction": "+ \" results! Please report this issue to the developer.\");",
      "es": 0.3275862068965517,
      "em": false,
      "passed": false,
      "original_prediction": "+ \" results! Please report this issue to the developer.\");"
    },
    {
      "index": 759,
      "groundtruth": "toJson(report.getResults()).getBytes());",
      "prediction": "toJson(report.getResults()).getBytes());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "toJson(report).getBytes());"
    },
    {
      "index": 760,
      "groundtruth": "executor.awaitTermination(30, TimeUnit.SECONDS);",
      "prediction": "executor.awaitTermination(30, TimeUnit.SECONDS);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "executor.awaitTermination(10, TimeUnit.SECONDS);"
    },
    {
      "index": 761,
      "groundtruth": "executor.shutdown();",
      "prediction": "executor.shutdown();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "executor.shutdownNow();"
    },
    {
      "index": 762,
      "groundtruth": ".put(identity.getId(), entry.memberId());",
      "prediction": ".put(identity.getId(), entry.memberId());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 763,
      "groundtruth": "properties.getConsumerConfig();",
      "prediction": "new ConsumerConfig(properties);",
      "es": 0.25806451612903225,
      "em": false,
      "passed": false,
      "original_prediction": "new ConsumerConfig(properties);"
    },
    {
      "index": 764,
      "groundtruth": "().getId());",
      "prediction": "());",
      "es": 0.33333333333333337,
      "em": false,
      "passed": false,
      "original_prediction": "());"
    },
    {
      "index": 765,
      "groundtruth": "identity.getId() + \"-\" + BD_CLIENT_ID_SEQUENCE.getAndIncrement();",
      "prediction": "BD_CLIENT_ID_sequence.incrementAndGet();",
      "es": 0.29230769230769227,
      "em": false,
      "passed": false,
      "original_prediction": "BD_CLIENT_ID_sequence.incrementAndGet();"
    },
    {
      "index": 766,
      "groundtruth": "[j].spawn();",
      "prediction": "[j].spawn();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 767,
      "groundtruth": "if (!particleSpawnEvent.isCancelled()) {",
      "prediction": "if (!particleSpawnEvent.isCancelled()) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "if (!particleSpawnEvent.isCancelled())"
    },
    {
      "index": 768,
      "groundtruth": "[j].clone();",
      "prediction": "[j].clone();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 769,
      "groundtruth": "ToyController.instance().setScalarLevel(intensity);",
      "prediction": "LOGGER.debug(\"Intensity {}\", intensity);",
      "es": 0.3137254901960784,
      "em": false,
      "passed": false,
      "original_prediction": "LOGGER.debug(\"Intensity {}\", intensity);"
    },
    {
      "index": 770,
      "groundtruth": "ToyController.instance().setScalarLevel(0);",
      "prediction": "for (AbstractPointsCounter abstractPointsCounter : listPointsCounter)",
      "es": 0.18840579710144922,
      "em": false,
      "passed": false,
      "original_prediction": "for (AbstractPointsCounter abstractPointsCounter : listPointsCounter)"
    },
    {
      "index": 771,
      "groundtruth": "masochistPointsCounter.onHurt(amount);",
      "prediction": "}",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": "}"
    },
    {
      "index": 772,
      "groundtruth": "abstractPointsCounter.getInstantPoints(), instanPoints);",
      "prediction": "abstractPointsCounter.getInstantPoints(), instanPoints);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 773,
      "groundtruth": "skipDownTick += abstractPointsCounter.getSkipDownTicks();",
      "prediction": "skipDownTick += abstractPointsCounter.getSkipDownTicks();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "skipDownTick = Math.max(skipDownTick, abstractPointsCounter.getSkipDownTicks());"
    },
    {
      "index": 774,
      "groundtruth": "= Math.max(abstractPointsCounter.getPoints(), points);",
      "prediction": "= Math.max(abstractPointsCounter.getPoints(), points);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "+= abstractPointsCounter.getPoints();"
    },
    {
      "index": 775,
      "groundtruth": "ToyController.instance().setLinearLevel(intensity);",
      "prediction": "ToyController.instance().setLinearLevel(intensity);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "ToyController.instance().onFeedback();"
    },
    {
      "index": 776,
      "groundtruth": "abstractPointsCounter.onTick();",
      "prediction": "abstractPointsCounter.onTick();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "abstractPointsCounter.onPlayerTick();"
    },
    {
      "index": 777,
      "groundtruth": "masochistPointsCounter.onDeath();",
      "prediction": "}",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": "}"
    },
    {
      "index": 778,
      "groundtruth": ", file.genThumbnailPath());",
      "prediction": ", file.genThumbnailPath());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ", file.getThumbnailPath());"
    },
    {
      "index": 779,
      "groundtruth": "= LdsUtil.getFileBucketPath(basePath, newFileId);",
      "prediction": "= LdsUtil.getFileBucketPath(basePath, newFileId);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= LdsUtil.generateBucketPath(bucketName, newFileId);"
    },
    {
      "index": 780,
      "groundtruth": "(newFile.checkImageFileType()) {",
      "prediction": "(file.getSize() > 0)",
      "es": 0.28125,
      "em": false,
      "passed": false,
      "original_prediction": "(file.getSize() > 0)"
    },
    {
      "index": 781,
      "groundtruth": "newFile.genThumbnailPath());",
      "prediction": "newFileId);",
      "es": 0.3214285714285714,
      "em": false,
      "passed": false,
      "original_prediction": "newFileId);"
    },
    {
      "index": 782,
      "groundtruth": ".orderNo = System.currentTimeMillis() + \"-\" + LdsUtil.getPathId(path);",
      "prediction": ".orderNo = LdsUtil.generateOrderNo();",
      "es": 0.34285714285714286,
      "em": false,
      "passed": false,
      "original_prediction": ".orderNo = LdsUtil.generateOrderNo();"
    },
    {
      "index": 783,
      "groundtruth": "storageService.batchDelete(bucketName);",
      "prediction": "storageService.batchDelete(bucketName);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "storageService.deleteAll(bucketName);"
    },
    {
      "index": 784,
      "groundtruth": "resourceBasePath = LdsUtil.getResourceBasePath(basePath);",
      "prediction": "resourceBasePath = basePath + \"/\" + collectionName + \"/\";",
      "es": 0.42105263157894735,
      "em": false,
      "passed": false,
      "original_prediction": "resourceBasePath = basePath + \"/\" + collectionName + \"/\";"
    },
    {
      "index": 785,
      "groundtruth": "BaseFile oldFile = fileService.getFileById(fileId);",
      "prediction": "BaseFile oldFile = fileService.getFileById(fileId);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 786,
      "groundtruth": "(contextValue.getType(), contextValue.getId());",
      "prediction": "(contextValue);",
      "es": 0.3191489361702128,
      "em": false,
      "passed": false,
      "original_prediction": "(contextValue);"
    },
    {
      "index": 787,
      "groundtruth": "enterContext(contextValue.getType());",
      "prediction": "setContextValue(contextValue.getType(), contextValue.getId());",
      "es": 0.5,
      "em": false,
      "passed": false,
      "original_prediction": "setContextValue(contextValue.getType(), contextValue.getId());"
    },
    {
      "index": 788,
      "groundtruth": "contextValue.getId());",
      "prediction": "contextValue.getId());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 789,
      "groundtruth": "(libraryIds.getVersion()),\n          new CqlTranslatorOptions(TRANSLATOR_OPTIONS),\n          errors);",
      "prediction": "(libraryIds.getVersion())\n            .withVersion(libraryIds.getVersion())\n        errors.addAll(libraryManager.getErrors());",
      "es": 0.4126984126984127,
      "em": false,
      "passed": false,
      "original_prediction": "(libraryIds.getVersion())\n            .withVersion(libraryIds.getVersion())\n        errors.addAll(libraryManager.getErrors());"
    },
    {
      "index": 790,
      "groundtruth": "super.resolveType(value);",
      "prediction": "super.resolveType(value.getClass().getName());",
      "es": 0.5434782608695652,
      "em": false,
      "passed": false,
      "original_prediction": "super.resolveType(value.getClass().getName());"
    },
    {
      "index": 791,
      "groundtruth": "withId(libraryIds.getName())\n              .withVersion(libraryIds.getVersion()),\n          new CqlTranslatorOptions(TRANSLATOR_OPTIONS),\n          errors);",
      "prediction": "setIdentifier(libraryIds.getName())\n              .setVersion(libraryIds.getVersion())\n              .setContext(\"FHIR\", \"4.0.1\"),\n          libraryIds.getVersion(),\n          TRANSLATOR_OPTIONS,\n          CqlTranslatorOptions.builder",
      "es": 0.5341880341880342,
      "em": false,
      "passed": false,
      "original_prediction": "setIdentifier(libraryIds.getName())\n              .setVersion(libraryIds.getVersion())\n              .setContext(\"FHIR\", \"4.0.1\"),\n          libraryIds.getVersion(),\n          TRANSLATOR_OPTIONS,\n          CqlTranslatorOptions.builder"
    },
    {
      "index": 792,
      "groundtruth": "diceResult.setAmeacas(0);",
      "prediction": "diceResult.setAmeacas(0);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 793,
      "groundtruth": "diceResult.setFracassos(0);",
      "prediction": "diceResult.setFracassos(0);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 794,
      "groundtruth": "diceResult.setFracassos(failure - success);",
      "prediction": "diceResult.setFracassos(failure - success);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 795,
      "groundtruth": "diceResult.setSucessos(success - failure);",
      "prediction": "diceResult.setSucessos(success - failure);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 796,
      "groundtruth": "service.rollDisVantage(\"Advantage\", dice);",
      "prediction": "service.rollDisVantage(\"Advantage\", dice);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "service.rollAdvantage(\"Advantage\", dice);"
    },
    {
      "index": 797,
      "groundtruth": "return openTelemetryService.spanScope(this.getClass().getName(), \"healthCheck\", () -> {",
      "prediction": "return openTelemetryService.spanScope(this.getClass().getName(), \"healthCheck\", () -> {",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 798,
      "groundtruth": "diceResult.setVantagens(advantage - threat);",
      "prediction": "diceResult.setVantagens(advantage - threat);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "diceResult.setVantant(advantage - threat);"
    },
    {
      "index": 799,
      "groundtruth": "= HydraulicImpl.instance().mod(modId);",
      "prediction": "= HydraulicImpl.instance().mod(modId);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= HydraulicImpl.get().getModManager().getMod(modId);"
    },
    {
      "index": 800,
      "groundtruth": "return HydraulicImpl.instance().dataFolder(Constants.MOD_ID)\n                .resolve(\"storage\")\n                .resolve(mod.id());",
      "prediction": "return HydraulicImpl.getInstance().storagePath().resolve(\"mods\").resolve(mod.id());",
      "es": 0.5,
      "em": false,
      "passed": false,
      "original_prediction": "return HydraulicImpl.getInstance().storagePath().resolve(\"mods\").resolve(mod.id());"
    },
    {
      "index": 801,
      "groundtruth": "diceResult.setDesesperos(0);",
      "prediction": "diceResult.setDesesperos(0);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 802,
      "groundtruth": "this.hydraulic.server().registryAccess().registryOrThrow(key);",
      "prediction": "this.hydraulic.registry(key);",
      "es": 0.467741935483871,
      "em": false,
      "passed": false,
      "original_prediction": "this.hydraulic.registry(key);"
    },
    {
      "index": 803,
      "groundtruth": ".packManager.initialize();",
      "prediction": ".bootstrap.onServerStarting(this);",
      "es": 0.2647058823529411,
      "em": false,
      "passed": false,
      "original_prediction": ".bootstrap.onServerStarting(this);"
    },
    {
      "index": 804,
      "groundtruth": "this.bootstrap.mods();",
      "prediction": "this.bootstrap.mods();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 805,
      "groundtruth": "forceResult.setLuz(light);",
      "prediction": "forceResult.setLuz(light);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "forceResult.setBranco(light);"
    },
    {
      "index": 806,
      "groundtruth": "forceResult.setNegro(dark);",
      "prediction": "forceResult.setNegro(dark);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "forceResult.setEscuro(dark);"
    },
    {
      "index": 807,
      "groundtruth": "result = boostDice.roll();",
      "prediction": "result = boostDice.roll();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 808,
      "groundtruth": "logger.Info(String.format(\"[%s] [%s] websocket is closed\", conversationSignature, question));",
      "prediction": "logger.Info(String.format(\"[%s] [%s] websocket is closed\", conversationSignature, question));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "logger.Info(String.format(\"[%s] [%s] websocket is close\", conversationSignature, question));"
    },
    {
      "index": 809,
      "groundtruth": "logger.Debug(String.format(\"[%s] [%s] client send message [%s]\", conversationSignature, question, data));",
      "prediction": "logger.Debug(String.format(\"[%s] [%s] client send message [%s]\", conversationSignature, question, data));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "logger.Debug(String.format(\"[%s] [%s] websocket is send new message [%s]\", conversationSignature, question, data));"
    },
    {
      "index": 810,
      "groundtruth": "logger.Debug(String.format(\"[%s] [%s] websocket is received new message [%s]\", conversationSignature, question, textSpited));",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 811,
      "groundtruth": "(String.format(\"%s   %s\", country.getEmoji(), country.getName()));",
      "prediction": "(country.getName());",
      "es": 0.303030303030303,
      "em": false,
      "passed": false,
      "original_prediction": "(country.getName());"
    },
    {
      "index": 812,
      "groundtruth": "setText(String.format(\"%s   %s\", country.getEmoji(), country.getName()));",
      "prediction": "setText(country.getName());",
      "es": 0.36986301369863017,
      "em": false,
      "passed": false,
      "original_prediction": "setText(country.getName());"
    },
    {
      "index": 813,
      "groundtruth": "(country.getCallingCode());",
      "prediction": "(country.getCallingCode());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(String.format(\"+%s\", country.getCallingCode()));"
    },
    {
      "index": 814,
      "groundtruth": "country.getCode();",
      "prediction": "country.getCode();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "country.getCallingCode();"
    },
    {
      "index": 815,
      "groundtruth": ", String> available = TraceUtils.listCategories();",
      "prediction": ", String> available = TraceUtils.listCategories();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ", String>> available = TraceUtils.listCategories();"
    },
    {
      "index": 816,
      "groundtruth": "Process perfetto = TraceUtils.exec(cmd, null, false);",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 817,
      "groundtruth": "TraceUtils.traceStop();",
      "prediction": "stopForegroundService(intent);",
      "es": 0.23333333333333328,
      "em": false,
      "passed": false,
      "original_prediction": "stopForegroundService(intent);"
    },
    {
      "index": 818,
      "groundtruth": "false : TraceUtils.isTracingOn();",
      "prediction": "false",
      "es": 0.1515151515151515,
      "em": false,
      "passed": false,
      "original_prediction": "false"
    },
    {
      "index": 819,
      "groundtruth": "(TraceUtils.traceStart(tags, bufferSizeKb, appTracing,\n                longTrace, attachToBugreport, maxLongTraceSizeMb, maxLongTraceDurationMinutes)) {",
      "prediction": "(longTrace) {\n            TraceUtils.traceStartLong(context, maxLongTraceSizeMb, maxLongTraceDurationMinutes);}",
      "es": 0.493421052631579,
      "em": false,
      "passed": false,
      "original_prediction": "(longTrace) {\n            TraceUtils.traceStartLong(context, maxLongTraceSizeMb, maxLongTraceDurationMinutes);"
    },
    {
      "index": 820,
      "groundtruth": "Process process = TraceUtils.exec(cmd);",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 821,
      "groundtruth": "(TraceUtils.getOutputFilename(), false, false);",
      "prediction": "();",
      "es": 0.06382978723404253,
      "em": false,
      "passed": false,
      "original_prediction": "();"
    },
    {
      "index": 822,
      "groundtruth": "= TraceUtils.execWithTimeout(cmd, TEMP_DIR, STARTUP_TIMEOUT_MS);",
      "prediction": "= TraceUtils.execWithTimeout(cmd, TEMP_DIR, STARTUP_TIMEOUT_MS);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= TraceUtils.execWithTimeout(cmd, null, STARTUP_TIMEOUT_MS);"
    },
    {
      "index": 823,
      "groundtruth": "ps = TraceUtils.exec(\"ps -AT\", null, false);",
      "prediction": "ps = TraceUtils.exec(\"ps -AT\", null, false);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "ps = TraceUtils.exec(\"ps\");"
    },
    {
      "index": 824,
      "groundtruth": "prefsTracingOn && !TraceUtils.isTracingOn()) {",
      "prediction": "prefsTracingOn) {}",
      "es": 0.34782608695652173,
      "em": false,
      "passed": false,
      "original_prediction": "prefsTracingOn) {"
    },
    {
      "index": 825,
      "groundtruth": "TraceUtils.clearSavedTraces();",
      "prediction": "Receiver.clearSavedTraces(getContext());",
      "es": 0.5,
      "em": false,
      "passed": false,
      "original_prediction": "Receiver.clearSavedTraces(getContext());"
    },
    {
      "index": 826,
      "groundtruth": "process = TraceUtils.execWithTimeout(cmd, null, STOP_TIMEOUT_MS);",
      "prediction": "package com.android.traceur;",
      "es": 0.1384615384615384,
      "em": false,
      "passed": false,
      "original_prediction": "package com.android.traceur;"
    },
    {
      "index": 827,
      "groundtruth": ").contains(ConfigManager.getFirstName(p.getProperty(\"nbt.display.Name\")))) {",
      "prediction": ").contains(ConfigManager.getFirstName(p.getProperty(\"nbt.display.Name\")))) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ").toList().contains(p.getProperty(\"nbt.display.Name\")"
    },
    {
      "index": 828,
      "groundtruth": "), accessor.getAddition(), recipe.getOutput().getItem(),\n\t\t\t\tnull, null\n\t\t).toJson();",
      "prediction": "),\n\t\taccessor.getAddition(),\n\t\taccessor.getResult()\n\t).toJson();",
      "es": 0.5176470588235293,
      "em": false,
      "passed": false,
      "original_prediction": "),\n\t\taccessor.getAddition(),\n\t\taccessor.getResult()\n\t).toJson();"
    },
    {
      "index": 829,
      "groundtruth": "innerMsg.free();",
      "prediction": "innerMsg.getRequestHeader().rele",
      "es": 0.40625,
      "em": false,
      "passed": false,
      "original_prediction": "innerMsg.getRequestHeader().rele"
    },
    {
      "index": 830,
      "groundtruth": "System.out.println(\">>> \u8fde\u63a5\u5230\u4e1a\u52a1\u670d\u52a1\u5668\u6210\u529f! \"+conf.getAddress()+\" <<<\");",
      "prediction": "}",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": "}"
    },
    {
      "index": 831,
      "groundtruth": "chIndex = loadBalancePolicy.getClientIndex(groupNameSet.size());",
      "prediction": "chIndex = loadBalancePolicy.getClientIndex(groupNameSet.size());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "chIndex = loadBalancePolicy.getClientIndex(ncSet.size());"
    },
    {
      "index": 832,
      "groundtruth": "(\"\u7cfb\u7edf\u901a\u77e5 - \u6ce8\u610f: \u670d\u52a1\u5668\u8fde\u63a5\u5173\u95ed! >>> \" + conf.getAddress());",
      "prediction": "(\">>> \u4e1a\u52a1\u670d\u52a1\u5668\u65ad\u5f00\u8fde\u63a5! <<<\");",
      "es": 0.22448979591836737,
      "em": false,
      "passed": false,
      "original_prediction": "(\">>> \u4e1a\u52a1\u670d\u52a1\u5668\u65ad\u5f00\u8fde\u63a5! <<<\");"
    },
    {
      "index": 833,
      "groundtruth": "() < lintConf.getClientMaxConnCount()){",
      "prediction": "() < lintConf.getClie",
      "es": 0.5384615384615384,
      "em": false,
      "passed": false,
      "original_prediction": "() < lintConf.getClie"
    },
    {
      "index": 834,
      "groundtruth": "if(null == conf.getAddress()){",
      "prediction": "if(ch != null){}",
      "es": 0.2666666666666667,
      "em": false,
      "passed": false,
      "original_prediction": "if(ch != null){"
    },
    {
      "index": 835,
      "groundtruth": ".writeBytes(innerMsg.getRequestHeader().toBytesArray());",
      "prediction": ".writeBytes(innerMsg.getRequestHeader().toBytesArray());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 836,
      "groundtruth": "requestBody.setRes(res);",
      "prediction": "requestBody.setRes(res);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 837,
      "groundtruth": "NettyClient> closeCallback = conf.getCloseCallback();",
      "prediction": "NettyClient> closeCallback = conf.getCloseCallback();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 838,
      "groundtruth": "bs.connect(conf.getAddress()).sync();",
      "prediction": "bs.connect(conf.getAddress()).sync();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "bs.connect(conf.getAddress());"
    },
    {
      "index": 839,
      "groundtruth": ".setLength(requestBody.toBytesArray().length);",
      "prediction": ".setLength(requestBody.toBytesArray().length);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".setLength(requestBody.toByteArray().length)"
    },
    {
      "index": 840,
      "groundtruth": "Objects.hash(conf.getAddress().getHostName(), conf.getAddress().getPort());",
      "prediction": "Objects.hash(conf.getAddress());",
      "es": 0.42666666666666664,
      "em": false,
      "passed": false,
      "original_prediction": "Objects.hash(conf.getAddress());"
    },
    {
      "index": 841,
      "groundtruth": "loadBalancePolicy.getClientIndex(addressSet.size());",
      "prediction": "loadBalancePolicy.getClientIndex(addressSet.size());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 842,
      "groundtruth": "factory = ClientFactory.getInstance();",
      "prediction": "factory = ClientFactory.getInstance();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "factory = NettyClient.getInstance();"
    },
    {
      "index": 843,
      "groundtruth": "groupIndex = loadBalancePolicy.getClientIndex(groupNameSet.size());",
      "prediction": "groupIndex = loadBalancePolicy.getClientIndex(groupNameSet.size());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 844,
      "groundtruth": "msg.getMessage());",
      "prediction": "msg.getMessage());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 845,
      "groundtruth": "requestHeader.getLength()){",
      "prediction": "requestHeader.getLength()){",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "requestHeader.g"
    },
    {
      "index": 846,
      "groundtruth": "NPCs.search().indexIs(index).first().flatMap(npc ->\n\t\t{",
      "prediction": "NPCs.search().withIndex(index)",
      "es": 0.4,
      "em": false,
      "passed": false,
      "original_prediction": "NPCs.search().withIndex(index)"
    },
    {
      "index": 847,
      "groundtruth": "return Bank.search().indexIs(index).first().flatMap(item ->\n\t\t{",
      "prediction": "return Bank.search().withIndex(index)",
      "es": 0.46031746031746035,
      "em": false,
      "passed": false,
      "original_prediction": "return Bank.search().withIndex(index)"
    },
    {
      "index": 848,
      "groundtruth": "Players.search().filter(predicate).first().flatMap(Player ->\n\t\t{",
      "prediction": "Players.search().filter(predicate)",
      "es": 0.53125,
      "em": false,
      "passed": false,
      "original_prediction": "Players.search().filter(predicate)"
    },
    {
      "index": 849,
      "groundtruth": "BankInventory.search().indexIs(index).first().flatMap(item ->\n\t\t{",
      "prediction": "BankInventory.search().withIndex(index)",
      "es": 0.4769230769230769,
      "em": false,
      "passed": false,
      "original_prediction": "BankInventory.search().withIndex(index)"
    },
    {
      "index": 850,
      "groundtruth": "NPCs.search().filter(predicate).first().flatMap(npc ->\n\t\t{",
      "prediction": "NPCs.search().withPredicate(predicate)",
      "es": 0.4655172413793104,
      "em": false,
      "passed": false,
      "original_prediction": "NPCs.search().withPredicate(predicate)"
    },
    {
      "index": 851,
      "groundtruth": "BufferMethods.du(buffer, (Integer) input);",
      "prediction": "BufferMethods.du(buffer, (Integer) input);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 852,
      "groundtruth": ".getRequestId(), lintConf.getRequestWaitTimeBySeconds());",
      "prediction": ".getRequestId(),",
      "es": 0.2807017543859649,
      "em": false,
      "passed": false,
      "original_prediction": ".getRequestId(),"
    },
    {
      "index": 853,
      "groundtruth": "()) && this.getBody().build()) {",
      "prediction": "())) {}",
      "es": 0.15625,
      "em": false,
      "passed": false,
      "original_prediction": "())) {"
    },
    {
      "index": 854,
      "groundtruth": ".getBody().toJson().getBytes());",
      "prediction": ".getBody().toJson().getBytes());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".getBody().build().getBytes());"
    },
    {
      "index": 855,
      "groundtruth": "Widget bow = HypsApiPlugin.getItem(\"*bow*\");",
      "prediction": "MousePackets.queueClickPacket();",
      "es": 0.15909090909090906,
      "em": false,
      "passed": false,
      "original_prediction": "MousePackets.queueClickPacket();"
    },
    {
      "index": 856,
      "groundtruth": "<Widget> ring_of_wealth = Inventory.search().nameContains(\"Ring of wealth (\").first();",
      "prediction": "<Widget> ring_of_wealth = Inventory.search().nameContains(\"Ring of wealth (\").first();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "<Widget> ring_of_wealth = Inventory.search().withId(ItemID.RING_OF_WEALTH_1).first();"
    },
    {
      "index": 857,
      "groundtruth": "> royal_seed_pod = Inventory.search().withId(ItemID.ROYAL_SEED_POD).first();",
      "prediction": "> royal_seed_pod = Inventory.search().withId(ItemID.ROYAL_SEED_POD).first();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "> royal_seed_pod = Inventory.search().withId(ItemID.ROYAL_see_POD).first();"
    },
    {
      "index": 858,
      "groundtruth": "> widget = Inventory.search().withId(ItemID.ROYAL_SEED_POD).first();",
      "prediction": "> widget = Inventory.search().withId(ItemID.ROYAL_SEED_POD).first();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "> widget = Inventory.search().nameContains(\"Royal Seed Pod\").first();"
    },
    {
      "index": 859,
      "groundtruth": "Widget> row = Inventory.search().nameContains(\"Ring of wealth (\").first();",
      "prediction": "Widget> row = Inventory.search().nameContains(\"Ring of wealth (\").first();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "Widget> row = Inventory.search().withId(ItemID.RING_OF_WEALTH).first();"
    },
    {
      "index": 860,
      "groundtruth": "(embed.toArray().entrySet())));",
      "prediction": "(embed.toArray().entrySet())));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(embed.toArray())) );"
    },
    {
      "index": 861,
      "groundtruth": "return repository.findByEmailSent(false);",
      "prediction": "return repository.findByEmailSent(false);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "return repository.findBySendEmail(false);"
    },
    {
      "index": 862,
      "groundtruth": "= pluginLoader.getPluginFactories();",
      "prediction": "= pluginLoader.getPluginFactories();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= pluginLoader.getFactoriesMap();"
    },
    {
      "index": 863,
      "groundtruth": "handler.onCommand(command, arguments);",
      "prediction": "handler.onCommand(command, arguments);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "handler.handleCommand(command, arguments);"
    },
    {
      "index": 864,
      "groundtruth": "EasyContactFormsApplication.loadPlugins(pluginsPath);",
      "prediction": "//Reloads all plugins",
      "es": 0.24528301886792447,
      "em": false,
      "passed": false,
      "original_prediction": "//Reloads all plugins"
    },
    {
      "index": 865,
      "groundtruth": "<ContactForm> forms = contactFormService.getContactForms(true);",
      "prediction": "<ContactForm> forms = contactFormService.getContactForms(true);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "<ContactForm> forms = contactFormService.getNotSendMails();"
    },
    {
      "index": 866,
      "groundtruth": "lastRange.covers(previous)) {",
      "prediction": "previous.isAdjac",
      "es": 0.13793103448275867,
      "em": false,
      "passed": false,
      "original_prediction": "previous.isAdjac"
    },
    {
      "index": 867,
      "groundtruth": "lastRange.addRange(previous);",
      "prediction": "lastRange.addRange(previous);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "lastRange = previous;"
    },
    {
      "index": 868,
      "groundtruth": "tokens.add(range.recalculate());",
      "prediction": "tokens.add(range.recalculate());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "tokens.add(range);"
    },
    {
      "index": 869,
      "groundtruth": "StringSearcher.search(search, this);",
      "prediction": "StringSearcher.search(search, this);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 870,
      "groundtruth": "cliRunner.start();",
      "prediction": "if (cliRunner == null)",
      "es": 0.40909090909090906,
      "em": false,
      "passed": false,
      "original_prediction": "if (cliRunner == null)"
    },
    {
      "index": 871,
      "groundtruth": "connectParams = cliRunner.getConnectionParams();",
      "prediction": "ConnectParams connectParams = cliRunner.connect();",
      "es": 0.45999999999999996,
      "em": false,
      "passed": false,
      "original_prediction": "ConnectParams connectParams = cliRunner.connect();"
    },
    {
      "index": 872,
      "groundtruth": "(BufferedInputStream in = new BufferedInputStream(fetcher.fetch(checksumMapURL))) {",
      "prediction": "{}",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": "{"
    },
    {
      "index": 873,
      "groundtruth": "basicParameter.getApiUrl() == null) {",
      "prediction": "basicParameter.getUr",
      "es": 0.5405405405405406,
      "em": false,
      "passed": false,
      "original_prediction": "basicParameter.getUr"
    },
    {
      "index": 874,
      "groundtruth": "cliRunner.shutdown();",
      "prediction": "LOG.error(\"failed to provision connection)",
      "es": 0.11904761904761907,
      "em": false,
      "passed": false,
      "original_prediction": "LOG.error(\"failed to provision connection"
    },
    {
      "index": 875,
      "groundtruth": "new BufferedInputStream(new DigestInputStream(fetcher.fetch(cliArchiveURL), sha256))) {",
      "prediction": "fetcher.fetch(cliArchiveURL)) {}",
      "es": 0.3448275862068966,
      "em": false,
      "passed": false,
      "original_prediction": "fetcher.fetch(cliArchiveURL)) {"
    },
    {
      "index": 876,
      "groundtruth": "parameter.setInit_images(new String[]{",
      "prediction": "parameter.setInitImag",
      "es": 0.5263157894736843,
      "em": false,
      "passed": false,
      "original_prediction": "parameter.setInitImag"
    },
    {
      "index": 877,
      "groundtruth": "parameter.setDenoisingStrength(new BigDecimal(\"0.55\"));",
      "prediction": "parameter.setDenoisingStrength(new BigDecimal(\"0.55\"));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "parameter.setDenoising_strength(0.5);"
    },
    {
      "index": 878,
      "groundtruth": "(serviceConnection.isEmpty()) tokens.add(token);",
      "prediction": "serviceConnection.connecti",
      "es": 0.4375,
      "em": false,
      "passed": false,
      "original_prediction": "serviceConnection.connecti"
    },
    {
      "index": 879,
      "groundtruth": "args.build());",
      "prediction": "args.build());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 880,
      "groundtruth": "== null) dhizuku.bindUserService(iDhizukuUserServiceConnection, args.build());",
      "prediction": "== null) dhizuku.bindUserService(iDhizukuUserServiceConnection, args.build());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 881,
      "groundtruth": ".update(SharedDataModel.getReservation());",
      "prediction": ".update(SharedDataModel.getReservation());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".updateReservation(SharedDataModel.getReservation());"
    },
    {
      "index": 882,
      "groundtruth": "SharedDataModel.getReservation().state = \"paid\";",
      "prediction": "Reservation reservation = SharedDataModel.getReservation();",
      "es": 0.30508474576271183,
      "em": false,
      "passed": false,
      "original_prediction": "Reservation reservation = SharedDataModel.getReservation();"
    },
    {
      "index": 883,
      "groundtruth": "customer = CustomerDAO.getCustomerbyID(kundenID);",
      "prediction": "customer = CustomerDAO.getCustomerbyID(kundenID);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "customer = CustomerDAO.getCustomerbyID(kundenid);"
    },
    {
      "index": 884,
      "groundtruth": "(), connectParams.getSessionToken(), Optional.of(cliRunner));",
      "prediction": "(), connectParams.getSessionToken(), Optional.of(cliRunner));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(), connectParam.getToken(), Optional.of(cliRunner));"
    },
    {
      "index": 885,
      "groundtruth": "Schema.initialize(in);",
      "prediction": "new Schema(in);",
      "es": 0.31818181818181823,
      "em": false,
      "passed": false,
      "original_prediction": "new Schema(in);"
    },
    {
      "index": 886,
      "groundtruth": "().info(String.format(\"Generating scala %s\", type.getName()));",
      "prediction": "().info(String.format(\"Generating scala %s\", type.getName()));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "().info(String.format(\"Generating scalar %s\", type.getName()));"
    },
    {
      "index": 887,
      "groundtruth": "= \"```\" + (isForWebhook ? topList.getTopListAsString(true) : topList.getTopListAsString(false)) + \"```\";",
      "prediction": "= topList.getTopListAsEmbedDescription(numberOfFloatingPoints, isHigherBetter);",
      "es": 0.2596153846153846,
      "em": false,
      "passed": false,
      "original_prediction": "= topList.getTopListAsEmbedDescription(numberOfFloatingPoints, isHigherBetter);"
    },
    {
      "index": 888,
      "groundtruth": "maxNameLength + 3) + \"s %d%s\\n\", i++, name, intValue, leaderboardConfig.getMetric());",
      "prediction": "maxNameLength + 3) + \"s %d%s\\n\", i++, name, intValue, leaderboardConfig.getMetric());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 889,
      "groundtruth": "(isForWebhook ? topList.getTopListAsString(true) : topList.getTopListAsString(false)) + \"```\";",
      "prediction": "topList.getTopListAsMap().entrySet().stream()",
      "es": 0.3191489361702128,
      "em": false,
      "passed": false,
      "original_prediction": "topList.getTopListAsMap().entrySet().stream()"
    },
    {
      "index": 890,
      "groundtruth": ") + \"s %d%s\\\\u000A\", i++, name, intValue, leaderboardConfig.getMetric());",
      "prediction": ") + \"s %d%s\\\\u000A\", i++, name, intValue, leaderboardConfig.getMetric());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 891,
      "groundtruth": "if (leaderboard.getConfig().getFloatingpoints() > 0){",
      "prediction": "if (placeholderType.equals(\"score\") && numberOfFloatingPoints > 0)",
      "es": 0.3939393939393939,
      "em": false,
      "passed": false,
      "original_prediction": "if (placeholderType.equals(\"score\") && numberOfFloatingPoints > 0)"
    },
    {
      "index": 892,
      "groundtruth": ", Double> playerScores = topList.getTopListAsMap();",
      "prediction": ", Double> playerScores = topList.getTopListAsMap();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ", Double> playerScores = topList.getPlayerScores();"
    },
    {
      "index": 893,
      "groundtruth": "this.leaderboardversion = mainConfig.getPluginVersion();",
      "prediction": "this.leaderboardversion = \"1.0\";",
      "es": 0.5,
      "em": false,
      "passed": false,
      "original_prediction": "this.leaderboardversion = \"1.0\";"
    },
    {
      "index": 894,
      "groundtruth": "= customConfig.get();",
      "prediction": "= customConfig.get();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 895,
      "groundtruth": "customConfig.setup();",
      "prediction": "save();",
      "es": 0.23809523809523814,
      "em": false,
      "passed": false,
      "original_prediction": "save();"
    },
    {
      "index": 896,
      "groundtruth": "if (cache.isDiffernt()){",
      "prediction": "if (cache.isDiffernt()){",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "if (cache.isCache())"
    },
    {
      "index": 897,
      "groundtruth": "(descriptionGenerator.getDescription(false));",
      "prediction": "(descriptionGenerator.getDescription(false));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(descriptionGenerator.getDescription());"
    },
    {
      "index": 898,
      "groundtruth": "customConfig.reload();",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 899,
      "groundtruth": "discordsrvEmbed.setEmbedImage(image);",
      "prediction": "discordsrvEmbed.setEmbedImage(image);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "discordssrvEmbed.setEmbedImage(image);"
    },
    {
      "index": 900,
      "groundtruth": "cache.setCache();",
      "prediction": "setLastSent();",
      "es": 0.2941176470588235,
      "em": false,
      "passed": false,
      "original_prediction": "setLastSent();"
    },
    {
      "index": 901,
      "groundtruth": "content = jsonData.getDataAttributes().get(\"content\");",
      "prediction": "content = jsonData.getDataAttributes().get(\"content\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 902,
      "groundtruth": "companyProductName = jsonData.getDataAttributes().get(\"companyProductName\");",
      "prediction": "companyProductName = jsonData.getDataAttributes().get(\"companyProductName\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 903,
      "groundtruth": "info = jsonData.getDataAttributes().get(\"info\");",
      "prediction": "info = jsonData.getDataAttributes().get(\"info\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 904,
      "groundtruth": "sentence = jsonData.getDataAttributes().get(\"sentence\");",
      "prediction": "sentence = jsonData.getDataAttributes().get(\"sentence\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 905,
      "groundtruth": "adminPublish.close();",
      "prediction": "adminPublish.close();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 906,
      "groundtruth": "jsonData.getTemplateId()) {",
      "prediction": "jsonData.getDat",
      "es": 0.5185185185185186,
      "em": false,
      "passed": false,
      "original_prediction": "jsonData.getDat"
    },
    {
      "index": 907,
      "groundtruth": "String topic = jsonData.getDataAttributes().get(\"topic\");",
      "prediction": "String topic = jsonData.getDataAttributes().get(\"topic\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 908,
      "groundtruth": "customerAvatar = jsonData.getDataAttributes().get(\"customerAvatar\");",
      "prediction": "customerAvatar = jsonData.getDataAttributes().get(\"customerAvatar\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 909,
      "groundtruth": ".addHeader(\"Authorization\", \"Bearer\" + \" \" + config.getOpenAIAPIKey());",
      "prediction": ".addHeader(\"Authorization\", \"Bearer\" + \" \" + config.getOpenAIAPIKey());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".addHeader(\"Authorization\", \"Bearer \" + key);"
    },
    {
      "index": 910,
      "groundtruth": "customerProblem = jsonData.getDataAttributes().get(\"customerProblem\");",
      "prediction": "customerProblem = jsonData.getDataAttributes().get(\"customerProblem\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 911,
      "groundtruth": "audience = jsonData.getDataAttributes().get(\"audience\");",
      "prediction": "audience = jsonData.getDataAttributes().get(\"audience\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 912,
      "groundtruth": "String tone = jsonData.getDataAttributes().get(\"tone\");",
      "prediction": "String tone = jsonData.getDataAttributes().get(\"tone\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 913,
      "groundtruth": "String product = jsonData.getDataAttributes().get(\"product\");",
      "prediction": "String product = jsonData.getDataAttributes().get(\"product\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 914,
      "groundtruth": "client.getResourceRefs(path);",
      "prediction": "CQAssert.getLinkedResources(client, path);",
      "es": 0.5,
      "em": false,
      "passed": false,
      "original_prediction": "CQAssert.getLinkedResources(client, path);"
    },
    {
      "index": 915,
      "groundtruth": "String gradeLevel = jsonData.getDataAttributes().get(\"gradeLevel\");",
      "prediction": "String gradeLevel = jsonData.getDataAttributes().get(\"gradeLevel\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 916,
      "groundtruth": "SqlUtils.setScheduleLastSent(leaderboardname, currenttimestamp);",
      "prediction": "SqlUtils.setScheduleLastSent(leaderboardname, currenttimestamp);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 917,
      "groundtruth": "boolean isrefreshonsent = leaderboard.getConfig().isRefreshOnSent();",
      "prediction": "boolean isrefreshonsent = leaderboard.getConfig().isRefreshOnSent();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 918,
      "groundtruth": "SqlUtils.isScheduleAlredySent(leaderboardname);",
      "prediction": "SqlUtils.isScheduleAlredySent(leaderboardname);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "SqlUtils.isScheduleSent(leaderboardname);"
    },
    {
      "index": 919,
      "groundtruth": "SqlUtils.deleteAllValues(tablename, ColumnName);",
      "prediction": "SqlUtils.deleteAllValues(tablename, ColumnName);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "SqlUtils.deleteDataFromTable(tablename, ColumnName);"
    },
    {
      "index": 920,
      "groundtruth": "(TimeUtils.getTimestampDifference(currentTime, lastsent) >= SECSFORHOUR){",
      "prediction": "(TimeUtils.getTimestampDifference(currentTime, lastsent) >= SECSFORHOUR){",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(TimeUtils.getTimestampDifference(currentTime, lastsent) >= SECSFORHOUR)"
    },
    {
      "index": 921,
      "groundtruth": "webhook.execute();",
      "prediction": "webhook.execute();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 922,
      "groundtruth": "= mainConfig.getDembedTitle();",
      "prediction": "= mainConfig.getDembedTitle();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 923,
      "groundtruth": "webhook.setAvatarUrl(webhookAvatarUrl);",
      "prediction": "webhook.setAvatarUrl(webhookAvatarUrl);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 924,
      "groundtruth": "dwebhookAvatarUrl = mainConfig.getDwebhookAvatarUrl();",
      "prediction": "dwebhookAvatarUrl = mainConfig.getDwebhookAvatarUrl();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 925,
      "groundtruth": "dembedImage = mainConfig.getDembedImage();",
      "prediction": "dembedImage = mainConfig.getDembedImage();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 926,
      "groundtruth": "String description = descriptionGenerator.getDescription(true);",
      "prediction": ")",
      "es": 0.015873015873015928,
      "em": false,
      "passed": false,
      "original_prediction": ")"
    },
    {
      "index": 927,
      "groundtruth": "String delay = leaderboardConfig.getDelay();",
      "prediction": "String delay = leaderboardConfig.getDelay();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "String webhookurl = leaderboardConfig.getWebhookurl();"
    },
    {
      "index": 928,
      "groundtruth": "String placeholder = leaderboardConfig.getPlaceholder();",
      "prediction": "return name;",
      "es": 0.1428571428571429,
      "em": false,
      "passed": false,
      "original_prediction": "return name;"
    },
    {
      "index": 929,
      "groundtruth": "String dembedFooter = mainConfig.getDembedFooter();",
      "prediction": "String dembedFooter = mainConfig.getDembedFooter();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 930,
      "groundtruth": "embedTitle = leaderboardConfig.getEmbedTitle();",
      "prediction": "embedTitle = leaderboardConfig.getEmbedTitle();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 931,
      "groundtruth": "database.getConnection().prepareStatement(\n                        \"DELETE FROM \" + tableName + \" WHERE \" + columnName + \" IS NOT NULL\"\n                );",
      "prediction": "database.getConnection().prepareStatement(\n                        \"DELETE FROM \" + tableName + \" WHERE \" + columnName + \" IS NOT NULL\"\n                );",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "database.getConnection().prepareStatement(\n`DELETE FROM ` + tableName + ` WHERE ` + columnName + ` IS NOT NULL`"
    },
    {
      "index": 932,
      "groundtruth": "database.getConnection().prepareStatement(\n                        \"REPLACE INTO Schedule (Leaderboard, LastSent) VALUES (?, ?)\"\n                );",
      "prediction": "database.getConnection().prepareStatement(\"INSERT INTO Schedule (Leaderboard, LastSent) VALUES (?, ?) ON DUPLICATE KEY UPDATE LastSent = VALUES(LastSent);\");",
      "es": 0.49044585987261147,
      "em": false,
      "passed": false,
      "original_prediction": "database.getConnection().prepareStatement(\"INSERT INTO Schedule (Leaderboard, LastSent) VALUES (?, ?) ON DUPLICATE KEY UPDATE LastSent = VALUES(LastSent);\");"
    },
    {
      "index": 933,
      "groundtruth": "SqlUtils.addUserDataToDatabase(placeholderColumnName, uuid, username, value);",
      "prediction": "SqlUtils.addUserDataToDatabase(placeholderColumnName, uuid, username, value);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "database.addUserDataToDatabase(uuid, placeholderColumnName, value);"
    },
    {
      "index": 934,
      "groundtruth": "String embedColour = leaderboardConfig.getEmbedColour();",
      "prediction": "String embedColour = leaderboardConfig.getEmbedColour();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 935,
      "groundtruth": "String webhookAvatarUrl = leaderboardConfig.getWebhookAvatarUrl();",
      "prediction": "String webhookAvatarUrl = leaderboardConfig.getWebhookAvatarUrl();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 936,
      "groundtruth": "UnsupportedOperationException(\"Unsupported storage type: \" + mainConfig.getStorageType());",
      "prediction": "UnsupportedOperationException(\"Unsupported storage type: \" + mainConfig.getStorageType());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "UnsupportedOperationException(\"Unsupported database type: \" + mainConfig.getStorageType());"
    },
    {
      "index": 937,
      "groundtruth": "preparedStatement = database.getConnection().prepareStatement(\"SELECT COUNT(*) AS count FROM Schedule WHERE Leaderboard = ?\");",
      "prediction": "preparedStatement = database.getConnection().prepareStatement(\"SELECT COUNT(*) AS count FROM Schedule WHERE Leaderboard = ?\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "preparedStatement = database.getConnection().prepareStatement(\"SELECT COUNT(*) as count FROM Schedule WHERE Leaderboard = ?\");"
    },
    {
      "index": 938,
      "groundtruth": "preparedStatement = database.getConnection().prepareStatement(\n                        \"UPDATE \" + tableName + \" SET \" + columnName + \" = NULL\"\n                );",
      "prediction": "preparedStatement = database.getConnection().prepareStatement(\n                        \"UPDATE \" + tableName + \" SET \" + columnName + \" = NULL\"\n                );",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "preparedStatement = database.getConnection().prepareStatement(\n                \"DELETE FROM \" + tableName + \" WHERE \" + columnName + \" IS NOT NULL\""
    },
    {
      "index": 939,
      "groundtruth": "database.getConnection().prepareStatement(\"SELECT \" + \"LastSent\" + \" FROM Schedule WHERE Leaderboard = ?\");",
      "prediction": "database.getConnection().prepareStatement(\"SELECT \" + \"LastSent\" + \" FROM Schedule WHERE Leaderboard = ?\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "database.getConnection().prepareStatement(\"SELECT LastSent FROM Schedule WHERE Leaderboard = ?\");"
    },
    {
      "index": 940,
      "groundtruth": ", leaderboard.getConfig().getPlaceholder());",
      "prediction": ", leaderboard.getConfig().getPlaceholder());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 941,
      "groundtruth": "database.getConnection().prepareStatement(\"MERGE INTO Schedule s USING (VALUES (?, ?)) data (Leaderboard, LastSent) ON s.Leaderboard = data.Leaderboard WHEN MATCHED THEN UPDATE SET s.LastSent = data.LastSent WHEN NOT MATCHED THEN INSERT (Leaderboard, LastSent) VALUES (data.Leaderboard, data.LastSent);",
      "prediction": "database.getConnection().prepareStatement(\"MERGE INTO Schedule s USING (VALUES (?, ?)) data (Leaderboard, LastSent) ON s.Leaderboard = data.Leaderboard WHEN MATCHED THEN UPDATE SET s.LastSent = data.LastSent WHEN NOT MATCHED THEN INSERT (Leaderboard, LastSent) VALUES (data.Leaderboard, data.LastSent);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "database.getConnection().prepareStatement(\"MERGE INTO Schedule s USING (VALUES (?, ?)) data (Leaderboard, LastSent) ON s.Leaderboard = data.Leaderboard WHEN MATCHED THEN UPDATE SET s.LastSent = data.LastSent"
    },
    {
      "index": 942,
      "groundtruth": "String databaseName = mainConfig.getStorageType();",
      "prediction": "String databaseName = mainConfig.getStorageType();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "String databaseName = database.getDatabaseName();"
    },
    {
      "index": 943,
      "groundtruth": "userData.addUserDataToDBAllPlayersThisPlaceholder();",
      "prediction": "userData.addUserDataToDBAllPlayersThisPlaceholder();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "userData.addUserDataToDBAllPlayersAllPlaceholders();"
    },
    {
      "index": 944,
      "groundtruth": "outputEGLSurface = outputEglCore.createOffsetScreenSurface(renderWidth, renderHeight);",
      "prediction": "outputEGLSurface = outputEglCore.createOffsetScreenSurface(renderWidth, renderHeight);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "outputEGLSurface = outputEglCore.createWindowSurface(EGL14.EGL_NO_CONTEXT, null);"
    },
    {
      "index": 945,
      "groundtruth": "quadRenderer.drawTexture(texId, renderWidth, renderHeight);",
      "prediction": "quadRenderer.drawTexture(texId, renderWidth, renderHeight);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "quadRenderer.drawQuad(texId, 0, 0, renderWidth, renderHeight);"
    },
    {
      "index": 946,
      "groundtruth": "ServerCountryFlags.updateAPILanguage(null);",
      "prediction": "ServerCountryFlags.updateAPILanguage(null);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "ServerCountryFlags.updateAPILanguage(\"en\");"
    },
    {
      "index": 947,
      "groundtruth": ".setRequestsLeft(requestsLeft - APITimeoutManager.getRequestsSent());",
      "prediction": ".setRequestsLeft(requestsLeft);",
      "es": 0.4492753623188406,
      "em": false,
      "passed": false,
      "original_prediction": ".setRequestsLeft(requestsLeft);"
    },
    {
      "index": 948,
      "groundtruth": "APITimeoutManager.setSecondsLeftUntilReset(secondsLeft);",
      "prediction": "APITimeoutManager.setSecondsLeftUntilReset(secondsLeft);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "APITimeoutManager.setSecondsLeft(secondsLeft);"
    },
    {
      "index": 949,
      "groundtruth": "(APITimeoutManager.isOnCooldown()) {",
      "prediction": "(ip.isEmpty()) {}",
      "es": 0.25,
      "em": false,
      "passed": false,
      "original_prediction": "(ip.isEmpty()) {"
    },
    {
      "index": 950,
      "groundtruth": "APITimeoutManager.decrementRequestsSent();",
      "prediction": "if (requestsLeft != -1 && secondsLeft != -1)",
      "es": 0.11363636363636365,
      "em": false,
      "passed": false,
      "original_prediction": "if (requestsLeft != -1 && secondsLeft != -1)"
    },
    {
      "index": 951,
      "groundtruth": "APITimeoutManager.incrementRequestsSent();",
      "prediction": "APITimeoutManager.incrementRequestsSent();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 952,
      "groundtruth": "request.setReturnCode(500);",
      "prediction": "request.setReturnCode(500);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 953,
      "groundtruth": ">= server.getMaximumHeaderParameterCount())\n\t\t\t\t\treturn parameters;",
      "prediction": ">= server.getMaximumHeaderParameterCount())\n\t\t\t\t\treturn parameters;",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ">= server.getMaximumHeaderParameterSize())\n\t\t\t\t\tbreak;"
    },
    {
      "index": 954,
      "groundtruth": "request.getContentType());",
      "prediction": "\"application/octet-stream\");",
      "es": 0.2142857142857143,
      "em": false,
      "passed": false,
      "original_prediction": "\"application/octet-stream\");"
    },
    {
      "index": 955,
      "groundtruth": "if(cookies.size() >= server.getMaximumCookieCount())\n\t\t\t\t\t\tbreak;",
      "prediction": "if(cookies.size() >= server.getMaximumCookieCount())\n\t\t\t\t\t\tbreak;",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 956,
      "groundtruth": "size() >= server.getMaximumHeaderParameterSize())\n\t\t\t\t\t\tbreak;",
      "prediction": "size() >= server.getMaximumHeaderParameterSize())\n\t\t\t\t\t\tbreak;",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 957,
      "groundtruth": "if(value.length() < server.getMaximumHeaderParameterSize())\n\t\t\t\tvalue.append(c);",
      "prediction": "if(keyFlag)\n\t\t\t\t\tkey.append(c);",
      "es": 0.275,
      "em": false,
      "passed": false,
      "original_prediction": "if(keyFlag)\n\t\t\t\t\tkey.append(c);"
    },
    {
      "index": 958,
      "groundtruth": "buffer.writeBody(bytes);",
      "prediction": "System.out.pri",
      "es": 0.16666666666666663,
      "em": false,
      "passed": false,
      "original_prediction": "System.out.pri"
    },
    {
      "index": 959,
      "groundtruth": "buffer.writeHeader(bytes);",
      "prediction": "System.out.prin",
      "es": 0.15384615384615385,
      "em": false,
      "passed": false,
      "original_prediction": "System.out.prin"
    },
    {
      "index": 960,
      "groundtruth": "= decoder.decodeParameters(new String(buffer.bodyBuffer.toByteArray(), StandardCharsets.UTF_8));",
      "prediction": "= decoder.decodeParameters(new String(buffer.bodyBuffer.toByteArray(), StandardCharsets.UTF_8));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= decoder.decodeParameters(buffer.bodyBuffer.toByteArray());"
    },
    {
      "index": 961,
      "groundtruth": "client.setOutputBufferCache(requestBuilder.getEncoder().generateResponse(buffer.request, requestListener.request(buffer.request)));",
      "prediction": "//if it's not a post request, we will need to read the body and process it",
      "es": 0.19083969465648853,
      "em": false,
      "passed": false,
      "original_prediction": "//if it's not a post request, we will need to read the body and process it"
    },
    {
      "index": 962,
      "groundtruth": "setOutputBufferCache(requestBuilder.getEncoder().generateResponse(buffer.request,\n\t\t\t\t\t\t\t\t\trequestListener.request(buffer.request)));",
      "prediction": "setOutputBufferCache(requestBuilder.getEncoder().generateResponse(buffer.request,\n\t\t\t\t\t\t\t\t\trequestListener.request(buffer.request)));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "getOutputBuffer().write(requestBuilder.getEncoder().generateResponse(buffer.request, requestListener.request(buffer.request)));"
    },
    {
      "index": 963,
      "groundtruth": "cookies = decoder.decodeCookies(parameters.get(\"Cookie\"));",
      "prediction": "cookies = decoder.decodeCookies(parameters.get(\"Cookie\"));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 964,
      "groundtruth": "List<String> exps = RegexHelper.find(text, \"\\\\$\\\\{",
      "prediction": "List<String> exps = RegexHe",
      "es": 0.54,
      "em": false,
      "passed": false,
      "original_prediction": "List<String> exps = RegexHe"
    },
    {
      "index": 965,
      "groundtruth": "webAgent.url(url).execute(map);",
      "prediction": "webAgent.url(url).execute(map);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "webAgent.execute(url);"
    },
    {
      "index": 966,
      "groundtruth": "data = webAgent.execute(map);",
      "prediction": "data = webAgent.execute(map);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 967,
      "groundtruth": "!result.getStatusCode().equals(200)) {",
      "prediction": "!result.getStatusCode().equals(200)) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "result.getStatusCode()"
    },
    {
      "index": 968,
      "groundtruth": "Assert.notNull(timeStamp, \"\u65f6\u95f4\u6233\u4e0d\u80fd\u4e3a\u7a7a\uff01\");",
      "prediction": "Assert.notNull(timeStamp, \"\u65f6\u95f4\u6233\u4e0d\u80fd\u4e3a\u7a7a\uff01\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "Assert.isTrue(timeStamp != null, \"\u65f6\u95f4\u6233\u4e0d\u80fd\u4e3a\u7a7a\");"
    },
    {
      "index": 969,
      "groundtruth": "text = text.replace(el, elMap.get(tag).execute(argsMap));",
      "prediction": "text = text.replace(el, elMap.get(tag).execute(argsMap));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "text = text.replace(el, elMap.get(tag).parser(argsMap, map));"
    },
    {
      "index": 970,
      "groundtruth": "return parent.type();",
      "prediction": "return parent.type();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 971,
      "groundtruth": "UnreflectType.of(source.getGenericReturnType());",
      "prediction": "source.getReturnType();",
      "es": 0.47916666666666663,
      "em": false,
      "passed": false,
      "original_prediction": "source.getReturnType();"
    },
    {
      "index": 972,
      "groundtruth": "if (result.getStatusCode() == 400) {",
      "prediction": "if (result.getStatusCode() == 400) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "if (result.getStatusCode() == 400)"
    },
    {
      "index": 973,
      "groundtruth": "(T) accessor.invoke(null, args);",
      "prediction": "(T) accessor.invoke(null, args);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "accessor.invoke(delegate, args);"
    },
    {
      "index": 974,
      "groundtruth": "UnreflectType.of(source);",
      "prediction": "new ReflectionTypeAccess<>(source);",
      "es": 0.5428571428571429,
      "em": false,
      "passed": false,
      "original_prediction": "new ReflectionTypeAccess<>(source);"
    },
    {
      "index": 975,
      "groundtruth": "return (T) JdkInternals.allocateInstance(toClass());",
      "prediction": "val constructor = toClass().getDeclaredConstructor();",
      "es": 0.18867924528301883,
      "em": false,
      "passed": false,
      "original_prediction": "val constructor = toClass().getDeclaredConstructor();"
    },
    {
      "index": 976,
      "groundtruth": "return new BytecodeFieldAccess((ReflectionFieldAccess) delegate.bind(object), accessor);",
      "prediction": "return delegate.bind(object);",
      "es": 0.3295454545454546,
      "em": false,
      "passed": false,
      "original_prediction": "return delegate.bind(object);"
    },
    {
      "index": 977,
      "groundtruth": "return UnreflectType.of(source.getGenericType());",
      "prediction": "return UnreflectType.of(source.getGenericType());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "return UnreflectType.of(source.getType());"
    },
    {
      "index": 978,
      "groundtruth": "webAgent.getConfig().getUrl()).set(pageIndexKey, String.valueOf(i)).getUrl();",
      "prediction": "webAgent.getConfig().getUrl()).set(pageIndexKey, String.valueOf(i)).getUrl();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "data.getUrl()).replace(pageIndexKey, String.valueOf(i)).toString();"
    },
    {
      "index": 979,
      "groundtruth": "().toClass().getSimpleName() + Parameters.toString(parameters().toList());",
      "prediction": "().name() + \".\" + source.getName() + Parameters.toString(source.getParameters());",
      "es": 0.5061728395061729,
      "em": false,
      "passed": false,
      "original_prediction": "().name() + \".\" + source.getName() + Parameters.toString(source.getParameters());"
    },
    {
      "index": 980,
      "groundtruth": "int totalRows = json.get(totalKey, Integer.class);",
      "prediction": "int totalRows = json.get(totalKey, Integer.class);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "int totalRows = json.getInt(totalKey);"
    },
    {
      "index": 981,
      "groundtruth": "(result.getStatusCode() == 401) {",
      "prediction": "(result.getStatusCode() == 401) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(result.getStatusCode() == 401)"
    },
    {
      "index": 982,
      "groundtruth": ".warn(\"\u672a\u652f\u6301\u7684\u72b6\u6001\u7801: {",
      "prediction": ".warn(\"\u672a\u652f\u6301\u7684\u72b6\u6001\u7801: {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".warn(\"http\u72b6\u6001\u7801\uff1a{"
    },
    {
      "index": 983,
      "groundtruth": "Assert.isTrue(data.get(0) instanceof JSONArray, \"\u6570\u636e\u683c\u5f0f\u4e0d\u5339\u914d\uff01\");",
      "prediction": "Assert.notNull(columns, \"columns is null\");",
      "es": 0.2666666666666667,
      "em": false,
      "passed": false,
      "original_prediction": "Assert.notNull(columns, \"columns is null\");"
    },
    {
      "index": 984,
      "groundtruth": "String type = result.getContentType();",
      "prediction": "String type = result.getContentType();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "log.debug(\"http\u54cd\u5e94\u7c7b\u578b\uff1a{}\", result.getContentType());"
    },
    {
      "index": 985,
      "groundtruth": "return webAgent.execute(map);",
      "prediction": "return webAgent.execute(map);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 986,
      "groundtruth": "if (result.getStatusCode() >= 500) {",
      "prediction": "if (result.getStatusCode() >= 500) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "if (result.getStatusCode() == 500)"
    },
    {
      "index": 987,
      "groundtruth": "JsonHelper json = data.getJson();",
      "prediction": "JsonHelper json = data.getJson();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "JsonHelper json = new JsonHelper(data.getContent());"
    },
    {
      "index": 988,
      "groundtruth": "isTrue(headHelper.fileContent(), \"\u975e\u6587\u4ef6\u6d41\u8bf7\u6c42\uff0c\u65e0\u6cd5\u8f93\u51fa\u6587\u4ef6\uff01\");",
      "prediction": "isTrue(headHelper.isDownload(), \"\u6587\u4ef6\u4e0b\u8f7d\u5931\u8d25\uff1a{}\", this.config.getUrl());",
      "es": 0.4029850746268657,
      "em": false,
      "passed": false,
      "original_prediction": "isTrue(headHelper.isDownload(), \"\u6587\u4ef6\u4e0b\u8f7d\u5931\u8d25\uff1a{}\", this.config.getUrl());"
    },
    {
      "index": 989,
      "groundtruth": "setBody(transcoding(result.getBodyAsByes(), charset));",
      "prediction": "setCharset(charset);",
      "es": 0.33333333333333337,
      "em": false,
      "passed": false,
      "original_prediction": "setCharset(charset);"
    },
    {
      "index": 990,
      "groundtruth": "wa = this.webAgent.execute(data);",
      "prediction": "wa = this.webAgent.execute(data);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 991,
      "groundtruth": "hct.getHue()) >= 90.0 && Math.round(hct.getHue()) <= 111.0;",
      "prediction": "hct.getHue()) > 110.0;",
      "es": 0.35593220338983056,
      "em": false,
      "passed": false,
      "original_prediction": "hct.getHue()) > 110.0;"
    },
    {
      "index": 992,
      "groundtruth": "this.a2 = TonalPalette.fromHueAndChroma(hue, chroma / 3.);",
      "prediction": "this.a2 = TonalPalette.fromHueAndChroma(hue, chroma / 3.);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "this.a2 = TonalPalette.fromHueAndChroma(hue, chroma / 2.);"
    },
    {
      "index": 993,
      "groundtruth": "ColorUtils.yFromLstar(tone);",
      "prediction": "ColorUtils.yFromLstar(tone);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "ColorUtils.yFrom"
    },
    {
      "index": 994,
      "groundtruth": "ratioOfYs(ColorUtils.yFromLstar(t1), ColorUtils.yFromLstar(t2));",
      "prediction": "ratioOfYs(ColorUtils.yFromLstar(t1), ColorUtils.yFromLstar(t2));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "ratioOfYs(ColorUtils.yFromTone(tone1), ColorUtils.yFromTone(tone2);"
    },
    {
      "index": 995,
      "groundtruth": "Math.round(hct.getHue()) >= 90.0 && Math.round(hct.getHue()) <= 111.0;",
      "prediction": "Math.round(hct.getHue()) == 120.0;",
      "es": 0.4571428571428572,
      "em": false,
      "passed": false,
      "original_prediction": "Math.round(hct.getHue()) == 120.0;"
    },
    {
      "index": 996,
      "groundtruth": ".from(hct.getHue(), hct.getChroma(), 70.0);",
      "prediction": ".from(hct.getHue(), hct.getChroma(), 70.0);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".from(hct.getHue(), hct.getChroma(), hct.getTone() + 10.0);"
    },
    {
      "index": 997,
      "groundtruth": "round(hct.getChroma()) > 16.0;",
      "prediction": "round(hct.getChroma()) > 16.0;",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "round(hct.getChroma()) > 30.0;"
    },
    {
      "index": 998,
      "groundtruth": "hct.getChroma();",
      "prediction": "hct.getChroma();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 999,
      "groundtruth": "a1 = TonalPalette.fromHueAndChroma(hue, chroma);",
      "prediction": "a1 = TonalPalette.fromHueAndChroma(hue, chroma);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "a1 = TonalPalette.fromHueAndChroma(hue, chroma / 2.);"
    },
    {
      "index": 1000,
      "groundtruth": "hct.getTone()) < 65.0;",
      "prediction": "hct.getTone()) < 65.0;",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "hct.getTone()) < 50.0;"
    },
    {
      "index": 1001,
      "groundtruth": ".a3 = TonalPalette.fromHueAndChroma(hue + 60., chroma / 2.);",
      "prediction": ".a3 = TonalPalette.fromHueAndChroma(hue + 60., chroma / 2.);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".a3 = TonalPalette.fromHueAndChroma(hue + 60., chroma / 3.);"
    },
    {
      "index": 1002,
      "groundtruth": "ColorUtils.lstarFromY(lightY) + LUMINANCE_GAMUT_MAP_TOLERANCE;",
      "prediction": "ColorUtils.lstarFromY(lightY) + LUMINANCE_GAMUT_MAP_TOLERANCE;",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1003,
      "groundtruth": "hue = hct.getHue();",
      "prediction": "hue = hct.getHue();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1004,
      "groundtruth": "= TonalPalette.fromHueAndChroma(hue, min(chroma / 12., 4.));",
      "prediction": "= TonalPalette.fromHueAndChroma(hue, min(chroma / 12., 4.));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= TonalPalette.fromHueAndChroma(hue, min(chroma / 3., 16.));"
    },
    {
      "index": 1005,
      "groundtruth": "a1 = TonalPalette.fromHueAndChroma(hue, max(48., chroma));",
      "prediction": "a1 = TonalPalette.fromHueAndChroma(hue, max(48., chroma));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "a1 = TonalPalette.fromHueAndChroma(hue, 16.);"
    },
    {
      "index": 1006,
      "groundtruth": "this.n2 = TonalPalette.fromHueAndChroma(hue, min(chroma / 6., 8.));",
      "prediction": "this.n2 = TonalPalette.fromHueAndChroma(hue, min(chroma / 6., 8.));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "this.n2 = TonalPalette.fromHueAndChroma(hue, min(chroma / 12., 8.));"
    },
    {
      "index": 1007,
      "groundtruth": "= TonalPalette.fromHueAndChroma(hue, 16.);",
      "prediction": "= TonalPalette.fromHueAndChroma(hue, 16.);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= TonalPalette.fromHueAndChroma(hue, 24.);"
    },
    {
      "index": 1008,
      "groundtruth": "ColorUtils.blueFromArgb(argb);",
      "prediction": "ColorUtils.blueFromArgb(argb);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1009,
      "groundtruth": "a3 = TonalPalette.fromHueAndChroma(hue + 60., 24.);",
      "prediction": "a3 = TonalPalette.fromHueAndChroma(hue + 60., 24.);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "a3 = TonalPalette.fromHueAndChroma(hue + 60., 16.);"
    },
    {
      "index": 1010,
      "groundtruth": "MathUtils.clampInt(0, 255, (int) Math.round(delinearized * 255.0));",
      "prediction": "(int) (delinearized * 255.0 + 0.5);",
      "es": 0.35820895522388063,
      "em": false,
      "passed": false,
      "original_prediction": "(int) (delinearized * 255.0 + 0.5);"
    },
    {
      "index": 1011,
      "groundtruth": "return new TonalPalette(hct.getHue(), hct.getChroma(), hct);",
      "prediction": "return new TonalPalette(hct.getHue(), hct.getChroma(), hct);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1012,
      "groundtruth": ".n1 = TonalPalette.fromHueAndChroma(hue, 4.);",
      "prediction": ".n1 = TonalPalette.fromHueAndChroma(hue, 4.);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".n1 = TonalPalette.fromHueAndChroma(hue, 16.);"
    },
    {
      "index": 1013,
      "groundtruth": "return MathUtils.matrixMultiply(new double[] {",
      "prediction": "double[] xyz = new double[] {x, y, z};",
      "es": 0.17391304347826086,
      "em": false,
      "passed": false,
      "original_prediction": "double[] xyz = new double[] {x, y, z};"
    },
    {
      "index": 1014,
      "groundtruth": "differenceDegrees(hct.getHue(), chosenHct.getHue()) < differenceDegrees) {",
      "prediction": "degreesDifference(hct.getHue(), chosenHct.getHue()) <=",
      "es": 0.5405405405405406,
      "em": false,
      "passed": false,
      "original_prediction": "degreesDifference(hct.getHue(), chosenHct.getHue()) <="
    },
    {
      "index": 1015,
      "groundtruth": ") Math.floor(hct.getHue());",
      "prediction": ") Math.floor(hct.getHue());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ") Math.round(hct.getHue());"
    },
    {
      "index": 1016,
      "groundtruth": "= Math.abs(smallestDeltaHct.getChroma() - chroma);",
      "prediction": "= Double.MAX_VALUE;",
      "es": 0.14,
      "em": false,
      "passed": false,
      "original_prediction": "= Double.MAX_VALUE;"
    },
    {
      "index": 1017,
      "groundtruth": "= MathUtils.sanitizeDegreesInt(i);",
      "prediction": "= MathUtils.sanitizeDegreesInt(i);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1018,
      "groundtruth": "if (MathUtils.differenceDegrees(hct.getHue(), chosenHct.getHue()) < differenceDegrees) {",
      "prediction": "if (MathUtils.differenceDegrees(hct.getHue(), chosenHct.getHue()) < differenceDegrees) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "if (Math.abs(chosenHct.getHue() - hct.getHue()) <= differenceDegrees)"
    },
    {
      "index": 1019,
      "groundtruth": "filter && (hct.getChroma() < CUTOFF_CHROMA || proportion <= CUTOFF_EXCITED_PROPORTION)) {",
      "prediction": "proportion < CUTOFF_EXCITED_PROPORTion) {}",
      "es": 0.4157303370786517,
      "em": false,
      "passed": false,
      "original_prediction": "proportion < CUTOFF_EXCITED_PROPORTion) {"
    },
    {
      "index": 1020,
      "groundtruth": "MathUtils.sanitizeDegreesInt((int) Math.round(hct.getHue()));",
      "prediction": "(int) Math.floor(hct.getHue());",
      "es": 0.42622950819672134,
      "em": false,
      "passed": false,
      "original_prediction": "(int) Math.floor(hct.getHue());"
    },
    {
      "index": 1021,
      "groundtruth": "smallestDeltaHct = Hct.from(hue, chroma, startTone);",
      "prediction": "smallestDeltaHct = Hct.from(hue, chroma, startTone);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1022,
      "groundtruth": "= MathUtils.sanitizeDegreesInt((int) Math.round(hct.getHue()));",
      "prediction": "= (int) Math.floor(hct.getHue());",
      "es": 0.4444444444444444,
      "em": false,
      "passed": false,
      "original_prediction": "= (int) Math.floor(hct.getHue());"
    },
    {
      "index": 1023,
      "groundtruth": "= Hct.fromInt(entry.getKey());",
      "prediction": "= Hct.fromInt(entry.getKey());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1024,
      "groundtruth": "= TonalPalette.fromHueAndChroma(25, 84.);",
      "prediction": "= TonalPalette.fromHueAndChroma(25, 84.);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= TonalPalette.fromHueAndChroma(hue, 24.);"
    },
    {
      "index": 1025,
      "groundtruth": "hct.getChroma() < TARGET_CHROMA ? WEIGHT_CHROMA_BELOW : WEIGHT_CHROMA_ABOVE;",
      "prediction": "hct.getChroma() < TARGET_CHROMA ? WEIGHT_CHROMA_BELOW : WEIGHT_CHROMA_ABOVE;",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "hct.getChroma() < CUTOFF_CHroma ? WEIGHT_CHroma_BELOW : WEIGHT_chroma_ABOVE;"
    },
    {
      "index": 1026,
      "groundtruth": "(), hct.getChroma(), hct);",
      "prediction": "(), hct.getChroma(), hct);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1027,
      "groundtruth": "ColorUtils.labFromArgb(color.toInt());",
      "prediction": "ColorUtils.labFromArgb(color.toInt());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "ColorUtils.labFromHct(color);"
    },
    {
      "index": 1028,
      "groundtruth": "(hue, input.getChroma(), input.getTone());",
      "prediction": "(hue, input.getChroma(), input.getTone());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "Hue(hue, input.getChroma(), input.getTone());"
    },
    {
      "index": 1029,
      "groundtruth": "int red = ColorUtils.redFromArgb(argb);",
      "prediction": "int red = ColorUtils.redFromArgb(argb);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1030,
      "groundtruth": "hctAdd = Hct.from(hue, chroma, startTone + delta);",
      "prediction": "hctAdd = Hct.from(hue, chroma, startTone + delta);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1031,
      "groundtruth": "== Math.round(smallestDeltaHct.getChroma())) {",
      "prediction": "== chroma) {}",
      "es": 0.23913043478260865,
      "em": false,
      "passed": false,
      "original_prediction": "== chroma) {"
    },
    {
      "index": 1032,
      "groundtruth": "input.getHue(), coldestHue, warmestHue);",
      "prediction": "input.getHue(), coldestHue, warmestHue);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1033,
      "groundtruth": "coldestHue = getColdest().getHue();",
      "prediction": "coldestHue = getColdest().getHue();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1034,
      "groundtruth": "round(input.getHue()));",
      "prediction": "round(input.getHue()));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "round(startHue));"
    },
    {
      "index": 1035,
      "groundtruth": "color = Hct.from(this.hue, this.chroma, tone).toInt();",
      "prediction": "color = Hct.from(this.hue, this.chroma, tone).toInt();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1036,
      "groundtruth": ".getChroma(), ColorUtils.lstarFromY(viewedInVc[1]));",
      "prediction": ".getChroma(), ColorUtils.lstarFromY(viewedInVc[1]));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".getChroma(), ColorUtils.lstarFromArgb(argb));"
    },
    {
      "index": 1037,
      "groundtruth": "hue = MathUtils.sanitizeDegreesInt(startHue + i);",
      "prediction": "hue = MathUtils.sanitizeDegreesInt(startHue + i);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "hue = MathUtils.sanitizeDegreesInt(startHue + hueAddend);"
    },
    {
      "index": 1038,
      "groundtruth": "Cam16.fromInt(toInt());",
      "prediction": "Cam16.fromInt(toInt());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "Cam16.fromInt(argb);"
    },
    {
      "index": 1039,
      "groundtruth": "recastInVc.getHue(), recastInVc.getChroma(), ColorUtils.lstarFromY(viewedInVc[1]));",
      "prediction": "recastInVc.getHue(), recastInVc.getChroma(), ColorUtils.lstarFromY(viewedInVc[1]));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "recastInVc.getHue(), recastInVc.getChroma(), ColorUtils.lstarFromArgb(viewedInVc[1])"
    },
    {
      "index": 1040,
      "groundtruth": "= MathUtils.sanitizeDegreesDouble(\n          startHue + directionOfRotation * hueAddend);",
      "prediction": "= startHue + hueAddend;",
      "es": 0.2584269662921348,
      "em": false,
      "passed": false,
      "original_prediction": "= startHue + hueAddend;"
    },
    {
      "index": 1041,
      "groundtruth": "fromCam = Cam16.fromInt(from);",
      "prediction": "fromCam = Cam16.fromInt(from);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1042,
      "groundtruth": "= Cam16.fromInt(ucs);",
      "prediction": "= Cam16.fromInt(ucs);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1043,
      "groundtruth": ".toRadians(MathUtils.sanitizeDegreesDouble(hue - 50.)));",
      "prediction": ".toRadians(hue));",
      "es": 0.3035714285714286,
      "em": false,
      "passed": false,
      "original_prediction": ".toRadians(hue));"
    },
    {
      "index": 1044,
      "groundtruth": "tone = ColorUtils.lstarFromArgb(argb);",
      "prediction": "tone = ColorUtils.lstarFromArgb(argb);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "tone = ColorUtils.lstarFromY(cam.xyz[1]);"
    },
    {
      "index": 1045,
      "groundtruth": "hue = MathUtils.sanitizeDegreesDouble(Math.toDegrees(Math.atan2(lab[2], lab[1])));",
      "prediction": "lab = new double[3];",
      "es": 0.1585365853658537,
      "em": false,
      "passed": false,
      "original_prediction": "lab = new double[3];"
    },
    {
      "index": 1046,
      "groundtruth": "fromCam.getChroma(), ColorUtils.lstarFromArgb(from));",
      "prediction": "fromCam.getHue(), fromCam.getChroma(), fromCam.getTone());",
      "es": 0.3620689655172413,
      "em": false,
      "passed": false,
      "original_prediction": "fromCam.getHue(), fromCam.getChroma(), fromCam.getTone());"
    },
    {
      "index": 1047,
      "groundtruth": "ucsCam.getHue(), fromCam.getChroma(), ColorUtils.lstarFromArgb(from));",
      "prediction": "fromCam);",
      "es": 0.12857142857142856,
      "em": false,
      "passed": false,
      "original_prediction": "fromCam);"
    },
    {
      "index": 1048,
      "groundtruth": "HctSolver.solveToInt(hue, chroma, tone);",
      "prediction": "HctSolver.solveToInt(hue, chroma, tone);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1049,
      "groundtruth": "toCam.getAstar();",
      "prediction": "toCam.getAstar();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1050,
      "groundtruth": "hue = cam.getHue();",
      "prediction": "hue = cam.getHue();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1051,
      "groundtruth": "fromCam.getBstar();",
      "prediction": "fromCam.getBstar();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1052,
      "groundtruth": "return Cam16.fromUcs(jstar, astar, bstar).toInt();",
      "prediction": "return Cam16.fromUcs(jstar, astar, bstar).toInt();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "return Cam16.from(jstar, astar, bstar).toInt();"
    },
    {
      "index": 1053,
      "groundtruth": "double fromJ = fromCam.getJstar();",
      "prediction": "double fromJ = fromCam.getJstar();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1054,
      "groundtruth": "toB = toCam.getBstar();",
      "prediction": "toB = toCam.getBstar();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1055,
      "groundtruth": "Hct.fromInt(designColor);",
      "prediction": "Hct.fromInt(designColor);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1056,
      "groundtruth": "differenceDegrees = MathUtils.differenceDegrees(fromHct.getHue(), toHct.getHue());",
      "prediction": "differenceDegrees = MathUtils.differenceDegrees(fromHct.getHue(), toHct.getHue());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "differenceDegrees = MathUtils.sanitizeDegreesDouble(toHct.getHue() - fromHct.getHue());"
    },
    {
      "index": 1057,
      "groundtruth": "(), fromCam.getChroma(), ColorUtils.lstarFromArgb(from));",
      "prediction": "(), fromCam.getChroma(), ColorUtils.lstarFromArgb(from));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(), fromCam.getChroma(), fromCam.getTone());"
    },
    {
      "index": 1058,
      "groundtruth": "* viewingConditions.getNbb();",
      "prediction": "* viewingConditions.getNbb();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "* (1.0 / viewingConditions.getNbb();"
    },
    {
      "index": 1059,
      "groundtruth": "= MathUtils.differenceDegrees(fromHct.getHue(), toHct.getHue());",
      "prediction": "= MathUtils.differenceDegrees(fromHct.getHue(), toHct.getHue());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= MathUtils.sanitizeDegreesDouble(toHct.getHue() - fromHct.getHue());"
    },
    {
      "index": 1060,
      "groundtruth": "fromHct.getHue()\n                + rotationDegrees * MathUtils.rotationDirection(fromHct.getHue(), toHct.getHue()));",
      "prediction": "fromHct.getHue() + (toHct.getHue() - fromHct.getHue()) * rotationDegrees);",
      "es": 0.3793103448275862,
      "em": false,
      "passed": false,
      "original_prediction": "fromHct.getHue() + (toHct.getHue() - fromHct.getHue()) * rotationDegrees);"
    },
    {
      "index": 1061,
      "groundtruth": "viewingConditions.getAw() + 4.0)\n            * viewingConditions.getFlRoot();",
      "prediction": "viewingConditions.getAw() + 4.0)\n            * viewingConditions.getFlRoot();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "viewingConditions.getAw() + 4.0)\n * viewingConditions.getFlRoot());"
    },
    {
      "index": 1062,
      "groundtruth": "ColorUtils.argbFromXyz(xyz[0], xyz[1], xyz[2]);",
      "prediction": "ColorUtils.intFromArgbBit",
      "es": 0.3191489361702128,
      "em": false,
      "passed": false,
      "original_prediction": "ColorUtils.intFromArgbBit"
    },
    {
      "index": 1063,
      "groundtruth": "viewingConditions.getC() * viewingConditions.getZ());",
      "prediction": "viewingConditions.getNbb();",
      "es": 0.4528301886792453,
      "em": false,
      "passed": false,
      "original_prediction": "viewingConditions.getNbb();"
    },
    {
      "index": 1064,
      "groundtruth": "outputHue, fromHct.getChroma(), fromHct.getTone()).toInt();",
      "prediction": "outputHue, fromHct.getChroma(), fromHct.getTone()).toInt();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1065,
      "groundtruth": "from(outputHue, fromHct.getChroma(), fromHct.getTone()).toInt();",
      "prediction": "from(outputHue, fromHct.getChroma(), fromHct.getTone()).toInt();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1066,
      "groundtruth": "viewingConditions.getRgbD()[0] * rT;",
      "prediction": "viewingConditions.getRgbD()[0] * rT;",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1067,
      "groundtruth": "Math.pow(viewingConditions.getFl() * Math.abs(bD) / 100.0, 0.42);",
      "prediction": "Math.pow(viewingConditions.getFl() * Math.abs(bD) / 100.0, 0.42);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "Math.pow(viewingConditions.getFl() * Math.abs(bD) / 100.0, 0.42;"
    },
    {
      "index": 1068,
      "groundtruth": "* viewingConditions.getZ());",
      "prediction": "* viewingConditions.getZ());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "* viewingConditions.getNbb();"
    },
    {
      "index": 1069,
      "groundtruth": "double blueL = ColorUtils.linearized(blue);",
      "prediction": "double blueL = ColorUti",
      "es": 0.5348837209302326,
      "em": false,
      "passed": false,
      "original_prediction": "double blueL = ColorUti"
    },
    {
      "index": 1070,
      "groundtruth": "eHue * viewingConditions.getNc() * viewingConditions.getNcb();",
      "prediction": "eHue * viewingConditions.getNc() * viewingConditions.getNcb();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "p2 * viewingConditions.getNc() * viewingConditions.getNcb();"
    },
    {
      "index": 1071,
      "groundtruth": "* viewingConditions.getFlRoot();",
      "prediction": "* viewingConditions.getFlRoot();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1072,
      "groundtruth": "rAF = Math.pow(viewingConditions.getFl() * Math.abs(rD) / 100.0, 0.42);",
      "prediction": "rAF = Math.pow(viewingConditions.getFl() * Math.abs(rD) / 100.0, 0.42);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "rAF = Math.pow(viewingConditions.getFl() * Math.abs(rD) / 100.0, 0.42"
    },
    {
      "index": 1073,
      "groundtruth": "* Math.sqrt((alpha * viewingConditions.getC()) / (viewingConditions.getAw() + 4.0));",
      "prediction": "* Math.sqrt((alpha * viewingConditions.getC()) / (viewingConditions.getAw() + 4.0));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "* Math.sqrt((alpha * viewingConditions.getC()) / (viewingConditions.getAw() + 4.0);"
    },
    {
      "index": 1074,
      "groundtruth": "double redL = ColorUtils.linearized(red);",
      "prediction": "double redL = ColorUtils.linearized(red);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1075,
      "groundtruth": "m = c * viewingConditions.getFlRoot();",
      "prediction": "m = Math.sqrt(c * c / (viewingConditions.getFlRoot() * viewingConditions.get))",
      "es": 0.47435897435897434,
      "em": false,
      "passed": false,
      "original_prediction": "m = Math.sqrt(c * c / (viewingConditions.getFlRoot() * viewingConditions.get"
    },
    {
      "index": 1076,
      "groundtruth": "viewingConditions.getAw(),\n                viewingConditions.getC() * viewingConditions.getZ());",
      "prediction": "Math.sqrt(ac / 100.0);",
      "es": 0.09375,
      "em": false,
      "passed": false,
      "original_prediction": "Math.sqrt(ac / 100.0);"
    },
    {
      "index": 1077,
      "groundtruth": "pow(0.29, viewingConditions.getN()), 0.73) * Math.pow(t, 0.9);",
      "prediction": "pow(0.29, viewingConditions.getN()), 0.73) * Math.pow(t, 0.9);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "pow(0.29, viewingConditions.getN()), 0.73), 1.0 / 00.9);"
    },
    {
      "index": 1078,
      "groundtruth": "alpha * viewingConditions.getC()) / (viewingConditions.getAw() + 4.0));",
      "prediction": "alpha * viewingConditions.getC()) / (viewingConditions.getAw() + 4.0));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "alpha * viewingConditions.getC()) / (viewingConditions.getAw() + 4.0);"
    },
    {
      "index": 1079,
      "groundtruth": "viewingConditions.getFlRoot();",
      "prediction": "viewingConditions.getFlRoot();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1080,
      "groundtruth": "Math.pow(getJ() / 100.0, 1.0 / viewingConditions.getC() / viewingConditions.getZ());",
      "prediction": "Math.hypot(astar, bstar) / (23.0 * p1 + 11.0 * t * Math.cos(hRad) + 118.0 * t * Math.sin(hRad));",
      "es": 0.26041666666666663,
      "em": false,
      "passed": false,
      "original_prediction": "Math.hypot(astar, bstar) / (23.0 * p1 + 11.0 * t * Math.cos(hRad) + 118.0 * t * Math.sin(hRad));"
    },
    {
      "index": 1081,
      "groundtruth": ") / 100.0, 1.0 / viewingConditions.getC() / viewingConditions.getZ());",
      "prediction": ") / 100.0, 0.5);",
      "es": 0.2142857142857143,
      "em": false,
      "passed": false,
      "original_prediction": ") / 100.0, 0.5);"
    },
    {
      "index": 1082,
      "groundtruth": "(100.0 / viewingConditions.getFl()) * Math.pow(gCBase, 1.0 / 0.42);",
      "prediction": "(100.0 / viewingConditions.getFl())",
      "es": 0.5223880597014925,
      "em": false,
      "passed": false,
      "original_prediction": "(100.0 / viewingConditions.getFl())"
    },
    {
      "index": 1083,
      "groundtruth": "double c = m2 / viewingConditions.getFlRoot();",
      "prediction": "double c = mstar * Math.sqrt(jstar / (1.0 + 007 * jstar));",
      "es": 0.3275862068965517,
      "em": false,
      "passed": false,
      "original_prediction": "double c = mstar * Math.sqrt(jstar / (1.0 + 007 * jstar));"
    },
    {
      "index": 1084,
      "groundtruth": "ac / viewingConditions.getNbb());",
      "prediction": "40.0 * rA + 20.0 * gA + bA) / 20.0;",
      "es": 0.08571428571428574,
      "em": false,
      "passed": false,
      "original_prediction": "40.0 * rA + 20.0 * gA + bA) / 20.0;"
    },
    {
      "index": 1085,
      "groundtruth": "return QuantizerWsmeans.quantize(pixels, wuClusters, maxColors);",
      "prediction": "QuantizerWsmeans wsmeans = new QuantizerWsmeans();",
      "es": 0.375,
      "em": false,
      "passed": false,
      "original_prediction": "QuantizerWsmeans wsmeans = new QuantizerWsmeans();"
    },
    {
      "index": 1086,
      "groundtruth": "/ viewingConditions.getRgbD()[0];",
      "prediction": "/ viewingConditions.getRgbD()[0];",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1087,
      "groundtruth": "- Math.pow(0.29, viewingConditions.getN()), 0.73), 1.0 / 0.9);",
      "prediction": "* viewingConditions.getN(), 073) * Math.pow(t, 0.9);",
      "es": 0.5161290322580645,
      "em": false,
      "passed": false,
      "original_prediction": "* viewingConditions.getN(), 073) * Math.pow(t, 0.9);"
    },
    {
      "index": 1088,
      "groundtruth": "lab = ColorUtils.labFromArgb(argb);",
      "prediction": "lab = ColorUtils.labFromArgb(argb);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1089,
      "groundtruth": "errorPalette = TonalPalette.fromHueAndChroma(25.0, 84.0);",
      "prediction": "errorPalette = null;",
      "es": 0.33333333333333337,
      "em": false,
      "passed": false,
      "original_prediction": "errorPalette = null;"
    },
    {
      "index": 1090,
      "groundtruth": "ColorUtils.whitePointD65(),\n        (200.0 / Math.PI * ColorUtils.yFromLstar(50.0) / 100.f),\n        lstar,\n        2.0,\n        false);",
      "prediction": "Cam16.D65,\n        11.72,\n        lstar,\n        2.0,\n        false);",
      "es": 0.4558823529411765,
      "em": false,
      "passed": false,
      "original_prediction": "Cam16.D65,\n        11.72,\n        lstar,\n        2.0,\n        false);"
    },
    {
      "index": 1091,
      "groundtruth": "MathUtils.sanitizeDegreesDouble(sourceHue + rotations[0]);",
      "prediction": "sourceHue + rotations[0];",
      "es": 0.43103448275862066,
      "em": false,
      "passed": false,
      "original_prediction": "sourceHue + rotations[0];"
    },
    {
      "index": 1092,
      "groundtruth": "gC / viewingConditions.getRgbD()[1];",
      "prediction": "gC / viewingConditions.getRgbD()[1];",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1093,
      "groundtruth": "ColorUtils.argbFromLab(lab[0], lab[1], lab[2]);",
      "prediction": "ColorUtils.argbFromLab(lab[0], lab[1], lab[2]);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1094,
      "groundtruth": "n = (ColorUtils.yFromLstar(backgroundLstar) / whitePoint[1]);",
      "prediction": "n = 1.0 + (0.015 * (fl - 50.0) * (fl - 50.0));",
      "es": 0.180327868852459,
      "em": false,
      "passed": false,
      "original_prediction": "n = 1.0 + (0.015 * (fl - 50.0) * (fl - 50.0));"
    },
    {
      "index": 1095,
      "groundtruth": "100.0 / viewingConditions.getFl()) * Math.pow(rCBase, 1.0 / 0.42);",
      "prediction": "100.0 / viewingConditions.getFl()) * Math.pow(rCBase, 1.0 / 0.42);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1096,
      "groundtruth": "d = MathUtils.clampDouble(0.0, 1.0, d);",
      "prediction": "double f = 1.0;",
      "es": 0.28205128205128205,
      "em": false,
      "passed": false,
      "original_prediction": "double f = 1.0;"
    },
    {
      "index": 1097,
      "groundtruth": "sourceColorArgb = sourceColorHct.toInt();",
      "prediction": "sourceColorArgb = sourceColorHct.toInt();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "sourceColorArgb = sourceColorHct.getArgb();"
    },
    {
      "index": 1098,
      "groundtruth": ": MathUtils.lerp(0.525, 0.59, ((f - 0.8) * 10.0));",
      "prediction": ": MathUtils.lerp(0.525, 0.59, ((f - 0.8) * 10.0));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ": MathUtils.lerp(0.59, 0.69, (f - 0.9) * 10.0));"
    },
    {
      "index": 1099,
      "groundtruth": "final double sourceHue = sourceColorHct.getHue();",
      "prediction": "final double sourceHue = sourceColorHct.getHue();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "final double sourceHue = sourceColorHct.hue;"
    },
    {
      "index": 1100,
      "groundtruth": "MathUtils.lerp(this.low, this.normal, (contrastLevel - -1) / 1);",
      "prediction": "MathUtils.lerp(this.low, this.normal, (contrastLevel - -1) / 1);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "MathUtils.lerp(this.low, this.normal, (contrastLevel + 1) / 1.0);"
    },
    {
      "index": 1101,
      "groundtruth": "(CorePalette.of(argb));",
      "prediction": "(CorePalette.of(argb));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1102,
      "groundtruth": "MathUtils.lerp(this.normal, this.medium, (contrastLevel - 0) / 0.5);",
      "prediction": "MathUtils.lerp(this.normal, this.medium, (contrastLevel - 0) / 0.5);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "MathUtils.lerp(this.normal, this.medium, (contrastLevel - 0.0) / 0.5);"
    },
    {
      "index": 1103,
      "groundtruth": "MathUtils.lerp(this.medium, this.high, (contrastLevel - 0.5) / 0.5);",
      "prediction": "MathUtils.lerp(this.medium, this.high, (contrastLevel - 0.5) / 0.5);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1104,
      "groundtruth": "lightFromCorePalette(CorePalette.contentOf(argb));",
      "prediction": "lightFromCorePalette(CorePalette.contentOf(argb));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1105,
      "groundtruth": "ColorUtils.yFromLstar(50.0) / 100.f),\n        lstar,\n        2.0,\n        false);",
      "prediction": "ColorUtils.yFromLstar(50.0) / 100.f),\n        lstar,\n        2.0,\n        false);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "Math.PI),\n        lstar,\n        2.0,\n        false);"
    },
    {
      "index": 1106,
      "groundtruth": "pointProvider.toInt(clusters[i]);",
      "prediction": "0;",
      "es": 0.030303030303030276,
      "em": false,
      "passed": false,
      "original_prediction": "0;"
    },
    {
      "index": 1107,
      "groundtruth": "distance = pointProvider.distance(clusters[i], clusters[j]);",
      "prediction": "distance = pointProvider.distanc",
      "es": 0.5333333333333333,
      "em": false,
      "passed": false,
      "original_prediction": "distance = pointProvider.distanc"
    },
    {
      "index": 1108,
      "groundtruth": "pointProvider.fromInt(inputPixel);",
      "prediction": "pointProvider.fromInt(inputPixel);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1109,
      "groundtruth": "(Contrast.ratioOfTones(49, bgTone) >= desiredRatio) {",
      "prediction": "public static double foregro",
      "es": 0.2264150943396226,
      "em": false,
      "passed": false,
      "original_prediction": "public static double foregro"
    },
    {
      "index": 1110,
      "groundtruth": "if (Contrast.ratioOfTones(upper, answer) >= desiredRatio\n            && Contrast.ratioOfTones(lower, answer) >= desiredRatio) {",
      "prediction": "import java.util.function.Function;",
      "es": 0.1417322834645669,
      "em": false,
      "passed": false,
      "original_prediction": "import java.util.function.Function;"
    },
    {
      "index": 1111,
      "groundtruth": "= Contrast.lighter(upper, desiredRatio);",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 1112,
      "groundtruth": "().quantize(pixels, colorCount);",
      "prediction": "Result();",
      "es": 0.15625,
      "em": false,
      "passed": false,
      "original_prediction": "Result();"
    },
    {
      "index": 1113,
      "groundtruth": "pointProvider.distance(point, clusters[j]);",
      "prediction": "pointProvider.distance(point, clusters[j]);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "pointProvider.distance(point, clusters[j];"
    },
    {
      "index": 1114,
      "groundtruth": "red = ColorUtils.redFromArgb(pixel);",
      "prediction": "red = ColorUtils.redFromArgb(pixel);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1115,
      "groundtruth": "previousDistance = pointProvider.distance(point, previousCluster);",
      "prediction": "previousDistance = pointProvider.di",
      "es": 0.5303030303030303,
      "em": false,
      "passed": false,
      "original_prediction": "previousDistance = pointProvider.di"
    },
    {
      "index": 1116,
      "groundtruth": ") -> palette, (s) -> hct.getTone());",
      "prediction": "cheme;",
      "es": 0.11111111111111116,
      "em": false,
      "passed": false,
      "original_prediction": "cheme;"
    },
    {
      "index": 1117,
      "error": "RetryError[<Future at 0x10f0a35d0 state=finished raised HTTPError>]",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": "",
      "prediction": ""
    },
    {
      "index": 1118,
      "groundtruth": "Contrast.ratioOfTones(bgTone, fInitialTone) >= fContrast\n              ? fInitialTone\n              : DynamicColor.foregroundTone(bgTone, fContrast);",
      "prediction": "double fTone =\n     Contrast.ratioOfTone(bgTone, fInitialTone) >= fContrast",
      "es": 0.2684563758389261,
      "em": false,
      "passed": false,
      "original_prediction": "double fTone =\n     Contrast.ratioOfTone(bgTone, fInitialTone) >= fContrast"
    },
    {
      "index": 1119,
      "groundtruth": "Contrast.ratioOfTones(bgTone, nInitialTone) >= nContrast\n              ? nInitialTone\n              : DynamicColor.foregroundTone(bgTone, nContrast);",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 1120,
      "groundtruth": "ColorUtils.blueFromArgb(pixel);",
      "prediction": "ColorUtils.blueFromArgb(pixel);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1121,
      "groundtruth": "Contrast.ratioOfTones(bgTone, answer) >= desiredRatio) {",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 1122,
      "error": "RetryError[<Future at 0x10f0f0050 state=finished raised HTTPError>]",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": "",
      "prediction": ""
    },
    {
      "index": 1123,
      "groundtruth": "alpha = MathUtils.clampInt(0, 255, (int) Math.round(percentage * 255));",
      "prediction": "alpha = (int) (255 * percentage);",
      "es": 0.3943661971830986,
      "em": false,
      "passed": false,
      "original_prediction": "alpha = (int) (255 * percentage);"
    },
    {
      "index": 1124,
      "groundtruth": "fTone = MathUtils.clampDouble(0, 100, nTone + delta * expansionDir);",
      "prediction": "import com.kyant.m3color.utils.MathUtils;",
      "es": 0.1470588235294118,
      "em": false,
      "passed": false,
      "original_prediction": "import com.kyant.m3color.utils.MathUtils;"
    },
    {
      "index": 1125,
      "groundtruth": "MathUtils.clampDouble(0, 100, fTone - delta * expansionDir);",
      "prediction": "import com.kyant.m3color.palettes.TonePalette;",
      "es": 0.15000000000000002,
      "em": false,
      "passed": false,
      "original_prediction": "import com.kyant.m3color.palettes.TonePalette;"
    },
    {
      "index": 1126,
      "groundtruth": "TonalPalette.fromInt(argb);",
      "prediction": "TonalPalette.fromInt(argb);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "Hct.fromInt(argb);"
    },
    {
      "index": 1127,
      "groundtruth": "WebhookVerifier(WebhookSigner.hmacSha1(secret), Encoder.HEX);",
      "prediction": "WebhookVerifier(WebhookSigner.hmacSha1(secret), Encoder.HEX);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1128,
      "groundtruth": "ResponseUtil.errorNotFound();",
      "prediction": "ResponseUtil.errorNotFound();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1129,
      "groundtruth": "ResponseUtil.handleDashboardInfo(dashboardInfo);",
      "prediction": "ResponseUtil.handleDashboardInfo(dashboardInfo);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1130,
      "groundtruth": "if(TransactionUtil.isValidYear(creationYear)){",
      "prediction": "if(TransactionUtil.isValidYear(creationYear)){",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "if(TransactionUtil.isValidYear(creationYear))"
    },
    {
      "index": 1131,
      "groundtruth": "= DateUtil.getUnixTimeFromDate(startDate);",
      "prediction": "= DateUtil.getUnixTimeFromDate(startDate);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1132,
      "groundtruth": "DateUtil.isValidDate(startDate) && DateUtil.isValidDate(endDate)) {",
      "prediction": "TransactionUtil.isValidDate(startDate)",
      "es": 0.35820895522388063,
      "em": false,
      "passed": false,
      "original_prediction": "TransactionUtil.isValidDate(startDate)"
    },
    {
      "index": 1133,
      "groundtruth": "(TransactionUtil.idValidAmount(amount)) {",
      "prediction": "(amount != null && amount.length()>0)",
      "es": 0.2195121951219512,
      "em": false,
      "passed": false,
      "original_prediction": "(amount != null && amount.length()>0)"
    },
    {
      "index": 1134,
      "groundtruth": ".isValidDate(startDate) && DateUtil.isValidDate(endDate)) {",
      "prediction": ".isValidDate(startDate) && Date",
      "es": 0.5254237288135593,
      "em": false,
      "passed": false,
      "original_prediction": ".isValidDate(startDate) && Date"
    },
    {
      "index": 1135,
      "groundtruth": "(!DateUtil.isValidDate(startDate) || !DateUtil.isValidDate(endDate)){",
      "prediction": "(!DateUtil.isValidDate(startDate) || !DateUtil.isValidDate(endDate)){",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(DateUtil.validateDate(startDate) == false || DateUtil.validateDate(endDate) == false)"
    },
    {
      "index": 1136,
      "groundtruth": "whereGreaterThan(\"creationTimeStamp\", DateUtil.getUnixTimeFromDate(startDate))\n                    .whereLessThan(\"creationTimeStamp\", DateUtil.getUnixTimeFromDate(endDate));",
      "prediction": "whereGreaterThan(\"creationTimeStamp\", DateUtil.getUnixTimeFromDate(startDate))\n                    .whereLessThan(\"creationTimeStamp\", DateUtil.getUnixTimeFromDate(endDate));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "whereGreaterThanOrEqualTo(\"creationDate\", DateUtil.parseDate(startDate))\n                    .whereLessThanOrEqualTo(\"creationDate\", DateUtil.parseDate(endDate));"
    },
    {
      "index": 1137,
      "groundtruth": "&& TransactionUtil.isValidYear(creationYear)) {",
      "prediction": "&& TransactionUtil.isVali",
      "es": 0.5319148936170213,
      "em": false,
      "passed": false,
      "original_prediction": "&& TransactionUtil.isVali"
    },
    {
      "index": 1138,
      "groundtruth": "ResponseUtil.errorLimitExceeded();",
      "prediction": "ResponseUtil.errorLimitExceeded();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1139,
      "groundtruth": "(TransactionUtil.idValidAmount(transactionAmount)) {",
      "prediction": "(TransactionUtil.idValidAmount(transactionAmount)) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(TransactionUtil.idValidAmount(transactionAmount))"
    },
    {
      "index": 1140,
      "groundtruth": "DateUtil.isValidDate(endDate)){",
      "prediction": "DateUtil.isValidD",
      "es": 0.5483870967741935,
      "em": false,
      "passed": false,
      "original_prediction": "DateUtil.isValidD"
    },
    {
      "index": 1141,
      "groundtruth": "ResponseUtil.errorParsingEntity(\"Required Date must be passed in query and should be in dd-MM-yyyy format\");",
      "prediction": "new ResponseEntity<>(\"Invalid date range\", HttpStatus.BAD_REQUEST);",
      "es": 0.2222222222222222,
      "em": false,
      "passed": false,
      "original_prediction": "new ResponseEntity<>(\"Invalid date range\", HttpStatus.BAD_REQUEST);"
    },
    {
      "index": 1142,
      "groundtruth": "return ResponseUtil.errorParsingEntity(\"Error! Date format must be in dd-MM-yyyy\");",
      "prediction": "return ResponseUtil.errorParsingEntity(\"Error! Date format must be in dd-MM-yyyy\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1143,
      "groundtruth": "(this.isNumber() && other.isNumber()) {",
      "prediction": "(this.isNumber() && other.isNumber()) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(this.isNumber() && other.isNumber())"
    },
    {
      "index": 1144,
      "groundtruth": "other.assertNumber();",
      "prediction": "other.assertNumber();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "this.assertNumber();"
    },
    {
      "index": 1145,
      "groundtruth": "ResponseUtil.errorUnauthorized();",
      "prediction": "ResponseUtil.errorUnauthorized();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1146,
      "groundtruth": "userDetail.getAuthorities());",
      "prediction": "userDetail.getAuthorities());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1147,
      "groundtruth": "return ResponseUtil.successAddOne();",
      "prediction": "return ResponseUtil.successAddOne();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "return ResponseUtil.successCreateOne();"
    },
    {
      "index": 1148,
      "groundtruth": "getSourceIndex(), body.getDestinationIndex());",
      "prediction": "getSourceIndex(), body.getDestinationIndex());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1149,
      "groundtruth": "body.getSourceIndex(), body.getDestinationIndex());",
      "prediction": "body.getSourceIndex(), body.getDestinationIndex());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1150,
      "groundtruth": "DeluxeMenuCommand> command = parser.parse(commandArgs);",
      "prediction": "DeluxeMenuCommand> command = parser.parse(commandArgs);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1151,
      "groundtruth": "= helixWrapper.fetchChatters(channelId, accessToken);",
      "prediction": "= helixWrapper.fetchChatters(channelId, accessToken);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1152,
      "groundtruth": "channel.isAccessTokenExpired()) {",
      "prediction": "!channel.getAccess",
      "es": 0.36363636363636365,
      "em": false,
      "passed": false,
      "original_prediction": "!channel.getAccess"
    },
    {
      "index": 1153,
      "groundtruth": "Moderator> vips = helixWrapper.fetchModerators(channelId, accessToken);",
      "prediction": "Moderator> vips = helixWrapper.fetchModerators(channelId, accessToken);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1154,
      "groundtruth": "channel.getScopeNames());",
      "prediction": "null);",
      "es": 0.16000000000000003,
      "em": false,
      "passed": false,
      "original_prediction": "null);"
    },
    {
      "index": 1155,
      "groundtruth": "sum += x.getSubTotal();",
      "prediction": "sum += x.getSubTotal();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1156,
      "groundtruth": "setDescription(game.getDescription());",
      "prediction": "setYear(game.getYear());",
      "es": 0.5263157894736843,
      "em": false,
      "passed": false,
      "original_prediction": "setYear(game.getYear());"
    },
    {
      "index": 1157,
      "groundtruth": "setId(game.getId());",
      "prediction": "setId(game.getId());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1158,
      "groundtruth": "(game.getId() == id){",
      "prediction": "(game.getId() == id){",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(game.getId()==id)"
    },
    {
      "index": 1159,
      "groundtruth": "game.setCountOwner(game.getCountOwner() + 1);",
      "prediction": "game.setCountOwner(game.getCountOwner() + 1);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "game.setCountOwner(game.getCountOwner()+1);"
    },
    {
      "index": 1160,
      "groundtruth": "(!(customer.getGames().contains(game))){",
      "prediction": "(!(customer.getGames().contains(game))){",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(customer.getGames().contains(game))"
    },
    {
      "index": 1161,
      "groundtruth": ".equals(customer.getSurName()) &&\n                    customer2.getBirthYear() == customer.getBirthYear()) {",
      "prediction": ".equals(customer.getSurName()) &&\n                    customer2.getBirthYear() == customer.getBirthYear()) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".equals(customer.getSurName()) &&\n                    customer2.getBirthYear().equals(customer.getBirthYear()) &&\n                    customer2.getPhoneNumber().e"
    },
    {
      "index": 1162,
      "groundtruth": "(game1.getId()==id){",
      "prediction": "(game1.getId()==id){",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(game1.getId() == id)"
    },
    {
      "index": 1163,
      "groundtruth": "customer2.getSurName().equals(customer.getSurName()) &&\n                    customer2.getBirthYear() == customer.getBirthYear()) {",
      "prediction": "customer2.getSurname().equals(customer.getSurname()) &&",
      "es": 0.4076923076923077,
      "em": false,
      "passed": false,
      "original_prediction": "customer2.getSurname().equals(customer.getSurname()) &&"
    },
    {
      "index": 1164,
      "groundtruth": ") == customer.getBirthYear()) {",
      "prediction": ").equals(customer)",
      "es": 0.19354838709677424,
      "em": false,
      "passed": false,
      "original_prediction": ").equals(customer"
    },
    {
      "index": 1165,
      "groundtruth": "customer2.getBirthYear() == customer.getBirthYear()) {",
      "prediction": "customer2.getBirthYear() == c",
      "es": 0.537037037037037,
      "em": false,
      "passed": false,
      "original_prediction": "customer2.getBirthYear() == c"
    },
    {
      "index": 1166,
      "groundtruth": ".getName() + \" sold to \" + customer.getName()+\" cost: \"+game.getCost());",
      "prediction": ".getName() + \" sold to \" + customer.getName()+\" cost: \"+game.getCost());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".getName() + \" sold to \" + customer.getName());"
    },
    {
      "index": 1167,
      "groundtruth": "p1.getCategories().add(cat2);",
      "prediction": "p1.getCategories().add(cat2);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1168,
      "groundtruth": "setDiscountAmount(campaign.getDiscountAmount());",
      "prediction": "setPrice(campaign.getPrice());",
      "es": 0.45833333333333337,
      "em": false,
      "passed": false,
      "original_prediction": "setPrice(campaign.getPrice());"
    },
    {
      "index": 1169,
      "groundtruth": "()+\" cost: \"+game.getCost());",
      "prediction": "());",
      "es": 0.13793103448275867,
      "em": false,
      "passed": false,
      "original_prediction": "());"
    },
    {
      "index": 1170,
      "groundtruth": "(campaign1.getId()==id){",
      "prediction": "(campaign1.getId()==id){",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(campaign1.getId() == id)"
    },
    {
      "index": 1171,
      "groundtruth": "(campaign.getGames().get(id));",
      "prediction": "(campaign.getGames().get(id));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "Name(campaign.getGameName());"
    },
    {
      "index": 1172,
      "groundtruth": "p2.getCategories().add(cat3);",
      "prediction": "p2.getCategories().add(cat3);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "p4.getCategories().add(cat3);"
    },
    {
      "index": 1173,
      "groundtruth": "System.out.println(user2.getName() +\" is updated to \" + customer.getName());",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 1174,
      "groundtruth": ".out.println(user2.getName() +\" is updated to \" + customer.getName());",
      "prediction": ".out.println(\"User is found.\");",
      "es": 0.34285714285714286,
      "em": false,
      "passed": false,
      "original_prediction": ".out.println(\"User is found.\");"
    },
    {
      "index": 1175,
      "groundtruth": "p3.getCategories().add(cat3);",
      "prediction": "p3.getCategories().add(cat3);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1176,
      "groundtruth": "p4.getCategories().add(cat3);",
      "prediction": "p4.getCategories().add(cat3);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1177,
      "groundtruth": ", p1.getPrice());",
      "prediction": ", p1.getPrice());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1178,
      "groundtruth": "setSurName(customer.getSurName());",
      "prediction": "setSurName(customer.getSurName());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "setSurname(customer.getSurname());"
    },
    {
      "index": 1179,
      "groundtruth": "2, p5.getPrice());",
      "prediction": "2, p5.getPrice());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "1, p5.getPrice());"
    },
    {
      "index": 1180,
      "groundtruth": "userToUpdate.setBirthYear(customer.getBirthYear());",
      "prediction": "userToUpdate.setBirthYear(customer.getBirthYear());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "userToUpdate.setBirthDate(customer.getBirthDate());"
    },
    {
      "index": 1181,
      "groundtruth": "setTc(customer.getTc());",
      "prediction": "setTc(customer.getTc());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "setBirthDay(customer.getBirthDay());"
    },
    {
      "index": 1182,
      "groundtruth": ", p3, 2, p3.getPrice());",
      "prediction": ", p3, 2, p3.getPrice());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ", p2, 2, p2.getPrice());"
    },
    {
      "index": 1183,
      "groundtruth": "p5.getCategories().add(cat2);",
      "prediction": "productRepositor",
      "es": 0.1724137931034483,
      "em": false,
      "passed": false,
      "original_prediction": "productRepositor"
    },
    {
      "index": 1184,
      "groundtruth": "(ClientCommandInternals.executeCommand(command)) {",
      "prediction": "(ClientCommandInternals.executeCommand(command)) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(ClientCommandInternals.executeCommand(command))"
    },
    {
      "index": 1185,
      "groundtruth": "ClientCommandInternals.finalizeInit();",
      "prediction": "ClientCommandInternals.addCommands(dispatcher, commandSource);",
      "es": 0.467741935483871,
      "em": false,
      "passed": false,
      "original_prediction": "ClientCommandInternals.addCommands(dispatcher, commandSource);"
    },
    {
      "index": 1186,
      "groundtruth": "ClientCommandInternals.getActiveDispatcher();",
      "prediction": "ClientCommandInternals.getActiveDispatcher();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1187,
      "groundtruth": "activeDispatcher.register(ClientCommandManager.literal(API_COMMAND_NAME).then(help));",
      "prediction": "ClientCommandManager.literal(API_COMMAND_NAME);            mainNode.addChild(help);",
      "es": 0.3529411764705882,
      "em": false,
      "passed": false,
      "original_prediction": "ClientCommandManager.literal(API_COMMAND_NAME);            mainNode.addChild(help);"
    },
    {
      "index": 1188,
      "groundtruth": "register(ClientCommandManager.literal(SHORT_API_COMMAND_NAME).redirect(mainNode));",
      "prediction": "register(mainNode);",
      "es": 0.23170731707317072,
      "em": false,
      "passed": false,
      "original_prediction": "register(mainNode);"
    },
    {
      "index": 1189,
      "groundtruth": "LiteralArgumentBuilder<FabricClientCommandSource> help = ClientCommandManager.literal(\"help\");",
      "prediction": "CommandNode<FabricClientCommandSource> help = ClientCommandManager.literal(\"help\").executes(ClientCommandInternals::executeRootHelp);",
      "es": 0.4887218045112782,
      "em": false,
      "passed": false,
      "original_prediction": "CommandNode<FabricClientCommandSource> help = ClientCommandManager.literal(\"help\").executes(ClientCommandInternals::executeRootHelp);"
    },
    {
      "index": 1190,
      "groundtruth": "HelpCommandAccessor.getFailedException().create();",
      "prediction": "new CommandSyntaxException(HelpCommandAccessor.BUILT_IN_EXCEPTIONS.dispatch)",
      "es": 0.3026315789473685,
      "em": false,
      "passed": false,
      "original_prediction": "new CommandSyntaxException(HelpCommandAccessor.BUILT_IN_EXCEPTIONS.dispatch"
    },
    {
      "index": 1191,
      "groundtruth": ") + (int) type.getAbilityScoreIncrease(type.getSubRace()).get(\"intelligence\");",
      "prediction": ") + (int) type.getAbilityScoreIncrease(type.getSubRace()).get(\"intelligence\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1192,
      "groundtruth": "type.getSubRace();",
      "prediction": "type.getSubRace();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1193,
      "groundtruth": "type.getSubRace()).containsKey(\"strength\")){",
      "prediction": "type.getSubRace()).containsKey(\"strength\")){",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "type.getSubRace()).containsKey("
    },
    {
      "index": 1194,
      "groundtruth": "getModifier(stats.getStrength()) + (int) type.getAbilityScoreIncrease(type.getSubRace()).get(\"strength\");",
      "prediction": "getModifier(stats.getStrength()) + (int) type.getAbilityScoreIncrease(type.getSubRace()).get(\"strength\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1195,
      "groundtruth": "type.getSpeed();",
      "prediction": "type.getSpeed();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1196,
      "groundtruth": "stats.getModifier(stats.getCharisma());",
      "prediction": "stats.getModifier(stats.getCharisma());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1197,
      "groundtruth": "stats.getModifier(stats.getStrength());",
      "prediction": "stats.getModifier(stats.getStrength());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1198,
      "groundtruth": "return stats.getSavingThrow(stats.getStrength(), true);",
      "prediction": "return stats.getSavingThrow(stats.getStrength(), true);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "return stats.getSavingThrow(stats.getStrength(), false);"
    },
    {
      "index": 1199,
      "groundtruth": "stats.getCharisma(), false);",
      "prediction": "stats.getCharisma(), false);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "stats.getCharisma(), true);"
    },
    {
      "index": 1200,
      "groundtruth": "return stats.getSavingThrow(stats.getDexterity(), false);",
      "prediction": "return stats.getSavingThrow(stats.getDexterity(), false);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "return stats.getSavingThrow(stats.getDexterity(), true);"
    },
    {
      "index": 1201,
      "groundtruth": "(stats.getIntelligence(), true);",
      "prediction": "(stats.getIntelligence(), true);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1202,
      "groundtruth": "readResult, \"selectApdu with AID: \" + Utils.bytesToHex(command));",
      "prediction": "readResult, \"selectApdu with AID: \" + Utils.bytesToHex(command));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "readResult, \"selectApdu: \" + Utils.bytesToHex(command));"
    },
    {
      "index": 1203,
      "groundtruth": "writeToUiAppend(readResult, \"select CC: \" + Utils.bytesToHex(command));",
      "prediction": "writeToUiAppend(readResult, \"select CC: \" + Utils.bytesToHex(command));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "writeToUiAppend(readResult, \"selectApdu with CC: \" + Utils.bytesToHex(command));"
    },
    {
      "index": 1204,
      "groundtruth": "readResult, \"selectApdu response: \" + Utils.bytesToHex(responseSelect));",
      "prediction": "readResult, \"selectApdu response: \" + Utils.bytesToHex(responseSelect));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "readResult, \"responseSelect length: \" + responseSelect.length + \" data: \" + Utils.bytesToHex(responseSelect)"
    },
    {
      "index": 1205,
      "groundtruth": "(\"sendBinaryFromCc response: \" + Utils.bytesToHex(responseSendBinaryFromCc));",
      "prediction": "(\"sendBinaryFromCc response: \" + Utils.bytesToHex(responseSendBinaryFromCc));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(\"responseSendBinaryFromCc: \" + Utils.bytesToHex(responseSendBinaryFromCc));"
    },
    {
      "index": 1206,
      "groundtruth": "System.out.println(\"capabilityContainerHeader: \" + Utils.bytesToHex(capabilityContainerHeader));",
      "prediction": "System.out.println(\"capabilityContainerHeader: \" + Utils.bytesToHex(capabilityContainerHeader));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1207,
      "groundtruth": "(\"responseSelect: \" + Utils.bytesToHex(responseSelect));",
      "prediction": "(\"responseSelect: \" + Utils.bytesToHex(responseSelect));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1208,
      "groundtruth": ",\"ndefLen: \" + Utils.bytesToHex(ndefLen) + \" len (dec): \" + ndefLenInt);",
      "prediction": ", \"ndefLen: \" + ndefLen + \" data: \" + Utils.bytesToHex(ndefLen));",
      "es": 0.4027777777777778,
      "em": false,
      "passed": false,
      "original_prediction": ", \"ndefLen: \" + ndefLen + \" data: \" + Utils.bytesToHex(ndefLen));"
    },
    {
      "index": 1209,
      "groundtruth": "writeToUiAppend(readResult, \"responseSelect length: \" + responseSelectCc.length + \" data: \" + Utils.bytesToHex(responseSelectCc));",
      "prediction": "System.out.println(\"responseSelectCc: \" + Utils.bytesToHex(responseSelectCc));",
      "es": 0.523076923076923,
      "em": false,
      "passed": false,
      "original_prediction": "System.out.println(\"responseSelectCc: \" + Utils.bytesToHex(responseSelectCc));"
    },
    {
      "index": 1210,
      "groundtruth": "= \"00b000\" + Utils.bytesToHex(cmdLenNew);",
      "prediction": "= \"00b00000\" + Utils.convertIntToHex(ndefLenIntRequest, 2);",
      "es": 0.5423728813559322,
      "em": false,
      "passed": false,
      "original_prediction": "= \"00b00000\" + Utils.convertIntToHex(ndefLenIntRequest, 2);"
    },
    {
      "index": 1211,
      "groundtruth": "] cmdLenNew = Utils.convertIntToByteArray(ndefLenIntRequest, 2);",
      "prediction": "] cmdLenNew = Utils.convertIntToByteArray(ndefLenIntRequest, 2);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "] cmdLenNew = Utils.intToByteArray(ndefLenIntRequest);"
    },
    {
      "index": 1212,
      "groundtruth": "writeToUiAppend(readResult,\"ndefLen new (dec): \" + ndefLenIntRequest + \" data: \" + Utils.bytesToHex(cmdLenNew) );",
      "prediction": "//byte[] cmdLenNew = Utils.convertIntToByteArray(ndefLenIntRequest, 2);",
      "es": 0.23893805309734517,
      "em": false,
      "passed": false,
      "original_prediction": "//byte[] cmdLenNew = Utils.convertIntToByteArray(ndefLenIntRequest, 2);"
    },
    {
      "index": 1213,
      "groundtruth": "if (!Utils.isSucceed(responseSelect)) {",
      "prediction": "// Sending select CC...",
      "es": 0.20512820512820518,
      "em": false,
      "passed": false,
      "original_prediction": "// Sending select CC..."
    },
    {
      "index": 1214,
      "groundtruth": "Utils.getTimestamp();",
      "prediction": "tvTimestamp.getText().toString();",
      "es": 0.33333333333333337,
      "em": false,
      "passed": false,
      "original_prediction": "tvTimestamp.getText().toString();"
    },
    {
      "index": 1215,
      "groundtruth": "] cmdLen = Utils.hexStringToByteArray(sendReadBinaryNlen);",
      "prediction": "] ndefLenInt = new BigInteger(ndefLen).toByteArray();",
      "es": 0.24137931034482762,
      "em": false,
      "passed": false,
      "original_prediction": "] ndefLenInt = new BigInteger(ndefLen).toByteArray();"
    },
    {
      "index": 1216,
      "groundtruth": "(\"messageType\", identifierBroadcastMessageEntry.getValue().getMessageType().getID().toString());",
      "prediction": "(\"messageType\", identifierBroadcastMessageEntry.getValue().getMessageType().getID().toString());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(\"messageType\", identifierBroadcastMessageEntry.getValue().getMessageType().getId().toString());"
    },
    {
      "index": 1217,
      "groundtruth": "resource.canBeOpened() ) {",
      "prediction": "resource.exists",
      "es": 0.3846153846153846,
      "em": false,
      "passed": false,
      "original_prediction": "resource.exists"
    },
    {
      "index": 1218,
      "groundtruth": "<Path> pathStream = pathParser.streamFilesMatchingAntPath(antPattern)) {",
      "prediction": "<Path> pathStream = pathParser.streamFilesMatchingAntPath(antPattern)) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "<Path> pathStream = pathParser.parse(antPattern)"
    },
    {
      "index": 1219,
      "groundtruth": "circularDefinitionPreventer.throwCircularDefinitionException();",
      "prediction": "throw new IllegalArgumentException(\"Circular definition of property \" + key);",
      "es": 0.33766233766233766,
      "em": false,
      "passed": false,
      "original_prediction": "throw new IllegalArgumentException(\"Circular definition of property \" + key);"
    },
    {
      "index": 1220,
      "groundtruth": "( InputStream stream = resource.getInputStream() ) {",
      "prediction": "( InputStream stream = resource.getInputStream() ) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "( InputStream stream = resource.openStream() )"
    },
    {
      "index": 1221,
      "groundtruth": "newValue = getPropertyValue(newKey, mavenProjectProperties, environment, circularDefinitionPreventer.cloneWithAdditionalKey(key));",
      "prediction": "newValue = getPropertyValue(newKey, mavenProjectProperties, environment, circularDefinitionPreventer.cloneWithAdditionalKey(key));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "newValue = getPropertyValue(newKey, mavenProjectProperties, environment, circularDefinitionPreventer);"
    },
    {
      "index": 1222,
      "groundtruth": "circularDefinitionPreventer.isPropertyAlreadyVisited(key)) {",
      "prediction": "key == null) {}",
      "es": 0.08333333333333337,
      "em": false,
      "passed": false,
      "original_prediction": "key == null) {"
    },
    {
      "index": 1223,
      "groundtruth": "size = queryResult.getValueListSize();",
      "prediction": "size = queryResult.getValueListSize();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "size = queryResult.size();"
    },
    {
      "index": 1224,
      "groundtruth": "(file.getStatements().size() != 1) {",
      "prediction": "(file.getStatements().size() != 1) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(file.getStatements().size() != 1)"
    },
    {
      "index": 1225,
      "groundtruth": ".putAll(queryResult.getStringMappings(j, localMax));",
      "prediction": "s.put(\"id\", j);",
      "es": 0.17307692307692313,
      "em": false,
      "passed": false,
      "original_prediction": "s.put(\"id\", j);"
    },
    {
      "index": 1226,
      "groundtruth": "statement.getId(),\n                Status.FAILURE,\n                e.getMessage() + \";",
      "prediction": "statement.getId(),\n                Status.FAILURE,\n                e.getMessage() + \";",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "statement.getId(),\n                Status.FAILURE,"
    },
    {
      "index": 1227,
      "groundtruth": "statement.getId(), StringUtils.format(statement.getStatement(), parameterValues));",
      "prediction": "statement.getId(),",
      "es": 0.2195121951219512,
      "em": false,
      "passed": false,
      "original_prediction": "statement.getId(),"
    },
    {
      "index": 1228,
      "groundtruth": "if (queryResult == null || queryResult.containsEmptyResultColumnOnly()) {",
      "prediction": "if (queryResult.getValueListSize() == 0)",
      "es": 0.31506849315068497,
      "em": false,
      "passed": false,
      "original_prediction": "if (queryResult.getValueListSize() == 0)"
    },
    {
      "index": 1229,
      "groundtruth": "+ statement.getId());",
      "prediction": "+ statement.getId());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1230,
      "groundtruth": "file.getId(),\n            Status.FAILURE,\n            /* payload= */ e.getMessage() + \";",
      "prediction": "file.getId(),\n            Status.FAILURE,\n            /* payload= */ e.getMessage() + \";",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "file.getId(),\n                Status.FAILURE,\n                \"Exception executing file: \" + file.getId() + \" Exception:"
    },
    {
      "index": 1231,
      "groundtruth": "readValue(StringUtils.replaceEnvVars(new File(filePath)), objectType);",
      "prediction": "readValue()",
      "es": 0.15714285714285714,
      "em": false,
      "passed": false,
      "original_prediction": "readValue("
    },
    {
      "index": 1232,
      "groundtruth": "getId(), StringUtils.format(statement.getStatement(), parameterValues));",
      "prediction": "getId(),",
      "es": 0.11111111111111116,
      "em": false,
      "passed": false,
      "original_prediction": "getId(),"
    },
    {
      "index": 1233,
      "groundtruth": "(prompt.getOption()) {",
      "prediction": "(prompt.getOption(), prompt.getIndex())",
      "es": 0.5128205128205128,
      "em": false,
      "passed": false,
      "original_prediction": "(prompt.getOption(), prompt.getIndex())"
    },
    {
      "index": 1234,
      "groundtruth": "().anyMatch(prompt -> prompt.getOption().equals(o.getOption()))) {",
      "prediction": "().anyMatch(prompt -> prompt.getOption().equals(o.getOption()))) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "().anyMatch(prompt -> prompt.getOption().equals(o.getOption()) || Objects.equals(prompt.getIndex(),"
    },
    {
      "index": 1235,
      "groundtruth": "(rowIndex).setSnippet(str);",
      "prediction": "(rowIndex).setSnippet(str);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1236,
      "groundtruth": "stringStringHashMap.put(prompt.getOption(), prompt.getSnippet());",
      "prediction": "stringStringHashMap.put(prompt.getOption(), prompt.getSnippet());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "stringStringHashMap.put(prompt.getOption(), prompt.getTo());"
    },
    {
      "index": 1237,
      "groundtruth": ".put(prompt.getOption(), prompt.getSnippet());",
      "prediction": ".put(prompt.getOption(), prompt.getSnippet());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".put(prompt.getOption(), prompt.getTo());"
    },
    {
      "index": 1238,
      "groundtruth": "stream().anyMatch(prompt -> prompt.getOption().equals(o.getOption()))) {",
      "prediction": "stream().anyMatch(prompt -> prompt.getOption().equals(o.getOption()))) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "stream().anyMatch(prompt -> prompt.getOption().equals(o.getOption()) || Objects.equals(prompt.getIndex(), o."
    },
    {
      "index": 1239,
      "groundtruth": "prompts.get(rowIndex).setOption(str);",
      "prediction": "prompts.get(rowIndex).setOption(str);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "prompt.get(rowIndex).setOption(str);"
    },
    {
      "index": 1240,
      "groundtruth": "actionManager.unregisterAction(idPrefix + prompt.getOption());",
      "prediction": "actionManager.unregisterAction(idPrefix + prompt.getOption());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1241,
      "groundtruth": "appSettingsStorage.unregisterActions();",
      "prediction": "if (form == null) {}",
      "es": 0.10256410256410253,
      "em": false,
      "passed": false,
      "original_prediction": "if (form == null) {"
    },
    {
      "index": 1242,
      "groundtruth": "(idPrefix + prompt.getOption());",
      "prediction": "(idPrefix + prompt.getOption());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(idPrefix + prompt.getIndex());"
    },
    {
      "index": 1243,
      "groundtruth": "ddlFileStatements = SQLParser.getStatements(ddlFile).getStatements();",
      "prediction": "ddlFileStatements =",
      "es": 0.2753623188405797,
      "em": false,
      "passed": false,
      "original_prediction": "ddlFileStatements ="
    },
    {
      "index": 1244,
      "groundtruth": "connection.execute(currentQuery);",
      "prediction": "for (StatementExec query : ddlFileStatements)",
      "es": 0.2222222222222222,
      "em": false,
      "passed": false,
      "original_prediction": "for (StatementExec query : ddlFileStatements)"
    },
    {
      "index": 1245,
      "groundtruth": "task.getTimeTravelPhaseId() != null) {",
      "prediction": "task.getTimeTravelPhaseId() != null) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "task.getTimeTravelPha"
    },
    {
      "index": 1246,
      "groundtruth": ".forName(task.getCustomTaskExecutor())\n                .getDeclaredConstructor(\n                    SQLTelemetryRegistry.class, String.class, CustomTaskExecutorArguments.class);",
      "prediction": ".forName(task.getCustomTaskExecutor())\n                .getDeclaredConstructor(\n                    SQLTelemetryRegistry.class, String.class, CustomTaskExecutorArguments.class);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".forName(task.getCustomTaskExecutor()).getConstructor(\n                SQLTelemetryRegistry.class,\n                String.class,\n                CustomTaskExecutorArgument.class);"
    },
    {
      "index": 1247,
      "groundtruth": "+ task.getId());",
      "prediction": "+ task.getId());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1248,
      "groundtruth": "\"Unable to load custom task class: \" + task.getCustomTaskExecutor(), e);",
      "prediction": "\"Unable to load custom task class: \" + task.getCustomTaskExecutor(), e);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "\"Failed to create custom task executor: \" + task.getCustomTaskExecutor(), e);"
    },
    {
      "index": 1249,
      "groundtruth": "form.getSettings().clone();",
      "prediction": "appSettingsStorage.getState();",
      "es": 0.2666666666666667,
      "em": false,
      "passed": false,
      "original_prediction": "appSettingsStorage.getState();"
    },
    {
      "index": 1250,
      "groundtruth": ", eventInfo.getEndTime()));",
      "prediction": ", Instant.now()));",
      "es": 0.40740740740740744,
      "em": false,
      "passed": false,
      "original_prediction": ", Instant.now()));"
    },
    {
      "index": 1251,
      "groundtruth": "if (phase.getSessions().size() > maxConcurrentSessions) {",
      "prediction": "if (phase.getSessions().size() > maxConcurrentSessions) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "if (phase.getSessions().size() > maxConcurrentSessions)"
    },
    {
      "index": 1252,
      "groundtruth": "writeTaskEvent(taskStartTime, task.getId(), Status.FAILURE);",
      "prediction": "writeTaskEvent(taskStartTime, task.getId(), Status.FAILURE);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1253,
      "groundtruth": ".info(\"Running \" + phase.getId() + \" phase...\");",
      "prediction": ".info(\"Executing phase: {}\", phase.getId());",
      "es": 0.41666666666666663,
      "em": false,
      "passed": false,
      "original_prediction": ".info(\"Executing phase: {}\", phase.getId());"
    },
    {
      "index": 1254,
      "groundtruth": "return instance.getState();",
      "prediction": "return instance.getState();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "return instance.getAppSettings();"
    },
    {
      "index": 1255,
      "groundtruth": "phase.getId(),\n              ChronoUnit.SECONDS.between(phaseStartTime, eventInfo.getEndTime()));",
      "prediction": "phase.getId(),\n              ChronoUnit.SECONDS.between(phaseStartTime, eventInfo.getEndTime()));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "phase.getId(),\n              ChronoUnit.SECONDS.between(phaseStartTime, Instant.now());"
    },
    {
      "index": 1256,
      "groundtruth": ", session.getId(), Status.FAILURE);",
      "prediction": ", session.getId(), Status.FAILURE);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1257,
      "groundtruth": "String reportFileName = contributionFilesService.getFileName(start, finish);",
      "prediction": "String reportFileName = contributionFilesService.getFileName(start, finish);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "String reportFileName = contributionFilesService.generateReportFileName(start, finish);"
    },
    {
      "index": 1258,
      "groundtruth": "experiment.execute();",
      "prediction": "experiment.execute();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "experiment.run();"
    },
    {
      "index": 1259,
      "groundtruth": "settings = AppSettingsStorage.getInstance().getState();",
      "prediction": "settings = AppSettingsStorage.getInstance().getState();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "settings = AppSettingsStorage.getInstance(project).getSettings();"
    },
    {
      "index": 1260,
      "groundtruth": "fdcFileMapper.processRequest(files.toArray(new String[0]), getFileName(start, finish));",
      "prediction": "fdcFileMapper.mapFilesToXml(files, start, finish);",
      "es": 0.4367816091954023,
      "em": false,
      "passed": false,
      "original_prediction": "fdcFileMapper.mapFilesToXml(files, start, finish);"
    },
    {
      "index": 1261,
      "groundtruth": "(next.getOption()));",
      "prediction": "(next.getOption()));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(next.getId()));"
    },
    {
      "index": 1262,
      "groundtruth": ", phase.getId(), Status.SUCCESS);",
      "prediction": ", phase.getId(), Status.SUCCESS);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1263,
      "groundtruth": "<String> contributionFiles = contributionFilesService.getFiles(start, finish);",
      "prediction": "<String> contributionFiles = contributionFilesService.getFiles(start, finish);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "<File> contributionFiles = contributionFilesService.getContributionFiles(start, finish);"
    },
    {
      "index": 1264,
      "groundtruth": "(task.getCustomTaskExecutor() == null) {",
      "prediction": "(task.getCustomTaskExecutor() == null) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(task.getCustomTaskExecutor() == null)"
    },
    {
      "index": 1265,
      "groundtruth": "contributionFilesService.processFiles(contributionFiles, start, finish, reportFileName);",
      "prediction": "contributionFilesService.processFiles(contributionFiles, start, finish, reportFileName);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "contributionFilesService.generateReport(contributionFiles, reportFileName);"
    },
    {
      "index": 1266,
      "groundtruth": "(Prompt.of(\"\u6b65\u9aa4\u6ce8\u91ca\", \"\u5e2e\u6211\u7ed9\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\u7684\u5173\u952e\u6b65\u9aa4\u6dfb\u52a0\u6ce8\u91ca\uff0c\u8fd4\u56de\u4f18\u5316\u540e\u7684\u5b8c\u6574\u4ee3\u7801\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{",
      "prediction": "(Prompt.of(\"Explain\", \"\u5e2e\u6211\u589e\u5f3a\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u5427\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{query}\"));",
      "es": 0.5128205128205128,
      "em": false,
      "passed": false,
      "original_prediction": "(Prompt.of(\"Explain\", \"\u5e2e\u6211\u589e\u5f3a\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u5427\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{query}\"));"
    },
    {
      "index": 1267,
      "groundtruth": "( getFdcValue(DateUtils.convertXmlGregorianToString(o),true));",
      "prediction": "String.format( (insertComma?FDC_FORMAT_COMMA:FDC_FORMAT),(Objects.nonNull(o)?o:EMPTY_CHARACTE))",
      "es": 0.11578947368421055,
      "em": false,
      "passed": false,
      "original_prediction": "String.format( (insertComma?FDC_FORMAT_COMMA:FDC_FORMAT),(Objects.nonNull(o)?o:EMPTY_CHARACTE"
    },
    {
      "index": 1268,
      "groundtruth": "return fdcFilesService.processFiles(contributionFiles, start, end);",
      "prediction": "return fdcFilesService.processFiles",
      "es": 0.5223880597014925,
      "em": false,
      "passed": false,
      "original_prediction": "return fdcFilesService.processFiles"
    },
    {
      "index": 1269,
      "groundtruth": "Prompt.of(\"emptyForYou\", \"balabala{",
      "prediction": "Prompt.of(\"Explain\", \"\u5e2e\u6211\u589e\u5f3a\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u5427\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{quer)})",
      "es": 0.17808219178082196,
      "em": false,
      "passed": false,
      "original_prediction": "Prompt.of(\"Explain\", \"\u5e2e\u6211\u589e\u5f3a\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u5427\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{quer"
    },
    {
      "index": 1270,
      "groundtruth": "form.getGptKey();",
      "prediction": "form.getPr",
      "es": 0.47058823529411764,
      "em": false,
      "passed": false,
      "original_prediction": "form.getPr"
    },
    {
      "index": 1271,
      "groundtruth": "add(Prompt.of(\"Readable\", \"help me enhance the readability of the following code snippet, without adding any additional information except for the optimized code. Here is the code snippet:{",
      "prediction": "add(Prompt.of(\"Explain\", \"\u5e2e\u6211\u589e\u5f3a\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u5427\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{))}))",
      "es": 0.11111111111111116,
      "em": false,
      "passed": false,
      "original_prediction": "add(Prompt.of(\"Explain\", \"\u5e2e\u6211\u589e\u5f3a\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u5427\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{"
    },
    {
      "index": 1272,
      "groundtruth": ".add(Prompt.of(\"List Steps\", \"help me add comments to the key steps of the following code snippet and return the optimized code with comments. without adding any additional information except for the optimized code. Here is the code snippet:{",
      "prediction": "s.add(Prompt.of(\"\u4f18\u5316\", \"\u5e2e\u6211\u589e\u5f3a\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u5427\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{))}))",
      "es": 0.07851239669421484,
      "em": false,
      "passed": false,
      "original_prediction": "s.add(Prompt.of(\"\u4f18\u5316\", \"\u5e2e\u6211\u589e\u5f3a\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u5427\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{"
    },
    {
      "index": 1273,
      "groundtruth": ".add(Prompt.of(\"Explain\", \"\u5e2e\u6211\u589e\u5f3a\u4e0b\u9762\u4e00\u6bb5\u4ee3\u7801\u7684\u53ef\u8bfb\u6027\u5427\uff0c\u9664\u4e86\u4f18\u5316\u540e\u7684\u4ee3\u7801\uff0c\u4e0d\u8981\u6dfb\u52a0\u4efb\u4f55\u5176\u4ed6\u4fe1\u606f\uff0c\u8fd9\u662f\u4ee3\u7801\u7247\u6bb5\uff1a{",
      "prediction": ".add(Prompt.of(\"emptyForYou\", \"balabala{query}\"));",
      "es": 0.23943661971830987,
      "em": false,
      "passed": false,
      "original_prediction": ".add(Prompt.of(\"emptyForYou\", \"balabala{query}\"));"
    },
    {
      "index": 1274,
      "groundtruth": "(AppSettings.getProject(), \"Test connection failed!\", NotificationType.ERROR);",
      "prediction": "(AppSettings.getProject(), \"Test connection failed!\", NotificationType.ERROR);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(AppSettings.getProject(), \"Test connection failed!ChatGPT answer:\" + GPTClient.toString(choices), NotificationType.E"
    },
    {
      "index": 1275,
      "groundtruth": "String, String> stringStringMap = prompts.asMap();",
      "prediction": "String, String> stringStringMap = prompts.asMap();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "String, String> stringStringMap = cloner.deepClone(_prompts).stream().colle"
    },
    {
      "index": 1276,
      "groundtruth": "gptKeyLink = ActionLinkUtils.newActionLink(\"https://platform.openai.com/account/api-keys\");",
      "prediction": "gptKeyLink = ActionLinkUtils.newActionLink(\"https://platform.openai.com/account/api-keys\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1277,
      "groundtruth": "notifyMessage(AppSettings.getProject(), \"Test connection successfully!ChatGPT answer:\" + GPTClient.toString(choices), NotificationType.INFORMATION);",
      "prediction": "notifyMessage(AppSettings.getProject(), \"Test connection successfully!ChatGPT answer:\" + GPTClient.toString(choices), NotificationType.INFORMATION);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "notifyMessage(AppSettings.getProject(), \"Test connection success!\", NotificationType.INFORMATION);"
    },
    {
      "index": 1278,
      "groundtruth": "= original.clone();",
      "prediction": "= original.clone();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1279,
      "groundtruth": "campaign.getGames().get(id));",
      "prediction": "campaign.getGames().get(id));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "campaign.getGame());"
    },
    {
      "index": 1280,
      "groundtruth": "append(\"\\n    <string name=\\\"\" + singleStrings.getId() + \"\\\">\" + singleStrings.getValue() + \"</string>\");",
      "prediction": "append(\"\\n    <string name=\\\"\" + singleStrings.getId() + \"\\\">\" + singleStrings.getValue() + \"</string>\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1281,
      "groundtruth": "setBirthYear(customer.getBirthYear());",
      "prediction": "setBirthYear(customer.getBirthYear());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "setBirthDate(customer.getBirthDate());"
    },
    {
      "index": 1282,
      "groundtruth": "println(user2.getName() +\" is updated to \" + customer.getName());",
      "prediction": "println(\"User is updated.\");",
      "es": 0.36923076923076925,
      "em": false,
      "passed": false,
      "original_prediction": "println(\"User is updated.\");"
    },
    {
      "index": 1283,
      "groundtruth": "if(campaign1.getId()==id){",
      "prediction": "if(campaign1.getId()==id){",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "if(campaign1.getId() == id)"
    },
    {
      "index": 1284,
      "groundtruth": "\"\\\"=\\\"\" + string.getValue() + \"\\\";",
      "prediction": "\"\\\"=\\\"\" + string.getValue() + \"\\\";",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "\"\\\" = \\\"\" + string.getId() + \"\\\";\\n\");"
    },
    {
      "index": 1285,
      "groundtruth": "(campaign.getId() == id){",
      "prediction": "(campaign.getId() == id){",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(campaign.getId()==id)"
    },
    {
      "index": 1286,
      "groundtruth": "!(customer.getGames().contains(game))){",
      "prediction": "!campaignService.getC",
      "es": 0.20512820512820518,
      "em": false,
      "passed": false,
      "original_prediction": "!campaignService.getC"
    },
    {
      "index": 1287,
      "groundtruth": "while (iterator.temProximo()) {",
      "prediction": "while (iterator.temProximo()) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "while (iterator.hasNext())"
    },
    {
      "index": 1288,
      "groundtruth": ".println(playlist1.execute());",
      "prediction": ".println(playlist1.execute());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".println(playlist1);"
    },
    {
      "index": 1289,
      "groundtruth": "listener.onChangeMode();",
      "prediction": "listener.notificar();",
      "es": 0.5416666666666667,
      "em": false,
      "passed": false,
      "original_prediction": "listener.notificar();"
    },
    {
      "index": 1290,
      "groundtruth": "= playlistItem.execute();",
      "prediction": "= playlistItem.execute();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= playlistItem.getContent();"
    },
    {
      "index": 1291,
      "groundtruth": "playlist1.insert(playlist2);",
      "prediction": "playlist1.insert(playlist2);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1292,
      "groundtruth": "iterator = player.createIterator();",
      "prediction": "iterator = player.createIterator();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1293,
      "groundtruth": "playlistItem = iterator.proximo();",
      "prediction": "playlistItem = iterator.proximo();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1294,
      "groundtruth": "(\"\\n::::::::::::\\nModo: %s, est\u00e1 ativado!\\n\", player.getMode());",
      "prediction": "(\"Modo alterado para: %s\\n\", player.getMode());",
      "es": 0.484375,
      "em": false,
      "passed": false,
      "original_prediction": "(\"Modo alterado para: %s\\n\", player.getMode());"
    },
    {
      "index": 1295,
      "groundtruth": "player.createIterator();",
      "prediction": "player.createIterator();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1296,
      "groundtruth": "MessageUtils.showNotify(\"\u8bf7\u9009\u62e9\u5e03\u5c40\u6587\u4ef6\");",
      "prediction": "return;",
      "es": 0.08571428571428574,
      "em": false,
      "passed": false,
      "original_prediction": "return;"
    },
    {
      "index": 1297,
      "groundtruth": "tokens.addAll(Lexer.tokenize(s));",
      "prediction": "tokens.addAll(Lexer.tokenize(s));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1298,
      "groundtruth": "+ \": \"+ selectedEngineer.getFullNameWithDiscipline() + \": \" + comment + \"#@\";",
      "prediction": "+ \": \"+ selectedEngineer.getFullNameWithDiscipline() + \": \" + comment + \"#@\";",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "+ \": \" + selectedEngineer.getFullNameWithDiscipline() + \": \" + comment + \"#@\";"
    },
    {
      "index": 1299,
      "groundtruth": "> foundCollision = collisionsRepository.findByIdFetchEngineer(id);",
      "prediction": "> foundCollision = collisionsRepository.findByIdFetchEngineer(id);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "> foundCollision = collisionDAO.findOne(id);"
    },
    {
      "index": 1300,
      "groundtruth": "originalEngineer = engineersService.findOne(id);",
      "prediction": "originalEngineer = engineersService.findOne(id);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1301,
      "groundtruth": "\"engineers\", engineersService.findAll());",
      "prediction": "\"engineers\", engineersService.findAll());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1302,
      "groundtruth": ".findByIdFetchCollisions(engineerDetails.getEngineer().getId());",
      "prediction": ".getEngineerByLogin(engineerDetails.getLogin());",
      "es": 0.5,
      "em": false,
      "passed": false,
      "original_prediction": ".getEngineerByLogin(engineerDetails.getLogin());"
    },
    {
      "index": 1303,
      "groundtruth": "Optional<Collision> optionalCollision = collisionsRepository.findByIdFetchEngineer(id);",
      "prediction": "Optional<Collision> optionalCollision = collisionsRepository.findByIdFetchEngineer(id);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1304,
      "groundtruth": "= engineersService.findByIdFetchCollisions(id);",
      "prediction": "= engineersService.findByIdFetchCollisions(id);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= engineersService.findOne(id);"
    },
    {
      "index": 1305,
      "groundtruth": "\"engineer\", engineersService.findOne(id));",
      "prediction": "\"engineer\", engineersService.findOne(id));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "\"engineer\", engineersService.findById(id));"
    },
    {
      "index": 1306,
      "groundtruth": "collisionsRepository.findByIdFetchEngineer(id).ifPresent(\n                collision -> {",
      "prediction": "collisionsRepository.findByIdFetchEngineer(id)",
      "es": 0.5227272727272727,
      "em": false,
      "passed": false,
      "original_prediction": "collisionsRepository.findByIdFetchEngineer(id)"
    },
    {
      "index": 1307,
      "groundtruth": "(engineerDAO.index());",
      "prediction": "(engineersRepository.findAll());",
      "es": 0.53125,
      "em": false,
      "passed": false,
      "original_prediction": "(engineersRepository.findAll());"
    },
    {
      "index": 1308,
      "groundtruth": "model.addAttribute(\"comments\", collision.getComments());",
      "prediction": "model.addAttribute(\"project\", projectService.findOne(project_id));",
      "es": 0.5,
      "em": false,
      "passed": false,
      "original_prediction": "model.addAttribute(\"project\", projectService.findOne(project_id));"
    },
    {
      "index": 1309,
      "groundtruth": "= collisionsService.findOneAndEngineer(id);",
      "prediction": "= collisionsService.findOneAndEngineer(id);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= collisionsService.findOne(id);"
    },
    {
      "index": 1310,
      "groundtruth": "(id, engineerDetails.getEngineer(), comment);",
      "prediction": "(id, engineerDetails.getEngineer(), comment);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(id, comment, engineerDetails.getEngineer());"
    },
    {
      "index": 1311,
      "groundtruth": "Engineer> foundEngineer = engineersRepository.findByIdFetchCollisions(id);",
      "prediction": "Engineer> foundEngineer = engineersRepository.findByIdFetchCollisions(id);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "Engineer> foundEngineer = engineersRepository.findById(id);"
    },
    {
      "index": 1312,
      "groundtruth": "handle = getHandle(mapper.getLayout(target.getClass()));",
      "prediction": "handle = getHandle(mapper.getLayout(target.getClass()));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "handle = getHandle(mapper.getLayout(model.type()));"
    },
    {
      "index": 1313,
      "groundtruth": "mapper.getLayout(target.getClass()).byteOffset(MemoryLayout.PathElement.groupElement(model.name()));",
      "prediction": "mapper.getOffset(model);",
      "es": 0.24,
      "em": false,
      "passed": false,
      "original_prediction": "mapper.getOffset(model);"
    },
    {
      "index": 1314,
      "groundtruth": "var structDef = mapper.getOrDefineStruct(fieldType);",
      "prediction": "var structDef = mapper.getOrDefineStruct(fieldType);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "var structDef = mapper.getStructDef(fieldType);"
    },
    {
      "index": 1315,
      "groundtruth": "instance.getCore().debug(\"Plugin is not setup / ProxyProtocol is off / Player is on DirectConnectWhitelist (return)\");",
      "prediction": "channel.close();",
      "es": 0.10169491525423724,
      "em": false,
      "passed": false,
      "original_prediction": "channel.close();"
    },
    {
      "index": 1316,
      "groundtruth": "instance.getCore().debug(\"Adding Handler...\");",
      "prediction": "instance.getCore().debug(\"Injecting the proxy protocol handler into the server channel\");",
      "es": 0.4382022471910112,
      "em": false,
      "passed": false,
      "original_prediction": "instance.getCore().debug(\"Injecting the proxy protocol handler into the server channel\");"
    },
    {
      "index": 1317,
      "groundtruth": ".getEventManager(), neoProtectVelocity.getLogger()));",
      "prediction": "));",
      "es": 0.05660377358490565,
      "em": false,
      "passed": false,
      "original_prediction": "));"
    },
    {
      "index": 1318,
      "groundtruth": "core.severe(exception.getMessage(), exception);",
      "prediction": "core.severe(request + \" failed cause (\" + exception + \")\");",
      "es": 0.5254237288135593,
      "em": false,
      "passed": false,
      "original_prediction": "core.severe(request + \" failed cause (\" + exception + \")\");"
    },
    {
      "index": 1319,
      "groundtruth": "instance.getCore().debug(\"Player connected over IP (\" + channel.remoteAddress() + \") doesn't match to Neo-IPs (warning)\");",
      "prediction": "if (instance.getCore().isSetup() && instance.getCore().getDirectConnectWhitelist().contains(((InetSocketAddress) channel.remoteAddress()).getAddress().getHostAddress()))",
      "es": 0.3372781065088757,
      "em": false,
      "passed": false,
      "original_prediction": "if (instance.getCore().isSetup() && instance.getCore().getDirectConnectWhitelist().contains(((InetSocketAddress) channel.remoteAddress()).getAddress().getHostAddress()))"
    },
    {
      "index": 1320,
      "groundtruth": "core.severe(\"Failed to load API-Key. Key is null or not valid\");",
      "prediction": "if (APIKey.length() != 64) {}",
      "es": 0.203125,
      "em": false,
      "passed": false,
      "original_prediction": "if (APIKey.length() != 64) {"
    },
    {
      "index": 1321,
      "groundtruth": "instance.getCore().severe(\"Cannot inject incoming channel \" + channel, ex);",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 1322,
      "groundtruth": "core.info(\"BackendID loaded successful '\" + backendID + \"'\");",
      "prediction": "core.info(\"BackendID loaded successful '\" + backendID + \"'\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1323,
      "groundtruth": "core.severe(\"Failed to load GameshieldID. ID is null\");",
      "prediction": "core.severe(\"Failed to load GameshieldID. ID is null\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1324,
      "groundtruth": "core.info(\"API-Key loaded successful '\" + \"******************************\" + APIKey.substring(32) + \"'\");",
      "prediction": "core.info(\"API-Key loaded successful '\" + APIKey + \"'\");",
      "es": 0.5333333333333333,
      "em": false,
      "passed": false,
      "original_prediction": "core.info(\"API-Key loaded successful '\" + APIKey + \"'\");"
    },
    {
      "index": 1325,
      "groundtruth": "core.info(\"GameshieldID loaded successful '\" + gameShieldID + \"'\");",
      "prediction": "if (geyserBackendID.isEmpty()) {}",
      "es": 0.14925373134328357,
      "em": false,
      "passed": false,
      "original_prediction": "if (geyserBackendID.isEmpty()) {"
    },
    {
      "index": 1326,
      "groundtruth": ".equals(core.getRestAPI().getStatsServer())) {",
      "prediction": ".contains(\"https://api.neoprotect.net/v2\")",
      "es": 0.17391304347826086,
      "em": false,
      "passed": false,
      "original_prediction": ".contains(\"https://api.neoprotect.net/v2\")"
    },
    {
      "index": 1327,
      "groundtruth": "(Config.getAPIKey());",
      "prediction": "();",
      "es": 0.1428571428571429,
      "em": false,
      "passed": false,
      "original_prediction": "();"
    },
    {
      "index": 1328,
      "groundtruth": "instance.getCore().severe(\"Error: The server was unable to set the IP address from the 'HAProxyMessage'. Therefore we closed the channel.\", exception);",
      "prediction": "instance.getCore().severe(\"Cannot inject incoming channel \" + channel, exception);",
      "es": 0.41721854304635764,
      "em": false,
      "passed": false,
      "original_prediction": "instance.getCore().severe(\"Cannot inject incoming channel \" + channel, exception);"
    },
    {
      "index": 1329,
      "groundtruth": "instance.getCore().info(\"Proceeding with the server channel injection...\");",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 1330,
      "groundtruth": "instance.getCore().info(\"Late bind injection successful.\");",
      "prediction": "instance.getCore().info(\"Late bind injection successful.\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "instance.getCore().info(\"Server channel injection successfully finished!\");"
    },
    {
      "index": 1331,
      "groundtruth": "Reflection.getField(serverConnection.getClass(), List.class, i).get(serverConnection);",
      "prediction": "networkManagers.get(i);",
      "es": 0.18604651162790697,
      "em": false,
      "passed": false,
      "original_prediction": "networkManagers.get(i);"
    },
    {
      "index": 1332,
      "groundtruth": "instance.getCore().info(\"Delaying server channel injection due to late bind.\");",
      "prediction": "instance.getCore().warning(\"Late bind detected. Injecting the handler in 10 seconds...\");",
      "es": 0.4606741573033708,
      "em": false,
      "passed": false,
      "original_prediction": "instance.getCore().warning(\"Late bind detected. Injecting the handler in 10 seconds...\");"
    },
    {
      "index": 1333,
      "groundtruth": "this.instance.getCore().info(\"Found the server channel and added the handler. Injection successfully!\");",
      "prediction": "}",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": "}"
    },
    {
      "index": 1334,
      "groundtruth": "if (instance.getCore().isPlayerMaintainer(player.getUniqueId(), instance.getServer().getOnlineMode())) {",
      "prediction": "if (instance.getCore().isSetup() && instance.getCore().getRestAPI().getPlan().equals(\"free\"))",
      "es": 0.4423076923076923,
      "em": false,
      "passed": false,
      "original_prediction": "if (instance.getCore().isSetup() && instance.getCore().getRestAPI().getPlan().equals(\"free\"))"
    },
    {
      "index": 1335,
      "groundtruth": "instance.getCore().isPlayerMaintainer(player.getUniqueId(), instance.getProxy().getConfiguration().isOnlineMode())) {",
      "prediction": "instance.getCore().isSetup() && !instance.getCore().getPlaye",
      "es": 0.3846153846153846,
      "em": false,
      "passed": false,
      "original_prediction": "instance.getCore().isSetup() && !instance.getCore().getPlaye"
    },
    {
      "index": 1336,
      "groundtruth": ".forLanguageTag(Config.getLanguage()), new File(\"plugins/NeoProtect/languages/\"));",
      "prediction": ".ENGLISH);",
      "es": 0.04878048780487809,
      "em": false,
      "passed": false,
      "original_prediction": ".ENGLISH);"
    },
    {
      "index": 1337,
      "groundtruth": ").isPlayerMaintainer(player.getUniqueId(), instance.getProxy().getConfiguration().isOnlineMode())) {",
      "prediction": ").isSetup() && instance.getCore().getPlayerInSetup().contains()",
      "es": 0.33999999999999997,
      "em": false,
      "passed": false,
      "original_prediction": ").isSetup() && instance.getCore().getPlayerInSetup().contains("
    },
    {
      "index": 1338,
      "groundtruth": "\"NeoProtect\", \"NeoPlugin\", \"v\" + plugin.getPluginVersion(), VersionUtils.UpdateSetting.DISABLED).message();",
      "prediction": "plugin);",
      "es": 0.07476635514018692,
      "em": false,
      "passed": false,
      "original_prediction": "plugin);"
    },
    {
      "index": 1339,
      "groundtruth": "return restAPIRequests.isSetup();",
      "prediction": "return playerInSetup.size() > 0;",
      "es": 0.36363636363636365,
      "em": false,
      "passed": false,
      "original_prediction": "return playerInSetup.size() > 0;"
    },
    {
      "index": 1340,
      "groundtruth": "(Config.isDebugMode()) ((Logger) LogManager.getLogger().logger).log(Level.SEVERE, output);",
      "prediction": "(isDebugRunning) {}",
      "es": 0.1333333333333333,
      "em": false,
      "passed": false,
      "original_prediction": "(isDebugRunning) {"
    },
    {
      "index": 1341,
      "groundtruth": "instance.getCore().getDebugPingResponses().put(player.getName(), new ArrayList<>());",
      "prediction": "map.put(player.getName(), new ArrayList<>());",
      "es": 0.5238095238095238,
      "em": false,
      "passed": false,
      "original_prediction": "map.put(player.getName(), new ArrayList<>());"
    },
    {
      "index": 1342,
      "groundtruth": "instance.getCore().getPingMap().remove(keepAliveResponseKey);",
      "prediction": "instance.getCore().debug(\"Sending DebugPingResponse to Neo-Server\");",
      "es": 0.4411764705882353,
      "em": false,
      "passed": false,
      "original_prediction": "instance.getCore().debug(\"Sending DebugPingResponse to Neo-Server\");"
    },
    {
      "index": 1343,
      "groundtruth": ".request(RequestType.GET_GAMESHIELD_BANDWIDTH, null, Config.getGameShieldID()).getResponseBodyObject();",
      "prediction": "getFirewall(String mode) {}",
      "es": 0.11650485436893199,
      "em": false,
      "passed": false,
      "original_prediction": "getFirewall(String mode) {"
    },
    {
      "index": 1344,
      "groundtruth": "POST_GAMESHIELD_BACKEND_UPDATE, requestBody, Config.getGameShieldID(),backendID).checkCode(200);",
      "prediction": "POSTBackend, requestBody, Config.getBackendID()).getCode();",
      "es": 0.48958333333333337,
      "em": false,
      "passed": false,
      "original_prediction": "POSTBackend, requestBody, Config.getBackendID()).getCode();"
    },
    {
      "index": 1345,
      "groundtruth": "(isAPIInvalid(Config.getAPIKey())) {",
      "prediction": "(isAPIInvalid(Config.getAPIKey())) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "!isAPIInvalid(Config.getAPIKey())"
    },
    {
      "index": 1346,
      "groundtruth": ".request(RequestType.GET_GAMESHIELD_ISUNDERATTACK, null, Config.getGameShieldID()).getResponseBody().equals(\"true\");",
      "prediction": "e",
      "es": 0.008620689655172376,
      "em": false,
      "passed": false,
      "original_prediction": "e"
    },
    {
      "index": 1347,
      "groundtruth": "Config.getGameShieldID());",
      "prediction": "Config.getGameShieldID());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "Config.getGameShieldID()).checkCode(200);"
    },
    {
      "index": 1348,
      "groundtruth": "if (Config.isUpdateIP()) {",
      "prediction": "public RestAPIR",
      "es": 0.11538461538461542,
      "em": false,
      "passed": false,
      "original_prediction": "public RestAPIR"
    },
    {
      "index": 1349,
      "groundtruth": "setProxyProtocol(Config.isProxyProtocol());",
      "prediction": "core.info(\"API is valid!\");",
      "es": 0.16279069767441856,
      "em": false,
      "passed": false,
      "original_prediction": "core.info(\"API is valid!\");"
    },
    {
      "index": 1350,
      "groundtruth": "Config.addAutoUpdater(getPlan().equalsIgnoreCase(\"Basic\"));",
      "prediction": "core.info(\"API is valid\");",
      "es": 0.2033898305084746,
      "em": false,
      "passed": false,
      "original_prediction": "core.info(\"API is valid\");"
    },
    {
      "index": 1351,
      "groundtruth": "Config.getGameShieldID()).getCode();",
      "prediction": "Config.getGameShieldID()).getCode();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "Config Config.getGameShieldID()).getCode();"
    },
    {
      "index": 1352,
      "groundtruth": "core.severe(\"Gameshield is not valid! Please run /neoprotect setgameshield to set the gameshield\");",
      "prediction": "core.severe(\"Gameshield is not valid! Please run /neoprotect setgameshield to set the gameshield\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "core.severe(\"GameShield is not valid! Please run /neoprotect setgameshield to set the game shield\");"
    },
    {
      "index": 1353,
      "groundtruth": "core.severe(\"API is not valid! Please run /neoprotect setup to set the API Key\");",
      "prediction": "core.severe(\"API is not valid! Please run /neoprotect setup to set the API Key\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "core.severe(\"API is not valid! Please run /neoprotect setapi to set the api\");"
    },
    {
      "index": 1354,
      "groundtruth": "null, Config.getGameShieldID()).getResponseBodyArray();",
      "prediction": "null, Config.getGameShieldID()).getResponseBodyArray();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1355,
      "groundtruth": "Config.setGeyserBackendID(args[1]);",
      "prediction": "private void setGam",
      "es": 0.1428571428571429,
      "em": false,
      "passed": false,
      "original_prediction": "private void setGam"
    },
    {
      "index": 1356,
      "groundtruth": "Config.setBackendID(args[1]);",
      "prediction": "Config.setBackendID(args[1]);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "Config.setJavaBackendID(args[1]);"
    },
    {
      "index": 1357,
      "groundtruth": "int response = instance.getCore().getRestAPI().toggle(args[1]);",
      "prediction": "int response = instance.getCore().getRestAPI().toggle(args[1]);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1358,
      "groundtruth": "getBackends().stream().noneMatch(e -> e.compareById(backendID));",
      "prediction": "return new ResponseManager(rest.callRequest(rest.defaultBuilder().url(rest.getBaseURL() + rest.g)))",
      "es": 0.202020202020202,
      "em": false,
      "passed": false,
      "original_prediction": "return new ResponseManager(rest.callRequest(rest.defaultBuilder().url(rest.getBaseURL() + rest.g"
    },
    {
      "index": 1359,
      "groundtruth": "= instance.getCore().getRestAPI().getTraffic();",
      "prediction": "= analytics.getJSONObject(\"traffic\");",
      "es": 0.4042553191489362,
      "em": false,
      "passed": false,
      "original_prediction": "= analytics.getJSONObject(\"traffic\");"
    },
    {
      "index": 1360,
      "groundtruth": "Config.setGameShieldID(args[1]);",
      "prediction": "Config.setGameShieldID(args[1]);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1361,
      "groundtruth": "instance.sendMessage(sender, \"\u00a77\u00a7l----- \u00a7bFirewall (\" + args[0].toUpperCase() + \")\u00a77\u00a7l -----\");",
      "prediction": "instance.getCore().getRestAPI().getFirewall().for",
      "es": 0.26315789473684215,
      "em": false,
      "passed": false,
      "original_prediction": "instance.getCore().getRestAPI().getFirewall().for"
    },
    {
      "index": 1362,
      "groundtruth": "Config.setAPIKey(msg);",
      "prediction": "if (instance.getCore().getRestAPI().isAPIInv)",
      "es": 0.1777777777777778,
      "em": false,
      "passed": false,
      "original_prediction": "if (instance.getCore().getRestAPI().isAPIInv"
    },
    {
      "index": 1363,
      "groundtruth": "(instance.getPluginType() == NeoProtectPlugin.PluginType.SPIGOT) {",
      "prediction": "(args.length == 1) {}",
      "es": 0.16666666666666663,
      "em": false,
      "passed": false,
      "original_prediction": "(args.length == 1) {"
    },
    {
      "index": 1364,
      "groundtruth": "instance.getCore().severe(ex.getMessage(), ex);",
      "prediction": "instance.sendMessage(sender, localization.get(locale, \"err.unknown\"));",
      "es": 0.3285714285714286,
      "em": false,
      "passed": false,
      "original_prediction": "instance.sendMessage(sender, localization.get(locale, \"err.unknown\"));"
    },
    {
      "index": 1365,
      "groundtruth": "response = instance.getCore().getRestAPI().updateFirewall(ip, action, mode);",
      "prediction": "response = instance.getCore().getRestAPI().updateFirewall(ip, action, mode);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "response = instance.getCore().getRestAPI().toggleFirewall(args[0].toUpperCase(), ip, action);"
    },
    {
      "index": 1366,
      "groundtruth": "instance.getCore().getDirectConnectWhitelist().add(args[1]);",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 1367,
      "groundtruth": "(\"general.ProxyPlugins\", instance.getPlugins());",
      "prediction": "(\"general.ProxyPlugins\", instance.getPlugins());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(\"general.ProxyIP\", stat.getProxyIp());"
    },
    {
      "index": 1368,
      "groundtruth": "if (instance.getCore().getRestAPI().isAPIInvalid(msg)) {",
      "prediction": "if (args.length != 1) {}",
      "es": 0.2142857142857143,
      "em": false,
      "passed": false,
      "original_prediction": "if (args.length != 1) {"
    },
    {
      "index": 1369,
      "groundtruth": "instance.getCore().setDebugRunning(false);",
      "prediction": "instance.sendMessage(sender, localization.get(locale, \"debug.cancelled\"));",
      "es": 0.29729729729729726,
      "em": false,
      "passed": false,
      "original_prediction": "instance.sendMessage(sender, localization.get(locale, \"debug.cancelled\"));"
    },
    {
      "index": 1370,
      "groundtruth": "instance.getCore().isDebugRunning()) {",
      "prediction": "!instance.getCore().i",
      "es": 0.5,
      "em": false,
      "passed": false,
      "original_prediction": "!instance.getCore().i"
    },
    {
      "index": 1371,
      "groundtruth": "instance.getCore().getPlayerInSetup().add(sender);",
      "prediction": "if (instance.getCore().isSetup())",
      "es": 0.45999999999999996,
      "em": false,
      "passed": false,
      "original_prediction": "if (instance.getCore().isSetup())"
    },
    {
      "index": 1372,
      "groundtruth": ", instance.getCore().getRestAPI().togglePanicMode() ? \"utils.activated\" : \"utils.deactivated\")));",
      "prediction": ", \"utils.click\"), \"OPEN_URL\", \"https://panel.neoprotect.net/profile\", \"SHOW_TEXT\", localization.get(locale, \"apikey.find\"));",
      "es": 0.19354838709677424,
      "em": false,
      "passed": false,
      "original_prediction": ", \"utils.click\"), \"OPEN_URL\", \"https://panel.neoprotect.net/profile\", \"SHOW_TEXT\", localization.get(locale, \"apikey.find\"));"
    },
    {
      "index": 1373,
      "groundtruth": "instance.sendMessage(sender, \"\u00a77\u00a7l--------- \u00a7bAnalytics \u00a77\u00a7l---------\");",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 1374,
      "groundtruth": "instance.getCore().getDebugPingResponses().clear();",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 1375,
      "groundtruth": "instance.sendMessage(sender, \"\u00a7cCan not found setting '\" + args[1] + \"'\");",
      "prediction": "instance.sendMessage(sender, localization.get(locale, \"err.unknown\"));",
      "es": 0.5405405405405406,
      "em": false,
      "passed": false,
      "original_prediction": "instance.sendMessage(sender, localization.get(locale, \"err.unknown\"));"
    },
    {
      "index": 1376,
      "groundtruth": "instance.getCore().setDebugRunning(true);",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 1377,
      "groundtruth": "instance.sendMessage(sender, \" - /np analytics\");",
      "prediction": "instance.sendMessage(sender, \" - /np analytics\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1378,
      "groundtruth": "List<Gameshield> gameshieldList = instance.getCore().getRestAPI().getGameshields();",
      "prediction": "List<Gameshield> gameshieldList = instance.getCore().getRestAPI().getGameshields();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "List<Gameshield> gameshieldList = instance.getCore().getRestAPI().getGameshield();"
    },
    {
      "index": 1379,
      "groundtruth": "instance.getCore().getDebugPingResponses().keySet().forEach((playerName -> {",
      "prediction": "configuration.set(\"general.ProxyPlayers\", instance.getCore().getRestAPI().getPlayers().size());",
      "es": 0.2210526315789474,
      "em": false,
      "passed": false,
      "original_prediction": "configuration.set(\"general.ProxyPlayers\", instance.getCore().getRestAPI().getPlayers().size());"
    },
    {
      "index": 1380,
      "groundtruth": "instance.getCore().getRestAPI().isGameshieldInvalid(args[1])) {",
      "prediction": "instance.getCore().getRestAPI().i",
      "es": 0.5238095238095238,
      "em": false,
      "passed": false,
      "original_prediction": "instance.getCore().getRestAPI().i"
    },
    {
      "index": 1381,
      "groundtruth": "List<DebugPingResponse> list = instance.getCore().getDebugPingResponses().get(playerName);",
      "prediction": "List<DebugPingResponse> list = instance.getCore().getDebugPingResponses().get(playerName);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "List<DebugPingResponse> list = instance.getCore().getDebugPingResponses.get(playerName);"
    },
    {
      "index": 1382,
      "groundtruth": "instance.getCore().getRestAPI().getAnalytics().keySet().forEach(ak -> {",
      "prediction": "instance.sendMessage(sender, \"\u00a77\u00a7l--------- \u00a7bAnalytics \u00a77\u00a7l---------\");",
      "es": 0.20833333333333337,
      "em": false,
      "passed": false,
      "original_prediction": "instance.sendMessage(sender, \"\u00a77\u00a7l--------- \u00a7bAnalytics \u00a77\u00a7l---------\");"
    },
    {
      "index": 1383,
      "groundtruth": "instance.sendMessage(sender, \" - /np toggle (option)\");",
      "prediction": "instance.sendMessage(sender, \" - /np toggle (option)\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "instance.sendMessage(sender, \" - /np toggle (setting)\");"
    },
    {
      "index": 1384,
      "groundtruth": "backendList = instance.getCore().getRestAPI().getBackends();",
      "prediction": "backendList = instance.getCore().getRestAPI().getBackends();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1385,
      "groundtruth": "instance.sendMessage(sender, \" - /np debugTool (cancel / amount)\");",
      "prediction": "instance.sendMessage(sender, \" - /np debugTool (cancel / amount)\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "instance.sendMessage(sender, \" - /np debugtool (amount)\");"
    },
    {
      "index": 1386,
      "groundtruth": "instance.sendMessage(sender, \" - /np setup\");",
      "prediction": "instance.sendMessage(sender, \" - /np setup\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1387,
      "groundtruth": "instance.getCore().getPlayerInSetup().remove(sender)) {",
      "prediction": "instance.getCore().getRestAPI",
      "es": 0.4363636363636364,
      "em": false,
      "passed": false,
      "original_prediction": "instance.getCore().getRestAPI"
    },
    {
      "index": 1388,
      "groundtruth": "instance.getCore().getRestAPI().testCredentials();",
      "prediction": "if (instance.getCore().getPlayerInSetup().remove(sender))",
      "es": 0.49122807017543857,
      "em": false,
      "passed": false,
      "original_prediction": "if (instance.getCore().getPlayerInSetup().remove(sender))"
    },
    {
      "index": 1389,
      "groundtruth": "instance.sendMessage(sender, \" - /np whitelist (add/remove) (ip)\");",
      "prediction": "import de.cubeattack.neoprotect.core.model.Backend;",
      "es": 0.19402985074626866,
      "em": false,
      "passed": false,
      "original_prediction": "import de.cubeattack.neoprotect.core.model.Backend;"
    },
    {
      "index": 1390,
      "groundtruth": "instance.sendMessage(sender, \" - /np directConnectWhitelist (ip)\");",
      "prediction": "instance.sendMessage(sender, \" - /np directConnectWhitelist (ip)\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "instance.sendMessage(sender, \" - /np debugTool (cancel / amount)\");"
    },
    {
      "index": 1391,
      "groundtruth": "instance.sendMessage(sender, \" - /np setgameshield [id]\");",
      "prediction": "instance.sendMessage(sender, \" - /np setgameshield [id]\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1392,
      "groundtruth": "if(backend.isGeyser())continue;",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 1393,
      "groundtruth": ".get(locale, \"hover.backend\", backend.getIp(), backend.getPort(), backend.getId()));",
      "prediction": ".get(locale, \"hover.backend\", backend.getIp(), backend.getPort(), backend.getId()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1394,
      "groundtruth": "gameshield.getName(), gameshield.getId()));",
      "prediction": "gameshield.getName(), gameshield.getId()));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "gamehield.getName(), gamehield.getId()));"
    },
    {
      "index": 1395,
      "groundtruth": "Component.text(core.getPrefix() + text);",
      "prediction": "Component.text(text);",
      "es": 0.525,
      "em": false,
      "passed": false,
      "original_prediction": "Component.text(text);"
    },
    {
      "index": 1396,
      "groundtruth": "set(\"general.pluginVersion\", stats.getPluginVersion());",
      "prediction": "set(\"general.ProxyName\", stat.getServerName());",
      "es": 0.5454545454545454,
      "em": false,
      "passed": false,
      "original_prediction": "set(\"general.ProxyName\", stat.getServerName());"
    },
    {
      "index": 1397,
      "groundtruth": "\"general.ProxyVersion\", stats.getServerVersion());",
      "prediction": "\"general.ProxyVersion\", stats.getServerVersion());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "\"general.ProxyVersion\", stat.getPluginVersion());"
    },
    {
      "index": 1398,
      "groundtruth": ", stats.getServerName());",
      "prediction": ", stats.getServerName());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ", stats.getProxyName());"
    },
    {
      "index": 1399,
      "groundtruth": "), gameshield.getId()));",
      "prediction": "), gameshield.getId()));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "), gamehield.getId()));"
    },
    {
      "index": 1400,
      "groundtruth": "product.setDescription(\"\u042d\u0442\u043e \u0432\u0430\u0448\u0435 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435!\");",
      "prediction": "product.setDescription(\"\u042d\u0442\u043e \u0432\u0430\u0448\u0435 \u043e\u0431\u044a\u044f\u0432\u043b\u0435\u043d\u0438\u0435!\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1401,
      "groundtruth": "setEmail(user.getEmail());",
      "prediction": "setPassword(user.getPassword());",
      "es": 0.5,
      "em": false,
      "passed": false,
      "original_prediction": "setPassword(user.getPassword());"
    },
    {
      "index": 1402,
      "groundtruth": "existUser.setRole(user.getRole());",
      "prediction": "existUser.setRole(user.getRole());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1403,
      "groundtruth": "(user.getRole().equals(\"ADMIN\")) {",
      "prediction": "(user.getRole().equals(\"ADMIN\")) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(user.getRole().equals(\"admin\"))"
    },
    {
      "index": 1404,
      "groundtruth": "if (product.getCreatedBy().getId().equals(currentUserId)) {",
      "prediction": "if (product.getCreatedBy().getId().equals(currentUserId)) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "if (product.getCreatedBy().getId().equals(currentUserId))"
    },
    {
      "index": 1405,
      "groundtruth": "user.setStatus(\"\u0410\u043a\u0442\u0438\u0432\u043d\u044b\u0439\");",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 1406,
      "groundtruth": "(!currentUser.getId().equals(id)) {",
      "prediction": "(!currentUser.getId().equals(id)) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(!currentUser.getId().equals(id))"
    },
    {
      "index": 1407,
      "groundtruth": "product.setArtist(updatedProduct.getArtist());",
      "prediction": "product.setArtist(updatedProduct.getArtist());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "product.setCategory(updatedProduct.getCategory());"
    },
    {
      "index": 1408,
      "groundtruth": "user.setCreationDate(LocalDateTime.now());",
      "prediction": "user.setCreationDate(LocalDateTime.now());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "user.setRegistrationDate(LocalDateTime.now());"
    },
    {
      "index": 1409,
      "groundtruth": "\"productId\", product.get().getId());",
      "prediction": "\"error\", null);",
      "es": 0.2222222222222222,
      "em": false,
      "passed": false,
      "original_prediction": "\"error\", null);"
    },
    {
      "index": 1410,
      "groundtruth": "setImageUrl(updatedProduct.getImageUrl());",
      "prediction": "setImageUrl(updatedProduct.getImageUrl());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "setMaterial(updatedProduct.getMaterial());"
    },
    {
      "index": 1411,
      "groundtruth": "List<Comment> comments = commentRepository.findByProductId(id);",
      "prediction": "List<Comment> comments = commentRepository.findByProductId(id);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "List<Comment> comment = commentRepository.findByProductId(id);"
    },
    {
      "index": 1412,
      "groundtruth": "product.setCreationDate(LocalDateTime.now());",
      "prediction": "product.setCreationDate(LocalDateTime.now());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "product.setCreatedDate(LocalDateTime.now());"
    },
    {
      "index": 1413,
      "groundtruth": "user.setRole(\"USER\");",
      "prediction": "user.setConfirmPassword(confirm_password);",
      "es": 0.2857142857142857,
      "em": false,
      "passed": false,
      "original_prediction": "user.setConfirmPassword(confirm_password);"
    },
    {
      "index": 1414,
      "groundtruth": "product.get().getPrice().doubleValue());",
      "prediction": "product.get().getPrice().doubleValue());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1415,
      "groundtruth": "System.out.println(transaction.getBuyerId());",
      "prediction": "System.out.println(transaction.getBuyerId());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1416,
      "groundtruth": "instance.getCore().getDebugPingResponses().put(player.getUsername(), new ArrayList<>());",
      "prediction": "map.put(player.getUsername(), new ArrayList<>());",
      "es": 0.5454545454545454,
      "em": false,
      "passed": false,
      "original_prediction": "map.put(player.getUsername(), new ArrayList<>());"
    },
    {
      "index": 1417,
      "groundtruth": "<OrderItem> orderItems = productService.findOrderItemsByProduct(id);",
      "prediction": "<OrderItem> orderItems = productService.findOrderItemsByProduct(id);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "<OrderItem> orderItems = orderItemService.getOrdersByProductId(id);"
    },
    {
      "index": 1418,
      "groundtruth": "Optional<User> userOptional = userService.validateUser(username, password);",
      "prediction": "Optional<User> userOptional = userService.validateUser(username, password);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "Optional<User> userOptional = userRepository.findByLogin(username);"
    },
    {
      "index": 1419,
      "groundtruth": "return orderItemRepository.findAllByProduct_Id(productId);",
      "prediction": "return orderItemRepository.findAllByProduct_Id(productId);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "return orderItemRepository.findByProductId(productId);"
    },
    {
      "index": 1420,
      "groundtruth": "TypeUtils.isPrimitiveOrSimpleType(typeCanonicalText)) {",
      "prediction": "TypeUtils.isPrimitiveOrSimple",
      "es": 0.5272727272727273,
      "em": false,
      "passed": false,
      "original_prediction": "TypeUtils.isPrimitiveOrSimple"
    },
    {
      "index": 1421,
      "groundtruth": "(TypeUtils.isMap(typeCanonicalText)) {",
      "prediction": "(TypeUtils.isMap(typeCanonicalText)) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "TypeUtils.isMap(typeCanonicalText)"
    },
    {
      "index": 1422,
      "groundtruth": "= TypeUtils.primitiveToBox(typeCanonicalText);",
      "prediction": "= TypeUtils.primitiveToBox(typeCanonicalText);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= TypeUtils.getWrapperClass(typeCanonicalText);"
    },
    {
      "index": 1423,
      "groundtruth": "if (TypeUtils.isPrimitiveOrSimpleType(fieldType.replaceAll(\"\\\\[]\", \"\"))) {",
      "prediction": "if (PsiClassHelper.findPsiClass(fieldType, project) != null)",
      "es": 0.29729729729729726,
      "em": false,
      "passed": false,
      "original_prediction": "if (PsiClassHelper.findPsiClass(fieldType, project) != null)"
    },
    {
      "index": 1424,
      "groundtruth": "TypeUtils.getExampleValue(typeCanonicalText, false);",
      "prediction": "TypeUtils.getExampleValue(typeCanonicalText, false);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1425,
      "groundtruth": ".equals(date) && booking.getTime().equals(time)) {",
      "prediction": ".equals(date) && booking.ge",
      "es": 0.54,
      "em": false,
      "passed": false,
      "original_prediction": ".equals(date) && booking.ge"
    },
    {
      "index": 1426,
      "groundtruth": ".getId() == tableId && booking.getDate().equals(date) && booking.getTime().equals(time)) {",
      "prediction": ".getId() == tableId && booking.getDate().equals",
      "es": 0.5222222222222221,
      "em": false,
      "passed": false,
      "original_prediction": ".getId() == tableId && booking.getDate().equals"
    },
    {
      "index": 1427,
      "groundtruth": "staffRepository.findByLogin(login) != null;",
      "prediction": "staffRepository.findByLogin(login) != null;",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "staffRepository.existsByLogin(login);"
    },
    {
      "index": 1428,
      "groundtruth": "staff.setApparatusEmployed(new java.sql.Date(currentDate.getTime()));",
      "prediction": "staff.setRegistrationDate(currentDate);",
      "es": 0.4347826086956522,
      "em": false,
      "passed": false,
      "original_prediction": "staff.setRegistrationDate(currentDate);"
    },
    {
      "index": 1429,
      "groundtruth": "dishService.editDishDetails(id, name, description, recipe);",
      "prediction": "dishService.editDishDetails(id, name, description, recipe);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1430,
      "groundtruth": "DishType dishType = dishTypeRepository.findByName(typeName);",
      "prediction": "DishType dishType = dishTypeRepository.findByName(typeName);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1431,
      "groundtruth": "(dishService.checkIfDishIsOrdered(id)) {",
      "prediction": "(dishService.checkIfDishIsOrdered(id)) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(dishService.checkIfDishIsOrdered(id))"
    },
    {
      "index": 1432,
      "groundtruth": "orderedDish.setStatus(status);",
      "prediction": "orderedDish.setStatus(status);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1433,
      "groundtruth": "<OrderedDish> dishesInOrder = orderedDishRepository.findAllByOrder(orderedDish.getOrder());",
      "prediction": "<OrderedDish> dishesInOrder = orderedDishRepository.findAllByOrder(orderedDish.getOrder());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "<OrderedDish> dishesInOrder = orderedDish.getOrder().getOrderedDishes();"
    },
    {
      "index": 1434,
      "groundtruth": "if (dishService.checkIfDishIsOrdered(id)) {",
      "prediction": "if (dishService.checkIfDishIsOrdered(id)) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "if (dishService.checkIfDishIsOrdered(id))"
    },
    {
      "index": 1435,
      "groundtruth": "model.addAttribute(\"staff\", staffService.getAllStaff());",
      "prediction": "model.addAttribute(\"staff\", staffService.getAllStaff());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "model.addAttribute(\"newStaff\", staff);"
    },
    {
      "index": 1436,
      "groundtruth": "<Tables> allTables = tableBookingService.getAllTables();",
      "prediction": "<Tables> allTables = tableBookingService.getAllTables();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1437,
      "groundtruth": "= orderedDish.getOrder();",
      "prediction": "= orderedDish.getOrder();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1438,
      "groundtruth": "loginExists(staff.getLogin())) {",
      "prediction": "loginExists(staff.getLogin())) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "isStaffExists(staff.getLogin())"
    },
    {
      "index": 1439,
      "groundtruth": "!config.getMajorRules().isEmpty() || !config.getMinorRules().isEmpty()) {",
      "prediction": "config.getMajorRules() != null) {}",
      "es": 0.3972602739726028,
      "em": false,
      "passed": false,
      "original_prediction": "config.getMajorRules() != null) {"
    },
    {
      "index": 1440,
      "groundtruth": ").isEmpty() || !config.getMinorRules().isEmpty()) {",
      "prediction": ").isEmpty()) {}",
      "es": 0.2549019607843137,
      "em": false,
      "passed": false,
      "original_prediction": ").isEmpty()) {"
    },
    {
      "index": 1441,
      "groundtruth": "semverConfigVersionTag = config.getVersionTag();",
      "prediction": "semverConfigVersionTag = config.getVersionTag();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1442,
      "groundtruth": "commitHistory.getChanges()) {",
      "prediction": "commitHistory.getChanges()) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "commitHistory) {"
    },
    {
      "index": 1443,
      "groundtruth": "= versionRules.getTagPattern().matcher(tag);",
      "prediction": "= versionRules.getTagPattern().matcher(tag);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= versionRule.getPattern().matcher(tag);"
    },
    {
      "index": 1444,
      "groundtruth": "= commitHistory.getLastVersionTag();",
      "prediction": "public VersionPolicyResultgetNextVersion(VersionPolicyRequest request) t",
      "es": 0.20833333333333337,
      "em": false,
      "passed": false,
      "original_prediction": "public VersionPolicyResultgetNextVersion(VersionPolicyRequest request) t"
    },
    {
      "index": 1445,
      "groundtruth": "userRepository.getUserByUserId(userId);",
      "prediction": "null;",
      "es": 0.05128205128205132,
      "em": false,
      "passed": false,
      "original_prediction": "null;"
    },
    {
      "index": 1446,
      "groundtruth": "List<Reservation> reservations = reservationRepository.getAllReservations().stream()\n                .filter(res -> {",
      "prediction": "List<Reservation> reservations = reservationRepository.getAl",
      "es": 0.5128205128205128,
      "em": false,
      "passed": false,
      "original_prediction": "List<Reservation> reservations = reservationRepository.getAl"
    },
    {
      "index": 1447,
      "groundtruth": "User existingUser = userRepository.getUserByUserId(userId);",
      "prediction": "User existingUser = userRepository.getUserByUserId(userId);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1448,
      "groundtruth": "ArrayList<>(userRepository.getAllUsers());",
      "prediction": "ArrayList<>(List.of(user1, user2));",
      "es": 0.5,
      "em": false,
      "passed": false,
      "original_prediction": "ArrayList<>(List.of(user1, user2));"
    },
    {
      "index": 1449,
      "groundtruth": "= deepCopy(object.getApplication());",
      "prediction": "= deepCopy(object.getApplication());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= deepCopy(object.getBindings());"
    },
    {
      "index": 1450,
      "groundtruth": "locator = ((Locator) binding.getValue()).getPath();",
      "prediction": "locator = ((Locator) binding.getValue()).getPath();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "locator = ((Locator) binding.getValue()).get();"
    },
    {
      "index": 1451,
      "groundtruth": "orgGroupSendHeaders.setXAcsDingtalkAccessToken(accessTokenService.getAccessToken());",
      "prediction": "orgGroupSendHeaders.setXAcsDingtalkAccessToken(accessTokenService.getAccessToken());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "orgGroupSendHeaders.setAccessToken(accessTokenService.getAccessToken());"
    },
    {
      "index": 1452,
      "groundtruth": "box.get(object.getName()));",
      "prediction": "box.get(object.getName()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1453,
      "groundtruth": "tokenizer.getToken();",
      "prediction": "tokenizer.getToken();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1454,
      "groundtruth": ").getName();",
      "prediction": ").getName();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1455,
      "groundtruth": "((FlatObject) binding.getValue()).getLocator())\n                    );",
      "prediction": "((FlatObject) binding.getValue()).getLocator())\n                    );",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "((FlatObject) binding.getValue()).getRef()\n                    );"
    },
    {
      "index": 1456,
      "groundtruth": "robotGroupMessagesService.send(openConversationId, \"hello\");",
      "prediction": "robotGroupMessagesService.send(openConversationId, \"hello\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "robotGroupMessagesService.sendGroupMessage(openConversationId, msg);"
    },
    {
      "index": 1457,
      "groundtruth": "this.tokenizer.next();",
      "prediction": "this.tokenizer.next();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1458,
      "groundtruth": "(storage.getName());",
      "prediction": "(Text.of(visitors.config.getWelcomeMembe))",
      "es": 0.2857142857142857,
      "em": false,
      "passed": false,
      "original_prediction": "(Text.of(visitors.config.getWelcomeMembe"
    },
    {
      "index": 1459,
      "groundtruth": ".add(BlockRegistry.get(member.brokenRaft()), beautifyName(member.brokenRaft()));",
      "prediction": ".add(BlockRegistry.get(member.brokenRaft()), beautifyName(member.brokenRaft()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1460,
      "groundtruth": ".add(BlockRegistry.get(member.raft()), member.chinese + \"\u7b4f\");",
      "prediction": ".add(BlockRegistry.get(member.raft()), member.chinese + \"\u7b4f\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".add(BlockRegistry.get(member.raft()), \"\u7b80\u6613\" + member.chinese + \"\u7b4f\");"
    },
    {
      "index": 1461,
      "groundtruth": ".add(BlockRegistry.get(member.fence()), beautifyName(member.fence()));",
      "prediction": ".add(BlockRegistry.get(member.fence()), beautifyName(member.fence()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1462,
      "groundtruth": "(BlockRegistry.get(member.rack()), beautifyName(member.rack()));",
      "prediction": "(BlockRegistry.get(member.rack()), beautifyName(member.rack()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1463,
      "groundtruth": "beautifyName(member.raft()));",
      "prediction": "beautifyName(member.raft()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1464,
      "groundtruth": "fence()), beautifyName(member.fence()));",
      "prediction": "fence()), beautifyName(member.fence()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1465,
      "groundtruth": "member.rack()), beautifyName(member.rack()));",
      "prediction": "member.rack()), beautifyName(member.rack()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1466,
      "groundtruth": ".get(member.crossedFence()), beautifyName(member.crossedFence()));",
      "prediction": ".get(member.crossedFence()), beautifyName(member.crossedFence()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1467,
      "groundtruth": ", beautifyName(member.brokenRaft()));",
      "prediction": ", beautifyName(member.brokenRaft()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1468,
      "groundtruth": "Logger.writeError(\"Invalid server response\");",
      "prediction": "close();",
      "es": 0.1333333333333333,
      "em": false,
      "passed": false,
      "original_prediction": "close();"
    },
    {
      "index": 1469,
      "groundtruth": "(\"position fen \"+b.getFEN());",
      "prediction": "(\"position fen \"+b.getFEN());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(\"position fen \"+b.getFen());"
    },
    {
      "index": 1470,
      "groundtruth": "username = jwtUtil.verifyToken(token);",
      "prediction": "username = jwtUtil.verifyToken(token);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "username = jwtUtil.getUsernameFromToken(token);"
    },
    {
      "index": 1471,
      "groundtruth": "getIncrementTime(), b.getIncrementTime()));",
      "prediction": "getInc(Color.WHITE), b.getInc(Color.BLACK)));",
      "es": 0.4666666666666667,
      "em": false,
      "passed": false,
      "original_prediction": "getInc(Color.WHITE), b.getInc(Color.BLACK)));"
    },
    {
      "index": 1472,
      "groundtruth": "Color.WHITE), b.getTime(Color.BLACK), b.getIncrementTime(), b.getIncrementTime()));",
      "prediction": "), b.getTime(), b.getInc(), b.getInc()));",
      "es": 0.49397590361445787,
      "em": false,
      "passed": false,
      "original_prediction": "), b.getTime(), b.getInc(), b.getInc()));"
    },
    {
      "index": 1473,
      "groundtruth": "cm.reply();",
      "prediction": "cm.start();",
      "es": 0.5454545454545454,
      "em": false,
      "passed": false,
      "original_prediction": "cm.start();"
    },
    {
      "index": 1474,
      "groundtruth": "user = userDetailsService.loadUserByUsername((String)auth.getPrincipal());",
      "prediction": "user = userDetailsService.loadUserByUsername((String)auth.getPrincipal());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "user = userDetailsService.loadUserByUsername(auth.getName());"
    },
    {
      "index": 1475,
      "groundtruth": "auth.eraseCredentials();",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 1476,
      "groundtruth": "ecoproveedor.calcularPuntosTotales();",
      "prediction": "ecoproveedor.getPuntos() + producto.getPuntos();",
      "es": 0.47916666666666663,
      "em": false,
      "passed": false,
      "original_prediction": "ecoproveedor.getPuntos() + producto.getPuntos();"
    },
    {
      "index": 1477,
      "groundtruth": "builder.add(BlockRegistry.get(member.brokenRaft()), \"\u635f\u574f\u7684\" + member.chinese + \"\u7b4f\");",
      "prediction": "builder.add(BlockRegistry.get(member.brokenRaft()), \"\u635f\u574f\u7684\" + member.chinese + \"\u7b4f\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "builder.add(BlockRegistry.get(member.brokenRaft()), member.chinese + \"\u7b4f\");"
    },
    {
      "index": 1478,
      "groundtruth": ".stream().filter(piece -> piece.getType().getName() == Piece.PIECE_PAWN).count();",
      "prediction": ".stream().filter(piece -> piece.getType().getName() == Piece.PIECE_PAWN).count();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1479,
      "groundtruth": "Flotage.id(id), block);",
      "prediction": "Flotage.id(id), block);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1480,
      "groundtruth": "().getNamespace(), \"block/\" + member.log().getPath());",
      "prediction": "().getNamespace(), \"block/\" + member.log().getPath());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1481,
      "groundtruth": "() && p.getColor() == piece.getColor()){",
      "prediction": "){}",
      "es": 0.025000000000000022,
      "em": false,
      "passed": false,
      "original_prediction": "){"
    },
    {
      "index": 1482,
      "groundtruth": ").filter(piece -> piece.getType().getName() == Piece.PIECE_KNIGHT).count();",
      "prediction": ").filter(piece -> piece.getType().getName() == Piece.PIECE_KNIGHT).count();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1483,
      "groundtruth": "if (piece == null || piece.getColor() != this.player) return false;",
      "prediction": "if (piece == null || piece.getColor() != this.player) return false;",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "if (piece == null) || piece.getColor() != this.player) return false;"
    },
    {
      "index": 1484,
      "groundtruth": "> pieces = getPiecesOnBoard().stream().filter(piece -> piece.getColor() == color).toList();",
      "prediction": "> pieces = color == Color.WHITE ? this.whiteCaptured : this.blackCaptured;",
      "es": 0.25274725274725274,
      "em": false,
      "passed": false,
      "original_prediction": "> pieces = color == Color.WHITE ? this.whiteCaptured : this.blackCaptured;"
    },
    {
      "index": 1485,
      "groundtruth": "p.getColor() == piece.getColor()){",
      "prediction": "!identical.contains",
      "es": 0.11764705882352944,
      "em": false,
      "passed": false,
      "original_prediction": "!identical.contains"
    },
    {
      "index": 1486,
      "groundtruth": ".WHITE && newLegalMoves.contains(convertPosition(this.blackKing.getX(), this.blackKing.getY()))){",
      "prediction": ".WHITE && newLegalMoves.contains(convertPosition(this.blackKing.getX(), this.blackKing.getY()))){",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".WHITE && newLegalMoves.contains(convertPosition(this.blackKing.getX(), this.blackKing.getY()))"
    },
    {
      "index": 1487,
      "groundtruth": "pos) == recipe.getMode()) {",
      "prediction": "pos, tile, itemStack, tile.itemDirection)) && tile.pro",
      "es": 0.2777777777777778,
      "em": false,
      "passed": false,
      "original_prediction": "pos, tile, itemStack, tile.itemDirection)) && tile.pro"
    },
    {
      "index": 1488,
      "groundtruth": ".filter(piece -> piece.getType().getName() == Piece.PIECE_ROOK).count();",
      "prediction": ".filter(piece -> piece.getType().getName() == Piece.PIECE_ROOK).count();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".filter(piece -> piece.getType().getName() == Piece.PIECE_ROOK).).count();"
    },
    {
      "index": 1489,
      "groundtruth": "if (MapUtils.isNotEmpty(this.properties.getConfig())) {",
      "prediction": "if (args.length == FEIGN_ARGS_LEN)",
      "es": 0.18181818181818177,
      "em": false,
      "passed": false,
      "original_prediction": "if (args.length == FEIGN_ARGS_LEN)"
    },
    {
      "index": 1490,
      "groundtruth": ".wrapperTimeoutOptions(this.properties.getHostConfig(uri.getHost()), uri);",
      "prediction": ".wrapperTimeoutOptions(this.properties.getHostConfig(uri.getHost()), uri);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".wrapperTimeoutOptions(this.properties.getConfig().get(uri.getHost()), request);"
    },
    {
      "index": 1491,
      "groundtruth": "[capture.getX()][capture.getY()] = null;",
      "prediction": "[p2[0]][p2[1]] = null;",
      "es": 0.35,
      "em": false,
      "passed": false,
      "original_prediction": "[p2[0]][p2[1]] = null;"
    },
    {
      "index": 1492,
      "groundtruth": "add(BlockRegistry.get(member.crossedFence()), member.chinese + \"\u5341\u5b57\u6805\u680f\");",
      "prediction": "add(BlockRegistry.get(member.crossedFence()), member.chinese + \"\u5341\u5b57\u6805\u680f\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "builder.add(BlockRegistry.get(member.crossedFence()), \"\u7b80\u6613\" + member.chinese + \"\u6805\u680f\");"
    },
    {
      "index": 1493,
      "groundtruth": "display.getMode().toString()));",
      "prediction": "display.getMode())).disableBackground();",
      "es": 0.525,
      "em": false,
      "passed": false,
      "original_prediction": "display.getMode())).disableBackground();"
    },
    {
      "index": 1494,
      "groundtruth": "add(BlockRegistry.get(member.rack()), member.chinese + \"\u7f6e\u7269\u67b6\");",
      "prediction": "add(BlockRegistry.get(member.rack()), member.chinese + \"\u7f6e\u7269\u67b6\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "builder.add(BlockRegistry.get(member.rack()), \"\u7f6e\u7269\u67b6\");"
    },
    {
      "index": 1495,
      "groundtruth": "member.fence()), \"\u7b80\u6613\" + member.chinese + \"\u6805\u680f\");",
      "prediction": "member.fence()), \"\u7b80\u6613\" + member.chinese + \"\u6805\u680f\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "member.fence()), member.chinese + \"\u6805\u680f\");"
    },
    {
      "index": 1496,
      "groundtruth": "inventory.getStack(0).getNbt();",
      "prediction": "inventory.getStack(0).getNbt();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1497,
      "groundtruth": "add(Widgets.withTooltip(arrow, Text.translatable(\"tip.flotage.rack.processtime\", display.getProcesstime() / 20), text));",
      "prediction": "add(Widgets.createLabel(new Point(bgBounds.x + 39, bgBounds.y + 18), text).noShadow().color(0xFFFFFF).rightAligned());",
      "es": 0.19166666666666665,
      "em": false,
      "passed": false,
      "original_prediction": "add(Widgets.createLabel(new Point(bgBounds.x + 39, bgBounds.y + 18), text).noShadow().color(0xFFFFFF).rightAligned());"
    },
    {
      "index": 1498,
      "groundtruth": "add(BlockRegistry.get(member.crossedFence()));",
      "prediction": "add(BlockRegistry.get(member.crossedFence()));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "add(BlockRegistry.get(member.rack()));"
    },
    {
      "index": 1499,
      "groundtruth": ".board.getPlayer() != this.viewPoint && (this.engineMove || !this.overTheBoard)){",
      "prediction": ".board.getBoard()[x][y] != null && this.bo",
      "es": 0.2962962962962963,
      "em": false,
      "passed": false,
      "original_prediction": ".board.getBoard()[x][y] != null && this.bo"
    },
    {
      "index": 1500,
      "groundtruth": "this.client.getColor();",
      "prediction": "this.client.getColor();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1501,
      "groundtruth": "this.client.getMessage();",
      "prediction": "this.client.getMessage();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1502,
      "groundtruth": "(this.board.getFEN()+\"\\n\\n\"+this.board.getPGN());",
      "prediction": "();",
      "es": 0.061224489795918324,
      "em": false,
      "passed": false,
      "original_prediction": "();"
    },
    {
      "index": 1503,
      "groundtruth": "if (this.board.getBoard()[x][y].getColor() == this.viewPoint){",
      "prediction": "{}",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": "{"
    },
    {
      "index": 1504,
      "groundtruth": "out.println(this.board.getFEN());",
      "prediction": "out.println(this.board.getFEN());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "out.println(this.board.getPGN());"
    },
    {
      "index": 1505,
      "groundtruth": "(this.board.getBoard()[x][y] == null && !getPremoves().contains(not)){",
      "prediction": "this.board.getBoard()[x][y] != null &",
      "es": 0.5142857142857142,
      "em": false,
      "passed": false,
      "original_prediction": "this.board.getBoard()[x][y] != null &"
    },
    {
      "index": 1506,
      "groundtruth": "this.board.getBoard()[x][y] != null){",
      "prediction": "this.board.getBoard()[x][y] != null){",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "this.board.getBoard()"
    },
    {
      "index": 1507,
      "groundtruth": "this.gameFinished = this.board.isGameFinished();",
      "prediction": "this.currentSelection = null;",
      "es": 0.25,
      "em": false,
      "passed": false,
      "original_prediction": "this.currentSelection = null;"
    },
    {
      "index": 1508,
      "groundtruth": ")+\"\\n\\n\"+this.board.getPGN());",
      "prediction": "));",
      "es": 0.09999999999999998,
      "em": false,
      "passed": false,
      "original_prediction": "));"
    },
    {
      "index": 1509,
      "groundtruth": "= Piece.getType(prom);",
      "prediction": "= prom.toUpperCase().equals(\"Q\") ? Piece.Pie",
      "es": 0.13636363636363635,
      "em": false,
      "passed": false,
      "original_prediction": "= prom.toUpperCase().equals(\"Q\") ? Piece.Pie"
    },
    {
      "index": 1510,
      "groundtruth": "= this.board.getValidMoves(this.board.getBoard()[x][y]);",
      "prediction": "= this.board.getValidMoves(this.board.getBoard()[x][y]);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1511,
      "groundtruth": "!this.client.isConnected()){",
      "prediction": "this.client.getC",
      "es": 0.5,
      "em": false,
      "passed": false,
      "original_prediction": "this.client.getC"
    },
    {
      "index": 1512,
      "groundtruth": "println(this.board.getPGN());",
      "prediction": "println(this.board.getPGN());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1513,
      "groundtruth": "this.board.getGameTime(), this.board.getIncrementTime());",
      "prediction": "time, inc);",
      "es": 0.19298245614035092,
      "em": false,
      "passed": false,
      "original_prediction": "time, inc);"
    },
    {
      "index": 1514,
      "groundtruth": "getAttackers(piece.getColor() == Color.WHITE ? this.whiteKing : this.blackKing) != null){",
      "prediction": "piece.getType().getName() == Piece.PIECE_PAWN",
      "es": 0.1910112359550562,
      "em": false,
      "passed": false,
      "original_prediction": "piece.getType().getName() == Piece.PIECE_PAWN"
    },
    {
      "index": 1515,
      "groundtruth": "return jdbcProcessors.path(driver, generatedHost, generatedDatabase);",
      "prediction": "return jdbcProcessors.path(driver, generatedHost, generatedDatabase);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "return jdbcProcessProcessor.process(driver, generatedHost, generatedDatabase, generatedUser);"
    },
    {
      "index": 1516,
      "groundtruth": "if (booking.isApproved()) {",
      "prediction": "if (booking.isApproved()) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "if (booking.isApproved())"
    },
    {
      "index": 1517,
      "groundtruth": "bookingRepository.deleteByTimeFinalBefore(LocalDateTime.now());",
      "prediction": "bookingRepository.findPending().f",
      "es": 0.39682539682539686,
      "em": false,
      "passed": false,
      "original_prediction": "bookingRepository.findPending().f"
    },
    {
      "index": 1518,
      "groundtruth": "booking.setTimeRequest(LocalDateTime.now());",
      "prediction": "booking.setApproved(false);",
      "es": 0.40909090909090906,
      "em": false,
      "passed": false,
      "original_prediction": "booking.setApproved(false);"
    },
    {
      "index": 1519,
      "groundtruth": "b.getId());",
      "prediction": "b);",
      "es": 0.2727272727272727,
      "em": false,
      "passed": false,
      "original_prediction": "b);"
    },
    {
      "index": 1520,
      "groundtruth": "protectionRune = CustomItems.createProtectionRune();",
      "prediction": "protectionRune = CustomItems.createProtectionRune();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1521,
      "groundtruth": "ItemStack protectionRune = CustomItems.createProtectionRune();",
      "prediction": "ItemStack protectionRune = CustomItems.createProtectionRune();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1522,
      "groundtruth": "bookingService.save(login, subject, lab, date, timeInit, timeFinal);",
      "prediction": "bookingService.save(login, subject, lab, date, timeInit, timeFinal);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "bookingService.saveBooking(login, lab, subject, date, timeInit, timeFinal);"
    },
    {
      "index": 1523,
      "groundtruth": "(professorService.getProfessorByLogin(login));",
      "prediction": "(professorService.getProfessorByLogin(login));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(professorService.getProfessor(login));"
    },
    {
      "index": 1524,
      "groundtruth": "int count = bookingRepository.isBusy(b.getLab().getId(), b.getTimeInit(), b.getTimeFinal());",
      "prediction": "int count = bookingRepository.countByProfessorAn",
      "es": 0.3804347826086957,
      "em": false,
      "passed": false,
      "original_prediction": "int count = bookingRepository.countByProfessorAn"
    },
    {
      "index": 1525,
      "groundtruth": ".BOLD + \"\" + Utils.getEnhancementInfo(enhancementLevel).getEnhanceName());",
      "prediction": ".BOLD + \"\" + Utils.getEnhancementInfo(enhancementLevel).getEnhanceName());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".BOLD + \"+\" + Utils.getEnhancementInfo(enhancementLevel).getEnhanceName());"
    },
    {
      "index": 1526,
      "groundtruth": "booking.setTimeInit(initialTime);",
      "prediction": "booking.setTimeInit(initialTime);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1527,
      "groundtruth": "), b.getTimeInit(), b.getTimeFinal());",
      "prediction": "), b.getTimeInit(), b.getTimeFinal());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1528,
      "groundtruth": ", b.getTimeInit(), b.getTimeFinal());",
      "prediction": ", b.getTimeInit(), b.getTimeFinal());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1529,
      "groundtruth": "(Environment.getProgram(), taintFunction);",
      "prediction": "(Environment.getProgram(), taintFunction);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(Environment.getProgram(), startFunc);"
    },
    {
      "index": 1530,
      "groundtruth": "analyzer.startAnalyzing();",
      "prediction": "analyzer.startAnalyzing();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "analyzer.analyze();"
    },
    {
      "index": 1531,
      "groundtruth": "setSubject(subjectService.getSubject(subject));",
      "prediction": "setSubject(subjectService.getSubject(subject));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1532,
      "groundtruth": "func = FunctionUtil.getFunctionWith(Environment.getProgram(), connAdd);",
      "prediction": "func = FunctionUtil.getFunctionWith(Environment.getProgram(), connAdd);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "func = FunctionUtil.getFunctionWith(Environment.getProgram(), startAdd);"
    },
    {
      "index": 1533,
      "groundtruth": ".decompileFuncNormalize(Environment.getProgram(), FunctionUtil.getFunctionWith(Environment.getProgram(), startAdd));",
      "prediction": ".decompileFuncNormalize(program, connectFunc);",
      "es": 0.3620689655172413,
      "em": false,
      "passed": false,
      "original_prediction": ".decompileFuncNormalize(program, connectFunc);"
    },
    {
      "index": 1534,
      "groundtruth": "decompileFuncNormalize(Environment.getProgram(), FunctionUtil.getFunctionWith(Environment.getProgram(), startAdd));",
      "prediction": "decompileFuncNormalize(program, connectFunc);",
      "es": 0.35652173913043483,
      "em": false,
      "passed": false,
      "original_prediction": "decompileFuncNormalize(program, connectFunc);"
    },
    {
      "index": 1535,
      "groundtruth": "= FileUtil.readFromFile(configPath);",
      "prediction": "= FileUtil.readFromFile(configPath);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= FileUtil.readTextFile(configPath);"
    },
    {
      "index": 1536,
      "groundtruth": "jo.getProperty(name).cast(JSFunction.class);",
      "prediction": "jo.getJSFunction(method);",
      "es": 0.38636363636363635,
      "em": false,
      "passed": false,
      "original_prediction": "jo.getJSFunction(method);"
    },
    {
      "index": 1537,
      "groundtruth": "DecompileResults decompileResults = Decompiler.decompileFuncRegister(Environment.getProgram(), currentFunc);",
      "prediction": "DecompileResults decompileResults = Decompiler.decompileFuncRegister(Environment.getProgram(), currentFunc);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "DecompileResults decompileResults = Decompiler.decompileFunc(Environment.getProgram(), currentFunc);"
    },
    {
      "index": 1538,
      "groundtruth": "getFunctionWith(Environment.getProgram(), inputs[0].getAddress());",
      "prediction": "getFunctionWith(Environment.getProgram(), inputs[0].getAddress());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "getFunctionWith(program, op.getOutput().getAddress());"
    },
    {
      "index": 1539,
      "groundtruth": "jo.getJavaObject();",
      "prediction": "null;",
      "es": 0.052631578947368474,
      "em": false,
      "passed": false,
      "original_prediction": "null;"
    },
    {
      "index": 1540,
      "groundtruth": "enhancementLevel).getEnhanceColor() + \"+\" + Utils.getEnhancementInfo(enhancementLevel).getEnhanceName());",
      "prediction": "enhancementLevel).getEnhanceColor() + \"+\" + Utils.getEnhancementInfo(enhancementLevel).getEnhanceName());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "enhancementLevel).getEnhanceColor() + \"\" + ChatColor.BOLD + \"\" + Utils.getEnhancementInfo(enhancementLevel).getEnhanceName());"
    },
    {
      "index": 1541,
      "groundtruth": "CustomItems.createBlackStoneWeapon();",
      "prediction": "CustomItems.createBlackStoneWeapon();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1542,
      "groundtruth": "protectionStone = random.nextBoolean() ? CustomItems.createProtectionRune() : CustomItems.createProtectionRune();",
      "prediction": "protectionStone = random.nextBoolean() ? CustomItems.createProtectionRune() : CustomItems.createProtectionRune();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "protectionStone = random.nextBoolean() ? CustomItems.createProtectionStoneWeapon() : CustomItems.createProtectionStoneArmor();"
    },
    {
      "index": 1543,
      "groundtruth": "CustomItems.createConcentratedMagicalBlackStoneWeapon();",
      "prediction": "CustomItems.createConcentratedMagicalBlackStoneWeapon();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1544,
      "groundtruth": "itemToGive = CustomItems.createProtectionRune();",
      "prediction": "itemToGive = CustomItems.createProtectionRune();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "itemToGive = CustomItems.createPureBlackStone();"
    },
    {
      "index": 1545,
      "groundtruth": "? CustomItems.createConcentratedMagicalBlackStoneWeapon() : CustomItems.createConcentratedMagicalBlackStoneArmor();",
      "prediction": "? CustomItems.createConcentratedMagicalBlackStoneWeapon() : CustomItems.createConcentratedMagicalBlackStoneArmor();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "? CustomItems.createConcentratedBlackStoneWeapon() : CustomItems.createConcentratedBlackStoneArmor();"
    },
    {
      "index": 1546,
      "groundtruth": "25, enhanceGUI.createEnhanceButton());",
      "prediction": "25, enhanceGUI.createEnhanceButton());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "25, EnhanceGUI.createEnhanceButton());"
    },
    {
      "index": 1547,
      "groundtruth": ".nextBoolean() ? CustomItems.createProtectionRune() : CustomItems.createProtectionRune();",
      "prediction": ".nextBoolean() ? CustomItems.createProtectionRune() : CustomItems.createProtectionRune();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".nextBoolean() ? CustomItems.createProtectionStoneWeapon() : CustomItems.createProtectionStoneArmor();"
    },
    {
      "index": 1548,
      "groundtruth": "nextBoolean() ? CustomItems.createConcentratedMagicalBlackStoneWeapon() : CustomItems.createConcentratedMagicalBlackStoneArmor();",
      "prediction": "nextBoolean() ? CustomItems.createConcentratedMagicalBlackStoneWeapon() : CustomItems.createConcentratedMagicalBlackStoneArmor();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "nextBoolean() ? CustomItems.createConcentratedBlackStoneWeapon() : CustomItems.createConcentratedBlackStoneArmor();"
    },
    {
      "index": 1549,
      "groundtruth": "add(inputBox1.getVBox());",
      "prediction": "add(inputBox1.getVBox());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1550,
      "groundtruth": "inputBox1.setInitialConversion(false);",
      "prediction": "inputBox1.setInitialConversion(false);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "inputBox2.setInitialConversion(true);"
    },
    {
      "index": 1551,
      "groundtruth": "inputBox1.startConversion();",
      "prediction": "inputBox1.startConversion();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "inputBox2.setInitialConversion(true);"
    },
    {
      "index": 1552,
      "groundtruth": "inputBox1.setInitialConversion(true);",
      "prediction": "inputBox1.setInitialConversion(true);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1553,
      "groundtruth": "professorService.deleteById(id);",
      "prediction": "professorService.deleteById(id);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "professorService.delete(id);"
    },
    {
      "index": 1554,
      "groundtruth": "List<Booking> bookings = bookingRepository.findByProfessor(id);",
      "prediction": "List<Booking> bookings = bookingRepository.findByProfessor(id);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1555,
      "groundtruth": "bookingRepository.approve(id);",
      "prediction": "if (isBusy(booking))",
      "es": 0.16666666666666663,
      "em": false,
      "passed": false,
      "original_prediction": "if (isBusy(booking))"
    },
    {
      "index": 1556,
      "groundtruth": "InputBox.setBaseIndex(1);",
      "prediction": "inputBox2.setInitialConversion(true);",
      "es": 0.45945945945945943,
      "em": false,
      "passed": false,
      "original_prediction": "inputBox2.setInitialConversion(true);"
    },
    {
      "index": 1557,
      "groundtruth": "newComponent.getVBox().setId(String.valueOf(counter));",
      "prediction": "newComponent.getComboBox().setValue(\"USD\");",
      "es": 0.5185185185185186,
      "em": false,
      "passed": false,
      "original_prediction": "newComponent.getComboBox().setValue(\"USD\");"
    },
    {
      "index": 1558,
      "groundtruth": "String exchangeRate = conversion.getExchangeRate();",
      "prediction": "String exchangeRate = result.substring(0, result.indexOf(\" \"));",
      "es": 0.46031746031746035,
      "em": false,
      "passed": false,
      "original_prediction": "String exchangeRate = result.substring(0, result.indexOf(\" \"));"
    },
    {
      "index": 1559,
      "groundtruth": "Errors.noConexion();",
      "prediction": "return \"offline\";",
      "es": 0.30000000000000004,
      "em": false,
      "passed": false,
      "original_prediction": "return \"offline\";"
    },
    {
      "index": 1560,
      "groundtruth": "inputBox.getComboBox().getValue());",
      "prediction": "inputBox.getComboBox().getValue());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1561,
      "groundtruth": "String resultOffline = conversion.convertOffline(exchangeRateOffline, baseTextField);",
      "prediction": "inputbox.setLabel2(\" | Tipo de cambio: \" + exchangeRateOffline + \" (\" + date + \" )\");",
      "es": 0.2588235294117647,
      "em": false,
      "passed": false,
      "original_prediction": "inputbox.setLabel2(\" | Tipo de cambio: \" + exchangeRateOffline + \" (\" + date + \" )\");"
    },
    {
      "index": 1562,
      "groundtruth": "inputBox.setTextField(resultOffline);",
      "prediction": "inputBox.setTextField(resultOffline);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1563,
      "groundtruth": "startsWith(baseComboBox) && key.toString().endsWith(inputBox.getComboBox().getValue())) {",
      "prediction": "startsWith(baseComboBox) && key.toString().endsWith(inputBox.getComboBox().getValue())) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "equals(baseComboBox + \"->\" + inputBox.getComboBox().getValue())"
    },
    {
      "index": 1564,
      "groundtruth": "inputBox.getComboBox().getValue() + \" : \" + exchangeRate);",
      "prediction": "inputBox.getComboBox().getValue() + \" : \" + exchangeRate);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "inputBox.getComboBox().getValue() + \" | \" + exchangeRate);"
    },
    {
      "index": 1565,
      "groundtruth": "inputBox.getLabel2().setTextFill(Color.RED);",
      "prediction": "inputBox.getLabel2().setTextFill(Color.RED);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1566,
      "groundtruth": "inputBox.setTextField(result);",
      "prediction": "inputBox.setTextField(result);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "inputbox.setTextField(result);"
    },
    {
      "index": 1567,
      "groundtruth": "inputBox.setLabel2(\" | Tipo de cambio: \" + exchangeRateOffline + \" (\" + date + \" ) \u26a0\");",
      "prediction": "inputBox.setLabel2(\" | Tipo de cambio: \" + baseComboBox + \" -> \" + inputBox.getComboBox().getValue() + \" : \" + exchangeRateOffline)",
      "es": 0.46564885496183206,
      "em": false,
      "passed": false,
      "original_prediction": "inputBox.setLabel2(\" | Tipo de cambio: \" + baseComboBox + \" -> \" + inputBox.getComboBox().getValue() + \" : \" + exchangeRateOffline"
    },
    {
      "index": 1568,
      "groundtruth": "inputBox.setLabel2(\" | No hay datos guardados \u26a0\");",
      "prediction": "inputBox.setLabel2(\" | Tipo de cambio: \" + baseComboBox + \" -> \" + inputBox)",
      "es": 0.42105263157894735,
      "em": false,
      "passed": false,
      "original_prediction": "inputBox.setLabel2(\" | Tipo de cambio: \" + baseComboBox + \" -> \" + inputBox"
    },
    {
      "index": 1569,
      "groundtruth": "Node node : MainController.getVBox().getChildren()) {",
      "prediction": "Node node : MainController.g",
      "es": 0.5283018867924528,
      "em": false,
      "passed": false,
      "original_prediction": "Node node : MainController.g"
    },
    {
      "index": 1570,
      "groundtruth": "= Utils.addCurrencies();",
      "prediction": "= Utils.addCurrencies();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= Utils.obtenerMonedas();"
    },
    {
      "index": 1571,
      "groundtruth": "modified |= mySettingsComponent.isAutoPopup() != settings.autoPopup;",
      "prediction": "modified |= mySettingsComponent.isAutoPopup() != settings.autoPopup;",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1572,
      "groundtruth": "|= mySettingsComponent.isAutoSaveToNewFile() != settings.autoSaveToNewFile;",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 1573,
      "groundtruth": "Utils.obtenerCodigoPais(item);",
      "prediction": "Utils.obtenerCodigoPais(item);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1574,
      "groundtruth": "modified |= mySettingsComponent.isAutoAddComments() != settings.autoAddComments;",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 1575,
      "groundtruth": "modified = !mySettingsComponent.get_OPENAI_API_KEY().equals(settings.OPENAI_API_KEY);",
      "prediction": "modified = false;",
      "es": 0.18823529411764706,
      "em": false,
      "passed": false,
      "original_prediction": "modified = false;"
    },
    {
      "index": 1576,
      "groundtruth": "!mySettingsComponent.getCustomRefactor().equals(settings.customRefactor);",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 1577,
      "groundtruth": "mySettingsComponent.isAutoReplaceCode() != settings.autoReplaceCode;",
      "prediction": "mySettingsComponent.isAutoReplaceCode() != settings.autoReplaceCode;",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1578,
      "groundtruth": ".setText(Utils.addSymbol(baseComboBox) + \"0\");",
      "prediction": ".setPadding(new Insets(0.0, 0.0, 0.0, 0.0));",
      "es": 0.17391304347826086,
      "em": false,
      "passed": false,
      "original_prediction": ".setPadding(new Insets(0.0, 0.0, 0.0, 0.0));"
    },
    {
      "index": 1579,
      "groundtruth": "label1.setText(Utils.addSymbol(baseComboBox) + formattedNumber);",
      "prediction": "textField.setText(formattededNumber);",
      "es": 0.375,
      "em": false,
      "passed": false,
      "original_prediction": "textField.setText(formattededNumber);"
    },
    {
      "index": 1580,
      "groundtruth": "ok(this.orderService.getCustomerOrders(id));",
      "prediction": "ok(this.orderService.getCustomerOrders(id));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "ok(this.orderService.getOutsideOrders(id));"
    },
    {
      "index": 1581,
      "groundtruth": "ok(this.pizzaService.getCheapest(price));",
      "prediction": "ok(this.pizzaService.getCheapest(price));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "ok(this.pizzaService.getCheapestPizzas(price));"
    },
    {
      "index": 1582,
      "groundtruth": "orderRepository.findAllByMethodIn(methods);",
      "prediction": "orderRepository.findAllByMethodIn(methods);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "orderRepository.findOutsideOrders(methods);"
    },
    {
      "index": 1583,
      "groundtruth": "orderRepository.findCustomerOrders(idCustomer);",
      "prediction": "orderRepository.findCustomerOrders(idCustomer);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "orderRepository.findAllByCustomer_Id(idCustomer);"
    },
    {
      "index": 1584,
      "groundtruth": "this.pizzaRepository.findAllByAvailableTrueAndDescriptionContainingIgnoreCase(ingredient);",
      "prediction": "this.pizzaRepository.findAllByAvailableTrueAndDescriptionContainingIgnoreCase(ingredient);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1585,
      "groundtruth": "orderRepository.findSummary(orderId);",
      "prediction": "orderRepository.findSummary(orderId);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "orderRepository.getSummary(orderId);"
    },
    {
      "index": 1586,
      "groundtruth": "return this.pizzaRepository.findFirstByAvailableTrueAndNameIgnoreCase(name).orElseThrow(() -> new RuntimeException(\"La pizza no existe\"));",
      "prediction": "return this.pizzaRepository.findByName(name);",
      "es": 0.32608695652173914,
      "em": false,
      "passed": false,
      "original_prediction": "return this.pizzaRepository.findByName(name);"
    },
    {
      "index": 1587,
      "groundtruth": "return mergePluginManagement != null ? mergePluginManagement : mixins.isMergePluginManagement();",
      "prediction": "return mergePluginManagement != null ? mergePluginManagement : mixins.isMergePluginManagement();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1588,
      "groundtruth": ".pizzaRepository.findTop3ByAvailableTrueAndPriceLessThanEqualOrderByPriceAsc(price);",
      "prediction": ".pizzaRepository.findTop3ByAvailableTrueAndPriceLessThanEqualOrderByPriceAsc(price);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".pizzaRepository.findAllByAvailableTrueOrderByPriceAsc(price);"
    },
    {
      "index": 1589,
      "groundtruth": "null ? mergePlugins : mixins.isMergePlugins();",
      "prediction": "null ? mergePlugins : mixins.isMergePlugins();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1590,
      "groundtruth": "null ? mergeDistributionManagement : mixins.isMergeDistributionManagement();",
      "prediction": "null ? mergeDistributionManagement : mixins.isMergeDistributionManagement();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1591,
      "groundtruth": "!= null ? activateProfiles : mixins.isActivateProfiles();",
      "prediction": "!= null ? activateProfiles : mixins.isActivateProfiles();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1592,
      "groundtruth": "mixins.getDefaultMixinType();",
      "prediction": "\"pom\";",
      "es": 0.06896551724137934,
      "em": false,
      "passed": false,
      "original_prediction": "\"pom\";"
    },
    {
      "index": 1593,
      "groundtruth": "recurse != null ? recurse : mixins.isRecurse();",
      "prediction": "recurse != null ? recurse : mixins.isRecurse();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1594,
      "groundtruth": "!= null ? mergeRepositories : mixins.isMergeRepositories();",
      "prediction": "!= null ? mergeRepositories : mixins.isMergeRepositories();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1595,
      "groundtruth": "ok(eventService.getUserEvents(userId));",
      "prediction": "badRequest().build();",
      "es": 0.17948717948717952,
      "em": false,
      "passed": false,
      "original_prediction": "badRequest().build();"
    },
    {
      "index": 1596,
      "groundtruth": "attendanceRepository.findByUserIdAndRole(userId, role).forEach(\n                attendance -> events.add(attendance.getEvent())\n        );",
      "prediction": "attendanceRepository.findByUserIdAndRole(userId, role).forEach(\n                attendance -> events.add(attendance.getEvent())\n        );",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "if (user.get().getRole().equals(role)) {\n            attendanceRepository.findByUserId(userId).forEach(\n            attendance -> events.add(attendance.getEvent())\n            );"
    },
    {
      "index": 1597,
      "groundtruth": "eventService.getSingleEvent(eventId);",
      "prediction": "eventService.getSingleEvent(eventId);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "eventService.getEvent(eventId);"
    },
    {
      "index": 1598,
      "groundtruth": "String username = jwtService.extractUsername(jwtToken);",
      "prediction": "String username = jwtService.extractUsername(jwtToken);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1599,
      "groundtruth": "attendanceRepository.findByUserId(userId).forEach(\n                attendance -> events.add(attendance.getEvent())\n        );",
      "prediction": "if (user.isEmpty()) {\n            throw new AcmException(ErrorConstants.USER_NOT_FOUND, HttpStatus.NOT_FOUND);}",
      "es": 0.128,
      "em": false,
      "passed": false,
      "original_prediction": "if (user.isEmpty()) {\n            throw new AcmException(ErrorConstants.USER_NOT_FOUND, HttpStatus.NOT_FOUND);"
    },
    {
      "index": 1600,
      "groundtruth": "return this.pizzaRepository.findAllByAvailableTrueAndDescriptionContainingIgnoreCase(ingredient);",
      "prediction": "return this.pizzaRepository.findAllByAvailableTrueAndDescriptionContainingIgnoreCase(ingredient);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1601,
      "groundtruth": ".orderRepository.findCustomerOrders(idCustomer);",
      "prediction": ".orderRepository.findCustomerOrders(idCustomer);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".orderRepository.findAllByCustomer_Id(idCustomer);"
    },
    {
      "index": 1602,
      "groundtruth": "this.pizzaRepository.findTop3ByAvailableTrueAndPriceLessThanEqualOrderByPriceAsc(price);",
      "prediction": "this.pizzaRepository.findTop3ByAvailableTrueAndPriceLessThanEqualOrderByPriceAsc(price);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "this.pizzaRepository.findAllByAvailableTrueAndPriceLessThan(price);"
    },
    {
      "index": 1603,
      "groundtruth": "this.orderService.getCustomerOrders(id));",
      "prediction": "this.orderService.getCustomerOrders(id));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "this.orderService.getOutsideOrders(id));"
    },
    {
      "index": 1604,
      "groundtruth": "!= null && !encryptor.isEncrypted(propValue)) {",
      "prediction": "== null) {}",
      "es": 0.17021276595744683,
      "em": false,
      "passed": false,
      "original_prediction": "== null) {"
    },
    {
      "index": 1605,
      "groundtruth": "return customerRepository.findCustomerByName(name);",
      "prediction": "return customerRepository.findCustomerByName(name);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1606,
      "groundtruth": "encryptor.decrypt(encryptedValue).toString();",
      "prediction": "encryptor.decrypt(encryptedValue).toString();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "encryptor.decrypt(encryptedValue);"
    },
    {
      "index": 1607,
      "groundtruth": "= encryptor.decrypt(value).toString();",
      "prediction": "= encryptor.decrypt(value).toString();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= encryptor.decrypt(value);"
    },
    {
      "index": 1608,
      "groundtruth": "if (encryptor.isEncrypted(value)) {",
      "prediction": "if (value != null)",
      "es": 0.19999999999999996,
      "em": false,
      "passed": false,
      "original_prediction": "if (value != null)"
    },
    {
      "index": 1609,
      "groundtruth": "loader.mergeMixins();",
      "prediction": "loader.mergeMixins();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "loader.loadMixin();"
    },
    {
      "index": 1610,
      "groundtruth": "mDiracSound.getMusic() == 1;",
      "prediction": "mDiracSound.isEnabled();",
      "es": 0.5,
      "em": false,
      "passed": false,
      "original_prediction": "mDiracSound.isEnabled();"
    },
    {
      "index": 1611,
      "groundtruth": "String name = wrapper.getName();",
      "prediction": "String name = wrapper.getName();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1612,
      "groundtruth": "return getFriendlyString().compareTo(o.getFriendlyString());",
      "prediction": "if (o instanceof StringVersion)",
      "es": 0.23333333333333328,
      "em": false,
      "passed": false,
      "original_prediction": "if (o instanceof StringVersion)"
    },
    {
      "index": 1613,
      "groundtruth": "mod.getMetadata().getId() + \"->\" + value;",
      "prediction": "mod.getMetadata().getId() + \"->\" + value;",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "mod.getMetadata().getId() + \"->(0.2.x)\" + value;"
    },
    {
      "index": 1614,
      "groundtruth": "return VersionParser.parseSemantic(s);",
      "prediction": "return VersionParser.parseSemantic(s);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "return VersionParser.parseSemanticVersion(s);"
    },
    {
      "index": 1615,
      "groundtruth": "return o.hasWildcard() ? 0 : -1;",
      "prediction": "return -1;",
      "es": 0.3125,
      "em": false,
      "passed": false,
      "original_prediction": "return -1;"
    },
    {
      "index": 1616,
      "groundtruth": "return VersionParser.parse(string, false);",
      "prediction": "return VersionParser.parse(string, false);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "return VersionParser.parse(string);"
    },
    {
      "index": 1617,
      "groundtruth": "().getMetadata().getId(), ex);",
      "prediction": "(), ex);",
      "es": 0.2666666666666667,
      "em": false,
      "passed": false,
      "original_prediction": "(), ex);"
    },
    {
      "index": 1618,
      "groundtruth": "exception = new EntrypointException(key, entry.getModContainer().getMetadata().getId(), t);",
      "prediction": "exception = new EntrypointException(key, entry.getModContainer().getMetadata().getId(), t);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1619,
      "groundtruth": "(ForgePatch.getGameDir());",
      "prediction": "(new File(\"\").getAbsoluteFile().toPath());",
      "es": 0.26190476190476186,
      "em": false,
      "passed": false,
      "original_prediction": "(new File(\"\").getAbsoluteFile().toPath());"
    },
    {
      "index": 1620,
      "groundtruth": "parent.getVersionComponentCount();",
      "prediction": "parent.getVersionComponentCount();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1621,
      "groundtruth": "userDAO.getById(id);",
      "prediction": "userDAO.getById(id);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1622,
      "groundtruth": "parent = SemanticVersion.parse(version);",
      "prediction": "parent = SemanticVersion.parse(version);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "parent = new SemanticVersionImpl(version, storeX);"
    },
    {
      "index": 1623,
      "groundtruth": "userDAO.getCount();",
      "prediction": "userDAO.getCount();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "userDAO.getUserCount();"
    },
    {
      "index": 1624,
      "groundtruth": "userDAO.getByName(name);",
      "prediction": "userDAO.getByName(name);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "userDAO.findByName(name);"
    },
    {
      "index": 1625,
      "groundtruth": "documentDAO.getCount();",
      "prediction": "documentDAO.getCount();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "documentDAO.getCountDocument();"
    },
    {
      "index": 1626,
      "groundtruth": "return mod.getMetadata().getId() + \"->(0.3.x)\" + value;",
      "prediction": "return mod.getMetadata().getId() + \"->(0.3.x)\" + value;",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "return mod.getMetadata().getId() + \"->\" + value;"
    },
    {
      "index": 1627,
      "groundtruth": "controllerInfo.getMethod();",
      "prediction": "psiClass.findMe",
      "es": 0.14814814814814814,
      "em": false,
      "passed": false,
      "original_prediction": "psiClass.findMe"
    },
    {
      "index": 1628,
      "groundtruth": "if(controllerInfo.getRequestMethod().toLowerCase().contains(lowerCase)){",
      "prediction": "if(controllerInfo.getRequestMethod().toLowerCase().contains(lowerCase)){",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "if(controllerInfo.getName().toLowerCase().contains(lowerCase))"
    },
    {
      "index": 1629,
      "groundtruth": "if(controllerInfo.getPath().toLowerCase().contains(lowerCase)){",
      "prediction": "if(controllerInfo.getPath().toLowerCase().contains(lowerCase)){",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "if(controllerInfo.getControllerName().toLowerCase().contains(lowerCase))"
    },
    {
      "index": 1630,
      "groundtruth": "getSwaggerInfo() != null && controllerInfo.getSwaggerInfo().toLowerCase().contains(lowerCase)){",
      "prediction": "getSwaggerOperation() != null && controllerInfo.g",
      "es": 0.3789473684210526,
      "em": false,
      "passed": false,
      "original_prediction": "getSwaggerOperation() != null && controllerInfo.g"
    },
    {
      "index": 1631,
      "groundtruth": "() != null && controllerInfo.getSwaggerNotes().toLowerCase().contains(lowerCase)){",
      "prediction": "() != null && controllerInfo.getSwaggerNote",
      "es": 0.524390243902439,
      "em": false,
      "passed": false,
      "original_prediction": "() != null && controllerInfo.getSwaggerNote"
    },
    {
      "index": 1632,
      "groundtruth": "controllerInfo.getSwaggerNotes() != null && controllerInfo.getSwaggerNotes().toLowerCase().contains(lowerCase)){",
      "prediction": "controllerInfo.getSwaggerNotes() != null && controllerInfo.getSwaggerNotes().toLowerCase().contains(lowerCase)){",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "controllerInfo.getControllerName().toLowerCase().contains(lowerCase)"
    },
    {
      "index": 1633,
      "groundtruth": "= controllerInfo.getMethod().getContainingFile();",
      "prediction": "= controllerInfo.getMethod().getContainingFile();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= controllerInfo.getFile();"
    },
    {
      "index": 1634,
      "groundtruth": "(feignInfo.getMethod());",
      "prediction": "(feignInfo.getMethod());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(feignInfo.getFeignClass());"
    },
    {
      "index": 1635,
      "groundtruth": "if(controllerInfo.getSwaggerInfo() != null && controllerInfo.getSwaggerInfo().toLowerCase().contains(lowerCase)){",
      "prediction": "if(controllerInfo.getSwaggerInfo() != null && controllerInfo.getSwaggerInfo().toLowerCase().contains(lowerCase)){",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "if(controllerInfo.getMethodName().toLowerCase().contains(lowerCase))"
    },
    {
      "index": 1636,
      "groundtruth": "database.getConnection().close();",
      "prediction": "database.disconnect();",
      "es": 0.5454545454545454,
      "em": false,
      "passed": false,
      "original_prediction": "database.disconnect();"
    },
    {
      "index": 1637,
      "groundtruth": "genre.setTitle(resultSet.getString(\"title\"));",
      "prediction": "genre.setTitle(resultSet.getString(\"title\"));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1638,
      "groundtruth": "genre.setId(resultSet.getInt(\"id\"));",
      "prediction": "genre.setId(resultSet.getInt(\"id\"));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1639,
      "groundtruth": "comment.setText(res.getString(\"text\"));",
      "prediction": "comment.setText(res.getString(\"text\"));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1640,
      "groundtruth": "relocation.getPattern(),\n                        relocation.getRelocatedPattern(),\n                        relocation.getIncludes(),\n                        relocation.getExcludes()\n                ));",
      "prediction": "relocation.getFrom(), relocation.getTo(), relocation.getExcludes(), relocation.getIncludes()\n));",
      "es": 0.4328358208955224,
      "em": false,
      "passed": false,
      "original_prediction": "relocation.getFrom(), relocation.getTo(), relocation.getExcludes(), relocation.getIncludes()\n));"
    },
    {
      "index": 1641,
      "groundtruth": "relocation.getIncludes(),\n                        relocation.getExcludes()\n                ));",
      "prediction": "relocation.getExclusions(),\npublic relocation.getExclusions()\n));",
      "es": 0.4787234042553191,
      "em": false,
      "passed": false,
      "original_prediction": "relocation.getExclusions(),\npublic relocation.getExclusions()\n));"
    },
    {
      "index": 1642,
      "groundtruth": "relocation.getRelocatedPattern(),\n                        relocation.getIncludes(),\n                        relocation.getExcludes()\n                ));",
      "prediction": "relocation.getRelocatedPattern(),\n                        relocation.getIncludes(),\n                        relocation.getExcludes()\n                ));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "relocation.getReplacement(),\npublic relocation.getExcludes(),\npublic relocation.getIncludes()\n                ));"
    },
    {
      "index": 1643,
      "groundtruth": "comment.setId(res.getInt(\"id\"));",
      "prediction": "comment.setId(res.getInt(\"id\"));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1644,
      "groundtruth": "playlist.setUser(res.getInt(\"user\"));",
      "prediction": "playlist.setUser(res.getInt(\"user\"));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "tist.setUser(res.getInt(\"user\"));"
    },
    {
      "index": 1645,
      "groundtruth": "playlist.setPublic(res.getBoolean(\"is_public\"));",
      "prediction": "playlist.setPublic(res.getBoolean(\"is_public\"));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1646,
      "groundtruth": ".setArtistObj(crudArtist.getArtistById(music.getArtist()));",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 1647,
      "error": "RetryError[<Future at 0x10f0f2bd0 state=finished raised HTTPError>]",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": "",
      "prediction": ""
    },
    {
      "index": 1648,
      "error": "RetryError[<Future at 0x10f0fa550 state=finished raised HTTPError>]",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": "",
      "prediction": ""
    },
    {
      "index": 1649,
      "error": "RetryError[<Future at 0x10f0fa6d0 state=finished raised HTTPError>]",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": "",
      "prediction": ""
    },
    {
      "index": 1650,
      "error": "RetryError[<Future at 0x10f0f9750 state=finished raised HTTPError>]",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": "",
      "prediction": ""
    },
    {
      "index": 1651,
      "error": "RetryError[<Future at 0x10f0f92d0 state=finished raised HTTPError>]",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": "",
      "prediction": ""
    },
    {
      "index": 1652,
      "error": "RetryError[<Future at 0x10f0fa950 state=finished raised HTTPError>]",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": "",
      "prediction": ""
    },
    {
      "index": 1653,
      "groundtruth": "(response.getStatusCode() == 200) {",
      "prediction": "(response.getStatus().equals(\"success\"))",
      "es": 0.525,
      "em": false,
      "passed": false,
      "original_prediction": "(response.getStatus().equals(\"success\"))"
    },
    {
      "index": 1654,
      "groundtruth": "album.setReleaseDate(new java.sql.Date(new java.util.Date().getTime()));",
      "prediction": "album.setCoverPicPath(pathLbl.getText());",
      "es": 0.33333333333333337,
      "em": false,
      "passed": false,
      "original_prediction": "album.setCoverPicPath(pathLbl.getText());"
    },
    {
      "index": 1655,
      "groundtruth": ".setText(String.valueOf(album.getArtist()));",
      "prediction": ".setText(String.valueOf(album.getArtist()));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".setText(album.getArtist());"
    },
    {
      "index": 1656,
      "groundtruth": "genre.getId() == albumId){",
      "prediction": "genre.getId() == albumId){",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "genre.getId() ="
    },
    {
      "index": 1657,
      "groundtruth": "(buffer.asInputStream())\n                .build()\n            );",
      "prediction": "(buffer.asInputStream())\n                .build()\n            );",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(buffer)\n                .headers(headers)\n            .build()\n            );"
    },
    {
      "index": 1658,
      "groundtruth": "a.getVariable());",
      "prediction": "a.getVariable());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1659,
      "groundtruth": "a.isString() && b.isString()) {",
      "prediction": "a.isString() && b",
      "es": 0.5483870967741935,
      "em": false,
      "passed": false,
      "original_prediction": "a.isString() && b"
    },
    {
      "index": 1660,
      "groundtruth": "(a.isString() && b.isString()) {",
      "prediction": "(a.isString() && b.isString()) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(a.isString() && b.isString())"
    },
    {
      "index": 1661,
      "groundtruth": "[i] = new Token(tokenMethod.getMethod().process(a));",
      "prediction": "[i + 1] = method.process(a, b);",
      "es": 0.3846153846153846,
      "em": false,
      "passed": false,
      "original_prediction": "[i + 1] = method.process(a, b);"
    },
    {
      "index": 1662,
      "groundtruth": "((TokenMethod) token).getMethod());",
      "prediction": "((TokenMethod) token).getMethod());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1663,
      "groundtruth": ".setAttribute(\"user_reg\", teacher.getName());",
      "prediction": ".setAttribute(\"loggedIn\", true);",
      "es": 0.5111111111111111,
      "em": false,
      "passed": false,
      "original_prediction": ".setAttribute(\"loggedIn\", true);"
    },
    {
      "index": 1664,
      "groundtruth": "genre.getId() == music.getGenre()){",
      "prediction": "genre.getId() == mu",
      "es": 0.5428571428571429,
      "em": false,
      "passed": false,
      "original_prediction": "genre.getId() == mu"
    },
    {
      "index": 1665,
      "groundtruth": "u.setName(rs.getString(3));",
      "prediction": "u.setName(rs.getString(3));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1666,
      "groundtruth": "u.setPassword(rs.getString(4));",
      "prediction": "u.setPassword(rs.getString(4));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1667,
      "groundtruth": "u.setMail(rs.getString(1));",
      "prediction": "u.setMail(rs.getString(1));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "u.setId(rs.getInt(1));"
    },
    {
      "index": 1668,
      "groundtruth": "u.setPass(rs.getString(2));",
      "prediction": "u.setPass(rs.getString(2));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "u.setPassword(rs.getString(2));"
    },
    {
      "index": 1669,
      "groundtruth": "u.setReg(rs.getString(3));",
      "prediction": "u.setReg(rs.getString(3));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "u.setReg(rs.getString(2));"
    },
    {
      "index": 1670,
      "groundtruth": "return reduce.get(0).getVariable();",
      "prediction": "return resultTokens[0];",
      "es": 0.37142857142857144,
      "em": false,
      "passed": false,
      "original_prediction": "return resultTokens[0];"
    },
    {
      "index": 1671,
      "groundtruth": "u.setFullname(rs.getString(1));",
      "prediction": "u.setFullname(rs.getString(1));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1672,
      "groundtruth": "album.getId() == music.getArtist()){",
      "prediction": "album.getId() == music.getArtist()){",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "album.getId() == mus"
    },
    {
      "index": 1673,
      "groundtruth": "(album.getId() == music.getArtist()){",
      "prediction": "(album.getId() == music.getArtist()){",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(album.getId() == music.getAlbum())"
    },
    {
      "index": 1674,
      "groundtruth": "playlistName.setText(playlist.getTitle());",
      "prediction": "playlistName.setText(playlist.getTitle());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "playlistName.setText(playlist.getName());"
    },
    {
      "index": 1675,
      "groundtruth": "(genre.getId() == music.getGenre()){",
      "prediction": "(genre.getId() == music.getGenre()){",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(genre.getId() == music.getGenre())"
    },
    {
      "index": 1676,
      "groundtruth": "Operator operator = tokenOperator.getOperation();",
      "prediction": "Operator operator = tokenOperator.getOperation();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1677,
      "groundtruth": "Token(operator.getName() + resultTokens[i + 1].getVariable());",
      "prediction": "Token(operator.getName() + resultTokens[i + 1].getVariable());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1678,
      "groundtruth": "= new Token(operator.getName() + resultTokens[i + 1].getVariable());",
      "prediction": "= new Token(operator.getName() + resultTokens[i + 1].getVariable());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1679,
      "groundtruth": "response.getJson(), Music.class);",
      "prediction": "response.getJson(), Music.class);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1680,
      "groundtruth": "System.out.println(\"test\" + response.getMessage());",
      "prediction": "System.out.println(\"test\" + response.getMessage());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "System.out.println(response.getMessage());"
    },
    {
      "index": 1681,
      "groundtruth": "setHeaderText(response1.getMessage());",
      "prediction": "setTitleText(\"Added to playlist!\");",
      "es": 0.3157894736842105,
      "em": false,
      "passed": false,
      "original_prediction": "setTitleText(\"Added to playlist!\");"
    },
    {
      "index": 1682,
      "groundtruth": "a.getVariable().toString().isEmpty()) {",
      "prediction": "!(a instanceof TokenMethod)",
      "es": 0.15384615384615385,
      "em": false,
      "passed": false,
      "original_prediction": "!(a instanceof TokenMethod)"
    },
    {
      "index": 1683,
      "groundtruth": "(album.getCoverPicPath() != null) {",
      "prediction": "(album.getCoverPicPath() != null) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(album.getCoverPicPath() != null)"
    },
    {
      "index": 1684,
      "groundtruth": "final GptTurboModel model = GptTurboDto.convertToGptTurboModel(dto);",
      "prediction": "GptTurboModel model = JSON.parseObject(dto.getMessages(), GptTurboModel.class);",
      "es": 0.4683544303797469,
      "em": false,
      "passed": false,
      "original_prediction": "GptTurboModel model = JSON.parseObject(dto.getMessages(), GptTurboModel.class);"
    },
    {
      "index": 1685,
      "groundtruth": "() + \"_\" + getIdentityResolver().getIdentityKey(), getConfiguration());",
      "prediction": "entityResolver(), configuration);",
      "es": 0.45070422535211263,
      "em": false,
      "passed": false,
      "original_prediction": "entityResolver(), configuration);"
    },
    {
      "index": 1686,
      "groundtruth": "dslParser.parse(arrangement);",
      "prediction": "dslParser.parse(arrangement);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1687,
      "groundtruth": "el.getTypename();",
      "prediction": "el.getTypename();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "el.getType();"
    },
    {
      "index": 1688,
      "groundtruth": "body.getVariables().getRepresentations();",
      "prediction": "body.getQuery().getEntities();",
      "es": 0.5365853658536586,
      "em": false,
      "passed": false,
      "original_prediction": "body.getQuery().getEntities();"
    },
    {
      "index": 1689,
      "groundtruth": "query = body.getQuery().replaceFirst(\".+?\\\\)\", \"\");",
      "prediction": "query = body.getQuery();",
      "es": 0.47058823529411764,
      "em": false,
      "passed": false,
      "original_prediction": "query = body.getQuery();"
    },
    {
      "index": 1690,
      "groundtruth": "int status = ProcessUtils.runAndWait(cmd, tempDir);",
      "prediction": "if (installerFile.exists())",
      "es": 0.196078431372549,
      "em": false,
      "passed": false,
      "original_prediction": "if (installerFile.exists())"
    },
    {
      "index": 1691,
      "groundtruth": "FileUtils.writeFile(new File(cwd, \"eula.txt\"), \"eula=true\");",
      "prediction": "String eula = \"eula=true\";",
      "es": 0.3666666666666667,
      "em": false,
      "passed": false,
      "original_prediction": "String eula = \"eula=true\";"
    },
    {
      "index": 1692,
      "groundtruth": "Logger.info(\"Process exited with code: \" + exitCode);",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 1693,
      "groundtruth": "setNumero(endereco.getNumero());",
      "prediction": "setNumero(endereco.getNumero());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "setLogradouro(endereco.getLogradouro());"
    },
    {
      "index": 1694,
      "groundtruth": "endereco = modelMapper.getMapper().map(enderecoForm, Endereco.class);",
      "prediction": "endereco = modelMapper.getMapper().map(enderecoForm, Endereco.class);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "endereco = modelMapper.getMapper().map(enderecoForm, Endereco.class);;"
    },
    {
      "index": 1695,
      "groundtruth": "setComplemento(endereco.getComplemento());",
      "prediction": "setComplemento(endereco.getComplemento());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1696,
      "groundtruth": "DownloadUtils.download(this.url, finalFile, ignoreExist);",
      "prediction": "if (!ignoreExist && finalFile.exists())",
      "es": 0.33333333333333337,
      "em": false,
      "passed": false,
      "original_prediction": "if (!ignoreExist && finalFile.exists())"
    },
    {
      "index": 1697,
      "groundtruth": "FileUtils.deleteRecursive(tempDir);",
      "prediction": "FileUtils.deleteRecursive(tempDir);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "FileUtils.delete(tempDir);"
    },
    {
      "index": 1698,
      "groundtruth": "installerFile = DownloadUtils.downloadTemp(this.url);",
      "prediction": "installerFile = new File(options.cwd, this.getJARName());",
      "es": 0.4385964912280702,
      "em": false,
      "passed": false,
      "original_prediction": "installerFile = new File(options.cwd, this.getJARName());"
    },
    {
      "index": 1699,
      "groundtruth": "DebugChannel channel = Preconditions.checkNonNull(getChannel(key));",
      "prediction": "DebugChannel channel = Precondition",
      "es": 0.5223880597014925,
      "em": false,
      "passed": false,
      "original_prediction": "DebugChannel channel = Precondition"
    },
    {
      "index": 1700,
      "groundtruth": "FileUtils.writeFile(new File(options.cwd, \".mcdeploy\"), this.getJARName());",
      "prediction": "FileUtils.writeFile(new File(options.cwd, \".mcdeploy\"), this.getJARName());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "File jarFile = new File(options.cwd, this.getJARName());"
    },
    {
      "index": 1701,
      "groundtruth": "FileUtils.readFile(dotMCDFile);",
      "prediction": "dotMCDFile.exists() ? dotMCDFile.getName() : \"server.jar\";",
      "es": 0.2586206896551724,
      "em": false,
      "passed": false,
      "original_prediction": "dotMCDFile.exists() ? dotMCDFile.getName() : \"server.jar\";"
    },
    {
      "index": 1702,
      "groundtruth": "modelMapper.getMapper().map(enderecoForm, Endereco.class);",
      "prediction": "modelMapper.getMapper().map(enderecoForm, Endereco.class);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1703,
      "groundtruth": "List<Endereco> enderecoPelosCEP = enderecoRepository.getEnderecosPeloCEP(cep);",
      "prediction": "List<Endereco> enderecoPelosCEP = enderecoRepository.getEnderecosPeloCEP(cep);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "Endereco enderecoPelosCEP = enderecoRepository.encontrarEnderecoPorCEP(cep);"
    },
    {
      "index": 1704,
      "groundtruth": "listaEnderecos = enderecoRepository.getEnderecoList();",
      "prediction": "listaEnderecos = enderecoRepository.getEnderecoList();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "listaEnderecos = enderecoRepository.listarEnderecos();"
    },
    {
      "index": 1705,
      "groundtruth": "return R.error(\"\u672a\u77e5\u9519\u8bef\");",
      "prediction": "return R.success(\"success\");",
      "es": 0.5,
      "em": false,
      "passed": false,
      "original_prediction": "return R.success(\"success\");"
    },
    {
      "index": 1706,
      "groundtruth": ").put(\"name\", source.name()).put(\"version\", source.version()));",
      "prediction": ")",
      "es": 0.015873015873015928,
      "em": false,
      "passed": false,
      "original_prediction": ")"
    },
    {
      "index": 1707,
      "groundtruth": ").purl().getType());",
      "prediction": "));",
      "es": 0.15000000000000002,
      "em": false,
      "passed": false,
      "original_prediction": "));"
    },
    {
      "index": 1708,
      "groundtruth": "().map(v -> v.purl().getType()).distinct().toList();",
      "prediction": "()",
      "es": 0.038461538461538436,
      "em": false,
      "passed": false,
      "original_prediction": "()"
    },
    {
      "index": 1709,
      "groundtruth": "severity(SeverityUtils.fromScore(score));",
      "prediction": "severity(SeverityUtils.fromScore(score));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "severity(SeverityUtils.getSeverity(score))"
    },
    {
      "index": 1710,
      "groundtruth": "tree.root(), allDeps);",
      "prediction": "tree.root(), Collections.emptySet());",
      "es": 0.5135135135135135,
      "em": false,
      "passed": false,
      "original_prediction": "tree.root(), Collections.emptySet());"
    },
    {
      "index": 1711,
      "groundtruth": "(\"pkgs\", addPackages(depGraph, req.tree()));",
      "prediction": "(\"pkgs\", addPackages(depGraph, req.tree()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1712,
      "groundtruth": "().add(createPkg(tree.root()));",
      "prediction": "();",
      "es": 0.09677419354838712,
      "em": false,
      "passed": false,
      "original_prediction": "();"
    },
    {
      "index": 1713,
      "groundtruth": "c -> PackageRef.builder().purl(c.getPurl()).build())));",
      "prediction": "c -> PackageRef.builder().purl(c.getPurl()).build())));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "c -> PackageRef.builder().purl(c.getPurl()).build(),"
    },
    {
      "index": 1714,
      "groundtruth": "&& !req.tree().getAll().isEmpty();",
      "prediction": "&& req.tree().dependencies() != null;",
      "es": 0.45945945945945943,
      "em": false,
      "passed": false,
      "original_prediction": "&& req.tree().dependencies() != null;"
    },
    {
      "index": 1715,
      "groundtruth": "ref.name()).append(\"@\").append(ref.version()).toString();",
      "prediction": "ref.name()).append(\"@\").append(ref.version()).toString();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1716,
      "groundtruth": "PackageRef.builder().purl(pkgRef).build();",
      "prediction": "PackageRef.fromCoordinates(pkgRef);",
      "es": 0.47619047619047616,
      "em": false,
      "passed": false,
      "original_prediction": "PackageRef.fromCoordinates(pkgRef);"
    },
    {
      "index": 1717,
      "groundtruth": "\"/*?\" + stonecutter.currentActive() + \" {",
      "prediction": "\"/*?",
      "es": 0.09756097560975607,
      "em": false,
      "passed": false,
      "original_prediction": "\"/*?"
    },
    {
      "index": 1718,
      "groundtruth": ").missingTokens.isEmpty() ? \"\" : stonecutter.tokenCache().missingTokens.iterator().next());",
      "prediction": ").commonTokenss().get(0));",
      "es": 0.21978021978021978,
      "em": false,
      "passed": false,
      "original_prediction": ").commonTokenss().get(0));"
    },
    {
      "index": 1719,
      "groundtruth": "(ref.name(), issues);",
      "prediction": "(ref.name(), issues);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(pkgRef, issues);"
    },
    {
      "index": 1720,
      "groundtruth": "add(ref.purl().getType());",
      "prediction": "add(ref.purl().getType());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1721,
      "groundtruth": "(ref.name()).append(\"@\").append(ref.version()).toString();",
      "prediction": "()",
      "es": 0.03448275862068961,
      "em": false,
      "passed": false,
      "original_prediction": "()"
    },
    {
      "index": 1722,
      "groundtruth": "CharUtil.isBlankChar(str.charAt(i))) {",
      "prediction": "Character.isWhitespac",
      "es": 0.26315789473684215,
      "em": false,
      "passed": false,
      "original_prediction": "Character.isWhitespac"
    },
    {
      "index": 1723,
      "groundtruth": "stonecutter.tokenCache().tokensByVersion.get(cVersion.getSelectedItem()).values());",
      "prediction": "stonecutter.tokenMapper().tokens());",
      "es": 0.37349397590361444,
      "em": false,
      "passed": false,
      "original_prediction": "stonecutter.tokenMapper().tokens());"
    },
    {
      "index": 1724,
      "groundtruth": "(stonecutter.currentActive());",
      "prediction": "(\"Stonecutter\");",
      "es": 0.4,
      "em": false,
      "passed": false,
      "original_prediction": "(\"Stonecutter\");"
    },
    {
      "index": 1725,
      "groundtruth": "(moduleByRoot.get((setup.gradleProject().getChildProjects().get(version)).getProjectDir()), setup);",
      "prediction": "IfAbsent(module, setup);",
      "es": 0.1515151515151515,
      "em": false,
      "passed": false,
      "original_prediction": "IfAbsent(module, setup);"
    },
    {
      "index": 1726,
      "groundtruth": "conditionResult = stonecutter.testVersion(expression);",
      "prediction": "conditionResult = !conditionResult;",
      "es": 0.5,
      "em": false,
      "passed": false,
      "original_prediction": "conditionResult = !conditionResult;"
    },
    {
      "index": 1727,
      "groundtruth": "req.tree() != null && !req.tree().getAll().isEmpty();",
      "prediction": "req.tree() != null && !req.tree().getAll().isEmpty();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "req.getDependencies() != null && !req.getDependencies().isEmpty();"
    },
    {
      "index": 1728,
      "groundtruth": ".of(param.outputSideParam()), RetryJob.NEVER_RETRY);",
      "prediction": ".of(param.outputSideParam()), RetryJob.NEVER_RETRY);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1729,
      "groundtruth": "PackageRef ref = tree.root();",
      "prediction": "PackageRef ref = tree.root();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "PackageRef ref = tree.root().ref();"
    },
    {
      "index": 1730,
      "groundtruth": "findExternalProject(entry.getValue().gradleProject(), entry.getKey()).keySet()) {",
      "prediction": "getModuleSources(project, sourceSetName).g",
      "es": 0.23456790123456794,
      "em": false,
      "passed": false,
      "original_prediction": "getModuleSources(project, sourceSetName).g"
    },
    {
      "index": 1731,
      "groundtruth": "job.setJobIndex(listIndexHolder.getAndIncrement());",
      "prediction": "{}",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": "{"
    },
    {
      "index": 1732,
      "groundtruth": "(StrUtil.isBlank(str)) {",
      "prediction": "(str == null)",
      "es": 0.20833333333333337,
      "em": false,
      "passed": false,
      "original_prediction": "(str == null)"
    },
    {
      "index": 1733,
      "groundtruth": "filePipe.close();",
      "prediction": "}",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": "}"
    },
    {
      "index": 1734,
      "groundtruth": "deleteJob.run();",
      "prediction": "try {}",
      "es": 0.125,
      "em": false,
      "passed": false,
      "original_prediction": "try {"
    },
    {
      "index": 1735,
      "groundtruth": "deleteJob = RetryJob.fastFailWrap(DelJob.of(param.outputSideParam()));",
      "prediction": "deleteJob = param.getDeleteJob();",
      "es": 0.3285714285714286,
      "em": false,
      "passed": false,
      "original_prediction": "deleteJob = param.getDeleteJob();"
    },
    {
      "index": 1736,
      "groundtruth": "= param.getSubParams(MIRROR_MODE_PARAM, MIRROR_MODE_FULL).equals(MIRROR_MODE_APPEND);",
      "prediction": "= param.getSubParams(MIRROR_MODE_PARAM, MIRROR_MODE_FULL).equals(MIRROR_MODE_APPEND);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= param.getSubParams(MIRROR_MODE_PARAM, MIRROR_MODE_APPEND).equals(MIRROR_MODE_APPEND);"
    },
    {
      "index": 1737,
      "groundtruth": "stonecutter.versions())\n                versionModel.add(version);",
      "prediction": "stonecutter.versions())\n                versionModel.add(version);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "stonecutter.versions()) {\n                versionModel.add(version);"
    },
    {
      "index": 1738,
      "groundtruth": "return ActivityJDBC.instance().update(ctx.body().asPojo(Activity.class).setId(id));",
      "prediction": "return ActivityJDBC.instance().update(ctx.body().asPojo(Activity.class).setId(id));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "return ActivityJDBC.instance().update(id, ctx.body().asJsonObject().mapTo(Activity.class));"
    },
    {
      "index": 1739,
      "groundtruth": "(request.getLogin(), request.getPassword()).onComplete(ar -> {",
      "prediction": "(request.getLogin(), request.getPassword()).onComplete(ar -> {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(request.getUsername(), request.getPassword())"
    },
    {
      "index": 1740,
      "groundtruth": "ActivityJDBC.instance().getById(id).compose(found -> {",
      "prediction": "ActivityJDBC.instance().getBy",
      "es": 0.537037037037037,
      "em": false,
      "passed": false,
      "original_prediction": "ActivityJDBC.instance().getBy"
    },
    {
      "index": 1741,
      "groundtruth": "UserJDBC.instance().login(request.getLogin(), request.getPassword()).onComplete(ar -> {",
      "prediction": "UserJDBC.instance().login(request.getLogin(), request.getPassword()).onComplete(ar -> {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "UserJDBC.instance().login(request.getUsername(), request.getPassword())"
    },
    {
      "index": 1742,
      "groundtruth": "task.getOutputDir().set(task.getInputDir().get());",
      "prediction": "task.getOutputDir().set(task.getInputDir().get());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "task.getOutputDir().set(versionProject.file(\"./build\"));"
    },
    {
      "index": 1743,
      "groundtruth": "instance().login(request.getLogin(), request.getPassword()).onComplete(ar -> {",
      "prediction": "instance().login(request.getLogin(), request.getPassword()).onComplete(ar -> {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "instance().login(request.getUsername(), request.getPassword())"
    },
    {
      "index": 1744,
      "groundtruth": "task.getInputDir().set(afterEvaluate.file(\"./src\"));",
      "prediction": "task.getOutputDir().set(versionProject.getBuildDir().get().resolve(\"build\").ge)",
      "es": 0.40506329113924056,
      "em": false,
      "passed": false,
      "original_prediction": "task.getOutputDir().set(versionProject.getBuildDir().get().resolve(\"build\").ge"
    },
    {
      "index": 1745,
      "groundtruth": ".getOutputDir().set(task.getInputDir().get());",
      "prediction": ".getOutputDir().set(versionProject.file(\"./build\"));",
      "es": 0.5384615384615384,
      "em": false,
      "passed": false,
      "original_prediction": ".getOutputDir().set(versionProject.file(\"./build\"));"
    },
    {
      "index": 1746,
      "groundtruth": "switch (matchPlayer.getTeam()) {",
      "prediction": "switch (matchPlayer.getTeam()) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "switch (matchPlayer.getTeam())"
    },
    {
      "index": 1747,
      "groundtruth": "(valorantAPI.sendRestRequest(\"/v2/match/\" + matchId).getAsJsonObject().getAsJsonObject(\"data\"));",
      "prediction": "(valorantapi.getMatch(matchId));",
      "es": 0.27083333333333337,
      "em": false,
      "passed": false,
      "original_prediction": "(valorantapi.getMatch(matchId));"
    },
    {
      "index": 1748,
      "groundtruth": "JsonObject statusData = sendRestRequest(\"/v1/status/\" + region.getQuery()).getAsJsonObject().getAsJsonObject(\"data\");",
      "prediction": "JsonObject statusData = sendRestRequest(\"/v1/status/\" + region.getQuery()).getAsJsonObject().getAsJsonObject(\"data\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "JsonObject statusData = sendRestRequest(\"/v1/status/\" + region.getQuery()).getAsJsonObject();"
    },
    {
      "index": 1749,
      "groundtruth": "+ region.getQuery() + \"?name=\" + data[0] + \"&tag=\" + data[1]).getAsJsonArray();",
      "prediction": "+ region.getQuery() + \"?name=\" + data[0] + \"&tag=\" + data[1]).getAsJsonArray();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "+ region.getQuery() + \"/\" + data[0] + \"#\" + data[1]).getAsJsonArray();"
    },
    {
      "index": 1750,
      "groundtruth": "commands.getOrderById(orderId),\n                HttpStatus.OK);",
      "prediction": "commands.getOrderById(orderId),\n                HttpStatus.OK);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1751,
      "groundtruth": "= commands.createRequest(body.get(\"bookId\"))\n                .toString();",
      "prediction": "= commands.createRequest(body.get(\"bookId\"))\n                .toString();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= commands.createRequest(body.get(\"bookId\"));"
    },
    {
      "index": 1752,
      "groundtruth": "> booksToOrder = bookService.getBooksByIds(ids);",
      "prediction": "> booksToOrder = bookService.getBooksByIds(ids);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1753,
      "groundtruth": "<>(commands.getNumberOfRequestsOnBook(bookId),\n                HttpStatus.OK);",
      "prediction": "<>(commands.getNumberOfRequestsOnBook(bookId), HttpStatus.OK);",
      "es": 0.7948717948717949,
      "em": true,
      "passed": true
    },
    {
      "index": 1754,
      "groundtruth": "List<jenaTripleParser> result = serviceJena.getTriples(filePath, url, ontologyContentEncoded64) ;",
      "prediction": "List<jenaTripleParser> result = serviceJena.getTriples(filePath, url, ontologyContentEncoded64) ;",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "List<jenaTripleParser> result = serviceJena.rdfToTriples(filePath, url, ontologyContentEncoded64);"
    },
    {
      "index": 1755,
      "groundtruth": "dependency.getVersion(),\n                dependency.getType(),\n                dependency.getClassifier(),\n                dependency.getScope()\n        );",
      "prediction": "dependency.getVersion(),\n                dependency.getType(),\n                dependency.getClassifier(),\n                dependency.getScope()\n        );",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "dependency.getVersion(),\n            dependency.getType(),\n            dependency.getClassifier(),\n            dependency.getScope());"
    },
    {
      "index": 1756,
      "groundtruth": "dependency.getClassifier(),\n                dependency.getScope()\n        );",
      "prediction": "dependency.getClassifier(),\n                dependency.getScope()\n        );",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "dependency.getClassifier(),\n            dependency.getScope());"
    },
    {
      "index": 1757,
      "groundtruth": "pomFile).execute(() -> dependencyCommand().accept(pomFile, dependency));",
      "prediction": "pomFile)",
      "es": 0.11111111111111116,
      "em": false,
      "passed": false,
      "original_prediction": "pomFile)"
    },
    {
      "index": 1758,
      "groundtruth": "dependency.getType(),\n                dependency.getClassifier(),\n                dependency.getScope()\n        );",
      "prediction": "dependency.getType(),\n                dependency.getClassifier(),\n                dependency.getScope()\n        );",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "dependency.getType(),\n        dependency.getClassifier(),\n        dependency.getScope());"
    },
    {
      "index": 1759,
      "groundtruth": "SWRLService.SWRLruleReclassification(filePath, url,reqBodies,reqHead);",
      "prediction": "SWRLService.SWRLruleReclassification(filePath, url,reqBodies,reqHead);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "SWRLService.SWRLruleReclassification(filePath,url,reqBodies,reqHead)"
    },
    {
      "index": 1760,
      "groundtruth": "equivalentClass = request.getEquivalentClass();",
      "prediction": "equivalentClass = request.getEquivalentClass();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1761,
      "groundtruth": "result = SWRLService.SWRLruleReclassificationB64(ontologyContentDecoded64,reqBodies,reqHead);",
      "prediction": "result = SWRLService.SWRLruleReclassificationB64(ontologyContentDecoded64,reqBodies,reqHead);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "result = SWRLService.SWRLruleReclassification(ontologyContentDecoded64,reqBodies,reqHead);"
    },
    {
      "index": 1762,
      "groundtruth": "DisjointClasses  = request.getDisjointClasses();",
      "prediction": "DisjointClasses = request.getDisjointClasses();",
      "es": 0.9791666666666666,
      "em": true,
      "passed": true
    },
    {
      "index": 1763,
      "groundtruth": "= request.getParams();",
      "prediction": "= request.getParams();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= request.getParamsetres().split(\",\");"
    },
    {
      "index": 1764,
      "groundtruth": "= reasonerService.getUnsatisfaisableClasses(filePath, url);",
      "prediction": "= reasonerService.getUnsatisfaisableClasses(filePath, url);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= reasonerService.getUnsatisfiableClasses(filePath, url)"
    },
    {
      "index": 1765,
      "groundtruth": "= reasonerService.postConsistency(filePath, url);",
      "prediction": "= reasonerService.postConsistency(filePath, url);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1766,
      "groundtruth": "reasonerService.postConsistencyContent(ontologyContentDecoded64);",
      "prediction": "reasonerService.postConsistencyContent(ontologyContentDecoded64);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1767,
      "groundtruth": "reasonerService.postInferences(filePath, url,valuesList);",
      "prediction": "reasonerService.postInferences(filePath, url,valuesList);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "reasonerService.postInferences(filePath, url, valuesList);"
    },
    {
      "index": 1768,
      "groundtruth": "result = reasonerService.postInferencesContent(ontologyContentDecoded64,valuesList);",
      "prediction": "result = reasonerService.postInferencesContent(ontologyContentDecoded64,valuesList);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1769,
      "groundtruth": "result = reasonerService.getInferences(filePath, url);",
      "prediction": "result ;",
      "es": 0.14814814814814814,
      "em": false,
      "passed": false,
      "original_prediction": "result ;"
    },
    {
      "index": 1770,
      "groundtruth": "= reasonerService.postUnsatisfaisableClasses(filePath, url);",
      "prediction": "= reasonerService.postUnsatisfaisableClasses(filePath, url);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1771,
      "groundtruth": "callbackConfigCall = RestAdapter.createApi().getJsonUrl(url);",
      "prediction": "callbackConfigCall = RestAdapter.createApi().getJsonUrl(url);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "callbackConfigCall = RestAdapter.createApi().getJsonFile(url);"
    },
    {
      "index": 1772,
      "groundtruth": "RestAdapter.createApi().getDriveJsonFileId(url);",
      "prediction": "RestAdapter.createApi().getDriveJsonFileId(url);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "RestAdapter.createApi().getJsonUrl(url);"
    },
    {
      "index": 1773,
      "groundtruth": "()).showAdIfAvailable(ActivitySplash.this, this::requestConfig);",
      "prediction": "()).showAdIfAvailable(ActivitySplash.this, this::requestConfig);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ").showAdIfAvailable(ActivitySplash.this, this::requestConfig);"
    },
    {
      "index": 1774,
      "groundtruth": "displayData(sharedPref.getPostList());",
      "prediction": "private void loadBann",
      "es": 0.13157894736842102,
      "em": false,
      "passed": false,
      "original_prediction": "private void loadBann"
    },
    {
      "index": 1775,
      "groundtruth": "= RestAdapter.createApi().getDriveJsonFileId(googleDriveFileId);",
      "prediction": "= RestAdapter.createApi().getDriveJsonFileId(googleDriveFileId);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= RestAdapter.createApi().getJsonUrl(googleDriveFileId);"
    },
    {
      "index": 1776,
      "groundtruth": "adapterPost.setOnItemClickListener((view, obj, position) -> {",
      "prediction": "} elseeturn;",
      "es": 0.11475409836065575,
      "em": false,
      "passed": false,
      "original_prediction": "} elseeturn;"
    },
    {
      "index": 1777,
      "groundtruth": "(Tools.getAdSizeMREC());",
      "prediction": "(Tools.getAdSizeMREC());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1778,
      "groundtruth": "writer.writeInt(length);",
      "prediction": "writer.writeInt(length);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1779,
      "groundtruth": ": return NbtTagValue.fromByte(readByte());",
      "prediction": ": return NbtTagValue.fromByte(readByte());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1780,
      "groundtruth": "writer.writeShortUnsigned(value.length());",
      "prediction": "writer.writeShortUnsigned(value.length());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "writer.writeInt(value.length());"
    },
    {
      "index": 1781,
      "groundtruth": "visitor.visitByte(value);",
      "prediction": "visitor.visitByte(value);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1782,
      "groundtruth": "writer.writeInt(value.length);",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 1783,
      "groundtruth": "DoMainUtil.firstLevel(subDoMain)) {",
      "prediction": "DoMainUtil.firstLev",
      "es": 0.5428571428571429,
      "em": false,
      "passed": false,
      "original_prediction": "DoMainUtil.firstLev"
    },
    {
      "index": 1784,
      "groundtruth": "= reader.readInt();",
      "prediction": "= reader.readInt();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1785,
      "groundtruth": "reader.readBytes(data);",
      "prediction": "reader.readBytes(data);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1786,
      "groundtruth": "int length = reader.readShort();",
      "prediction": "int length = reader.readShort();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "int length = reader.readInt();"
    },
    {
      "index": 1787,
      "groundtruth": ".matcher(rule.getKafkaTopicTemplate());",
      "prediction": ".matcher(rule.getKafkaTopicTemplate());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".matcher(mappedKafkaTopic);"
    },
    {
      "index": 1788,
      "groundtruth": "kafkaConfig.getProducerConfig().getConfig());",
      "prediction": "kafkaConfig.getProducerConfig().getConfig());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "kafkaConfig.getProducerConfig());"
    },
    {
      "index": 1789,
      "groundtruth": "ACKS_CONFIG, String.valueOf(producerAckLevel.getValue()));",
      "prediction": "ACKS_CONFIG, String.valueOf(producerAckLevel.getValue()));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "ACK_CONFIG, producerAckLevel.getLevel());"
    },
    {
      "index": 1790,
      "groundtruth": "length = reader.readInt();",
      "prediction": "length = reader.readInt();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1791,
      "groundtruth": "type = reader.readByte()) != NbtTagValue.TAG_END;",
      "prediction": "type = reader.readByte()) != NbtTagValue.TAG_END;",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1792,
      "groundtruth": "?> codec = MetadataCodec.getCodec(type);",
      "prediction": "?> codec = MetadataCodec.getCodec(type);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1793,
      "groundtruth": "> codec = (MetadataCodec<Object>) MetadataCodec.getCodec(type);",
      "prediction": "> codec = (MetadataCodec<Object>) MetadataCodec.getCodec(type);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "> codec = MetadataCodec.getCodec(type);"
    },
    {
      "index": 1794,
      "groundtruth": "matcher(rule.getMqttTopicPattern());",
      "prediction": "matcher(mqttTopic);",
      "es": 0.5,
      "em": false,
      "passed": false,
      "original_prediction": "matcher(mqttTopic);"
    },
    {
      "index": 1795,
      "groundtruth": "= rule.getMqttTopicPattern().split(MQTT_TOPIC_SEPARATOR);",
      "prediction": "= rule.getMqttTopicPattern().split(MQTT_TOPIC_SEPARATOR);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= rule.getMqttTopicPattern().split(MQTT_TOPIC_SEPARATOR););"
    },
    {
      "index": 1796,
      "groundtruth": "properties.getCachePrefix() + \":\" + beanName + \":\" + method + \":%s:\" + key.toString();",
      "prediction": "properties.getCacheKey();",
      "es": 0.2790697674418605,
      "em": false,
      "passed": false,
      "original_prediction": "properties.getCacheKey();"
    },
    {
      "index": 1797,
      "groundtruth": "cache.put(String.format(cacheKey, FAIL), bindData, Duration.ofSeconds(cacheTime));",
      "prediction": "cache.put(String.format(cacheKey, FAIL), bindData, Duration.ofSeconds(cacheTime));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1798,
      "groundtruth": "(!jacksonExpandProperties.isCanExpandToNotExistField() && writeClass == null) {",
      "prediction": "(writeClass == null) {}",
      "es": 0.26582278481012656,
      "em": false,
      "passed": false,
      "original_prediction": "(writeClass == null) {"
    },
    {
      "index": 1799,
      "groundtruth": "if (jacksonExpandProperties.getExpandStrategy() == ExpandStrategy.COPY) {",
      "prediction": "if (jacksonExpandProperties.getExpandStrategy() == ExpandStrategy.COPY) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "if (jacksonExpandProperties.getExpandStrategy() == ExpandStrategy.COPY)"
    },
    {
      "index": 1800,
      "groundtruth": "setCacheTime(jacksonExpandProperties.getCacheTimeout());",
      "prediction": "setCacheTime(jacksonExpandProperties.getCacheTimeout());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "setCacheTime(jacksonExpandProperties.getCacheTime());"
    },
    {
      "index": 1801,
      "groundtruth": "cache.put(String.format(cacheKey, OK), result, Duration.ofSeconds(cacheTime));",
      "prediction": "cache.put(String.format(cacheKey, OK), result, Duration.ofSeconds(cacheTime));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1802,
      "groundtruth": "jacksonExpandProperties.getExpandStrategy() == ExpandStrategy.COVER) {",
      "prediction": "jacksonExpandProperties.getExpandStra",
      "es": 0.5285714285714286,
      "em": false,
      "passed": false,
      "original_prediction": "jacksonExpandProperties.getExpandStra"
    },
    {
      "index": 1803,
      "groundtruth": "cache.get(String.format(cacheKey, OK));",
      "prediction": "cache.get(String.format(cacheKey, OK));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1804,
      "groundtruth": "lock = lockCache.get(cacheKey, new StampedLock(), Duration.ofSeconds(300));",
      "prediction": "lock = cache.getLock(cacheKey);",
      "es": 0.33333333333333337,
      "em": false,
      "passed": false,
      "original_prediction": "lock = cache.getLock(cacheKey);"
    },
    {
      "index": 1805,
      "groundtruth": "format(jacksonExpandProperties.getCopyStrategyFormat(), gen.getOutputContext().getCurrentName());",
      "prediction": "join(\".\", writeFieldPath, writeField);",
      "es": 0.1649484536082474,
      "em": false,
      "passed": false,
      "original_prediction": "join(\".\", writeFieldPath, writeField);"
    },
    {
      "index": 1806,
      "groundtruth": "(jacksonExpandProperties.getDynamicExpandParameterName());",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 1807,
      "groundtruth": "(this.mqttConfig.getHost(), this.mqttConfig.getPort()).sync();",
      "prediction": "(this.mqttConfig.getHost(), this.mqttConfig.getPort()).sync();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(this.mqttConfig.getPort()).sync();"
    },
    {
      "index": 1808,
      "groundtruth": "mqttConfig = MqttConfig.fromMap(map);",
      "prediction": "mqttConfig = MqttConfig.fromMap(map);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1809,
      "groundtruth": "dataHolder.setVideoPopularLink(videoData.get(8));",
      "prediction": "dataHolder.setVideoPopularLink(videoData.get(8));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "dataHolder.setVideoPopularTitle(videoData.get(8));"
    },
    {
      "index": 1810,
      "groundtruth": "(config.getKafkaConfig());",
      "prediction": "(config.getKafkaConfig());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1811,
      "groundtruth": "config.getMqttConfig();",
      "prediction": "new MqttConfig(config);",
      "es": 0.34782608695652173,
      "em": false,
      "passed": false,
      "original_prediction": "new MqttConfig(config);"
    },
    {
      "index": 1812,
      "groundtruth": "mqttServer.stop();",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 1813,
      "groundtruth": ", this.mqttConfig.getPort()).sync();",
      "prediction": ", this.mqttConfig.getPort()).sync();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1814,
      "groundtruth": "MappingRulesLoader.getInstance().init(mappingRulesFile);",
      "prediction": "if (mappingRulesFile != null)",
      "es": 0.2321428571428571,
      "em": false,
      "passed": false,
      "original_prediction": "if (mappingRulesFile != null)"
    },
    {
      "index": 1815,
      "groundtruth": "return Integer.toString(record.getStatus());",
      "prediction": "return Integer.toString(record.getStatus());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "return record.getStatus();"
    },
    {
      "index": 1816,
      "groundtruth": "record.getTruncated();",
      "prediction": "record.getTruncated();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "Integer.toString(record.getTruncated());"
    },
    {
      "index": 1817,
      "groundtruth": "CCMimeCounter.main(new String[]{",
      "prediction": "if (command.equals(\"CountMimes\"))",
      "es": 0.1515151515151515,
      "em": false,
      "passed": false,
      "original_prediction": "if (command.equals(\"CountMimes\"))"
    },
    {
      "index": 1818,
      "groundtruth": "CCFileExtractor.main(new String[]{",
      "prediction": "CCFileExtractor.main(new String[]{",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "CCFileFetcher.main(new String[]{"
    },
    {
      "index": 1819,
      "groundtruth": "R.error(\"bad request\");",
      "prediction": "R.error(e.getMessage());",
      "es": 0.45833333333333337,
      "em": false,
      "passed": false,
      "original_prediction": "R.error(e.getMessage());"
    },
    {
      "index": 1820,
      "groundtruth": "return R.error(error.get(\"errorMsg\").toString());",
      "prediction": "return R.error(error.get(\"errorMsg\").toString());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1821,
      "groundtruth": "R.error();",
      "prediction": "R.error();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "R.error"
    },
    {
      "index": 1822,
      "groundtruth": "r.getOffset(), r.getLength(), r.getTruncated());",
      "prediction": "r.getOffset(), r.getLength(), r.getTruncated());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "r.getWarcFile(), r.getWarcOffset(), r.getWarcLength(), r.getTruncated());"
    },
    {
      "index": 1823,
      "groundtruth": "R.ok(\"Verify successfully\");",
      "prediction": "R.ok()",
      "es": 0.2142857142857143,
      "em": false,
      "passed": false,
      "original_prediction": "R.ok("
    },
    {
      "index": 1824,
      "groundtruth": "!clause.select(val)) {",
      "prediction": "!clause.select(val)) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "!clause.selec"
    },
    {
      "index": 1825,
      "groundtruth": "StringBuilder sb = new StringBuilder(SpringUtil.getClientIp()).append(\"-\");",
      "prediction": "StringBuilder sb = new StringBuilder();",
      "es": 0.52,
      "em": false,
      "passed": false,
      "original_prediction": "StringBuilder sb = new StringBuilder();"
    },
    {
      "index": 1826,
      "groundtruth": "), r.getLength(), r.getTruncated());",
      "prediction": "), r.getLength(), r.getTruncated());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1827,
      "groundtruth": "sse.isDone()) {",
      "prediction": "sse.isDone()) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "sse.isDon"
    },
    {
      "index": 1828,
      "groundtruth": "extracted = counter.getFilesExtracted().incrementAndGet();",
      "prediction": "extracted = counter.getFilesExtracted().incrementAndGet();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "extracted = counter.getExtracted().incrementAndGet();"
    },
    {
      "index": 1829,
      "groundtruth": "url = r.getUrl();",
      "prediction": "url = r.getUrl();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1830,
      "groundtruth": "if (fetcherConfig.getNumThreads() > 10) {",
      "prediction": "if (fetcherConfig.getNumThreads() > 10) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "if (fetcherConfig.getReportEvery() > 0)"
    },
    {
      "index": 1831,
      "groundtruth": "getNormalizedMimeDetected(), r.getFilename(),\n                    r.getOffset(), r.getLength(), r.getTruncated());",
      "prediction": "getNormalizedMimeDetected(), r.getFilename(),\n                    r.getOffset(), r.getLength(), r.getTruncated());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "getMime(), r.getWarcFile(), r.getWarcOffset(),\n            r.getWarcLength(), r.getTruncated());"
    },
    {
      "index": 1832,
      "groundtruth": "(fetcherConfig.getMaxFilesTruncated() > -1 &&\n                    truncated >= fetcherConfig.getMaxFilesTruncated()) {",
      "prediction": "(truncated >= fetcherConfig.getMaxTruncated()) {}",
      "es": 0.39830508474576276,
      "em": false,
      "passed": false,
      "original_prediction": "(truncated >= fetcherConfig.getMaxTruncated()) {"
    },
    {
      "index": 1833,
      "groundtruth": "if (fetcherConfig.isExtractTruncated() || StringUtils.isBlank(r.getTruncated())) {",
      "prediction": "if (r.getFilename() != null) {}",
      "es": 0.23170731707317072,
      "em": false,
      "passed": false,
      "original_prediction": "if (r.getFilename() != null) {"
    },
    {
      "index": 1834,
      "groundtruth": "if (fetcherConfig.isDryRun()) {",
      "prediction": "if (fetcherConfig.isDryRun()) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "if (fetcherConfig.isDryRun())"
    },
    {
      "index": 1835,
      "groundtruth": ".indexFetcher = fetcherConfig.newIndexFetcher();",
      "prediction": ".indexFetcher = fetcherConfig.newIndexFetcher();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".indexFetcher = fetcherConfig.getIndexFetcher();"
    },
    {
      "index": 1836,
      "groundtruth": "ccIndexReaderCounter.getEmptyPayload().incrementAndGet();",
      "prediction": "ccIndexReaderCounter.getEmptyPayload().incrementAndGet();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "ccIndexReaderCounter.getNoPayload().incrementAndGet();"
    },
    {
      "index": 1837,
      "groundtruth": "finishedWorkers < fetcherConfig.getNumThreads()) {",
      "prediction": "finishedWorkers < fetcherCo",
      "es": 0.54,
      "em": false,
      "passed": false,
      "original_prediction": "finishedWorkers < fetcherCo"
    },
    {
      "index": 1838,
      "groundtruth": "streamEmitter = fetcherConfig.newEmitter();",
      "prediction": "streamEmitter = fetcherConfig.newEmitter();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "streamEmitter = fetcherConfig.newStreamEmitter();"
    },
    {
      "index": 1839,
      "groundtruth": ", record.getFilename(), record.getOffset(),\n                record.getLength());",
      "prediction": ", record.getUrl(), record.getFilename(), record.getOffset());",
      "es": 0.5375,
      "em": false,
      "passed": false,
      "original_prediction": ", record.getUrl(), record.getFilename(), record.getOffset());"
    },
    {
      "index": 1840,
      "groundtruth": ".debug(\"going to fetch {",
      "prediction": ".debug(\"fetching {} {}->{}\", record.getFilename())",
      "es": 0.30000000000000004,
      "em": false,
      "passed": false,
      "original_prediction": ".debug(\"fetching {} {}->{}\", record.getFilename("
    },
    {
      "index": 1841,
      "groundtruth": "record.getLength());",
      "prediction": "record.getLength());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1842,
      "groundtruth": "run(), TimeConverter.toTicks(delay, unit)\n                )\n        );",
      "prediction": "run(), TimeConverter.toTicks(delay, unit)\n                )\n        );",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "run(), delay, unit\n        )\n        );"
    },
    {
      "index": 1843,
      "groundtruth": "TimeConverter.toTicks(period, unit))\n        );",
      "prediction": "TimeConverter.toTicks(period, unit))\n        );",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1844,
      "groundtruth": "TimeConverter.toTicks(delay, unit),\n                        TimeConverter.toTicks(period, unit)\n                )\n        );",
      "prediction": "delaydelay, period, unit\n     )",
      "es": 0.217741935483871,
      "em": false,
      "passed": false,
      "original_prediction": "delaydelay, period, unit\n     )"
    },
    {
      "index": 1845,
      "groundtruth": "TimeConverter.toTicks(delay, unit),\n                        TimeConverter.toTicks(period, unit))\n        );",
      "prediction": "TimeConverter.toTicks(delay, unit>)",
      "es": 0.31775700934579443,
      "em": false,
      "passed": false,
      "original_prediction": "TimeConverter.toTicks(delay, unit>"
    },
    {
      "index": 1846,
      "groundtruth": "runTaskLater(plugin, runnable, TimeConverter.toTicks(delay, unit))\n        );",
      "prediction": "runTaskLater(plugin, runnable, TimeConverter.toTicks(delay, unit))\n        );",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1847,
      "groundtruth": "record.getOffset() + record.getLength() - 1), new EmitKey());",
      "prediction": "record.getLength());",
      "es": 0.3278688524590164,
      "em": false,
      "passed": false,
      "original_prediction": "record.getLength());"
    },
    {
      "index": 1848,
      "groundtruth": ".equals(ccIndexRecord.getDigest())) {",
      "prediction": ".equals(ccIndexRecord.getDigest())) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".equals(ccIndexRecord.getDigest())"
    },
    {
      "index": 1849,
      "groundtruth": ".getOffset() + record.getLength() - 1), new EmitKey());",
      "prediction": ".getLength(), record.getTruncated()));",
      "es": 0.4181818181818182,
      "em": false,
      "passed": false,
      "original_prediction": ".getLength(), record.getTruncated()));"
    },
    {
      "index": 1850,
      "groundtruth": "ccIndexRecord.getOffset(), ccIndexRecord.getLength(),\n                    ccIndexRecord.getTruncated(), targetDigest, length,\n                    targetPath);",
      "prediction": "ccIndexRecord.getOffset(), ccIndexRecord.getLength(),\n                    ccIndexRecord.getTruncated(), targetDigest, length,\n                    targetPath);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "ccIndexRecord.getOffset(), ccIndexRecord.getLength(),\n                    targetDigest, length,\n        targetPath);"
    },
    {
      "index": 1851,
      "groundtruth": "totalCounts, r.getNormalizedMimeDetected());",
      "prediction": "totalCounts, r.getNormalizedMimeDetected());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1852,
      "groundtruth": ".getOffset(), ccIndexRecord.getLength(),\n                    ccIndexRecord.getTruncated(), targetDigest, length,\n                    targetPath);",
      "prediction": ".getOffset(), ccIndexRecord.getLength(),\n                    ccIndexRecord.getTruncated(), targetDigest, length,\n                    targetPath);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".getOffset(), ccIndexRecord.getLength(),\n                    targetDigest, length,\n        targetPath);"
    },
    {
      "index": 1853,
      "groundtruth": "ccIndexRecord.getOffset(), ccIndexRecord.getLength(),\n                    targetDigest, length,\n                    targetPath);",
      "prediction": "ccIndexRecord.getOffset(), ccIndexRecord.getLength(),\n        targetDigest, length,\n        targetPath);",
      "es": 0.8125,
      "em": true,
      "passed": true
    },
    {
      "index": 1854,
      "groundtruth": "targetPath = targetPathRewriter.rewrite(targetDigest);",
      "prediction": "targetPath = targetPathRewrit",
      "es": 0.537037037037037,
      "em": false,
      "passed": false,
      "original_prediction": "targetPath = targetPathRewrit"
    },
    {
      "index": 1855,
      "groundtruth": "RangeFetcher) fetcherConfig.newFetcher();",
      "prediction": "RangeFetcher) fetcherConfig.newFetcher();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "RangeFetcher) fetcherConfig.getFetcher();"
    },
    {
      "index": 1856,
      "groundtruth": "ccIndexRecord.getFilename(),\n                    ccIndexRecord.getOffset(), ccIndexRecord.getLength(),\n                    targetDigest, length,\n                    targetPath);",
      "prediction": "ccIndexRecord.getFilename(),\n                    ccIndexRecord.getOffset(), ccIndexRecord.getLength(),\n                    targetDigest, length,\n                    targetPath);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "ccIndexRecord.getFilename(),\n                    ccIndexRecord.getOffset(), ccIndexRecord.getLength(),\n        ccIndexRecord.getTruncated(), targetDigest, length,\n        targetPath);"
    },
    {
      "index": 1857,
      "groundtruth": ".targetPathRewriter = fetcherConfig.getTargetPathRewriter();",
      "prediction": ".targetPathRewriter = fetcherConfig.getTargetPathRewriter();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1858,
      "groundtruth": "ccIndexRecord.getTruncated(), targetDigest, length,\n                    targetPath);",
      "prediction": "ccIndexRecord.getTruncated(), targetDigest, length,\n                    targetPath);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "targetDigest, length,\n                    targetPath);"
    },
    {
      "index": 1859,
      "groundtruth": "r.getNormalizedMimeDetected());",
      "prediction": "r.getNormalizedMimeDetected());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1860,
      "groundtruth": ".INSTANCE.getNumberPlan(deviceContext.getLineType(), deviceContext.getCountryCode());",
      "prediction": ".getForCountryCode(wrapper.getCountryCode());",
      "es": 0.3647058823529412,
      "em": false,
      "passed": false,
      "original_prediction": ".getForCountryCode(wrapper.getCountryCode());"
    },
    {
      "index": 1861,
      "groundtruth": ".put(DeFixedLineNumberPlan.getCountryCode(), new DeFixedLineNumberPlan());",
      "prediction": ".put(DeFixedLineNumberPlan.getCountryCode(), new DeFixedLineNumberPlan());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1862,
      "groundtruth": "(), deviceContext.getCountryCode());",
      "prediction": "(), deviceContext.getCountryCode());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ", deviceContext.getCountryCode());"
    },
    {
      "index": 1863,
      "groundtruth": "deviceContext.getNationalDestinationCode());",
      "prediction": "deviceContext.getNationalDestinationCode());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1864,
      "groundtruth": "(!normalizedDeviceContext.getCountryCode().equals(DeviceContext.UNKNOWN_VALUE)) {",
      "prediction": "(!normalizedDeviceContext.getCountryCode().equals(DeviceContext.UNKNOWN_VALUE)) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(normalizedDeviceContext.getNationalDestinationCode().equals(DeviceContext.UNKNOWN_VALUE))"
    },
    {
      "index": 1865,
      "groundtruth": "= PhoneLibWrapper.getRegionCodeForCountryCode(normalizedDeviceContext.getCountryCode());",
      "prediction": "= normalizedDeviceContext.getCountryCode();",
      "es": 0.48863636363636365,
      "em": false,
      "passed": false,
      "original_prediction": "= normalizedDeviceContext.getCountryCode();"
    },
    {
      "index": 1866,
      "groundtruth": "if (! normalizerPhoneNumber.isNormalizingTried()) {",
      "prediction": "if (! normalizerPhoneNumber.isNormalizingTried()) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "if (normalizerPhoneNumber.getSemiNormalizedNumber() == null)"
    },
    {
      "index": 1867,
      "groundtruth": "(PhoneLibWrapper.getCountryCodeForRegion(fallBackRegionCode) > 0) {",
      "prediction": "(fallBackRegionCode != null) {}",
      "es": 0.28358208955223885,
      "em": false,
      "passed": false,
      "original_prediction": "(fallBackRegionCode != null) {"
    },
    {
      "index": 1868,
      "groundtruth": "(wrapper.hasRegionNationalAccessCode() && deviceContext != null) {",
      "prediction": "(wrapper.hasNoCountryCodeNorNationalAccessCode())",
      "es": 0.36363636363636365,
      "em": false,
      "passed": false,
      "original_prediction": "(wrapper.hasNoCountryCodeNorNationalAccessCode())"
    },
    {
      "index": 1869,
      "groundtruth": ".extendNumberByDefaultAreaCodeAndCountryCode(wrapper.getNationalAccessCode(), deviceContext.getNationalDestinationCode());",
      "prediction": ".getE164Formatted();",
      "es": 0.10655737704918034,
      "em": false,
      "passed": false,
      "original_prediction": ".getE164Formatted();"
    },
    {
      "index": 1870,
      "groundtruth": ") : wrapper.getE164Formatted();",
      "prediction": ") : wrapper.getE164Formatted();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1871,
      "groundtruth": "return wrapper.getE164Formatted();",
      "prediction": "return wrapper.getE164Formatted();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1872,
      "groundtruth": "boolean hasNoCCAndNoNAC = wrapper.hasNoCountryCodeNorNationalAccessCode();",
      "prediction": "if (wrapper.isNationalNumber()) {}",
      "es": 0.2432432432432432,
      "em": false,
      "passed": false,
      "original_prediction": "if (wrapper.isNationalNumber()) {"
    },
    {
      "index": 1873,
      "groundtruth": "!normalizedDeviceContext.getNationalDestinationCode().equals(DeviceContext.UNKNOWN_VALUE)) {",
      "prediction": "normalizerPhoneNumber.isNormalizingTried()) {}",
      "es": 0.25,
      "em": false,
      "passed": false,
      "original_prediction": "normalizerPhoneNumber.isNormalizingTried()) {"
    },
    {
      "index": 1874,
      "groundtruth": "(hitIndicator.expired())\n                latestHitIndicators.remove(i);",
      "prediction": "(hitIndicator.expired())\n            latestHitIndicators.remove(i);",
      "es": 0.9436619718309859,
      "em": true,
      "passed": true
    },
    {
      "index": 1875,
      "groundtruth": "if (!destroyed || !capacity.isDestroyed() || this.stress != Integer.MAX_VALUE){",
      "prediction": "if (!destroyed){}",
      "es": 0.189873417721519,
      "em": false,
      "passed": false,
      "original_prediction": "if (!destroyed){"
    },
    {
      "index": 1876,
      "groundtruth": "capacity.setDestroyed(true);",
      "prediction": "}",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": "}"
    },
    {
      "index": 1877,
      "groundtruth": "MachineCapacityEntry config = MachineCapacityStorage.getInstance().getCapacity(block.getBlockState().getBlock());",
      "prediction": "MachineCapacityEntry config = MachineCapacityStorage.getInstance().getCapacity(block.getBlockState().getBlock());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "MachineCapacityEntry config = MachineCapacityStorage.getInstance().getCapacityConfig(block);"
    },
    {
      "index": 1878,
      "groundtruth": "(capacity.getDurability()+damage_for_speed);",
      "prediction": "(capacity.getDurability()+damage_for_speed);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1879,
      "groundtruth": "= config.durabilityMax - capacity.getDurability();",
      "prediction": "= config.durabilityMax - capacity.getDurability();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1880,
      "groundtruth": "(MachineCapacityStorage.getInstance().isBlackListBlock(block)){",
      "prediction": "(!block.getLevel().isClientSide && block.getLevel().getBlockState(block.getBlockPos().below()))",
      "es": 0.28421052631578947,
      "em": false,
      "passed": false,
      "original_prediction": "(!block.getLevel().isClientSide && block.getLevel().getBlockState(block.getBlockPos().below())"
    },
    {
      "index": 1881,
      "groundtruth": "put(\"machine_capacity\",createMachineCapacity().toTag());",
      "prediction": "put(\"machine_capacity\",createMachineCapacity().toTag());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "put(\"machine_capacity\", this.machineCapacity.toTag(new CompoundTag()));"
    },
    {
      "index": 1882,
      "groundtruth": "(!MachineCapacityStorage.getInstance().active){",
      "prediction": "(block.getLevel().isClientSide())",
      "es": 0.21276595744680848,
      "em": false,
      "passed": false,
      "original_prediction": "(block.getLevel().isClientSide())"
    },
    {
      "index": 1883,
      "groundtruth": "element.setContent(text);",
      "prediction": "element.setContent(text);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "element.setText(text);"
    },
    {
      "index": 1884,
      "groundtruth": "itemheight = element.getHeight(this.width);",
      "prediction": "itemheight = element.getHeight(this.theme, mouseX, mouseY, partialTicks);",
      "es": 0.5342465753424658,
      "em": false,
      "passed": false,
      "original_prediction": "itemheight = element.getHeight(this.theme, mouseX, mouseY, partialTicks);"
    },
    {
      "index": 1885,
      "groundtruth": "TagElement element = serializer.deserialize(mapAttributes(child.getAttributes()));",
      "prediction": "TagElement element = serializer.deserialize(mapAttributes(child.getAttributes()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1886,
      "groundtruth": "element.mouseClicked(mouseX - (columnWidth * index), mouseY, button, columnWidth)) {",
      "prediction": "element.mouseClicked(mouseX - (columnWidth * index), mouseY, button, columnWidth)) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "element.mouseClicked(mouseX, mouseY, button, columnWidth)"
    },
    {
      "index": 1887,
      "groundtruth": ".max(element.getHeight(width), 20);",
      "prediction": ".max(element.getHeight(width), 20);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".max(element.getHeight(width - 40), getHeight(width - 40));"
    },
    {
      "index": 1888,
      "groundtruth": "child.getHeight(width);",
      "prediction": "child.getHeight(width);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1889,
      "groundtruth": "element.mouseClicked(mouseX, mouseY, button, width - 40);",
      "prediction": "element.mouseClicked(mouseX, mouseY, button, width - 40);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1890,
      "groundtruth": "element.getHeight(width - indexWidth - 2), Minecraft.getInstance().font.lineHeight + 1);",
      "prediction": "element.getHeight(width - indexWidth - 2), Minecraft.getInstance().font.lineHeight + 1);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1891,
      "groundtruth": "bot.getCommand(cmdId).isPresent()) {",
      "prediction": "bot.hasCommand(cmdId)",
      "es": 0.5,
      "em": false,
      "passed": false,
      "original_prediction": "bot.hasCommand(cmdId)"
    },
    {
      "index": 1892,
      "groundtruth": "String key = command.getId();",
      "prediction": "String key = command.getId();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1893,
      "groundtruth": "filter(c -> c.getSources().length == 0).findFirst();",
      "prediction": "filter(c -> c.getClass().isAnnotationPresent(Command.class))",
      "es": 0.4,
      "em": false,
      "passed": false,
      "original_prediction": "filter(c -> c.getClass().isAnnotationPresent(Command.class))"
    },
    {
      "index": 1894,
      "groundtruth": "= bot.getStartCommand();",
      "prediction": "= bot.getStartCommand();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1895,
      "groundtruth": "return command.getHelp();",
      "prediction": "return command.getHelp();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1896,
      "groundtruth": ", \"checkExecutionOrder of {",
      "prediction": ", \"Command {}",
      "es": 0.2222222222222222,
      "em": false,
      "passed": false,
      "original_prediction": ", \"Command {"
    },
    {
      "index": 1897,
      "groundtruth": "(command.getId());",
      "prediction": "();",
      "es": 0.16666666666666663,
      "em": false,
      "passed": false,
      "original_prediction": "();"
    },
    {
      "index": 1898,
      "groundtruth": "this.execute(command, null);",
      "prediction": "this.execute(command, null);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "execute(command, null);"
    },
    {
      "index": 1899,
      "groundtruth": ".getSizeZ() <= 1 && Math.abs(center.getY() - pos.getY()) <= area.getSizeY();",
      "prediction": ".getSizeZ() <= 1;",
      "es": 0.22368421052631582,
      "em": false,
      "passed": false,
      "original_prediction": ".getSizeZ() <= 1;"
    },
    {
      "index": 1900,
      "groundtruth": "load(gameMap, gameMap.getName() + \"_\" + System.currentTimeMillis());",
      "prediction": "load(gameMap, gameMap.getName());",
      "es": 0.4852941176470589,
      "em": false,
      "passed": false,
      "original_prediction": "load(gameMap, gameMap.getName());"
    },
    {
      "index": 1901,
      "groundtruth": "center = area.getCenter();",
      "prediction": "center = area.getCenter();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1902,
      "groundtruth": "(gameMap.getSource(), activeWorldFolder);",
      "prediction": "(gameMap.getSource(), activeWorldFolder);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1903,
      "groundtruth": "= csStats.getProfileInfos(userid);",
      "prediction": "= csStats.getProfileInfos(userid);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= csStats.getProfileInfo(userid);"
    },
    {
      "index": 1904,
      "groundtruth": "= csStats.getStatistics(userid);",
      "prediction": "= csStats.getStatistics(userid);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= csStats.getUserStatistics(userid);"
    },
    {
      "index": 1905,
      "groundtruth": "Main.getLogger().error(\"The json body for request '{",
      "prediction": "Main.getLogger().error(\"The json body for request '{",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "Main.getLogger().error(\"The response for request '{}"
    },
    {
      "index": 1906,
      "groundtruth": "Main.getLogger().error(\"'success' was not '1' when trying to get statistics for {",
      "prediction": "return null;",
      "es": 0.07407407407407407,
      "em": false,
      "passed": false,
      "original_prediction": "return null;"
    },
    {
      "index": 1907,
      "groundtruth": "(hangman.initialize()) {",
      "prediction": "(hangman.initialize()) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(hangman.start())"
    },
    {
      "index": 1908,
      "groundtruth": "if (!mTXVodPlayerWrapper.isPlaying()) {",
      "prediction": "if (!mTXVodPlayerWrapper.isPlaying()) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "if (mTXVodPlayerWrapper.isPlaying())"
    },
    {
      "index": 1909,
      "groundtruth": "TAG, \"[setTXVodPlayer] , PLAY_EVT_PLAY_PROGRESS\uff0c\" + mTXVodPlayerWrapper.getVodPlayer().hashCode() + \" url \" + TXVodPlayerWrapper.getUrl());",
      "prediction": "TAG, \"[setTXVodPlayer] , PLAY_EVT_PLAY_PROGRESS\uff0c\" + mTXVodPlayerWrapper.getVodPlayer().hashCode() + \" url \" + TXVodPlayerWrapper.getUrl());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "TAG, \"[setTXVodPlayer] mTXVodPlayerWrapper.url \" + mTXVodPlayerWrapper.getUrl());"
    },
    {
      "index": 1910,
      "groundtruth": "mTXVodPlayerWrapper.setVodChangeListener(this);",
      "prediction": "mTXVodPlayerWrapper.setVodChangeListener(this);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1911,
      "groundtruth": "i(TAG, \"[setTXVodPlayer] , PLAY_EVT_PLAY_PROGRESS\uff0c\" + mTXVodPlayerWrapper.getVodPlayer().hashCode() + \" url \" + TXVodPlayerWrapper.getUrl());",
      "prediction": "i(TAG, \"[setTXVodPlayer] , PLAY_EVT_PLAY_PROGRESS\uff0c\" + mTXVodPlayerWrapper.getVodPlayer().hashCode() + \" url \" + TXVodPlayerWrapper.getUrl());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "i(TAG, \"[setTXVodPlayer] mTXVodPlayerWrapper.url \" + mTXVodPlayerWrapper.getUrl());"
    },
    {
      "index": 1912,
      "groundtruth": "Main.getLogger().error(\"The callable didn't return a value when trying to run 'quote'\");",
      "prediction": "Main.getLogger().error(\"The callable didn't return a value when trying to run 'quote'\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1913,
      "groundtruth": "mTXVodPlayerWrapper.resumePlay();",
      "prediction": "startPlay();",
      "es": 0.2727272727272727,
      "em": false,
      "passed": false,
      "original_prediction": "startPlay();"
    },
    {
      "index": 1914,
      "groundtruth": "Log.i(TAG, \"[startPlay] mTXVodPlayerWrapper.url \" + mTXVodPlayerWrapper.getUrl());",
      "prediction": "mTXVodPlayerWrapper.setVodChangeListener(this);",
      "es": 0.35365853658536583,
      "em": false,
      "passed": false,
      "original_prediction": "mTXVodPlayerWrapper.setVodChangeListener(this);"
    },
    {
      "index": 1915,
      "groundtruth": "(scramble.initialize()) {",
      "prediction": "(scramble.initialize()) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(scramble.start())"
    },
    {
      "index": 1916,
      "groundtruth": ".status = HttpStatus.getEnum(code);",
      "prediction": ".status = HttpStatus.getEnum(code);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".status = HttpStatus.valueOf(code);"
    },
    {
      "index": 1917,
      "groundtruth": "videoView.stopForPlaying();",
      "prediction": "if (videoView != null)",
      "es": 0.2592592592592593,
      "em": false,
      "passed": false,
      "original_prediction": "if (videoView != null)"
    },
    {
      "index": 1918,
      "groundtruth": "model.addAttribute(\"flights\", flightService.getUserFlights(principal));",
      "prediction": "model.addAttribute(\"flights\", flightService.getUserFlights(principal));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "model.addAttribute(\"flights\", flightService.listByUser(principal));"
    },
    {
      "index": 1919,
      "groundtruth": "txVodPlayerWrapper.stopPlay();",
      "prediction": "txVodPlayerWrapper.stopPlay();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1920,
      "groundtruth": "userRepository.findByEmail(principal.getName());",
      "prediction": "userRepository.findByEmail(principal.getName());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "userRepository.findByUsername(principal.getName());"
    },
    {
      "index": 1921,
      "groundtruth": "Main.getLogger().error(\"The callable didn't return a value when trying to run 'joke'\");",
      "prediction": "Main.getLogger().error(\"The callable didn't return a value when trying to run 'joke'\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1922,
      "groundtruth": "flightRepository.findFlightsByUser(userRepository.findByEmail(principal.getName()));",
      "prediction": "flightRepository.findFlightsByUser(userRepository.findByEmail(principal.getName()));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "flightRepository.findByUserEmail(principal.getName());"
    },
    {
      "index": 1923,
      "groundtruth": "String quote = Utils.getFromCallable(callable);",
      "prediction": "String quote = Utils.getFromCallable(callable);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1924,
      "groundtruth": "setUser(userRepository.findByEmail(principal.getName()));",
      "prediction": "setUser(userRepository.findByEmail(principal.getName()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1925,
      "groundtruth": "flightService.orderFlight(id, principal);",
      "prediction": "flightService.orderFlight(id, principal);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1926,
      "groundtruth": "mTXVodPlayerWrapper.stopForPlaying();",
      "prediction": "mTXVodPlayerWrapper.stopForPlaying();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "mTXVodPlayerWrapper.stopPlay();"
    },
    {
      "index": 1927,
      "groundtruth": "ShortVideoModel.getInstance(this).setOnDataLoadFullListener(this);",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 1928,
      "groundtruth": "getEmail(), userForm.getPassword());",
      "prediction": "toUser());",
      "es": 0.2222222222222222,
      "em": false,
      "passed": false,
      "original_prediction": "toUser());"
    },
    {
      "index": 1929,
      "groundtruth": "user = us.create(userForm.getEmail(), userForm.getPassword());",
      "prediction": "user = us.create(userForm);",
      "es": 0.4354838709677419,
      "em": false,
      "passed": false,
      "original_prediction": "user = us.create(userForm);"
    },
    {
      "index": 1930,
      "groundtruth": "response.getFirstLine()));",
      "prediction": "response.getStatus().toString().getBytes()));",
      "es": 0.48888888888888893,
      "em": false,
      "passed": false,
      "original_prediction": "response.getStatus().toString().getBytes()));"
    },
    {
      "index": 1931,
      "groundtruth": "ShortVideoModel.getInstance(this).loadDefaultVideo();",
      "prediction": "ShortVideoModel.getInstance(this).loadDefaultVideo();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "ShortVideoModel.getInstance(this).setOnDataLoadFullListener(this);"
    },
    {
      "index": 1932,
      "groundtruth": "response.getHeaders().toString().getBytes()));",
      "prediction": "\"\\r\\n\".getBytes()));",
      "es": 0.34782608695652173,
      "em": false,
      "passed": false,
      "original_prediction": "\"\\r\\n\".getBytes()));"
    },
    {
      "index": 1933,
      "groundtruth": "channel.write(ByteBuffer.wrap(response.getBody()));",
      "prediction": "byte[] body = response.getBody();",
      "es": 0.43137254901960786,
      "em": false,
      "passed": false,
      "original_prediction": "byte[] body = response.getBody();"
    },
    {
      "index": 1934,
      "groundtruth": "ShortVideoModel.getInstance(this).getVideoByFileId();",
      "prediction": "}",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": "}"
    },
    {
      "index": 1935,
      "groundtruth": "write(response.getFirstLine());",
      "prediction": "write(response.getStatus().toString().getBytes());",
      "es": 0.54,
      "em": false,
      "passed": false,
      "original_prediction": "write(response.getStatus().toString().getBytes());"
    },
    {
      "index": 1936,
      "groundtruth": ".write(response.getBody());",
      "prediction": ".write(response.getBody());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1937,
      "groundtruth": "ShortVideoModel.getInstance(this).release();",
      "prediction": "ShortVideoModel.getInstance(this).release();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1938,
      "groundtruth": "response.getHeaders().toString().getBytes());",
      "prediction": "\"\\r\\n\".getBytes());",
      "es": 0.33333333333333337,
      "em": false,
      "passed": false,
      "original_prediction": "\"\\r\\n\".getBytes());"
    },
    {
      "index": 1939,
      "groundtruth": "ShortVideoModel.getInstance(this).setOnDataLoadFullListener(null);",
      "prediction": "LiteAVShortVideoPlayer.getInstance().release();",
      "es": 0.3939393939393939,
      "em": false,
      "passed": false,
      "original_prediction": "LiteAVShortVideoPlayer.getInstance().release();"
    },
    {
      "index": 1940,
      "groundtruth": "faceProvider.invalidateCache();",
      "prediction": "faceProvider.invalidateCache();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "faceProvider.reload();"
    },
    {
      "index": 1941,
      "groundtruth": "String mrState = mrEvent.getMrState();",
      "prediction": "String mrState = mrEvent.getMrState();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1942,
      "groundtruth": "Long projectId = mrEvent.getProjectId();",
      "prediction": "Long projectId = mrEvent.getProjectId();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1943,
      "groundtruth": "CascadeResult result = gitLabService.createResult(gitlabEventUUID);",
      "prediction": "CascadeResult result = gitLabService.createResult(gitlabEventUUID);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1944,
      "groundtruth": "String gitlabEventUUID = mrSimple.getGitlabEventUUID();",
      "prediction": "String gitlabEventUUID = mrSimple.getGitlabEventUUID();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1945,
      "groundtruth": "result.setError(\"Invalid path: \" + path);",
      "prediction": "rc.response().setStatusCode(202);",
      "es": 0.19512195121951215,
      "em": false,
      "passed": false,
      "original_prediction": "rc.response().setStatusCode(202);"
    },
    {
      "index": 1946,
      "groundtruth": "result.setPreviousAutoMrMergedError(e.getMessage());",
      "prediction": "private boolean isPipeline(String gitlabEventUUID, MergeRequest mr)",
      "es": 0.16417910447761197,
      "em": false,
      "passed": false,
      "original_prediction": "private boolean isPipeline(String gitlabEventUUID, MergeRequest mr)"
    },
    {
      "index": 1947,
      "groundtruth": "Long mrNumber = mrEvent.getMrNumber();",
      "prediction": "Long mrNumber = mrEvent.getMrNumber();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1948,
      "groundtruth": "Long userId = mrEvent.getUserId();",
      "prediction": "Long userId = mrEvent.getUserId();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1949,
      "groundtruth": "= mrEvent.getMergeCommitSha();",
      "prediction": "= mrEvent.getMergeCommitSha();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= mrEvent.getMergeSha();"
    },
    {
      "index": 1950,
      "groundtruth": "result.setExistingBranchDeleteError(e.getMessage());",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 1951,
      "groundtruth": "result.setCreatedAutoMrError(e.getMessage());",
      "prediction": "result.setCreatedAutoMrError(e.getMessage());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "result.setCreateAutoMrError(e.getMessage());"
    },
    {
      "index": 1952,
      "groundtruth": "presentation.setTitle(getTitle(doc, SHOWTITLE));",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 1953,
      "groundtruth": ".print(((BitmapItem) slideItem).getName());",
      "prediction": ".print(((BitmapItem) slideItem).getName());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".print(((BitmapItem) slideItem).getFilename());"
    },
    {
      "index": 1954,
      "groundtruth": "mrEvent.getProjectId(), mrEvent.getUserId(), mrEvent.getTargetBranch(), mrEvent.getMrNumber(), mrState, mrAction);",
      "prediction": "mrEvent.getProjectId(), mrEvent.getUserId(), mrEvent.getTargetBranch(), mrEvent.getMrNumber(), mrState, mrAction);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1955,
      "groundtruth": "= Style.getStyle(slideItem.getLevel());",
      "prediction": "= Style.getStyle(slideItem.getLevel());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1956,
      "groundtruth": "out.print(((TextItem) slideItem).getText());",
      "prediction": "out.print(((TextItem) slideItem).getText());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1957,
      "groundtruth": ".print(\"\\\"text\\\" level=\\\"\" + slideItem.getLevel() + \"\\\">\");",
      "prediction": ".print(\"\\\"text\\\" level=\\\"\" + slideItem.getLevel() + \"\\\">\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1958,
      "groundtruth": "< presentation.getSize();",
      "prediction": "< presentation.getSize();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "< presentation.getSlideCount();"
    },
    {
      "index": 1959,
      "groundtruth": ", mrEvent.getUserId(), mrEvent.getTargetBranch(), mrEvent.getMrNumber(), mrState, mrAction);",
      "prediction": ", mrEvent.getUserId(), mrEvent.getTargetBranch(), mrEvent.getMrNumber(), mrState, mrAction);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ", mrEventEventUUID, mrEventEventUUID, mrEvent.getTargetBranch(), mrEvent.getMrNumber(), mrEvent.getMrState(), mrEvent.getMrAction());"
    },
    {
      "index": 1960,
      "groundtruth": "bookDTO.setAuthorName(\"Ranjan Sir\");",
      "prediction": "bookDTO.setAuthorName(\"Ranjan Sir\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "bookDTO.setAuthorName(\"Author One\");"
    },
    {
      "index": 1961,
      "groundtruth": "bookDTO.setAuthorEmail(\"author1@gmail.com\");",
      "prediction": "bookDTO.setCategory(\"Java\");",
      "es": 0.43181818181818177,
      "em": false,
      "passed": false,
      "original_prediction": "bookDTO.setCategory(\"Java\");"
    },
    {
      "index": 1962,
      "groundtruth": "bookDTO.setAvailableQty(10);",
      "prediction": "bookDTO.setAuthorPhone(\"9999999999\");",
      "es": 0.4054054054054054,
      "em": false,
      "passed": false,
      "original_prediction": "bookDTO.setAuthorPhone(\"9999999999\");"
    },
    {
      "index": 1963,
      "groundtruth": "bookDTO.setDescription(\"Book One Description\");",
      "prediction": "bookDTO.setISBN(\"1234567890\");",
      "es": 0.34042553191489366,
      "em": false,
      "passed": false,
      "original_prediction": "bookDTO.setISBN(\"1234567890\");"
    },
    {
      "index": 1964,
      "groundtruth": "bookDTO.setName(\"PlacementPrep\");",
      "prediction": "bookDTO.setBookName(\"Book One\");",
      "es": 0.5454545454545454,
      "em": false,
      "passed": false,
      "original_prediction": "bookDTO.setBookName(\"Book One\");"
    },
    {
      "index": 1965,
      "groundtruth": "bookDTO.setPricePerQty(88.959);",
      "prediction": "bookDTO.setPricePerQty(88.959);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "bookDTO.setPricePerQty(200.00);"
    },
    {
      "index": 1966,
      "groundtruth": "!code.equals(twoFactorService.getTOTPCode(secret)))\n            return ResponseEntity.status(403).build();",
      "prediction": "twoFactorService.verifyCode(secret, code)) {\n            generateRequests.remove(object);}",
      "es": 0.4339622641509434,
      "em": false,
      "passed": false,
      "original_prediction": "twoFactorService.verifyCode(secret, code)) {\n            generateRequests.remove(object);"
    },
    {
      "index": 1967,
      "groundtruth": "token = BackendApplication.generateString(20);",
      "prediction": "token = groupData.generateInviteToken();",
      "es": 0.4347826086956522,
      "em": false,
      "passed": false,
      "original_prediction": "token = groupData.generateInviteToken();"
    },
    {
      "index": 1968,
      "groundtruth": "= twoFactorService.getGoogleAuthenticatorBarCode(secret, username, company);",
      "prediction": "= twoFactorService.getGoogleAuthenticatorBarCode(secret, username, company);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= twoFactorService.getQRBarcode(company, username, secret);"
    },
    {
      "index": 1969,
      "groundtruth": "twoFactorService.createQRCode(barCode, 400, 400);",
      "prediction": "twoFactorService.getGoogleAuthenticatorQRCode(secret, username, company);",
      "es": 0.452054794520548,
      "em": false,
      "passed": false,
      "original_prediction": "twoFactorService.getGoogleAuthenticatorQRCode(secret, username, company);"
    },
    {
      "index": 1970,
      "groundtruth": "ok(service.getUserByUsername(username));",
      "prediction": "ok(service.getUserByUsername(username));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "ok(service.findByUsername(username));"
    },
    {
      "index": 1971,
      "groundtruth": "ok(service.searchByUsername(username));",
      "prediction": "ok(service.searchByUsername(username));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1972,
      "groundtruth": "return ResponseEntity.ok(service.findAll());",
      "prediction": "return ResponseEntity.ok(service.findAll());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "return ResponseEntity.ok(service.getAll());"
    },
    {
      "index": 1973,
      "groundtruth": "min = URL.convertDate(minDate, new Date(0L));",
      "prediction": "min = URL.convertDate(minDate, new Date(0L));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "min = URL.convertDate(minDate, new Date());"
    },
    {
      "index": 1974,
      "groundtruth": "Post> list = postService.fullSearch(text, min ,max);",
      "prediction": "Post> list = postService.fullSearch(text, min ,max);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "Post> list = postService.fullSearch(text, min, max);"
    },
    {
      "index": 1975,
      "groundtruth": "obj.getId()) ;",
      "prediction": "obj.getId()) ;",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "obj.getId());"
    },
    {
      "index": 1976,
      "groundtruth": "text = URL.decodeParam(text);",
      "prediction": "text = URL.decodeParam(text);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1977,
      "groundtruth": "= URL.convertDate(maxDate, new Date());",
      "prediction": "= URL.convertDate(maxDate, new Date());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1978,
      "groundtruth": "post1.getCommentsList().addAll(Arrays.asList(c1,c2));",
      "prediction": "post1.getCommentsList().addAll(Arrays.asList(c1,c2));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1979,
      "groundtruth": "return new User(objDTO.getId(), objDTO.getName(), objDTO.getEmail());",
      "prediction": "return new User(objDTO.getId(), objDTO.getName(), objDTO.getEmail());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "return new User(objDTO.getId(),objDTO.getName(),objDTO.getEmail());"
    },
    {
      "index": 1980,
      "groundtruth": "messageHandler.destroySession(username);",
      "prediction": "messageHandler.destroySession(username);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "messageHandler.deleteSession(username);"
    },
    {
      "index": 1981,
      "groundtruth": "MethodStatistics(row.getCount()));",
      "prediction": "MethodStatistics(row.getCount()));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "MethodStatistics(row.getCount(), row.getModifier()));"
    },
    {
      "index": 1982,
      "groundtruth": "row.getCount(), Modifier.CONSTRUCTOR));",
      "prediction": "row.getConstructor()));",
      "es": 0.3846153846153846,
      "em": false,
      "passed": false,
      "original_prediction": "row.getConstructor()));"
    },
    {
      "index": 1983,
      "groundtruth": "return this.modifiers.isInstanceOverridden();",
      "prediction": "boolean isInstancePublic",
      "es": 0.28888888888888886,
      "em": false,
      "passed": false,
      "original_prediction": "boolean isInstancePublic"
    },
    {
      "index": 1984,
      "groundtruth": "maria.getPosts().addAll(Arrays.asList(post1,post2));",
      "prediction": "maria.getPosts().addAll(Arrays.asList(post1,post2));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1985,
      "groundtruth": "new GitHubMetrics(this.project.githubUrl())\n        ).cells();",
      "prediction": "new StatisticsCaseWithModifiers(title, csv, project, filters)\n        ).cells();",
      "es": 0.475,
      "em": false,
      "passed": false,
      "original_prediction": "new StatisticsCaseWithModifiers(title, csv, project, filters)\n        ).cells();"
    },
    {
      "index": 1986,
      "groundtruth": "method -> !method.isConstructor())\n            .mapToLong(MethodStatistics::total)\n            .sum();",
      "prediction": "method -> !method.isConstructor())\n            .mapToLong(MethodStatistics::total)\n            .sum();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "MethodStatistics::isMethod)\n            .mapToLong(MethodStatistics::total)\n            .sum();"
    },
    {
      "index": 1987,
      "groundtruth": "(this.project.path())) {",
      "prediction": "(this.project.getDirectory())",
      "es": 0.5172413793103448,
      "em": false,
      "passed": false,
      "original_prediction": "(this.project.getDirectory())"
    },
    {
      "index": 1988,
      "groundtruth": ".modifiers.isStaticPackagePrivate();",
      "prediction": ".modifiers.isStaticPackagePrivate();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".modifiers.isStaticPackage();"
    },
    {
      "index": 1989,
      "groundtruth": "modifiers.isInstancePackage();",
      "prediction": "modifiers.isInstancePackage();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "modifiers.isInstancePackagePrivate();"
    },
    {
      "index": 1990,
      "groundtruth": "obj.setId(id);",
      "prediction": "obj.setId(id);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1991,
      "groundtruth": "proxyServer.open();",
      "prediction": "proxyServer.open();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "proxyServer.start();"
    },
    {
      "index": 1992,
      "groundtruth": "proxyClient.authSuccess();",
      "prediction": "Frame frame = new Frame(0x40, serviceKey, null);",
      "es": 0.16666666666666663,
      "em": false,
      "passed": false,
      "original_prediction": "Frame frame = new Frame(0x40, serviceKey, null);"
    },
    {
      "index": 1993,
      "groundtruth": "proxyClient.shutdown();",
      "prediction": "map.clear();",
      "es": 0.21739130434782605,
      "em": false,
      "passed": false,
      "original_prediction": "map.clear();"
    },
    {
      "index": 1994,
      "groundtruth": "proxyClient.updateHeatbeatTime();",
      "prediction": "proxyClient.updateHeatbeatTime();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "proxyClient.updateHeartbeatTime();"
    },
    {
      "index": 1995,
      "groundtruth": "().write(Json.parseToJson(this.body));",
      "prediction": "().write(Json.parseToJson(this.body));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "().write(this.json.toJson(this.body).toString());"
    },
    {
      "index": 1996,
      "groundtruth": "message, status.getValue(), request.getRequestURI(), new Date())).build(response);",
      "prediction": "new Date(), status.value(), message)).contentType(ContentType.TEXT_PLAIN.getValue()).build(response);",
      "es": 0.4554455445544554,
      "em": false,
      "passed": false,
      "original_prediction": "new Date(), status.value(), message)).contentType(ContentType.TEXT_PLAIN.getValue()).build(response);"
    },
    {
      "index": 1997,
      "groundtruth": "ResponseEntity.ok().body(obj.getPosts());",
      "prediction": "ResponseEntity.ok().body(obj.getPosts());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 1998,
      "groundtruth": "= tenantRepository.findByTenantId(tenant).get();",
      "prediction": "= tenantRepository.findByTenantId(tenant).get();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= tenantRepository.findByTenantId(tenant);"
    },
    {
      "index": 1999,
      "groundtruth": "String encryptedPassword = encryptionService.encrypt(password, secret, salt);",
      "prediction": "String encryptedPassword = encryptionService.encrypt(password, secret, salt);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2000,
      "groundtruth": "= masterTenantRepository.findByTenantId(key)\n                                .orElseThrow(() -> new RuntimeException(\"No such tenant: \" + key));",
      "prediction": "= masterTenantRepository.findByTenantId(tenantIdentifier);",
      "es": 0.3472222222222222,
      "em": false,
      "passed": false,
      "original_prediction": "= masterTenantRepository.findByTenantId(tenantIdentifier);"
    },
    {
      "index": 2001,
      "groundtruth": "String tenant = TenantContext.getTenantId();",
      "prediction": "//TODO",
      "es": 0.022727272727272707,
      "em": false,
      "passed": false,
      "original_prediction": "//TODO"
    },
    {
      "index": 2002,
      "groundtruth": "gpuTestCurlAnimView.flipSetToDefault();",
      "prediction": "gpuTestCurlAnimView.flipSetToDefault();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "gpuTestCurlAnimView.flipFinish();"
    },
    {
      "index": 2003,
      "groundtruth": "f.setXY(width, height);",
      "prediction": "f.setXY(width, height);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "f.setXY(0, height);"
    },
    {
      "index": 2004,
      "groundtruth": "animationEffecter.onScroll();",
      "prediction": "animationEffecter.onScroll();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "animationEffecter.computeScroll();"
    },
    {
      "index": 2005,
      "groundtruth": "return animationEffecter.animInEffect();",
      "prediction": "return animationEffecter.animInEffect();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "return animationEffecter.animRunning();"
    },
    {
      "index": 2006,
      "groundtruth": "f.setXY(0, 0);",
      "prediction": "f.setXY(width, height);",
      "es": 0.5217391304347826,
      "em": false,
      "passed": false,
      "original_prediction": "f.setXY(width, height);"
    },
    {
      "index": 2007,
      "groundtruth": "readAnimView.buildBitmap(coverSlideDirection);",
      "prediction": "}",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": "}"
    },
    {
      "index": 2008,
      "groundtruth": "animationEffecter.onViewAttachedToWindow();",
      "prediction": "animationEffecter.onViewAttachedToWindow();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2009,
      "groundtruth": "f.setXY(width, 0);",
      "prediction": "f.setXY(width, 0);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "f.setXY(0, 0);"
    },
    {
      "index": 2010,
      "groundtruth": "a.setXY(-1, -1);",
      "prediction": "pathA = new Path();",
      "es": 0.1578947368421053,
      "em": false,
      "passed": false,
      "original_prediction": "pathA = new Path();"
    },
    {
      "index": 2011,
      "groundtruth": "animationEffecter.onViewSizeChanged(vWidth, vHeight);",
      "prediction": "animationEffecter.onViewSizeChanged(vWidth, vHeight);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "animationEffecter.onViewAttachedToWindow();"
    },
    {
      "index": 2012,
      "groundtruth": "(readAnimView.getPreviousBitmap(), -leftOffset, 0, paint);",
      "prediction": "(readAnimView.getPreviousBitmap(), -leftOffset, 0, paint);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(readAnimView.getPreviousBitmap(), 0, 0, paint);"
    },
    {
      "index": 2013,
      "groundtruth": "int i = mRetrofitUrlManager.getPathSize();",
      "prediction": "int i = 0;",
      "es": 0.2142857142857143,
      "em": false,
      "passed": false,
      "original_prediction": "int i = 0;"
    },
    {
      "index": 2014,
      "groundtruth": "(slideDirection == AnimHelper.SLID_DIRECTION_LEFT && (null != readAnimView.getNextBitmap() && null != readAnimView.getCurrentBitmap())) {",
      "prediction": "(slideDirection == AnimHelper.SLID_DIRECTION_LEFT && (null != readAnimView.getNextBitmap() && null != readAnimView.getCurrentBitmap())) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(slideDirection == AnimHelper.SLID_DIRECTION_LEFT && null != readAnimView.getNextBitmap())"
    },
    {
      "index": 2015,
      "groundtruth": "+ mRetrofitUrlManager.getPathSize();",
      "prediction": "+ domainUrl.encodedPathSegments().size() + url.encodedPathSegments().siz",
      "es": 0.26388888888888884,
      "em": false,
      "passed": false,
      "original_prediction": "+ domainUrl.encodedPathSegments().size() + url.encodedPathSegments().siz"
    },
    {
      "index": 2016,
      "groundtruth": "+ mRetrofitUrlManager.getBaseUrl().host()\n                                + mRetrofitUrlManager.getBaseUrl().encodedPath()));",
      "prediction": "+ mRetrofitUrlManager.getBaseUrl().host()\n                                        + mRetrofitUrlManager.getBaseUrl().encodedPath()));",
      "es": 0.9398496240601504,
      "em": true,
      "passed": true
    },
    {
      "index": 2017,
      "groundtruth": "() > mRetrofitUrlManager.getPathSize()) {",
      "prediction": "() > mRetrofitUrlManag",
      "es": 0.5365853658536586,
      "em": false,
      "passed": false,
      "original_prediction": "() > mRetrofitUrlManag"
    },
    {
      "index": 2018,
      "groundtruth": "drawable = readAnimView.getAnimHelper().getCoverGradientDrawable();",
      "prediction": "drawable = new GradientDrawable();",
      "es": 0.4925373134328358,
      "em": false,
      "passed": false,
      "original_prediction": "drawable = new GradientDrawable();"
    },
    {
      "index": 2019,
      "groundtruth": "DLog.log(\"touchUp coverAnimationRunning=%s\", coverAnimationRunning);",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 2020,
      "groundtruth": "readLayoutManger.getBookFlipMode();",
      "prediction": "readLayoutManger.getBookFlipMode();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2021,
      "groundtruth": "readLayoutManger.setonStopScroller(new ItemOnScrollStop());",
      "prediction": "setLayoutManager(readLayoutManger);",
      "es": 0.3220338983050848,
      "em": false,
      "passed": false,
      "original_prediction": "setLayoutManager(readLayoutManger);"
    },
    {
      "index": 2022,
      "groundtruth": "readLayoutManger.setAutoLeftScroll(finallyMoveX < 10);",
      "prediction": "readLayoutManger.setAutoLeftScroll(finallyMoveX < 10);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "public read readLayoutManger.setAutoLeftScroll(finallyMove < 0);"
    },
    {
      "index": 2023,
      "groundtruth": "readLayoutManger.onRecyclerViewSizeChange();",
      "prediction": "}",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": "}"
    },
    {
      "index": 2024,
      "groundtruth": "readLayoutManger.setAutoLeftScroll(finallyMoveX < 0);",
      "prediction": "readLayoutManger.setAutoLeftScroll(finallyMoveX < 0);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "readLayoutManger.setAutoLeftScroll(false);"
    },
    {
      "index": 2025,
      "groundtruth": "readLayoutManger.setBookFlipMode(flipMode);",
      "prediction": "readLayoutManger.setBookFlipMode(flipMode);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2026,
      "groundtruth": "DLog.log(\"coverAnimationRunning coverAnimationRunning=%s \u7ed3\u675f\uff0c\u5ef6\u65f6\u5f00\u542f \u72b6\u6001\u91cd\u7f6e\", coverAnimationRunning);",
      "prediction": "readAnimView.postInvalidate();",
      "es": 0.1473684210526316,
      "em": false,
      "passed": false,
      "original_prediction": "readAnimView.postInvalidate();"
    },
    {
      "index": 2027,
      "groundtruth": "readLayoutManger.forceScrollToPosition(position);",
      "prediction": "readLayoutManger.forceScrollToPosition(position);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "readLayoutManger.scrollToPosition(position);"
    },
    {
      "index": 2028,
      "groundtruth": "readLayoutManger.setOnForceLayoutCompleted(new ItemOnForceLayoutCompleted());",
      "prediction": "setLayoutManager(readLayoutManger);",
      "es": 0.3246753246753247,
      "em": false,
      "passed": false,
      "original_prediction": "setLayoutManager(readLayoutManger);"
    },
    {
      "index": 2029,
      "groundtruth": "Food americanFoodA = AmericanFoodFactory.produce(\"A\");",
      "prediction": "Food americanFoodA = AmericanFoodFactory.produce(\"A\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2030,
      "groundtruth": ").animRunning();",
      "prediction": ").animRunning();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2031,
      "groundtruth": "animParentView.onClickMenuArea();",
      "prediction": "if (null != eventProxyWeakReference && null != eventProxyWeakRefer)",
      "es": 0.17910447761194026,
      "em": false,
      "passed": false,
      "original_prediction": "if (null != eventProxyWeakReference && null != eventProxyWeakRefer"
    },
    {
      "index": 2032,
      "groundtruth": "= AmericanFoodFactory.produce(\"A\");",
      "prediction": "= AmericanFoodFactory.produce(\"A\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= AmericanFoodFactory.produce(\"B\");"
    },
    {
      "index": 2033,
      "groundtruth": "DLog.log(\"CoverAnimationEffect draw 1\");",
      "prediction": "DLog.log(\"CoverAnimationEffect draw 1\");",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2034,
      "groundtruth": "PlayingSessionInformation.isOnNetwork()) {",
      "prediction": "PlayingSessionInformation.isOnNetwork()) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "PlayingSessionInformation.isOnServer()) return;"
    },
    {
      "index": 2035,
      "groundtruth": "!XenyriaConfigManager.getConfig().improvedShootingDetectionForPaintSquad) {",
      "prediction": "!XenyriaConfigManager.getInstance().isP",
      "es": 0.41333333333333333,
      "em": false,
      "passed": false,
      "original_prediction": "!XenyriaConfigManager.getInstance().isP"
    },
    {
      "index": 2036,
      "groundtruth": "configData = config.toJSON().toString(4);",
      "prediction": "configData = config.toJSON().toString(4);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "configData = config.save().toString();"
    },
    {
      "index": 2037,
      "groundtruth": "discordActivityAccess.start(applicationId);",
      "prediction": "discordActivityAccess.start(applicationId);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "discordActivityAccess.initialize(applicationId);"
    },
    {
      "index": 2038,
      "groundtruth": "!XenyriaConfigManager.getConfig().shareServerActivity) {",
      "prediction": "!XenyriaConfigManager.getInsta",
      "es": 0.5,
      "em": false,
      "passed": false,
      "original_prediction": "!XenyriaConfigManager.getInsta"
    },
    {
      "index": 2039,
      "groundtruth": "PlayingSessionInformation.setOnNetwork(true);",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 2040,
      "groundtruth": "discordActivityAccess.stop();",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 2041,
      "groundtruth": "String instanceId = packet.getData().getString(\"server_id\");",
      "prediction": "String instanceId = packet.getData().getString(\"server_id\");",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "int instanceId = packet.getData().getInt(\"instanceId\");"
    },
    {
      "index": 2042,
      "groundtruth": "EXenyriaServerType.determineServerType(instanceId)\n                        );",
      "prediction": "EXenyriaServerType.valueOf(instanceId));",
      "es": 0.4415584415584416,
      "em": false,
      "passed": false,
      "original_prediction": "EXenyriaServerType.valueOf(instanceId));"
    },
    {
      "index": 2043,
      "groundtruth": "setLastReceivedRichPresence(packet.getData());",
      "prediction": "setLastReceivedRichPresence(packet.getData());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "updateRichPresence(packet.getData());"
    },
    {
      "index": 2044,
      "groundtruth": "\"Current server id: \" + PlayingSessionInformation.getServerInstanceId());",
      "prediction": "\"Current server id: \" + PlayingSessionInformation.getServerInstanceId());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "\"Current server instance ID: \" + PlayingSessionInformation.getServerInstanceId());"
    },
    {
      "index": 2045,
      "groundtruth": "responsePacket.sendToServer();",
      "prediction": "ClientPlayNetworking.send(ID, responsePacket);",
      "es": 0.26086956521739135,
      "em": false,
      "passed": false,
      "original_prediction": "ClientPlayNetworking.send(ID, responsePacket);"
    },
    {
      "index": 2046,
      "groundtruth": "XenyriaServerPacket packet = XenyriaServerPacket.parsePacket(rawJsonText);",
      "prediction": "XenyriaServerPacket packet = XenyriaServerPacket.parsePacket(rawJsonText);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2047,
      "groundtruth": "(\"Current network state: \" + PlayingSessionInformation.isOnNetwork());",
      "prediction": "(\"Received debug packet from Orion.\");",
      "es": 0.22857142857142854,
      "em": false,
      "passed": false,
      "original_prediction": "(\"Received debug packet from Orion.\");"
    },
    {
      "index": 2048,
      "groundtruth": "XenyriaConfigManager.getConfig().enableDiscordRichPresence) {",
      "prediction": "XenyriaConfigManager.getDiscordR",
      "es": 0.5245901639344263,
      "em": false,
      "passed": false,
      "original_prediction": "XenyriaConfigManager.getDiscordR"
    },
    {
      "index": 2049,
      "groundtruth": "PlayingSessionInformation.setServerInstanceId(instanceId);",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 2050,
      "groundtruth": "else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.DEBUG) {",
      "prediction": "else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.DEBUG) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "else if (packet.getPacketType() == XenyriaServerPacket.EPacketType.HANDSHAKE_RESPONSE)"
    },
    {
      "index": 2051,
      "groundtruth": "(packet.getPacketType() == XenyriaServerPacket.EPacketType.RP) {",
      "prediction": "(packet.getPacketType() == XenyriaServerPacket.EPacketType.RP) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(packet.getPacketType() == XenyriaServerPacket.EPacketType.RICH_PRESENCE)"
    },
    {
      "index": 2052,
      "groundtruth": ".lexer.lex(markdown)).visit(compiler);",
      "prediction": ".lexer.lex(markdown)).visit(compiler);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ".lexer.lex(markdown));"
    },
    {
      "index": 2053,
      "groundtruth": "+ feature.name() + \"' is incompatible with compiler '\" + testCompiler.name() + \"'\");",
      "prediction": "+ feature.getClass().getName() + \"' does not support compiler \" + testCompiler.getClass().getName());",
      "es": 0.5148514851485149,
      "em": false,
      "passed": false,
      "original_prediction": "+ feature.getClass().getName() + \"' does not support compiler \" + testCompiler.getClass().getName());"
    },
    {
      "index": 2054,
      "groundtruth": "builder.pushStyle(style -> style.withColor(Formatting.GRAY).withItalic(true));",
      "prediction": "builder.pushStyle(style);",
      "es": 0.3205128205128205,
      "em": false,
      "passed": false,
      "original_prediction": "builder.pushStyle(style);"
    },
    {
      "index": 2055,
      "groundtruth": "this.builder.popStyle();",
      "prediction": "if (this.quoteDepth > 0)",
      "es": 0.20833333333333337,
      "em": false,
      "passed": false,
      "original_prediction": "if (this.quoteDepth > 0)"
    },
    {
      "index": 2056,
      "groundtruth": "return RealCameraCore.isRenderingWorld && config.shouldDisableRender(modelPartName) && RealCameraCore.isActive();",
      "prediction": "return ModConfig.Disable.optionalParts.contains(modelPartName);",
      "es": 0.3008849557522124,
      "em": false,
      "passed": false,
      "original_prediction": "return ModConfig.Disable.optionalParts.contains(modelPartName);"
    },
    {
      "index": 2057,
      "groundtruth": "modConfig.set(new ModConfig());",
      "prediction": "modConfig.set(new ModConfig());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "modConfig = new ModConfig();"
    },
    {
      "index": 2058,
      "groundtruth": "get(config.getModelModID()).test(tickDelta, matrixStack);",
      "prediction": "getOrDefault(getModelPartName(), (tickDelta, matrixStack) -> false)",
      "es": 0.5223880597014925,
      "em": false,
      "passed": false,
      "original_prediction": "getOrDefault(getModelPartName(), (tickDelta, matrixStack) -> false)"
    },
    {
      "index": 2059,
      "groundtruth": "else config.setAdjustOffset(!config.isAdjustingOffset());",
      "prediction": "else config.cycleBindingAdjustMode();",
      "es": 0.4385964912280702,
      "em": false,
      "passed": false,
      "original_prediction": "else config.cycleBindingAdjustMode();"
    },
    {
      "index": 2060,
      "groundtruth": "(config.isClassic()) config.adjustClassicZ(true);",
      "prediction": "(config.isClassic()) config.adjustClassicZ(true);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2061,
      "groundtruth": "(config.isClassic()) config.cycleClassicAdjustMode();",
      "prediction": "config.isAdjustingOffset()",
      "es": 0.30188679245283023,
      "em": false,
      "passed": false,
      "original_prediction": "config.isAdjustingOffset()"
    },
    {
      "index": 2062,
      "groundtruth": "!config.isClassic());",
      "prediction": "!config.isClassic());",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2063,
      "groundtruth": "RealCameraCore.isActive();",
      "prediction": "!ModConfig.Disa",
      "es": 0.15384615384615385,
      "em": false,
      "passed": false,
      "original_prediction": "!ModConfig.Disa"
    },
    {
      "index": 2064,
      "groundtruth": "config.isEnabled();",
      "prediction": "config.isEnabled();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2065,
      "groundtruth": "config.isClassic()) config.cycleClassicAdjustMode();",
      "prediction": "config.isAdjustingOffset()) config.setAdjustOffset(false);",
      "es": 0.4137931034482759,
      "em": false,
      "passed": false,
      "original_prediction": "config.isAdjustingOffset()) config.setAdjustOffset(false);"
    },
    {
      "index": 2066,
      "groundtruth": ")) config.adjustClassicZ(true);",
      "prediction": ")) config.adjustClassicZ(true);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2067,
      "groundtruth": "config.adjustBindingZ(true);",
      "prediction": "config.adjustBindingZ(true);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2068,
      "groundtruth": "return config.getModModelPartName();",
      "prediction": "return config.getModModelPartName();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "return config.getModelModID();"
    },
    {
      "index": 2069,
      "groundtruth": "TableFieldUtil.getFieldMap(r.getClass());",
      "prediction": "TableFieldUtil.getFieldMap(r.getClass());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "TableFieldUtil.getColumnMap(tableClass);"
    },
    {
      "index": 2070,
      "groundtruth": "Object result = StringConvertUtil.convertType(type, value);",
      "prediction": "if (type == String.class) {}",
      "es": 0.22033898305084743,
      "em": false,
      "passed": false,
      "original_prediction": "if (type == String.class) {"
    },
    {
      "index": 2071,
      "groundtruth": ") config.adjustClassicX(false);",
      "prediction": ") config.adjustClassicX(false);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2072,
      "groundtruth": "= canalProperties.getRabbitMq();",
      "prediction": "= canalProperties.getRabbitMq();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2073,
      "groundtruth": "(VirtualRenderer.shouldDisableRender(\"jacket\")) model.jacket.visible = false;",
      "prediction": "(VirtualRenderer.shouldDisableRender(\"jacket\")) model.jacket.visible = false;",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(VirtualRenderer.shouldDisableRender(\"leftSocks\")) model.leftSocks.visible = false;"
    },
    {
      "index": 2074,
      "groundtruth": "() && DoABarrelRollCompat.modEnabled() && RealCameraCore.isActive()) {",
      "prediction": "&& RealCameraCore.isActive() && !Conf",
      "es": 0.3285714285714286,
      "em": false,
      "passed": false,
      "original_prediction": "&& RealCameraCore.isActive() && !Conf"
    },
    {
      "index": 2075,
      "groundtruth": ".modEnabled() && RealCameraCore.isActive()) {",
      "prediction": ".isDoABarrelRollEnabled()",
      "es": 0.1777777777777778,
      "em": false,
      "passed": false,
      "original_prediction": ".isDoABarrelRollEnabled()"
    },
    {
      "index": 2076,
      "groundtruth": "if (VirtualRenderer.shouldDisableRender(\"leftPants\")) model.leftPants.visible = false;",
      "prediction": "if (VirtualRenderer.shouldDisableRender(\"leftPants\")) model.leftPants.visible = false;",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2077,
      "groundtruth": "&& camera.isThirdPerson() && RealCameraCore.isActive() &&\n                !ConfigFile.modConfig.allowRenderingHandWhen(client)) {",
      "prediction": "&& RealCameraCore.isActive()) {}",
      "es": 0.2325581395348837,
      "em": false,
      "passed": false,
      "original_prediction": "&& RealCameraCore.isActive()) {"
    },
    {
      "index": 2078,
      "groundtruth": ").OnMessageReceive(m_baseObject, code, msg);",
      "prediction": ").OnMessageReceive(m_baseObject, code, msg);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": ").OnMessageReceive(null, code, msg);"
    },
    {
      "index": 2079,
      "groundtruth": "m_metaphorManager.showFragment(strTag);",
      "prediction": "m_metaphorManager.showFragment(strTag);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2080,
      "groundtruth": "m_fx1 = FragmentX1.newInstance();",
      "prediction": "m_fx1 = FragmentX1.newInstance();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2081,
      "groundtruth": "settings.setTemperature(getMaxTemperatureValue(form.getTemperature()));",
      "prediction": "settings.setTemperature(getMaxTemperatureValue(form.getTemperature()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2082,
      "groundtruth": "!form.getTemperature().equals(String.valueOf(settings.getTemperature()));",
      "prediction": "!form.getTemperature().equals(String.valueOf(settings.getTemperature()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2083,
      "groundtruth": "return form.getMainPanel();",
      "prediction": "return form.getMainPanel();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "return form.getPanel();"
    },
    {
      "index": 2084,
      "groundtruth": "(testRun.getTestRunOutcome() == null) {",
      "prediction": "(testRun.getTestRunOutcome() == null) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(testRun.getTestRunOutcome() == TestRunOutcome.NOT_EXECUTED)"
    },
    {
      "index": 2085,
      "groundtruth": "form.getTemperature().equals(String.valueOf(settings.getTemperature()));",
      "prediction": "form.getTemperature().equals(String.valueOf(settings.getTemperature()));",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2086,
      "groundtruth": "apiResponse.getMessage(),\n              String.format(\"%d ExceptionAI Error\", apiResponse.getCode()),\n              Messages.getErrorIcon());",
      "prediction": "apiResponse.getMessage(),\n              String.format(\"%d ExceptionAI Error\", apiResponse.getCode()),\n              Messages.getErrorIcon());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "\"\\n\" + apiResponse.getMessage(),\n            \"ExceptionAI Suggestions\",\n            Messages.getErrorIcon());"
    },
    {
      "index": 2087,
      "groundtruth": "\"\\n\" + apiResponse.getMessage(),\n              \"ExceptionAI Suggestions\",\n              Messages.getInformationIcon());",
      "prediction": "\"\\n\" + apiResponse.getMessage(),\n              \"ExceptionAI Suggestions\",\n              Messages.getInformationIcon());",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "apiResponse.getMessage(),\n            \"ExceptionAI Suggestion\",\n            Messages.getInformationIcon()\n          );"
    },
    {
      "index": 2088,
      "groundtruth": "= testRun.getDateTime();",
      "prediction": "= testRun.getDateTime();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= testRun.getDateTime().toString();"
    },
    {
      "index": 2089,
      "groundtruth": "switch (testRun.getTestRunOutcome()) {",
      "prediction": "switch (testRun.getTestRunOutcome()) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "switch (testRun.getPrediction())"
    },
    {
      "index": 2090,
      "groundtruth": "14, testRun.getCommit());",
      "prediction": "10);",
      "es": 0.12,
      "em": false,
      "passed": false,
      "original_prediction": "10);"
    },
    {
      "index": 2091,
      "groundtruth": "= testRun.getPrediction() == Prediction.CORRECT ? AllIcons.RunConfigurations.TestPassed : AllIcons.RunConfigurations.TestFailed;",
      "prediction": "= AllIcons.Actions.Preview;",
      "es": 0.1796875,
      "em": false,
      "passed": false,
      "original_prediction": "= AllIcons.Actions.Preview;"
    },
    {
      "index": 2092,
      "groundtruth": "apiResponse.getCode() == 200) {",
      "prediction": "apiResponse.getCo",
      "es": 0.5483870967741935,
      "em": false,
      "passed": false,
      "original_prediction": "apiResponse.getCo"
    },
    {
      "index": 2093,
      "groundtruth": "<Class<?>, List<ISubscriber>> registeredSubs = SubscriberFinder.find(subscriber);",
      "prediction": "<Class<?>, List<ISubscriber>> registeredSubs = SubscriberFinder.find(subscriber);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "<Class<?>, List<ISubscriber>> registeredSubs = new HashMap<>();"
    },
    {
      "index": 2094,
      "groundtruth": "subscriber.getThreadType() == ThreadType.ASYNC) {",
      "prediction": "subscriber.getThreadType()",
      "es": 0.5306122448979591,
      "em": false,
      "passed": false,
      "original_prediction": "subscriber.getThreadType()"
    },
    {
      "index": 2095,
      "groundtruth": "(sub -> sub.getSubscriber() == subscriber);",
      "prediction": "(subscriber::equals);",
      "es": 0.32558139534883723,
      "em": false,
      "passed": false,
      "original_prediction": "(subscriber::equals);"
    },
    {
      "index": 2096,
      "groundtruth": "DataSourceContext.get();",
      "prediction": "DataSourceContext.get();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2097,
      "groundtruth": "return TransactionContext.get() != null;",
      "prediction": "return TransactionContext.get() != null;",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2098,
      "groundtruth": "= transaction.getNoRollbackFor();",
      "prediction": "= transaction.getNoRollbackFor();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2099,
      "groundtruth": "TransactionContext.remove();",
      "prediction": "if (tid.isSuspended())",
      "es": 0.1785714285714286,
      "em": false,
      "passed": false,
      "original_prediction": "if (tid.isSuspended())"
    },
    {
      "index": 2100,
      "groundtruth": "= transaction.proceed();",
      "prediction": "= transaction.proceed();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2101,
      "groundtruth": "Extractor.warning(\"Warning: Did not match as a member: \" + line);",
      "prediction": "Extractor.warning(\"Warning: Did not match as a member: \" + line);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2102,
      "groundtruth": "Extractor.warning(\"Warning: Did not match as a class/interface: \" + line);",
      "prediction": "Extractor.warning(\"Warning: Did not match as a class/interface: \" + line);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "Extractor.warning(\"Warning: Did not match as a class: \" + line);"
    },
    {
      "index": 2103,
      "groundtruth": "action.deleteCache();",
      "prediction": "action.deleteCache();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "action.clearCache();"
    },
    {
      "index": 2104,
      "groundtruth": "callback.onCompletion(content);",
      "prediction": "BotUtil.updatePrompt(sessionId, content);",
      "es": 0.41463414634146345,
      "em": false,
      "passed": false,
      "original_prediction": "BotUtil.updatePrompt(sessionId, content);"
    },
    {
      "index": 2105,
      "groundtruth": "BotUtil.resetAll();",
      "prediction": "BotUtil.resetAll();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "BotUtil.res"
    },
    {
      "index": 2106,
      "groundtruth": "rateLimiter.setPrompt(sessionId, prompt);",
      "prediction": "rateLimiter.setPrompt(sessionId, prompt);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2107,
      "groundtruth": "FixProtocolVersion.fix();",
      "prediction": "}",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": "}"
    },
    {
      "index": 2108,
      "groundtruth": "this.code = code.getValue();",
      "prediction": "this.code = code.getValue();",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2109,
      "groundtruth": "HttpContextUtil.setAttributeToSession(\"verifyCode\", code);",
      "prediction": "HttpContextUtil.setAttributeToSession(\"verifyCode\", code);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "HttpContextUtil.setAttributeToInSession(\"verifyCode\", code);"
    },
    {
      "index": 2110,
      "groundtruth": "request.getName())\n                .createdBy(userId)\n                .build();",
      "prediction": "request.getName())\n                .createdBy(userId)\n                .build();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "request.getName())\n        .status(OrgStatus.NORMAL)\n        .build();"
    },
    {
      "index": 2111,
      "groundtruth": "(request.getTenantId(), id)\n                .orElseThrow(() -> {",
      "prediction": "(id)\n        .orElseThrow(() -> {)})",
      "es": 0.46875,
      "em": false,
      "passed": false,
      "original_prediction": "(id)\n        .orElseThrow(() -> {"
    },
    {
      "index": 2112,
      "groundtruth": "= status.code();",
      "prediction": "= status.code();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= status.getCode();"
    },
    {
      "index": 2113,
      "groundtruth": "assertOrgName.shouldNotEmpty(newName);",
      "prediction": "if (newName != null && !newName.equals(org.getName()))",
      "es": 0.2222222222222222,
      "em": false,
      "passed": false,
      "original_prediction": "if (newName != null && !newName.equals(org.getName()))"
    },
    {
      "index": 2114,
      "groundtruth": "(request.getSuperiorId())\n                .name(request.getName())\n                .createdBy(userId)\n                .build();",
      "prediction": "(request.getSuperiorId())\n                .name(request.getName())\n                .createdBy(userId)\n                .build();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "(request.getSuperiorId())\n        .name(request.getName())\n        .status(OrgStatusEnum.NORMAL)\n        .createdBy(userId)\n        .createdAt(System.currentTimeMillis())\n        .build();"
    },
    {
      "index": 2115,
      "groundtruth": "org, request.getName() , request.getLeaderId(), userId);",
      "prediction": "org, request, userId);",
      "es": 0.3928571428571429,
      "em": false,
      "passed": false,
      "original_prediction": "org, request, userId);"
    },
    {
      "index": 2116,
      "groundtruth": "return orgService.cancelOrg(tenant, id, userId);",
      "prediction": "return orgService.cancelOrg(tenant, id, userId);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "return orgService.cancelOrg(id, userId, tenant);"
    },
    {
      "index": 2117,
      "groundtruth": "orgHandler.updateBasic(org, request.getName() , request.getLeaderId(), userId);",
      "prediction": "orgHandler.updateBasic(org, request.getName() , request.getLeaderId(), userId);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "orgHandler.updateBasic(org, request, userId);"
    },
    {
      "index": 2118,
      "groundtruth": "if (newLeader != null && !newLeader.equals(org.getLeaderId())) {",
      "prediction": "if (newLeader != null && !newLeader.equals(org.getLeaderId())) {",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "if (newLeader != null && !newLeader.equals(org.getLeaderId()))"
    },
    {
      "index": 2119,
      "groundtruth": "org.cancel();",
      "prediction": "",
      "es": 0.0,
      "em": false,
      "passed": false,
      "original_prediction": ""
    },
    {
      "index": 2120,
      "groundtruth": "OrgStatus.ofCode(statusCode));",
      "prediction": "statusCode);",
      "es": 0.4,
      "em": false,
      "passed": false,
      "original_prediction": "statusCode);"
    },
    {
      "index": 2121,
      "groundtruth": "assertOrgType.shouldEffective(tenantId, orgTypeCode);",
      "prediction": "assertOrgType.shouldEffective(tenantId, orgTypeCode);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2122,
      "groundtruth": "= assertSuperior.shouldEffective(tenantId, superiorId);",
      "prediction": "= assertSuperior.shouldEffective(tenantId, superiorId);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2123,
      "groundtruth": "assertOrgLeader.shouldEffective(org.getTenantId(), newLeader);",
      "prediction": "assertOrgLeader.shouldEffective(org.getTenantId(), newLeader);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "assertOrgLeader.shouldNotEmpty(newLeader);"
    },
    {
      "index": 2124,
      "groundtruth": "assertOrgName.shouldNotEmpty(name);",
      "prediction": "assertOrgName.shouldNotEmpty(name);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2125,
      "groundtruth": "), org.getSuperiorId(), newName);",
      "prediction": "), newName);",
      "es": 0.36363636363636365,
      "em": false,
      "passed": false,
      "original_prediction": "), newName);"
    },
    {
      "index": 2126,
      "groundtruth": "shouldNotDuplicatedInSameSuperior(org.getTenantId(), org.getSuperiorId(), newName);",
      "prediction": "shouldNotExceed(org.getTenantId(), newName);",
      "es": 0.49397590361445787,
      "em": false,
      "passed": false,
      "original_prediction": "shouldNotExceed(org.getTenantId(), newName);"
    },
    {
      "index": 2127,
      "groundtruth": "assertOrgLeader.shouldEffective(tenantId, leaderId);",
      "prediction": "assertOrgLeader.shouldEffective(tenantId, leaderId);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "assertOrgLeader.shouldNotEmpty(leaderId);"
    },
    {
      "index": 2128,
      "groundtruth": "assertOrgName.shouldNotDuplicatedInSameSuperior(tenantId, superiorId, name);",
      "prediction": "assertOrgName.shouldNotContainChinese(name);",
      "es": 0.4605263157894737,
      "em": false,
      "passed": false,
      "original_prediction": "assertOrgName.shouldNotContainChinese(name);"
    },
    {
      "index": 2129,
      "groundtruth": "assertOrgType.shouldNotEntp(orgTypeCode);",
      "prediction": "assertOrgType.shouldNotDuplicatedInSameSuperior(tenantId, superiorId, orgTypeCode)",
      "es": 0.4512195121951219,
      "em": false,
      "passed": false,
      "original_prediction": "assertOrgType.shouldNotDuplicatedInSameSuperior(tenantId, superiorId, orgTypeCode)"
    },
    {
      "index": 2130,
      "groundtruth": "+ \"' \u7684\u7ec4\u7ec7\u7684\u7ec4\u7ec7\u7c7b\u578b\u4ee3\u7801 '\" + superiorOrg.getOrgTypeCode() + \"' \u65e0\u6548!\"));",
      "prediction": "+ \"' \u7684\u7ec4\u7ec7\u7684\u7ec4\u7ec7\u7c7b\u578b\u4ee3\u7801 '\" + superiorOrg.getOrgTypeCode() + \"' \u65e0\u6548!\"));",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "+ \"' \u7684\u7ec4\u7ec7\u7c7b\u578b\u4ee3\u7801 '\" + superiorOrg.getOrgTypeCode()"
    },
    {
      "index": 2131,
      "groundtruth": "assertOrgType.shouldNotEmpty(orgTypeCode);",
      "prediction": "assertOrgType.shouldNotEmpty(orgTypeCode);",
      "es": 1.0,
      "em": true,
      "passed": true
    },
    {
      "index": 2132,
      "groundtruth": "waitPoint.reset();",
      "prediction": "if (interval <= 0)",
      "es": 0.16666666666666663,
      "em": false,
      "passed": false,
      "original_prediction": "if (interval <= 0)"
    },
    {
      "index": 2133,
      "groundtruth": "metrics.start();",
      "prediction": "metrics.start();",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "metric.start();"
    },
    {
      "index": 2134,
      "groundtruth": "null, flow.getServiceContext());",
      "prediction": "flow, service.getMessage(), service.getContext());",
      "es": 0.45999999999999996,
      "em": false,
      "passed": false,
      "original_prediction": "flow, service.getMessage(), service.getContext());"
    },
    {
      "index": 2135,
      "groundtruth": "process(input, getFlow().getServiceContext());",
      "prediction": "process(input);",
      "es": 0.32608695652173914,
      "em": false,
      "passed": false,
      "original_prediction": "process(input);"
    },
    {
      "index": 2136,
      "groundtruth": "if (StringUtils.hasText(groovyCode) && HadesCache.diff(instanceName, groovyCode)) {",
      "prediction": "if (!StringUtils.hasText(groovyCode)) || !H",
      "es": 0.4337349397590361,
      "em": false,
      "passed": false,
      "original_prediction": "if (!StringUtils.hasText(groovyCode)) || !H"
    },
    {
      "index": 2137,
      "groundtruth": "= GroovyUtils.parseClass(instanceName, groovyCode);",
      "prediction": "= GroovyUtils.parseClass(instanceName, groovyCode);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "= GroovyUtils.loadGroovyClass(groovyCode);"
    },
    {
      "index": 2138,
      "groundtruth": "Object bean = registerBeanService.registerBean(instanceName, clazz);",
      "prediction": "Object bean = registerBeanService.registerBean(instanceName, clazz);",
      "es": 1.0,
      "em": true,
      "passed": true,
      "original_prediction": "registerBeanService.registerBean(clazz);"
    }
  ]
}